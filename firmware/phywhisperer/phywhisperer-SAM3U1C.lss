
phywhisperer-SAM3U1C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000d8ec  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008d8ec  0008d8ec  0001d8ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000e20  20000000  0008d8f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00000680  20000e20  0008e714  00020e20  2**2
                  ALLOC
  4 .stack        00004000  20080000  20080000  00030000  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  00020e20  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00020e49  2**0
                  CONTENTS, READONLY
  7 .debug_info   00012af8  00000000  00000000  00020e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00003584  00000000  00000000  0003398a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    000096de  00000000  00000000  00036f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001230  00000000  00000000  000405ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00001020  00000000  00000000  0004181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  0001baea  00000000  00000000  0004283c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   00019ec4  00000000  00000000  0005e326  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0005c248  00000000  00000000  000781ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00005d6c  00000000  00000000  000d4434  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	00 40 08 20 ed 4d 08 00 d9 5d 08 00 d9 5d 08 00     .@. .M...]...]..
   80010:	d9 5d 08 00 d9 5d 08 00 d9 5d 08 00 00 00 00 00     .]...]...]......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 d9 5d 08 00     .............]..
   80030:	d9 5d 08 00 00 00 00 00 d9 5d 08 00 d9 5d 08 00     .].......]...]..
   80040:	d9 5d 08 00 d9 5d 08 00 d9 5d 08 00 d9 5d 08 00     .]...]...]...]..
   80050:	d9 5d 08 00 d9 5d 08 00 d9 5d 08 00 d9 5d 08 00     .]...]...]...]..
   80060:	d9 5d 08 00 d9 5d 08 00 fd 2f 08 00 15 30 08 00     .]...].../...0..
   80070:	d9 5d 08 00 d9 5d 08 00 d9 5d 08 00 d9 5d 08 00     .]...]...]...]..
   80080:	d9 5d 08 00 d9 5d 08 00 d9 5d 08 00 d9 5d 08 00     .]...]...]...]..
   80090:	d9 5d 08 00 d9 5d 08 00 d9 5d 08 00 d9 5d 08 00     .]...]...]...]..
   800a0:	d9 5d 08 00 d9 5d 08 00 d9 5d 08 00 d9 5d 08 00     .]...]...]...]..
   800b0:	d9 5d 08 00 09 32 08 00 d9 5d 08 00                 .]...2...]..

000800bc <__do_global_dtors_aux>:
   800bc:	b510      	push	{r4, lr}
   800be:	4c05      	ldr	r4, [pc, #20]	; (800d4 <__do_global_dtors_aux+0x18>)
   800c0:	7823      	ldrb	r3, [r4, #0]
   800c2:	b933      	cbnz	r3, 800d2 <__do_global_dtors_aux+0x16>
   800c4:	4b04      	ldr	r3, [pc, #16]	; (800d8 <__do_global_dtors_aux+0x1c>)
   800c6:	b113      	cbz	r3, 800ce <__do_global_dtors_aux+0x12>
   800c8:	4804      	ldr	r0, [pc, #16]	; (800dc <__do_global_dtors_aux+0x20>)
   800ca:	f3af 8000 	nop.w
   800ce:	2301      	movs	r3, #1
   800d0:	7023      	strb	r3, [r4, #0]
   800d2:	bd10      	pop	{r4, pc}
   800d4:	20000e20 	.word	0x20000e20
   800d8:	00000000 	.word	0x00000000
   800dc:	0008d8f4 	.word	0x0008d8f4

000800e0 <frame_dummy>:
   800e0:	b508      	push	{r3, lr}
   800e2:	4b03      	ldr	r3, [pc, #12]	; (800f0 <frame_dummy+0x10>)
   800e4:	b11b      	cbz	r3, 800ee <frame_dummy+0xe>
   800e6:	4903      	ldr	r1, [pc, #12]	; (800f4 <frame_dummy+0x14>)
   800e8:	4803      	ldr	r0, [pc, #12]	; (800f8 <frame_dummy+0x18>)
   800ea:	f3af 8000 	nop.w
   800ee:	bd08      	pop	{r3, pc}
   800f0:	00000000 	.word	0x00000000
   800f4:	20000e24 	.word	0x20000e24
   800f8:	0008d8f4 	.word	0x0008d8f4

000800fc <osc_enable>:
#define OSC_MAINCK_XTAL_HZ          BOARD_FREQ_MAINCK_XTAL          //!< External crystal oscillator.
#define OSC_MAINCK_BYPASS_HZ        BOARD_FREQ_MAINCK_BYPASS        //!< External bypass oscillator.
//@}

static inline void osc_enable(uint32_t ul_id)
{
   800fc:	b580      	push	{r7, lr}
   800fe:	b082      	sub	sp, #8
   80100:	af00      	add	r7, sp, #0
   80102:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80104:	687b      	ldr	r3, [r7, #4]
   80106:	2b07      	cmp	r3, #7
   80108:	d82e      	bhi.n	80168 <osc_enable+0x6c>
   8010a:	a201      	add	r2, pc, #4	; (adr r2, 80110 <osc_enable+0x14>)
   8010c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80110:	00080167 	.word	0x00080167
   80114:	00080131 	.word	0x00080131
   80118:	00080139 	.word	0x00080139
   8011c:	00080141 	.word	0x00080141
   80120:	00080149 	.word	0x00080149
   80124:	00080151 	.word	0x00080151
   80128:	00080159 	.word	0x00080159
   8012c:	00080161 	.word	0x00080161
	case OSC_SLCK_32K_RC:
		break;

	case OSC_SLCK_32K_XTAL:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   80130:	2000      	movs	r0, #0
   80132:	4b0f      	ldr	r3, [pc, #60]	; (80170 <osc_enable+0x74>)
   80134:	4798      	blx	r3
		break;
   80136:	e017      	b.n	80168 <osc_enable+0x6c>

	case OSC_SLCK_32K_BYPASS:
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   80138:	2001      	movs	r0, #1
   8013a:	4b0d      	ldr	r3, [pc, #52]	; (80170 <osc_enable+0x74>)
   8013c:	4798      	blx	r3
		break;
   8013e:	e013      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_4M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   80140:	2000      	movs	r0, #0
   80142:	4b0c      	ldr	r3, [pc, #48]	; (80174 <osc_enable+0x78>)
   80144:	4798      	blx	r3
		break;
   80146:	e00f      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_8M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   80148:	2010      	movs	r0, #16
   8014a:	4b0a      	ldr	r3, [pc, #40]	; (80174 <osc_enable+0x78>)
   8014c:	4798      	blx	r3
		break;
   8014e:	e00b      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_12M_RC:
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   80150:	2020      	movs	r0, #32
   80152:	4b08      	ldr	r3, [pc, #32]	; (80174 <osc_enable+0x78>)
   80154:	4798      	blx	r3
		break;
   80156:	e007      	b.n	80168 <osc_enable+0x6c>


	case OSC_MAINCK_XTAL:
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   80158:	203e      	movs	r0, #62	; 0x3e
   8015a:	4b07      	ldr	r3, [pc, #28]	; (80178 <osc_enable+0x7c>)
   8015c:	4798      	blx	r3
				BOARD_OSC_STARTUP_US, OSC_SLCK_32K_RC_HZ));
		break;
   8015e:	e003      	b.n	80168 <osc_enable+0x6c>

	case OSC_MAINCK_BYPASS:
		pmc_osc_bypass_main_xtal();
   80160:	4b06      	ldr	r3, [pc, #24]	; (8017c <osc_enable+0x80>)
   80162:	4798      	blx	r3
		break;
   80164:	e000      	b.n	80168 <osc_enable+0x6c>
		break;
   80166:	bf00      	nop
	}
}
   80168:	bf00      	nop
   8016a:	3708      	adds	r7, #8
   8016c:	46bd      	mov	sp, r7
   8016e:	bd80      	pop	{r7, pc}
   80170:	00085369 	.word	0x00085369
   80174:	000853d5 	.word	0x000853d5
   80178:	00085449 	.word	0x00085449
   8017c:	00085499 	.word	0x00085499

00080180 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint32_t ul_id)
{
   80180:	b580      	push	{r7, lr}
   80182:	b082      	sub	sp, #8
   80184:	af00      	add	r7, sp, #0
   80186:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80188:	687b      	ldr	r3, [r7, #4]
   8018a:	2b07      	cmp	r3, #7
   8018c:	d82f      	bhi.n	801ee <osc_is_ready+0x6e>
   8018e:	a201      	add	r2, pc, #4	; (adr r2, 80194 <osc_is_ready+0x14>)
   80190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80194:	000801b5 	.word	0x000801b5
   80198:	000801b9 	.word	0x000801b9
   8019c:	000801b9 	.word	0x000801b9
   801a0:	000801cb 	.word	0x000801cb
   801a4:	000801cb 	.word	0x000801cb
   801a8:	000801cb 	.word	0x000801cb
   801ac:	000801dd 	.word	0x000801dd
   801b0:	000801dd 	.word	0x000801dd
	case OSC_SLCK_32K_RC:
		return 1;
   801b4:	2301      	movs	r3, #1
   801b6:	e01b      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_SLCK_32K_XTAL:
	case OSC_SLCK_32K_BYPASS:
		return pmc_osc_is_ready_32kxtal();
   801b8:	4b0f      	ldr	r3, [pc, #60]	; (801f8 <osc_is_ready+0x78>)
   801ba:	4798      	blx	r3
   801bc:	4603      	mov	r3, r0
   801be:	2b00      	cmp	r3, #0
   801c0:	bf14      	ite	ne
   801c2:	2301      	movne	r3, #1
   801c4:	2300      	moveq	r3, #0
   801c6:	b2db      	uxtb	r3, r3
   801c8:	e012      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
		return pmc_osc_is_ready_fastrc();
   801ca:	4b0c      	ldr	r3, [pc, #48]	; (801fc <osc_is_ready+0x7c>)
   801cc:	4798      	blx	r3
   801ce:	4603      	mov	r3, r0
   801d0:	2b00      	cmp	r3, #0
   801d2:	bf14      	ite	ne
   801d4:	2301      	movne	r3, #1
   801d6:	2300      	moveq	r3, #0
   801d8:	b2db      	uxtb	r3, r3
   801da:	e009      	b.n	801f0 <osc_is_ready+0x70>

	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_main_xtal();
   801dc:	4b08      	ldr	r3, [pc, #32]	; (80200 <osc_is_ready+0x80>)
   801de:	4798      	blx	r3
   801e0:	4603      	mov	r3, r0
   801e2:	2b00      	cmp	r3, #0
   801e4:	bf14      	ite	ne
   801e6:	2301      	movne	r3, #1
   801e8:	2300      	moveq	r3, #0
   801ea:	b2db      	uxtb	r3, r3
   801ec:	e000      	b.n	801f0 <osc_is_ready+0x70>
	}

	return 0;
   801ee:	2300      	movs	r3, #0
}
   801f0:	4618      	mov	r0, r3
   801f2:	3708      	adds	r7, #8
   801f4:	46bd      	mov	sp, r7
   801f6:	bd80      	pop	{r7, pc}
   801f8:	000853a1 	.word	0x000853a1
   801fc:	00085431 	.word	0x00085431
   80200:	000854e5 	.word	0x000854e5

00080204 <osc_get_rate>:

static inline uint32_t osc_get_rate(uint32_t ul_id)
{
   80204:	b480      	push	{r7}
   80206:	b083      	sub	sp, #12
   80208:	af00      	add	r7, sp, #0
   8020a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   8020c:	687b      	ldr	r3, [r7, #4]
   8020e:	2b07      	cmp	r3, #7
   80210:	d823      	bhi.n	8025a <osc_get_rate+0x56>
   80212:	a201      	add	r2, pc, #4	; (adr r2, 80218 <osc_get_rate+0x14>)
   80214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80218:	00080239 	.word	0x00080239
   8021c:	0008023f 	.word	0x0008023f
   80220:	00080243 	.word	0x00080243
   80224:	00080247 	.word	0x00080247
   80228:	0008024b 	.word	0x0008024b
   8022c:	0008024f 	.word	0x0008024f
   80230:	00080253 	.word	0x00080253
   80234:	00080257 	.word	0x00080257
	case OSC_SLCK_32K_RC:
		return OSC_SLCK_32K_RC_HZ;
   80238:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   8023c:	e00e      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_XTAL:
		return BOARD_FREQ_SLCK_XTAL;
   8023e:	2300      	movs	r3, #0
   80240:	e00c      	b.n	8025c <osc_get_rate+0x58>

	case OSC_SLCK_32K_BYPASS:
		return BOARD_FREQ_SLCK_BYPASS;
   80242:	2300      	movs	r3, #0
   80244:	e00a      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_4M_RC:
		return OSC_MAINCK_4M_RC_HZ;
   80246:	4b08      	ldr	r3, [pc, #32]	; (80268 <osc_get_rate+0x64>)
   80248:	e008      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_8M_RC:
		return OSC_MAINCK_8M_RC_HZ;
   8024a:	4b08      	ldr	r3, [pc, #32]	; (8026c <osc_get_rate+0x68>)
   8024c:	e006      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_12M_RC:
		return OSC_MAINCK_12M_RC_HZ;
   8024e:	4b08      	ldr	r3, [pc, #32]	; (80270 <osc_get_rate+0x6c>)
   80250:	e004      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_XTAL:
		return BOARD_FREQ_MAINCK_XTAL;
   80252:	4b07      	ldr	r3, [pc, #28]	; (80270 <osc_get_rate+0x6c>)
   80254:	e002      	b.n	8025c <osc_get_rate+0x58>

	case OSC_MAINCK_BYPASS:
		return BOARD_FREQ_MAINCK_BYPASS;
   80256:	4b06      	ldr	r3, [pc, #24]	; (80270 <osc_get_rate+0x6c>)
   80258:	e000      	b.n	8025c <osc_get_rate+0x58>
	}

	return 0;
   8025a:	2300      	movs	r3, #0
}
   8025c:	4618      	mov	r0, r3
   8025e:	370c      	adds	r7, #12
   80260:	46bd      	mov	sp, r7
   80262:	bc80      	pop	{r7}
   80264:	4770      	bx	lr
   80266:	bf00      	nop
   80268:	003d0900 	.word	0x003d0900
   8026c:	007a1200 	.word	0x007a1200
   80270:	00b71b00 	.word	0x00b71b00

00080274 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
   80274:	b580      	push	{r7, lr}
   80276:	b082      	sub	sp, #8
   80278:	af00      	add	r7, sp, #0
   8027a:	4603      	mov	r3, r0
   8027c:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   8027e:	bf00      	nop
   80280:	79fb      	ldrb	r3, [r7, #7]
   80282:	4618      	mov	r0, r3
   80284:	4b06      	ldr	r3, [pc, #24]	; (802a0 <osc_wait_ready+0x2c>)
   80286:	4798      	blx	r3
   80288:	4603      	mov	r3, r0
   8028a:	f083 0301 	eor.w	r3, r3, #1
   8028e:	b2db      	uxtb	r3, r3
   80290:	2b00      	cmp	r3, #0
   80292:	d1f5      	bne.n	80280 <osc_wait_ready+0xc>
		/* Do nothing */
	}
}
   80294:	bf00      	nop
   80296:	bf00      	nop
   80298:	3708      	adds	r7, #8
   8029a:	46bd      	mov	sp, r7
   8029c:	bd80      	pop	{r7, pc}
   8029e:	bf00      	nop
   802a0:	00080181 	.word	0x00080181

000802a4 <pll_config_init>:
 *       hardware mul+1 is hidden in this implementation. Use mul as mul
 *       effective value.
 */
static inline void pll_config_init(struct pll_config *p_cfg,
		enum pll_source e_src, uint32_t ul_div, uint32_t ul_mul)
{
   802a4:	b580      	push	{r7, lr}
   802a6:	b086      	sub	sp, #24
   802a8:	af00      	add	r7, sp, #0
   802aa:	60f8      	str	r0, [r7, #12]
   802ac:	607a      	str	r2, [r7, #4]
   802ae:	603b      	str	r3, [r7, #0]
   802b0:	460b      	mov	r3, r1
   802b2:	72fb      	strb	r3, [r7, #11]
	uint32_t vco_hz;

	Assert(e_src < PLL_NR_SOURCES);

	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   802b4:	687b      	ldr	r3, [r7, #4]
   802b6:	2b00      	cmp	r3, #0
   802b8:	d107      	bne.n	802ca <pll_config_init+0x26>
   802ba:	683b      	ldr	r3, [r7, #0]
   802bc:	2b00      	cmp	r3, #0
   802be:	d104      	bne.n	802ca <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   802c0:	68fb      	ldr	r3, [r7, #12]
   802c2:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   802c6:	601a      	str	r2, [r3, #0]
   802c8:	e01a      	b.n	80300 <pll_config_init+0x5c>
	} else { /* PLLA */
		/* Calculate internal VCO frequency */
		vco_hz = osc_get_rate(e_src) / ul_div;
   802ca:	7afb      	ldrb	r3, [r7, #11]
   802cc:	4618      	mov	r0, r3
   802ce:	4b0e      	ldr	r3, [pc, #56]	; (80308 <pll_config_init+0x64>)
   802d0:	4798      	blx	r3
   802d2:	4602      	mov	r2, r0
   802d4:	687b      	ldr	r3, [r7, #4]
   802d6:	fbb2 f3f3 	udiv	r3, r2, r3
   802da:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_INPUT_MIN_HZ);
		Assert(vco_hz <= PLL_INPUT_MAX_HZ);

		vco_hz *= ul_mul;
   802dc:	697b      	ldr	r3, [r7, #20]
   802de:	683a      	ldr	r2, [r7, #0]
   802e0:	fb02 f303 	mul.w	r3, r2, r3
   802e4:	617b      	str	r3, [r7, #20]
		Assert(vco_hz >= PLL_OUTPUT_MIN_HZ);
		Assert(vco_hz <= PLL_OUTPUT_MAX_HZ);

		/* PMC hardware will automatically make it mul+1 */
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802e6:	683b      	ldr	r3, [r7, #0]
   802e8:	3b01      	subs	r3, #1
   802ea:	041a      	lsls	r2, r3, #16
   802ec:	4b07      	ldr	r3, [pc, #28]	; (8030c <pll_config_init+0x68>)
   802ee:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f0:	687a      	ldr	r2, [r7, #4]
   802f2:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802f4:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   802f6:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   802fa:	68fb      	ldr	r3, [r7, #12]
   802fc:	601a      	str	r2, [r3, #0]
			CKGR_PLLAR_PLLACOUNT(PLL_COUNT);
	}
}
   802fe:	bf00      	nop
   80300:	bf00      	nop
   80302:	3718      	adds	r7, #24
   80304:	46bd      	mov	sp, r7
   80306:	bd80      	pop	{r7, pc}
   80308:	00080205 	.word	0x00080205
   8030c:	07ff0000 	.word	0x07ff0000

00080310 <pll_enable>:
	}
}

static inline void pll_enable(const struct pll_config *p_cfg,
		uint32_t ul_pll_id)
{
   80310:	b580      	push	{r7, lr}
   80312:	b082      	sub	sp, #8
   80314:	af00      	add	r7, sp, #0
   80316:	6078      	str	r0, [r7, #4]
   80318:	6039      	str	r1, [r7, #0]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   8031a:	683b      	ldr	r3, [r7, #0]
   8031c:	2b00      	cmp	r3, #0
   8031e:	d108      	bne.n	80332 <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   80320:	4b09      	ldr	r3, [pc, #36]	; (80348 <pll_enable+0x38>)
   80322:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80324:	687b      	ldr	r3, [r7, #4]
   80326:	681b      	ldr	r3, [r3, #0]
   80328:	4a08      	ldr	r2, [pc, #32]	; (8034c <pll_enable+0x3c>)
   8032a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   8032e:	6293      	str	r3, [r2, #40]	; 0x28
	} else {
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
	}
}
   80330:	e005      	b.n	8033e <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   80332:	687b      	ldr	r3, [r7, #4]
   80334:	681b      	ldr	r3, [r3, #0]
   80336:	4a05      	ldr	r2, [pc, #20]	; (8034c <pll_enable+0x3c>)
   80338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8033c:	61d3      	str	r3, [r2, #28]
}
   8033e:	bf00      	nop
   80340:	3708      	adds	r7, #8
   80342:	46bd      	mov	sp, r7
   80344:	bd80      	pop	{r7, pc}
   80346:	bf00      	nop
   80348:	00085555 	.word	0x00085555
   8034c:	400e0400 	.word	0x400e0400

00080350 <pll_is_locked>:
		PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
	}
}

static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
   80350:	b580      	push	{r7, lr}
   80352:	b082      	sub	sp, #8
   80354:	af00      	add	r7, sp, #0
   80356:	6078      	str	r0, [r7, #4]
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
   80358:	687b      	ldr	r3, [r7, #4]
   8035a:	2b00      	cmp	r3, #0
   8035c:	d103      	bne.n	80366 <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   8035e:	4b05      	ldr	r3, [pc, #20]	; (80374 <pll_is_locked+0x24>)
   80360:	4798      	blx	r3
   80362:	4603      	mov	r3, r0
   80364:	e002      	b.n	8036c <pll_is_locked+0x1c>
	} else {
		return pmc_is_locked_upll();
   80366:	4b04      	ldr	r3, [pc, #16]	; (80378 <pll_is_locked+0x28>)
   80368:	4798      	blx	r3
   8036a:	4603      	mov	r3, r0
	}
}
   8036c:	4618      	mov	r0, r3
   8036e:	3708      	adds	r7, #8
   80370:	46bd      	mov	sp, r7
   80372:	bd80      	pop	{r7, pc}
   80374:	0008556d 	.word	0x0008556d
   80378:	000855a1 	.word	0x000855a1

0008037c <pll_enable_source>:

static inline void pll_enable_source(enum pll_source e_src)
{
   8037c:	b580      	push	{r7, lr}
   8037e:	b082      	sub	sp, #8
   80380:	af00      	add	r7, sp, #0
   80382:	4603      	mov	r3, r0
   80384:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80386:	79fb      	ldrb	r3, [r7, #7]
   80388:	3b03      	subs	r3, #3
   8038a:	2b04      	cmp	r3, #4
   8038c:	d808      	bhi.n	803a0 <pll_enable_source+0x24>
	case PLL_SRC_MAINCK_4M_RC:
	case PLL_SRC_MAINCK_8M_RC:
	case PLL_SRC_MAINCK_12M_RC:
	case PLL_SRC_MAINCK_XTAL:
	case PLL_SRC_MAINCK_BYPASS:
		osc_enable(e_src);
   8038e:	79fb      	ldrb	r3, [r7, #7]
   80390:	4618      	mov	r0, r3
   80392:	4b06      	ldr	r3, [pc, #24]	; (803ac <pll_enable_source+0x30>)
   80394:	4798      	blx	r3
		osc_wait_ready(e_src);
   80396:	79fb      	ldrb	r3, [r7, #7]
   80398:	4618      	mov	r0, r3
   8039a:	4b05      	ldr	r3, [pc, #20]	; (803b0 <pll_enable_source+0x34>)
   8039c:	4798      	blx	r3
		break;
   8039e:	e000      	b.n	803a2 <pll_enable_source+0x26>

	default:
		Assert(false);
		break;
   803a0:	bf00      	nop
	}
}
   803a2:	bf00      	nop
   803a4:	3708      	adds	r7, #8
   803a6:	46bd      	mov	sp, r7
   803a8:	bd80      	pop	{r7, pc}
   803aa:	bf00      	nop
   803ac:	000800fd 	.word	0x000800fd
   803b0:	00080275 	.word	0x00080275

000803b4 <pll_enable_config_defaults>:

static inline void pll_enable_config_defaults(unsigned int ul_pll_id)
{
   803b4:	b590      	push	{r4, r7, lr}
   803b6:	b085      	sub	sp, #20
   803b8:	af00      	add	r7, sp, #0
   803ba:	6078      	str	r0, [r7, #4]
	struct pll_config pllcfg;

	if (pll_is_locked(ul_pll_id)) {
   803bc:	6878      	ldr	r0, [r7, #4]
   803be:	4b21      	ldr	r3, [pc, #132]	; (80444 <pll_enable_config_defaults+0x90>)
   803c0:	4798      	blx	r3
   803c2:	4603      	mov	r3, r0
   803c4:	2b00      	cmp	r3, #0
   803c6:	d139      	bne.n	8043c <pll_enable_config_defaults+0x88>
		return; // Pll already running
	}
	switch (ul_pll_id) {
   803c8:	687b      	ldr	r3, [r7, #4]
   803ca:	2b00      	cmp	r3, #0
   803cc:	d003      	beq.n	803d6 <pll_enable_config_defaults+0x22>
   803ce:	687b      	ldr	r3, [r7, #4]
   803d0:	2b01      	cmp	r3, #1
   803d2:	d015      	beq.n	80400 <pll_enable_config_defaults+0x4c>
				CONFIG_PLL1_MUL);
		break;
#endif
	default:
		Assert(false);
		break;
   803d4:	e024      	b.n	80420 <pll_enable_config_defaults+0x6c>
		pll_enable_source(CONFIG_PLL0_SOURCE);
   803d6:	2006      	movs	r0, #6
   803d8:	4b1b      	ldr	r3, [pc, #108]	; (80448 <pll_enable_config_defaults+0x94>)
   803da:	4798      	blx	r3
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   803dc:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   803e0:	4b1a      	ldr	r3, [pc, #104]	; (8044c <pll_enable_config_defaults+0x98>)
   803e2:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   803e4:	bf00      	nop
   803e6:	4b1a      	ldr	r3, [pc, #104]	; (80450 <pll_enable_config_defaults+0x9c>)
   803e8:	4798      	blx	r3
   803ea:	4603      	mov	r3, r0
   803ec:	2b00      	cmp	r3, #0
   803ee:	d0fa      	beq.n	803e6 <pll_enable_config_defaults+0x32>
		pll_config_init(&pllcfg,
   803f0:	f107 000c 	add.w	r0, r7, #12
   803f4:	2310      	movs	r3, #16
   803f6:	2201      	movs	r2, #1
   803f8:	2106      	movs	r1, #6
   803fa:	4c16      	ldr	r4, [pc, #88]	; (80454 <pll_enable_config_defaults+0xa0>)
   803fc:	47a0      	blx	r4
		break;
   803fe:	e00f      	b.n	80420 <pll_enable_config_defaults+0x6c>
		if (pmc_osc_is_bypassed_main_xtal()) {
   80400:	4b15      	ldr	r3, [pc, #84]	; (80458 <pll_enable_config_defaults+0xa4>)
   80402:	4798      	blx	r3
   80404:	4603      	mov	r3, r0
   80406:	2b00      	cmp	r3, #0
   80408:	d102      	bne.n	80410 <pll_enable_config_defaults+0x5c>
			pll_enable_source(CONFIG_PLL1_SOURCE);
   8040a:	2006      	movs	r0, #6
   8040c:	4b0e      	ldr	r3, [pc, #56]	; (80448 <pll_enable_config_defaults+0x94>)
   8040e:	4798      	blx	r3
		pll_config_init(&pllcfg,
   80410:	f107 000c 	add.w	r0, r7, #12
   80414:	2300      	movs	r3, #0
   80416:	2200      	movs	r2, #0
   80418:	2106      	movs	r1, #6
   8041a:	4c0e      	ldr	r4, [pc, #56]	; (80454 <pll_enable_config_defaults+0xa0>)
   8041c:	47a0      	blx	r4
		break;
   8041e:	bf00      	nop
	}
	pll_enable(&pllcfg, ul_pll_id);
   80420:	f107 030c 	add.w	r3, r7, #12
   80424:	6879      	ldr	r1, [r7, #4]
   80426:	4618      	mov	r0, r3
   80428:	4b0c      	ldr	r3, [pc, #48]	; (8045c <pll_enable_config_defaults+0xa8>)
   8042a:	4798      	blx	r3
	while (!pll_is_locked(ul_pll_id));
   8042c:	bf00      	nop
   8042e:	6878      	ldr	r0, [r7, #4]
   80430:	4b04      	ldr	r3, [pc, #16]	; (80444 <pll_enable_config_defaults+0x90>)
   80432:	4798      	blx	r3
   80434:	4603      	mov	r3, r0
   80436:	2b00      	cmp	r3, #0
   80438:	d0f9      	beq.n	8042e <pll_enable_config_defaults+0x7a>
   8043a:	e000      	b.n	8043e <pll_enable_config_defaults+0x8a>
		return; // Pll already running
   8043c:	bf00      	nop
}
   8043e:	3714      	adds	r7, #20
   80440:	46bd      	mov	sp, r7
   80442:	bd90      	pop	{r4, r7, pc}
   80444:	00080351 	.word	0x00080351
   80448:	0008037d 	.word	0x0008037d
   8044c:	00085515 	.word	0x00085515
   80450:	000854fd 	.word	0x000854fd
   80454:	000802a5 	.word	0x000802a5
   80458:	000854cd 	.word	0x000854cd
   8045c:	00080311 	.word	0x00080311

00080460 <ioport_set_pin_mode>:
 *
 * \param pin IOPORT pin to configure
 * \param mode Mode masks to configure for the specified pin (\ref ioport_modes)
 */
static inline void ioport_set_pin_mode(ioport_pin_t pin, ioport_mode_t mode)
{
   80460:	b480      	push	{r7}
   80462:	b08d      	sub	sp, #52	; 0x34
   80464:	af00      	add	r7, sp, #0
   80466:	6078      	str	r0, [r7, #4]
   80468:	6039      	str	r1, [r7, #0]
   8046a:	687b      	ldr	r3, [r7, #4]
   8046c:	62fb      	str	r3, [r7, #44]	; 0x2c
   8046e:	683b      	ldr	r3, [r7, #0]
   80470:	62bb      	str	r3, [r7, #40]	; 0x28
   80472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   80474:	627b      	str	r3, [r7, #36]	; 0x24
typedef uint32_t ioport_port_t;
typedef uint32_t ioport_port_mask_t;

__always_inline static ioport_port_t arch_ioport_pin_to_port_id(ioport_pin_t pin)
{
	return pin >> 5;
   80476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   80478:	095a      	lsrs	r2, r3, #5
   8047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   8047c:	623b      	str	r3, [r7, #32]
	return arch_ioport_port_to_base(arch_ioport_pin_to_port_id(pin));
}

__always_inline static ioport_port_mask_t arch_ioport_pin_to_mask(ioport_pin_t pin)
{
	return 1U << (pin & 0x1F);
   8047e:	6a3b      	ldr	r3, [r7, #32]
   80480:	f003 031f 	and.w	r3, r3, #31
   80484:	2101      	movs	r1, #1
   80486:	fa01 f303 	lsl.w	r3, r1, r3
   8048a:	61fa      	str	r2, [r7, #28]
   8048c:	61bb      	str	r3, [r7, #24]
   8048e:	6abb      	ldr	r3, [r7, #40]	; 0x28
   80490:	617b      	str	r3, [r7, #20]
   80492:	69fb      	ldr	r3, [r7, #28]
   80494:	613b      	str	r3, [r7, #16]
	return (Pio *)((uintptr_t)IOPORT_BASE_ADDRESS +
   80496:	693b      	ldr	r3, [r7, #16]
   80498:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8049c:	f203 7306 	addw	r3, r3, #1798	; 0x706
   804a0:	025b      	lsls	r3, r3, #9
}

__always_inline static void arch_ioport_set_port_mode(ioport_port_t port,
		ioport_port_mask_t mask, ioport_mode_t mode)
{
	Pio *base = arch_ioport_port_to_base(port);
   804a2:	60fb      	str	r3, [r7, #12]

	if (mode & IOPORT_MODE_PULLUP) {
   804a4:	697b      	ldr	r3, [r7, #20]
   804a6:	f003 0308 	and.w	r3, r3, #8
   804aa:	2b00      	cmp	r3, #0
   804ac:	d003      	beq.n	804b6 <ioport_set_pin_mode+0x56>
		base->PIO_PUER = mask;
   804ae:	68fb      	ldr	r3, [r7, #12]
   804b0:	69ba      	ldr	r2, [r7, #24]
   804b2:	665a      	str	r2, [r3, #100]	; 0x64
   804b4:	e002      	b.n	804bc <ioport_set_pin_mode+0x5c>
	} else {
		base->PIO_PUDR = mask;
   804b6:	68fb      	ldr	r3, [r7, #12]
   804b8:	69ba      	ldr	r2, [r7, #24]
   804ba:	661a      	str	r2, [r3, #96]	; 0x60
	} else {
		base->PIO_PPDDR = mask;
	}
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
   804bc:	697b      	ldr	r3, [r7, #20]
   804be:	f003 0320 	and.w	r3, r3, #32
   804c2:	2b00      	cmp	r3, #0
   804c4:	d003      	beq.n	804ce <ioport_set_pin_mode+0x6e>
		base->PIO_MDER = mask;
   804c6:	68fb      	ldr	r3, [r7, #12]
   804c8:	69ba      	ldr	r2, [r7, #24]
   804ca:	651a      	str	r2, [r3, #80]	; 0x50
   804cc:	e002      	b.n	804d4 <ioport_set_pin_mode+0x74>
	} else {
		base->PIO_MDDR = mask;
   804ce:	68fb      	ldr	r3, [r7, #12]
   804d0:	69ba      	ldr	r2, [r7, #24]
   804d2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
   804d4:	697b      	ldr	r3, [r7, #20]
   804d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   804da:	2b00      	cmp	r3, #0
   804dc:	d003      	beq.n	804e6 <ioport_set_pin_mode+0x86>
		base->PIO_IFER = mask;
   804de:	68fb      	ldr	r3, [r7, #12]
   804e0:	69ba      	ldr	r2, [r7, #24]
   804e2:	621a      	str	r2, [r3, #32]
   804e4:	e002      	b.n	804ec <ioport_set_pin_mode+0x8c>
	} else {
		base->PIO_IFDR = mask;
   804e6:	68fb      	ldr	r3, [r7, #12]
   804e8:	69ba      	ldr	r2, [r7, #24]
   804ea:	625a      	str	r2, [r3, #36]	; 0x24
	}

	if (mode & IOPORT_MODE_DEBOUNCE) {
   804ec:	697b      	ldr	r3, [r7, #20]
   804ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
   804f2:	2b00      	cmp	r3, #0
   804f4:	d004      	beq.n	80500 <ioport_set_pin_mode+0xa0>
#if SAM3U || SAM3XA
		base->PIO_DIFSR = mask;
   804f6:	68fb      	ldr	r3, [r7, #12]
   804f8:	69ba      	ldr	r2, [r7, #24]
   804fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   804fe:	e003      	b.n	80508 <ioport_set_pin_mode+0xa8>
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80500:	68fb      	ldr	r3, [r7, #12]
   80502:	69ba      	ldr	r2, [r7, #24]
   80504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		base->PIO_IFSCDR = mask;
#endif
	}

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
   80508:	697b      	ldr	r3, [r7, #20]
   8050a:	f003 0301 	and.w	r3, r3, #1
   8050e:	2b00      	cmp	r3, #0
   80510:	d006      	beq.n	80520 <ioport_set_pin_mode+0xc0>
		base->PIO_ABSR |= mask;
   80512:	68fb      	ldr	r3, [r7, #12]
   80514:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80516:	69bb      	ldr	r3, [r7, #24]
   80518:	431a      	orrs	r2, r3
   8051a:	68fb      	ldr	r3, [r7, #12]
   8051c:	671a      	str	r2, [r3, #112]	; 0x70
		base->PIO_ABCDSR[1] |= mask;
	} else {
		base->PIO_ABCDSR[1] &= ~mask;
	}
#endif
}
   8051e:	e006      	b.n	8052e <ioport_set_pin_mode+0xce>
		base->PIO_ABSR &= ~mask;
   80520:	68fb      	ldr	r3, [r7, #12]
   80522:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   80524:	69bb      	ldr	r3, [r7, #24]
   80526:	43db      	mvns	r3, r3
   80528:	401a      	ands	r2, r3
   8052a:	68fb      	ldr	r3, [r7, #12]
   8052c:	671a      	str	r2, [r3, #112]	; 0x70
}
   8052e:	bf00      	nop
__always_inline static void arch_ioport_set_pin_mode(ioport_pin_t pin,
		ioport_mode_t mode)
{
	arch_ioport_set_port_mode(arch_ioport_pin_to_port_id(pin),
			arch_ioport_pin_to_mask(pin), mode);
}
   80530:	bf00      	nop
	arch_ioport_set_pin_mode(pin, mode);
}
   80532:	bf00      	nop
   80534:	3734      	adds	r7, #52	; 0x34
   80536:	46bd      	mov	sp, r7
   80538:	bc80      	pop	{r7}
   8053a:	4770      	bx	lr

0008053c <sleepmgr_sleep>:
#endif /* CONFIG_SLEEPMGR_ENABLE */
//! @}


static inline void sleepmgr_sleep(const enum sleepmgr_mode sleep_mode)
{
   8053c:	b580      	push	{r7, lr}
   8053e:	b082      	sub	sp, #8
   80540:	af00      	add	r7, sp, #0
   80542:	4603      	mov	r3, r0
   80544:	71fb      	strb	r3, [r7, #7]
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80546:	b672      	cpsid	i
}
   80548:	bf00      	nop
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8054a:	f3bf 8f5f 	dmb	sy
}
   8054e:	bf00      	nop
	Assert(sleep_mode != SLEEPMGR_ACTIVE);
#ifdef CONFIG_SLEEPMGR_ENABLE
	cpu_irq_disable();
   80550:	4b05      	ldr	r3, [pc, #20]	; (80568 <sleepmgr_sleep+0x2c>)
   80552:	2200      	movs	r2, #0
   80554:	701a      	strb	r2, [r3, #0]

	// Atomically enable the global interrupts and enter the sleep mode.
	pmc_sleep(sleep_mode);
   80556:	79fb      	ldrb	r3, [r7, #7]
   80558:	4618      	mov	r0, r3
   8055a:	4b04      	ldr	r3, [pc, #16]	; (8056c <sleepmgr_sleep+0x30>)
   8055c:	4798      	blx	r3
#else
	UNUSED(sleep_mode);
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */

}
   8055e:	bf00      	nop
   80560:	3708      	adds	r7, #8
   80562:	46bd      	mov	sp, r7
   80564:	bd80      	pop	{r7, pc}
   80566:	bf00      	nop
   80568:	200003e0 	.word	0x200003e0
   8056c:	00085de1 	.word	0x00085de1

00080570 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
   80570:	b480      	push	{r7}
   80572:	b083      	sub	sp, #12
   80574:	af00      	add	r7, sp, #0
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80576:	2300      	movs	r3, #0
   80578:	71fb      	strb	r3, [r7, #7]
   8057a:	e006      	b.n	8058a <sleepmgr_init+0x1a>
		sleepmgr_locks[i] = 0;
   8057c:	79fb      	ldrb	r3, [r7, #7]
   8057e:	4a08      	ldr	r2, [pc, #32]	; (805a0 <sleepmgr_init+0x30>)
   80580:	2100      	movs	r1, #0
   80582:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
   80584:	79fb      	ldrb	r3, [r7, #7]
   80586:	3301      	adds	r3, #1
   80588:	71fb      	strb	r3, [r7, #7]
   8058a:	79fb      	ldrb	r3, [r7, #7]
   8058c:	2b04      	cmp	r3, #4
   8058e:	d9f5      	bls.n	8057c <sleepmgr_init+0xc>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80590:	4b03      	ldr	r3, [pc, #12]	; (805a0 <sleepmgr_init+0x30>)
   80592:	2201      	movs	r2, #1
   80594:	715a      	strb	r2, [r3, #5]
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80596:	bf00      	nop
   80598:	370c      	adds	r7, #12
   8059a:	46bd      	mov	sp, r7
   8059c:	bc80      	pop	{r7}
   8059e:	4770      	bx	lr
   805a0:	20001450 	.word	0x20001450

000805a4 <sleepmgr_get_sleep_mode>:
 * Searches through the sleep mode lock counts, starting at the shallowest sleep
 * mode, until the first non-zero lock count is found. The deepest allowable
 * sleep mode is then returned.
 */
static inline enum sleepmgr_mode sleepmgr_get_sleep_mode(void)
{
   805a4:	b480      	push	{r7}
   805a6:	b083      	sub	sp, #12
   805a8:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode = SLEEPMGR_ACTIVE;
   805aa:	2300      	movs	r3, #0
   805ac:	71fb      	strb	r3, [r7, #7]

#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t *lock_ptr = sleepmgr_locks;
   805ae:	4b09      	ldr	r3, [pc, #36]	; (805d4 <sleepmgr_get_sleep_mode+0x30>)
   805b0:	603b      	str	r3, [r7, #0]

	// Find first non-zero lock count, starting with the shallowest modes.
	while (!(*lock_ptr)) {
   805b2:	e005      	b.n	805c0 <sleepmgr_get_sleep_mode+0x1c>
		lock_ptr++;
   805b4:	683b      	ldr	r3, [r7, #0]
   805b6:	3301      	adds	r3, #1
   805b8:	603b      	str	r3, [r7, #0]
		sleep_mode = (enum sleepmgr_mode)(sleep_mode + 1);
   805ba:	79fb      	ldrb	r3, [r7, #7]
   805bc:	3301      	adds	r3, #1
   805be:	71fb      	strb	r3, [r7, #7]
	while (!(*lock_ptr)) {
   805c0:	683b      	ldr	r3, [r7, #0]
   805c2:	781b      	ldrb	r3, [r3, #0]
   805c4:	2b00      	cmp	r3, #0
   805c6:	d0f5      	beq.n	805b4 <sleepmgr_get_sleep_mode+0x10>
	// performed on the deepest sleep mode.
	Assert((uintptr_t)(lock_ptr - sleepmgr_locks) < SLEEPMGR_NR_OF_MODES);

#endif /* CONFIG_SLEEPMGR_ENABLE */

	return sleep_mode;
   805c8:	79fb      	ldrb	r3, [r7, #7]
}
   805ca:	4618      	mov	r0, r3
   805cc:	370c      	adds	r7, #12
   805ce:	46bd      	mov	sp, r7
   805d0:	bc80      	pop	{r7}
   805d2:	4770      	bx	lr
   805d4:	20001450 	.word	0x20001450

000805d8 <sleepmgr_enter_sleep>:
 * them enabled upon return. This also applies if sleep is skipped due to ACTIVE
 * mode being locked.
 */

static inline void sleepmgr_enter_sleep(void)
{
   805d8:	b580      	push	{r7, lr}
   805da:	b082      	sub	sp, #8
   805dc:	af00      	add	r7, sp, #0
	enum sleepmgr_mode sleep_mode;

	//cpu_irq_disable();

	// Find the deepest allowable sleep mode
	sleep_mode = sleepmgr_get_sleep_mode();
   805de:	4b0b      	ldr	r3, [pc, #44]	; (8060c <sleepmgr_enter_sleep+0x34>)
   805e0:	4798      	blx	r3
   805e2:	4603      	mov	r3, r0
   805e4:	71fb      	strb	r3, [r7, #7]
	// Return right away if first mode (ACTIVE) is locked.
	if (sleep_mode==SLEEPMGR_ACTIVE) {
   805e6:	79fb      	ldrb	r3, [r7, #7]
   805e8:	2b00      	cmp	r3, #0
   805ea:	d108      	bne.n	805fe <sleepmgr_enter_sleep+0x26>
		cpu_irq_enable();
   805ec:	4b08      	ldr	r3, [pc, #32]	; (80610 <sleepmgr_enter_sleep+0x38>)
   805ee:	2201      	movs	r2, #1
   805f0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   805f2:	f3bf 8f5f 	dmb	sy
}
   805f6:	bf00      	nop
  __ASM volatile ("cpsie i");
   805f8:	b662      	cpsie	i
}
   805fa:	bf00      	nop
		return;
   805fc:	e003      	b.n	80606 <sleepmgr_enter_sleep+0x2e>
	}
	// Enter the deepest allowable sleep mode with interrupts enabled
	sleepmgr_sleep(sleep_mode);
   805fe:	79fb      	ldrb	r3, [r7, #7]
   80600:	4618      	mov	r0, r3
   80602:	4b04      	ldr	r3, [pc, #16]	; (80614 <sleepmgr_enter_sleep+0x3c>)
   80604:	4798      	blx	r3
#else
	cpu_irq_enable();
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
   80606:	3708      	adds	r7, #8
   80608:	46bd      	mov	sp, r7
   8060a:	bd80      	pop	{r7, pc}
   8060c:	000805a5 	.word	0x000805a5
   80610:	200003e0 	.word	0x200003e0
   80614:	0008053d 	.word	0x0008053d

00080618 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   80618:	b480      	push	{r7}
   8061a:	b083      	sub	sp, #12
   8061c:	af00      	add	r7, sp, #0
   8061e:	6078      	str	r0, [r7, #4]
   80620:	6039      	str	r1, [r7, #0]
	ul_id = ul_id;
	p_cfg->ctrl = 0;
   80622:	687b      	ldr	r3, [r7, #4]
   80624:	2200      	movs	r2, #0
   80626:	601a      	str	r2, [r3, #0]
}
   80628:	bf00      	nop
   8062a:	370c      	adds	r7, #12
   8062c:	46bd      	mov	sp, r7
   8062e:	bc80      	pop	{r7}
   80630:	4770      	bx	lr
   80632:	0000      	movs	r0, r0

00080634 <genclk_config_set_source>:
//! \name Programmable Clock Source and Prescaler configuration
//@{

static inline void genclk_config_set_source(struct genclk_config *p_cfg,
		enum genclk_source e_src)
{
   80634:	b480      	push	{r7}
   80636:	b083      	sub	sp, #12
   80638:	af00      	add	r7, sp, #0
   8063a:	6078      	str	r0, [r7, #4]
   8063c:	460b      	mov	r3, r1
   8063e:	70fb      	strb	r3, [r7, #3]
	p_cfg->ctrl &= (~PMC_PCK_CSS_Msk);
   80640:	687b      	ldr	r3, [r7, #4]
   80642:	681b      	ldr	r3, [r3, #0]
   80644:	f023 0207 	bic.w	r2, r3, #7
   80648:	687b      	ldr	r3, [r7, #4]
   8064a:	601a      	str	r2, [r3, #0]

	switch (e_src) {
   8064c:	78fb      	ldrb	r3, [r7, #3]
   8064e:	2b0a      	cmp	r3, #10
   80650:	d839      	bhi.n	806c6 <genclk_config_set_source+0x92>
   80652:	a201      	add	r2, pc, #4	; (adr r2, 80658 <genclk_config_set_source+0x24>)
   80654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80658:	00080685 	.word	0x00080685
   8065c:	00080685 	.word	0x00080685
   80660:	00080685 	.word	0x00080685
   80664:	0008068f 	.word	0x0008068f
   80668:	0008068f 	.word	0x0008068f
   8066c:	0008068f 	.word	0x0008068f
   80670:	0008068f 	.word	0x0008068f
   80674:	0008068f 	.word	0x0008068f
   80678:	0008069d 	.word	0x0008069d
   8067c:	000806ab 	.word	0x000806ab
   80680:	000806b9 	.word	0x000806b9
	case GENCLK_PCK_SRC_SLCK_RC:
	case GENCLK_PCK_SRC_SLCK_XTAL:
	case GENCLK_PCK_SRC_SLCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_SLOW_CLK);
   80684:	687b      	ldr	r3, [r7, #4]
   80686:	681a      	ldr	r2, [r3, #0]
   80688:	687b      	ldr	r3, [r7, #4]
   8068a:	601a      	str	r2, [r3, #0]
		break;
   8068c:	e01b      	b.n	806c6 <genclk_config_set_source+0x92>
	case GENCLK_PCK_SRC_MAINCK_4M_RC:
	case GENCLK_PCK_SRC_MAINCK_8M_RC:
	case GENCLK_PCK_SRC_MAINCK_12M_RC:
	case GENCLK_PCK_SRC_MAINCK_XTAL:
	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		p_cfg->ctrl |= (PMC_PCK_CSS_MAIN_CLK);
   8068e:	687b      	ldr	r3, [r7, #4]
   80690:	681b      	ldr	r3, [r3, #0]
   80692:	f043 0201 	orr.w	r2, r3, #1
   80696:	687b      	ldr	r3, [r7, #4]
   80698:	601a      	str	r2, [r3, #0]
		break;
   8069a:	e014      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLACK:
		p_cfg->ctrl |= (PMC_PCK_CSS_PLLA_CLK);
   8069c:	687b      	ldr	r3, [r7, #4]
   8069e:	681b      	ldr	r3, [r3, #0]
   806a0:	f043 0202 	orr.w	r2, r3, #2
   806a4:	687b      	ldr	r3, [r7, #4]
   806a6:	601a      	str	r2, [r3, #0]
		break;
   806a8:	e00d      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_PLLBCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_UPLL_CLK);
   806aa:	687b      	ldr	r3, [r7, #4]
   806ac:	681b      	ldr	r3, [r3, #0]
   806ae:	f043 0203 	orr.w	r2, r3, #3
   806b2:	687b      	ldr	r3, [r7, #4]
   806b4:	601a      	str	r2, [r3, #0]
		break;
   806b6:	e006      	b.n	806c6 <genclk_config_set_source+0x92>

	case GENCLK_PCK_SRC_MCK:
		p_cfg->ctrl |= (PMC_PCK_CSS_MCK);
   806b8:	687b      	ldr	r3, [r7, #4]
   806ba:	681b      	ldr	r3, [r3, #0]
   806bc:	f043 0204 	orr.w	r2, r3, #4
   806c0:	687b      	ldr	r3, [r7, #4]
   806c2:	601a      	str	r2, [r3, #0]
		break;
   806c4:	bf00      	nop
	}
}
   806c6:	bf00      	nop
   806c8:	370c      	adds	r7, #12
   806ca:	46bd      	mov	sp, r7
   806cc:	bc80      	pop	{r7}
   806ce:	4770      	bx	lr

000806d0 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *p_cfg,
		uint32_t e_divider)
{
   806d0:	b480      	push	{r7}
   806d2:	b083      	sub	sp, #12
   806d4:	af00      	add	r7, sp, #0
   806d6:	6078      	str	r0, [r7, #4]
   806d8:	6039      	str	r1, [r7, #0]
	p_cfg->ctrl &= ~PMC_PCK_PRES_Msk;
   806da:	687b      	ldr	r3, [r7, #4]
   806dc:	681b      	ldr	r3, [r3, #0]
   806de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   806e2:	687b      	ldr	r3, [r7, #4]
   806e4:	601a      	str	r2, [r3, #0]
	p_cfg->ctrl |= e_divider;
   806e6:	687b      	ldr	r3, [r7, #4]
   806e8:	681a      	ldr	r2, [r3, #0]
   806ea:	683b      	ldr	r3, [r7, #0]
   806ec:	431a      	orrs	r2, r3
   806ee:	687b      	ldr	r3, [r7, #4]
   806f0:	601a      	str	r2, [r3, #0]
}
   806f2:	bf00      	nop
   806f4:	370c      	adds	r7, #12
   806f6:	46bd      	mov	sp, r7
   806f8:	bc80      	pop	{r7}
   806fa:	4770      	bx	lr

000806fc <genclk_enable>:

//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
   806fc:	b580      	push	{r7, lr}
   806fe:	b082      	sub	sp, #8
   80700:	af00      	add	r7, sp, #0
   80702:	6078      	str	r0, [r7, #4]
   80704:	6039      	str	r1, [r7, #0]
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   80706:	4907      	ldr	r1, [pc, #28]	; (80724 <genclk_enable+0x28>)
   80708:	687b      	ldr	r3, [r7, #4]
   8070a:	681a      	ldr	r2, [r3, #0]
   8070c:	683b      	ldr	r3, [r7, #0]
   8070e:	3310      	adds	r3, #16
   80710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	pmc_enable_pck(ul_id);
   80714:	6838      	ldr	r0, [r7, #0]
   80716:	4b04      	ldr	r3, [pc, #16]	; (80728 <genclk_enable+0x2c>)
   80718:	4798      	blx	r3
}
   8071a:	bf00      	nop
   8071c:	3708      	adds	r7, #8
   8071e:	46bd      	mov	sp, r7
   80720:	bd80      	pop	{r7, pc}
   80722:	bf00      	nop
   80724:	400e0400 	.word	0x400e0400
   80728:	00085651 	.word	0x00085651

0008072c <genclk_enable_source>:
{
	pmc_disable_pck(ul_id);
}

static inline void genclk_enable_source(enum genclk_source e_src)
{
   8072c:	b580      	push	{r7, lr}
   8072e:	b082      	sub	sp, #8
   80730:	af00      	add	r7, sp, #0
   80732:	4603      	mov	r3, r0
   80734:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   80736:	79fb      	ldrb	r3, [r7, #7]
   80738:	2b0a      	cmp	r3, #10
   8073a:	f200 80a2 	bhi.w	80882 <genclk_enable_source+0x156>
   8073e:	a201      	add	r2, pc, #4	; (adr r2, 80744 <genclk_enable_source+0x18>)
   80740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80744:	00080771 	.word	0x00080771
   80748:	00080793 	.word	0x00080793
   8074c:	000807b3 	.word	0x000807b3
   80750:	000807d3 	.word	0x000807d3
   80754:	000807f3 	.word	0x000807f3
   80758:	00080813 	.word	0x00080813
   8075c:	00080833 	.word	0x00080833
   80760:	00080853 	.word	0x00080853
   80764:	00080873 	.word	0x00080873
   80768:	0008087b 	.word	0x0008087b
   8076c:	00080883 	.word	0x00080883
	case GENCLK_PCK_SRC_SLCK_RC:
		if (!osc_is_ready(OSC_SLCK_32K_RC)) {
   80770:	2000      	movs	r0, #0
   80772:	4b4e      	ldr	r3, [pc, #312]	; (808ac <genclk_enable_source+0x180>)
   80774:	4798      	blx	r3
   80776:	4603      	mov	r3, r0
   80778:	f083 0301 	eor.w	r3, r3, #1
   8077c:	b2db      	uxtb	r3, r3
   8077e:	2b00      	cmp	r3, #0
   80780:	f000 8081 	beq.w	80886 <genclk_enable_source+0x15a>
			osc_enable(OSC_SLCK_32K_RC);
   80784:	2000      	movs	r0, #0
   80786:	4b4a      	ldr	r3, [pc, #296]	; (808b0 <genclk_enable_source+0x184>)
   80788:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_RC);
   8078a:	2000      	movs	r0, #0
   8078c:	4b49      	ldr	r3, [pc, #292]	; (808b4 <genclk_enable_source+0x188>)
   8078e:	4798      	blx	r3
		}
		break;
   80790:	e079      	b.n	80886 <genclk_enable_source+0x15a>

	case GENCLK_PCK_SRC_SLCK_XTAL:
		if (!osc_is_ready(OSC_SLCK_32K_XTAL)) {
   80792:	2001      	movs	r0, #1
   80794:	4b45      	ldr	r3, [pc, #276]	; (808ac <genclk_enable_source+0x180>)
   80796:	4798      	blx	r3
   80798:	4603      	mov	r3, r0
   8079a:	f083 0301 	eor.w	r3, r3, #1
   8079e:	b2db      	uxtb	r3, r3
   807a0:	2b00      	cmp	r3, #0
   807a2:	d072      	beq.n	8088a <genclk_enable_source+0x15e>
			osc_enable(OSC_SLCK_32K_XTAL);
   807a4:	2001      	movs	r0, #1
   807a6:	4b42      	ldr	r3, [pc, #264]	; (808b0 <genclk_enable_source+0x184>)
   807a8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_XTAL);
   807aa:	2001      	movs	r0, #1
   807ac:	4b41      	ldr	r3, [pc, #260]	; (808b4 <genclk_enable_source+0x188>)
   807ae:	4798      	blx	r3
		}
		break;
   807b0:	e06b      	b.n	8088a <genclk_enable_source+0x15e>

	case GENCLK_PCK_SRC_SLCK_BYPASS:
		if (!osc_is_ready(OSC_SLCK_32K_BYPASS)) {
   807b2:	2002      	movs	r0, #2
   807b4:	4b3d      	ldr	r3, [pc, #244]	; (808ac <genclk_enable_source+0x180>)
   807b6:	4798      	blx	r3
   807b8:	4603      	mov	r3, r0
   807ba:	f083 0301 	eor.w	r3, r3, #1
   807be:	b2db      	uxtb	r3, r3
   807c0:	2b00      	cmp	r3, #0
   807c2:	d064      	beq.n	8088e <genclk_enable_source+0x162>
			osc_enable(OSC_SLCK_32K_BYPASS);
   807c4:	2002      	movs	r0, #2
   807c6:	4b3a      	ldr	r3, [pc, #232]	; (808b0 <genclk_enable_source+0x184>)
   807c8:	4798      	blx	r3
			osc_wait_ready(OSC_SLCK_32K_BYPASS);
   807ca:	2002      	movs	r0, #2
   807cc:	4b39      	ldr	r3, [pc, #228]	; (808b4 <genclk_enable_source+0x188>)
   807ce:	4798      	blx	r3
		}
		break;
   807d0:	e05d      	b.n	8088e <genclk_enable_source+0x162>

	case GENCLK_PCK_SRC_MAINCK_4M_RC:
		if (!osc_is_ready(OSC_MAINCK_4M_RC)) {
   807d2:	2003      	movs	r0, #3
   807d4:	4b35      	ldr	r3, [pc, #212]	; (808ac <genclk_enable_source+0x180>)
   807d6:	4798      	blx	r3
   807d8:	4603      	mov	r3, r0
   807da:	f083 0301 	eor.w	r3, r3, #1
   807de:	b2db      	uxtb	r3, r3
   807e0:	2b00      	cmp	r3, #0
   807e2:	d056      	beq.n	80892 <genclk_enable_source+0x166>
			osc_enable(OSC_MAINCK_4M_RC);
   807e4:	2003      	movs	r0, #3
   807e6:	4b32      	ldr	r3, [pc, #200]	; (808b0 <genclk_enable_source+0x184>)
   807e8:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_4M_RC);
   807ea:	2003      	movs	r0, #3
   807ec:	4b31      	ldr	r3, [pc, #196]	; (808b4 <genclk_enable_source+0x188>)
   807ee:	4798      	blx	r3
		}
		break;
   807f0:	e04f      	b.n	80892 <genclk_enable_source+0x166>

	case GENCLK_PCK_SRC_MAINCK_8M_RC:
		if (!osc_is_ready(OSC_MAINCK_8M_RC)) {
   807f2:	2004      	movs	r0, #4
   807f4:	4b2d      	ldr	r3, [pc, #180]	; (808ac <genclk_enable_source+0x180>)
   807f6:	4798      	blx	r3
   807f8:	4603      	mov	r3, r0
   807fa:	f083 0301 	eor.w	r3, r3, #1
   807fe:	b2db      	uxtb	r3, r3
   80800:	2b00      	cmp	r3, #0
   80802:	d048      	beq.n	80896 <genclk_enable_source+0x16a>
			osc_enable(OSC_MAINCK_8M_RC);
   80804:	2004      	movs	r0, #4
   80806:	4b2a      	ldr	r3, [pc, #168]	; (808b0 <genclk_enable_source+0x184>)
   80808:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_8M_RC);
   8080a:	2004      	movs	r0, #4
   8080c:	4b29      	ldr	r3, [pc, #164]	; (808b4 <genclk_enable_source+0x188>)
   8080e:	4798      	blx	r3
		}
		break;
   80810:	e041      	b.n	80896 <genclk_enable_source+0x16a>

	case GENCLK_PCK_SRC_MAINCK_12M_RC:
		if (!osc_is_ready(OSC_MAINCK_12M_RC)) {
   80812:	2005      	movs	r0, #5
   80814:	4b25      	ldr	r3, [pc, #148]	; (808ac <genclk_enable_source+0x180>)
   80816:	4798      	blx	r3
   80818:	4603      	mov	r3, r0
   8081a:	f083 0301 	eor.w	r3, r3, #1
   8081e:	b2db      	uxtb	r3, r3
   80820:	2b00      	cmp	r3, #0
   80822:	d03a      	beq.n	8089a <genclk_enable_source+0x16e>
			osc_enable(OSC_MAINCK_12M_RC);
   80824:	2005      	movs	r0, #5
   80826:	4b22      	ldr	r3, [pc, #136]	; (808b0 <genclk_enable_source+0x184>)
   80828:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_12M_RC);
   8082a:	2005      	movs	r0, #5
   8082c:	4b21      	ldr	r3, [pc, #132]	; (808b4 <genclk_enable_source+0x188>)
   8082e:	4798      	blx	r3
		}
		break;
   80830:	e033      	b.n	8089a <genclk_enable_source+0x16e>

	case GENCLK_PCK_SRC_MAINCK_XTAL:
		if (!osc_is_ready(OSC_MAINCK_XTAL)) {
   80832:	2006      	movs	r0, #6
   80834:	4b1d      	ldr	r3, [pc, #116]	; (808ac <genclk_enable_source+0x180>)
   80836:	4798      	blx	r3
   80838:	4603      	mov	r3, r0
   8083a:	f083 0301 	eor.w	r3, r3, #1
   8083e:	b2db      	uxtb	r3, r3
   80840:	2b00      	cmp	r3, #0
   80842:	d02c      	beq.n	8089e <genclk_enable_source+0x172>
			osc_enable(OSC_MAINCK_XTAL);
   80844:	2006      	movs	r0, #6
   80846:	4b1a      	ldr	r3, [pc, #104]	; (808b0 <genclk_enable_source+0x184>)
   80848:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_XTAL);
   8084a:	2006      	movs	r0, #6
   8084c:	4b19      	ldr	r3, [pc, #100]	; (808b4 <genclk_enable_source+0x188>)
   8084e:	4798      	blx	r3
		}
		break;
   80850:	e025      	b.n	8089e <genclk_enable_source+0x172>

	case GENCLK_PCK_SRC_MAINCK_BYPASS:
		if (!osc_is_ready(OSC_MAINCK_BYPASS)) {
   80852:	2007      	movs	r0, #7
   80854:	4b15      	ldr	r3, [pc, #84]	; (808ac <genclk_enable_source+0x180>)
   80856:	4798      	blx	r3
   80858:	4603      	mov	r3, r0
   8085a:	f083 0301 	eor.w	r3, r3, #1
   8085e:	b2db      	uxtb	r3, r3
   80860:	2b00      	cmp	r3, #0
   80862:	d01e      	beq.n	808a2 <genclk_enable_source+0x176>
			osc_enable(OSC_MAINCK_BYPASS);
   80864:	2007      	movs	r0, #7
   80866:	4b12      	ldr	r3, [pc, #72]	; (808b0 <genclk_enable_source+0x184>)
   80868:	4798      	blx	r3
			osc_wait_ready(OSC_MAINCK_BYPASS);
   8086a:	2007      	movs	r0, #7
   8086c:	4b11      	ldr	r3, [pc, #68]	; (808b4 <genclk_enable_source+0x188>)
   8086e:	4798      	blx	r3
		}
		break;
   80870:	e017      	b.n	808a2 <genclk_enable_source+0x176>

#ifdef CONFIG_PLL0_SOURCE
	case GENCLK_PCK_SRC_PLLACK:
		pll_enable_config_defaults(0);
   80872:	2000      	movs	r0, #0
   80874:	4b10      	ldr	r3, [pc, #64]	; (808b8 <genclk_enable_source+0x18c>)
   80876:	4798      	blx	r3
		break;
   80878:	e014      	b.n	808a4 <genclk_enable_source+0x178>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case GENCLK_PCK_SRC_PLLBCK:
		pll_enable_config_defaults(1);
   8087a:	2001      	movs	r0, #1
   8087c:	4b0e      	ldr	r3, [pc, #56]	; (808b8 <genclk_enable_source+0x18c>)
   8087e:	4798      	blx	r3
		break;
   80880:	e010      	b.n	808a4 <genclk_enable_source+0x178>
	case GENCLK_PCK_SRC_MCK:
		break;

	default:
		Assert(false);
		break;
   80882:	bf00      	nop
   80884:	e00e      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80886:	bf00      	nop
   80888:	e00c      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8088a:	bf00      	nop
   8088c:	e00a      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8088e:	bf00      	nop
   80890:	e008      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80892:	bf00      	nop
   80894:	e006      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   80896:	bf00      	nop
   80898:	e004      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8089a:	bf00      	nop
   8089c:	e002      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   8089e:	bf00      	nop
   808a0:	e000      	b.n	808a4 <genclk_enable_source+0x178>
		break;
   808a2:	bf00      	nop
	}
}
   808a4:	bf00      	nop
   808a6:	3708      	adds	r7, #8
   808a8:	46bd      	mov	sp, r7
   808aa:	bd80      	pop	{r7, pc}
   808ac:	00080181 	.word	0x00080181
   808b0:	000800fd 	.word	0x000800fd
   808b4:	00080275 	.word	0x00080275
   808b8:	000803b5 	.word	0x000803b5

000808bc <phywhisperer_no_pwr>:

//Serial Number - will be read by device ID
char usb_serial_number[33] = "000000000000DEADBEEF";

void phywhisperer_no_pwr(void)
{
   808bc:	b480      	push	{r7}
   808be:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808c0:	4b05      	ldr	r3, [pc, #20]	; (808d8 <phywhisperer_no_pwr+0x1c>)
   808c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808c6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   808c8:	4b03      	ldr	r3, [pc, #12]	; (808d8 <phywhisperer_no_pwr+0x1c>)
   808ca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808ce:	635a      	str	r2, [r3, #52]	; 0x34
}
   808d0:	bf00      	nop
   808d2:	46bd      	mov	sp, r7
   808d4:	bc80      	pop	{r7}
   808d6:	4770      	bx	lr
   808d8:	400e0c00 	.word	0x400e0c00

000808dc <phywhisperer_5V_pwr>:

void phywhisperer_5V_pwr(void)
{
   808dc:	b480      	push	{r7}
   808de:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   808e0:	4b05      	ldr	r3, [pc, #20]	; (808f8 <phywhisperer_5V_pwr+0x1c>)
   808e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   808e6:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   808e8:	4b03      	ldr	r3, [pc, #12]	; (808f8 <phywhisperer_5V_pwr+0x1c>)
   808ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   808ee:	631a      	str	r2, [r3, #48]	; 0x30
}
   808f0:	bf00      	nop
   808f2:	46bd      	mov	sp, r7
   808f4:	bc80      	pop	{r7}
   808f6:	4770      	bx	lr
   808f8:	400e0c00 	.word	0x400e0c00

000808fc <phywhisperer_host_pwr>:

void phywhisperer_host_pwr(void)
{
   808fc:	b480      	push	{r7}
   808fe:	af00      	add	r7, sp, #0
    PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   80900:	4b05      	ldr	r3, [pc, #20]	; (80918 <phywhisperer_host_pwr+0x1c>)
   80902:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   80906:	635a      	str	r2, [r3, #52]	; 0x34
    PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   80908:	4b03      	ldr	r3, [pc, #12]	; (80918 <phywhisperer_host_pwr+0x1c>)
   8090a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   8090e:	631a      	str	r2, [r3, #48]	; 0x30
}
   80910:	bf00      	nop
   80912:	46bd      	mov	sp, r7
   80914:	bc80      	pop	{r7}
   80916:	4770      	bx	lr
   80918:	400e0c00 	.word	0x400e0c00

0008091c <pwr_st_from_io>:
        phywhisperer_host_pwr();
    }
}

uint8_t pwr_st_from_io(void)
{
   8091c:	b480      	push	{r7}
   8091e:	af00      	add	r7, sp, #0
    if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80920:	4b17      	ldr	r3, [pc, #92]	; (80980 <pwr_st_from_io+0x64>)
   80922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80928:	2b00      	cmp	r3, #0
   8092a:	d107      	bne.n	8093c <pwr_st_from_io+0x20>
   8092c:	4b14      	ldr	r3, [pc, #80]	; (80980 <pwr_st_from_io+0x64>)
   8092e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80930:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80934:	2b00      	cmp	r3, #0
   80936:	d101      	bne.n	8093c <pwr_st_from_io+0x20>
        //USB off
        return 0;
   80938:	2300      	movs	r3, #0
   8093a:	e01c      	b.n	80976 <pwr_st_from_io+0x5a>
    } else if (!(PIOA->PIO_ODSR & (1 << F_VBHOST)) && (PIOA->PIO_ODSR & (1 << F_VB5V))) {
   8093c:	4b10      	ldr	r3, [pc, #64]	; (80980 <pwr_st_from_io+0x64>)
   8093e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80944:	2b00      	cmp	r3, #0
   80946:	d107      	bne.n	80958 <pwr_st_from_io+0x3c>
   80948:	4b0d      	ldr	r3, [pc, #52]	; (80980 <pwr_st_from_io+0x64>)
   8094a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8094c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   80950:	2b00      	cmp	r3, #0
   80952:	d001      	beq.n	80958 <pwr_st_from_io+0x3c>
        //Host power
        return 1;
   80954:	2301      	movs	r3, #1
   80956:	e00e      	b.n	80976 <pwr_st_from_io+0x5a>
    } else if ((PIOA->PIO_ODSR & (1 << F_VBHOST)) && !(PIOA->PIO_ODSR & (1 << F_VB5V))) {
   80958:	4b09      	ldr	r3, [pc, #36]	; (80980 <pwr_st_from_io+0x64>)
   8095a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   8095c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
   80960:	2b00      	cmp	r3, #0
   80962:	d007      	beq.n	80974 <pwr_st_from_io+0x58>
   80964:	4b06      	ldr	r3, [pc, #24]	; (80980 <pwr_st_from_io+0x64>)
   80966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
   8096c:	2b00      	cmp	r3, #0
   8096e:	d101      	bne.n	80974 <pwr_st_from_io+0x58>
        //Sniffer power
        return 2;
   80970:	2302      	movs	r3, #2
   80972:	e000      	b.n	80976 <pwr_st_from_io+0x5a>
    } else {
        //Everything's on...
        return 0xFF;
   80974:	23ff      	movs	r3, #255	; 0xff
    }

}
   80976:	4618      	mov	r0, r3
   80978:	46bd      	mov	sp, r7
   8097a:	bc80      	pop	{r7}
   8097c:	4770      	bx	lr
   8097e:	bf00      	nop
   80980:	400e0c00 	.word	0x400e0c00

00080984 <phywhisperer_setup_pins>:

void phywhisperer_setup_pins(void)
{
   80984:	b580      	push	{r7, lr}
   80986:	af00      	add	r7, sp, #0
    board_init();
   80988:	4b3a      	ldr	r3, [pc, #232]	; (80a74 <phywhisperer_setup_pins+0xf0>)
   8098a:	4798      	blx	r3
    ioport_set_pin_mode(BUTTON_IN, IOPORT_MODE_PULLUP); //(1 << 2) = PULL UP
   8098c:	2108      	movs	r1, #8
   8098e:	2018      	movs	r0, #24
   80990:	4b39      	ldr	r3, [pc, #228]	; (80a78 <phywhisperer_setup_pins+0xf4>)
   80992:	4798      	blx	r3
    PIOA->PIO_ODR = (1 << BUTTON_IN);
   80994:	4b39      	ldr	r3, [pc, #228]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   80996:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   8099a:	615a      	str	r2, [r3, #20]
    PIOA->PIO_PUER = (1 << BUTTON_IN); // enable pullup
   8099c:	4b37      	ldr	r3, [pc, #220]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   8099e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809a2:	665a      	str	r2, [r3, #100]	; 0x64
    PIOA->PIO_DIFSR = (1 << BUTTON_IN); //enable debounce
   809a4:	4b35      	ldr	r3, [pc, #212]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   809a6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   809aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    PIOA->PIO_OER = (1 << F_VB5V) | (1 << F_VBHOST); //enable output mode on VBHOST/VBSNIFF pins
   809ae:	4b33      	ldr	r3, [pc, #204]	; (80a7c <phywhisperer_setup_pins+0xf8>)
   809b0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
   809b4:	611a      	str	r2, [r3, #16]

    phywhisperer_host_pwr();
   809b6:	4b32      	ldr	r3, [pc, #200]	; (80a80 <phywhisperer_setup_pins+0xfc>)
   809b8:	4798      	blx	r3
    
    //Configure FPGA to allow programming via USB
    fpga_program_init();
   809ba:	4b32      	ldr	r3, [pc, #200]	; (80a84 <phywhisperer_setup_pins+0x100>)
   809bc:	4798      	blx	r3

    /* Enable SMC */
    pmc_enable_periph_clk(ID_SMC);
   809be:	2009      	movs	r0, #9
   809c0:	4b31      	ldr	r3, [pc, #196]	; (80a88 <phywhisperer_setup_pins+0x104>)
   809c2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   809c4:	4931      	ldr	r1, [pc, #196]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809c6:	2029      	movs	r0, #41	; 0x29
   809c8:	4b31      	ldr	r3, [pc, #196]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809ca:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   809cc:	492f      	ldr	r1, [pc, #188]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809ce:	202a      	movs	r0, #42	; 0x2a
   809d0:	4b2f      	ldr	r3, [pc, #188]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809d2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   809d4:	492d      	ldr	r1, [pc, #180]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809d6:	202b      	movs	r0, #43	; 0x2b
   809d8:	4b2d      	ldr	r3, [pc, #180]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809da:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   809dc:	492b      	ldr	r1, [pc, #172]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809de:	202c      	movs	r0, #44	; 0x2c
   809e0:	4b2b      	ldr	r3, [pc, #172]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809e2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   809e4:	4929      	ldr	r1, [pc, #164]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809e6:	202d      	movs	r0, #45	; 0x2d
   809e8:	4b29      	ldr	r3, [pc, #164]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809ea:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   809ec:	4927      	ldr	r1, [pc, #156]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809ee:	202e      	movs	r0, #46	; 0x2e
   809f0:	4b27      	ldr	r3, [pc, #156]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809f2:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   809f4:	4925      	ldr	r1, [pc, #148]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809f6:	202f      	movs	r0, #47	; 0x2f
   809f8:	4b25      	ldr	r3, [pc, #148]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   809fa:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   809fc:	4923      	ldr	r1, [pc, #140]	; (80a8c <phywhisperer_setup_pins+0x108>)
   809fe:	2030      	movs	r0, #48	; 0x30
   80a00:	4b23      	ldr	r3, [pc, #140]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a02:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80a04:	4921      	ldr	r1, [pc, #132]	; (80a8c <phywhisperer_setup_pins+0x108>)
   80a06:	2033      	movs	r0, #51	; 0x33
   80a08:	4b21      	ldr	r3, [pc, #132]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a0a:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   80a0c:	491f      	ldr	r1, [pc, #124]	; (80a8c <phywhisperer_setup_pins+0x108>)
   80a0e:	2037      	movs	r0, #55	; 0x37
   80a10:	4b1f      	ldr	r3, [pc, #124]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a12:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80a14:	491d      	ldr	r1, [pc, #116]	; (80a8c <phywhisperer_setup_pins+0x108>)
   80a16:	2034      	movs	r0, #52	; 0x34
   80a18:	4b1d      	ldr	r3, [pc, #116]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a1a:	4798      	blx	r3

    gpio_configure_group(FPGA_ADDR_PORT, FPGA_ADDR_PINS, (PIO_TYPE_PIO_OUTPUT_0 | PIO_DEFAULT));
   80a1c:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
   80a20:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a24:	481b      	ldr	r0, [pc, #108]	; (80a94 <phywhisperer_setup_pins+0x110>)
   80a26:	4b1c      	ldr	r3, [pc, #112]	; (80a98 <phywhisperer_setup_pins+0x114>)
   80a28:	4798      	blx	r3
    pio_enable_output_write(FPGA_ADDR_PORT, FPGA_ADDR_PINS);
   80a2a:	f240 11bf 	movw	r1, #447	; 0x1bf
   80a2e:	4819      	ldr	r0, [pc, #100]	; (80a94 <phywhisperer_setup_pins+0x110>)
   80a30:	4b1a      	ldr	r3, [pc, #104]	; (80a9c <phywhisperer_setup_pins+0x118>)
   80a32:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_ADDR_BUS_FLAG1);
    gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_ADDR_BUS_FLAG1);
    */

    gpio_configure_pin(PIN_EBI_USB_SPARE0, PIN_EBI_USB_SPARE0_FLAGS);
   80a34:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80a38:	2026      	movs	r0, #38	; 0x26
   80a3a:	4b15      	ldr	r3, [pc, #84]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a3c:	4798      	blx	r3
    gpio_configure_pin(PIN_EBI_USB_SPARE1, PIN_EBI_USB_SPARE1_FLAGS);
   80a3e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80a42:	2031      	movs	r0, #49	; 0x31
   80a44:	4b12      	ldr	r3, [pc, #72]	; (80a90 <phywhisperer_setup_pins+0x10c>)
   80a46:	4798      	blx	r3

    smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(0)
   80a48:	4a15      	ldr	r2, [pc, #84]	; (80aa0 <phywhisperer_setup_pins+0x11c>)
   80a4a:	2100      	movs	r1, #0
   80a4c:	4815      	ldr	r0, [pc, #84]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a4e:	4b16      	ldr	r3, [pc, #88]	; (80aa8 <phywhisperer_setup_pins+0x124>)
   80a50:	4798      	blx	r3
                         | SMC_SETUP_NCS_WR_SETUP(1)
                         | SMC_SETUP_NRD_SETUP(1)
                         | SMC_SETUP_NCS_RD_SETUP(1));
    smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(1)
   80a52:	4a16      	ldr	r2, [pc, #88]	; (80aac <phywhisperer_setup_pins+0x128>)
   80a54:	2100      	movs	r1, #0
   80a56:	4813      	ldr	r0, [pc, #76]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a58:	4b15      	ldr	r3, [pc, #84]	; (80ab0 <phywhisperer_setup_pins+0x12c>)
   80a5a:	4798      	blx	r3
                         | SMC_PULSE_NCS_WR_PULSE(1)
                         | SMC_PULSE_NRD_PULSE(3)
                         | SMC_PULSE_NCS_RD_PULSE(1));
    smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(2)
   80a5c:	4a15      	ldr	r2, [pc, #84]	; (80ab4 <phywhisperer_setup_pins+0x130>)
   80a5e:	2100      	movs	r1, #0
   80a60:	4810      	ldr	r0, [pc, #64]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a62:	4b15      	ldr	r3, [pc, #84]	; (80ab8 <phywhisperer_setup_pins+0x134>)
   80a64:	4798      	blx	r3
                         | SMC_CYCLE_NRD_CYCLE(4));
    smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   80a66:	2203      	movs	r2, #3
   80a68:	2100      	movs	r1, #0
   80a6a:	480e      	ldr	r0, [pc, #56]	; (80aa4 <phywhisperer_setup_pins+0x120>)
   80a6c:	4b13      	ldr	r3, [pc, #76]	; (80abc <phywhisperer_setup_pins+0x138>)
   80a6e:	4798      	blx	r3
                 | SMC_MODE_DBW_BIT_8);
}
   80a70:	bf00      	nop
   80a72:	bd80      	pop	{r7, pc}
   80a74:	000863b5 	.word	0x000863b5
   80a78:	00080461 	.word	0x00080461
   80a7c:	400e0c00 	.word	0x400e0c00
   80a80:	000808fd 	.word	0x000808fd
   80a84:	00080f75 	.word	0x00080f75
   80a88:	000855b9 	.word	0x000855b9
   80a8c:	08000001 	.word	0x08000001
   80a90:	00085ba9 	.word	0x00085ba9
   80a94:	400e0e00 	.word	0x400e0e00
   80a98:	00085cd9 	.word	0x00085cd9
   80a9c:	00085ab5 	.word	0x00085ab5
   80aa0:	01010100 	.word	0x01010100
   80aa4:	400e0000 	.word	0x400e0000
   80aa8:	00082ea1 	.word	0x00082ea1
   80aac:	01030101 	.word	0x01030101
   80ab0:	00082ecb 	.word	0x00082ecb
   80ab4:	00040002 	.word	0x00040002
   80ab8:	00082ef5 	.word	0x00082ef5
   80abc:	00082f1f 	.word	0x00082f1f

00080ac0 <hacky_delay>:

void hacky_delay(void)
{
   80ac0:	b480      	push	{r7}
   80ac2:	b083      	sub	sp, #12
   80ac4:	af00      	add	r7, sp, #0
    for (volatile uint32_t i = 0; i < 250000; i++);
   80ac6:	2300      	movs	r3, #0
   80ac8:	607b      	str	r3, [r7, #4]
   80aca:	e002      	b.n	80ad2 <hacky_delay+0x12>
   80acc:	687b      	ldr	r3, [r7, #4]
   80ace:	3301      	adds	r3, #1
   80ad0:	607b      	str	r3, [r7, #4]
   80ad2:	687b      	ldr	r3, [r7, #4]
   80ad4:	4a04      	ldr	r2, [pc, #16]	; (80ae8 <hacky_delay+0x28>)
   80ad6:	4293      	cmp	r3, r2
   80ad8:	d9f8      	bls.n	80acc <hacky_delay+0xc>
}
   80ada:	bf00      	nop
   80adc:	bf00      	nop
   80ade:	370c      	adds	r7, #12
   80ae0:	46bd      	mov	sp, r7
   80ae2:	bc80      	pop	{r7}
   80ae4:	4770      	bx	lr
   80ae6:	bf00      	nop
   80ae8:	0003d08f 	.word	0x0003d08f

00080aec <genclk_enable_config>:

static inline void genclk_enable_config(unsigned int id, enum genclk_source src, unsigned int divider)
{
   80aec:	b580      	push	{r7, lr}
   80aee:	b086      	sub	sp, #24
   80af0:	af00      	add	r7, sp, #0
   80af2:	60f8      	str	r0, [r7, #12]
   80af4:	460b      	mov	r3, r1
   80af6:	607a      	str	r2, [r7, #4]
   80af8:	72fb      	strb	r3, [r7, #11]
    struct genclk_config gcfg;

    genclk_config_defaults(&gcfg, id);
   80afa:	f107 0314 	add.w	r3, r7, #20
   80afe:	68f9      	ldr	r1, [r7, #12]
   80b00:	4618      	mov	r0, r3
   80b02:	4b0e      	ldr	r3, [pc, #56]	; (80b3c <genclk_enable_config+0x50>)
   80b04:	4798      	blx	r3
    genclk_enable_source(src);
   80b06:	7afb      	ldrb	r3, [r7, #11]
   80b08:	4618      	mov	r0, r3
   80b0a:	4b0d      	ldr	r3, [pc, #52]	; (80b40 <genclk_enable_config+0x54>)
   80b0c:	4798      	blx	r3
    genclk_config_set_source(&gcfg, src);
   80b0e:	7afa      	ldrb	r2, [r7, #11]
   80b10:	f107 0314 	add.w	r3, r7, #20
   80b14:	4611      	mov	r1, r2
   80b16:	4618      	mov	r0, r3
   80b18:	4b0a      	ldr	r3, [pc, #40]	; (80b44 <genclk_enable_config+0x58>)
   80b1a:	4798      	blx	r3
    genclk_config_set_divider(&gcfg, divider);
   80b1c:	f107 0314 	add.w	r3, r7, #20
   80b20:	6879      	ldr	r1, [r7, #4]
   80b22:	4618      	mov	r0, r3
   80b24:	4b08      	ldr	r3, [pc, #32]	; (80b48 <genclk_enable_config+0x5c>)
   80b26:	4798      	blx	r3
    genclk_enable(&gcfg, id);
   80b28:	f107 0314 	add.w	r3, r7, #20
   80b2c:	68f9      	ldr	r1, [r7, #12]
   80b2e:	4618      	mov	r0, r3
   80b30:	4b06      	ldr	r3, [pc, #24]	; (80b4c <genclk_enable_config+0x60>)
   80b32:	4798      	blx	r3
}
   80b34:	bf00      	nop
   80b36:	3718      	adds	r7, #24
   80b38:	46bd      	mov	sp, r7
   80b3a:	bd80      	pop	{r7, pc}
   80b3c:	00080619 	.word	0x00080619
   80b40:	0008072d 	.word	0x0008072d
   80b44:	00080635 	.word	0x00080635
   80b48:	000806d1 	.word	0x000806d1
   80b4c:	000806fd 	.word	0x000806fd

00080b50 <main>:

void (*pwr_list[])(void) = {phywhisperer_no_pwr, phywhisperer_5V_pwr, phywhisperer_host_pwr};

int main(void)
{
   80b50:	b580      	push	{r7, lr}
   80b52:	b086      	sub	sp, #24
   80b54:	af00      	add	r7, sp, #0
    uint32_t serial_number[4];

    // Read Device-ID from SAM3U. Do this before enabling interrupts etc.
    flash_read_unique_id(serial_number, sizeof(serial_number));
   80b56:	463b      	mov	r3, r7
   80b58:	2110      	movs	r1, #16
   80b5a:	4618      	mov	r0, r3
   80b5c:	4b3b      	ldr	r3, [pc, #236]	; (80c4c <main+0xfc>)
   80b5e:	4798      	blx	r3

    irq_initialize_vectors();
    cpu_irq_enable();
   80b60:	4b3b      	ldr	r3, [pc, #236]	; (80c50 <main+0x100>)
   80b62:	2201      	movs	r2, #1
   80b64:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   80b66:	f3bf 8f5f 	dmb	sy
}
   80b6a:	bf00      	nop
  __ASM volatile ("cpsie i");
   80b6c:	b662      	cpsie	i
}
   80b6e:	bf00      	nop

    // Initialize the sleep manager
    sleepmgr_init();
   80b70:	4b38      	ldr	r3, [pc, #224]	; (80c54 <main+0x104>)
   80b72:	4798      	blx	r3
#if !SAMD21 && !SAMR21
    sysclk_init();
   80b74:	4b38      	ldr	r3, [pc, #224]	; (80c58 <main+0x108>)
   80b76:	4798      	blx	r3
    phywhisperer_setup_pins();
   80b78:	4b38      	ldr	r3, [pc, #224]	; (80c5c <main+0x10c>)
   80b7a:	4798      	blx	r3
#else
    system_init();
#endif

	//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80b7c:	2300      	movs	r3, #0
   80b7e:	617b      	str	r3, [r7, #20]
   80b80:	e010      	b.n	80ba4 <main+0x54>
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);	
   80b82:	697b      	ldr	r3, [r7, #20]
   80b84:	00db      	lsls	r3, r3, #3
   80b86:	4a36      	ldr	r2, [pc, #216]	; (80c60 <main+0x110>)
   80b88:	1898      	adds	r0, r3, r2
   80b8a:	697b      	ldr	r3, [r7, #20]
   80b8c:	009b      	lsls	r3, r3, #2
   80b8e:	3318      	adds	r3, #24
   80b90:	443b      	add	r3, r7
   80b92:	f853 3c18 	ldr.w	r3, [r3, #-24]
   80b96:	461a      	mov	r2, r3
   80b98:	4932      	ldr	r1, [pc, #200]	; (80c64 <main+0x114>)
   80b9a:	4b33      	ldr	r3, [pc, #204]	; (80c68 <main+0x118>)
   80b9c:	4798      	blx	r3
	for(unsigned int i = 0; i < 4; i++){
   80b9e:	697b      	ldr	r3, [r7, #20]
   80ba0:	3301      	adds	r3, #1
   80ba2:	617b      	str	r3, [r7, #20]
   80ba4:	697b      	ldr	r3, [r7, #20]
   80ba6:	2b03      	cmp	r3, #3
   80ba8:	d9eb      	bls.n	80b82 <main+0x32>
	}
	usb_serial_number[32] = 0;
   80baa:	4b2d      	ldr	r3, [pc, #180]	; (80c60 <main+0x110>)
   80bac:	2200      	movs	r2, #0
   80bae:	f883 2020 	strb.w	r2, [r3, #32]

    genclk_enable_config(GENCLK_PCK_1, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
   80bb2:	2200      	movs	r2, #0
   80bb4:	210a      	movs	r1, #10
   80bb6:	2001      	movs	r0, #1
   80bb8:	4b2c      	ldr	r3, [pc, #176]	; (80c6c <main+0x11c>)
   80bba:	4798      	blx	r3
    udc_start();
   80bbc:	4b2c      	ldr	r3, [pc, #176]	; (80c70 <main+0x120>)
   80bbe:	4798      	blx	r3
    gpio_set_pin_high(LED0_GPIO);
   80bc0:	201d      	movs	r0, #29
   80bc2:	4b2c      	ldr	r3, [pc, #176]	; (80c74 <main+0x124>)
   80bc4:	4798      	blx	r3
    gpio_set_pin_low(LED1_GPIO);
   80bc6:	201f      	movs	r0, #31
   80bc8:	4b2b      	ldr	r3, [pc, #172]	; (80c78 <main+0x128>)
   80bca:	4798      	blx	r3

    phywhisperer_no_pwr();
   80bcc:	4b2b      	ldr	r3, [pc, #172]	; (80c7c <main+0x12c>)
   80bce:	4798      	blx	r3
    naeusb_register_handlers();
   80bd0:	4b2b      	ldr	r3, [pc, #172]	; (80c80 <main+0x130>)
   80bd2:	4798      	blx	r3
    openadc_register_handlers();
   80bd4:	4b2b      	ldr	r3, [pc, #172]	; (80c84 <main+0x134>)
   80bd6:	4798      	blx	r3
    phywhisperer_register_handlers();
   80bd8:	4b2b      	ldr	r3, [pc, #172]	; (80c88 <main+0x138>)
   80bda:	4798      	blx	r3
    USB_PWR_STATE = 0;
   80bdc:	4b2b      	ldr	r3, [pc, #172]	; (80c8c <main+0x13c>)
   80bde:	2200      	movs	r2, #0
   80be0:	701a      	strb	r2, [r3, #0]

    uint8_t curr_pwr_setting = 0;
   80be2:	2300      	movs	r3, #0
   80be4:	74fb      	strb	r3, [r7, #19]
    while(1) {
        sleepmgr_enter_sleep();
   80be6:	4b2a      	ldr	r3, [pc, #168]	; (80c90 <main+0x140>)
   80be8:	4798      	blx	r3
        uint8_t button_status = !(PIOA->PIO_PDSR & (1 << BUTTON_IN));
   80bea:	4b2a      	ldr	r3, [pc, #168]	; (80c94 <main+0x144>)
   80bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80bee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80bf2:	2b00      	cmp	r3, #0
   80bf4:	bf0c      	ite	eq
   80bf6:	2301      	moveq	r3, #1
   80bf8:	2300      	movne	r3, #0
   80bfa:	b2db      	uxtb	r3, r3
   80bfc:	74bb      	strb	r3, [r7, #18]
        if (button_status){
   80bfe:	7cbb      	ldrb	r3, [r7, #18]
   80c00:	2b00      	cmp	r3, #0
   80c02:	d0f0      	beq.n	80be6 <main+0x96>
            hacky_delay(); //delay to try to debounce
   80c04:	4b24      	ldr	r3, [pc, #144]	; (80c98 <main+0x148>)
   80c06:	4798      	blx	r3
            while (!(PIOA->PIO_PDSR & (1 << BUTTON_IN))); //wait for trigger to be unpressed
   80c08:	bf00      	nop
   80c0a:	4b22      	ldr	r3, [pc, #136]	; (80c94 <main+0x144>)
   80c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   80c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   80c12:	2b00      	cmp	r3, #0
   80c14:	d0f9      	beq.n	80c0a <main+0xba>

            if (USB_PWR_STATE && USB_PWR_STATE <= 2) {
   80c16:	4b1d      	ldr	r3, [pc, #116]	; (80c8c <main+0x13c>)
   80c18:	781b      	ldrb	r3, [r3, #0]
   80c1a:	2b00      	cmp	r3, #0
   80c1c:	d012      	beq.n	80c44 <main+0xf4>
   80c1e:	4b1b      	ldr	r3, [pc, #108]	; (80c8c <main+0x13c>)
   80c20:	781b      	ldrb	r3, [r3, #0]
   80c22:	2b02      	cmp	r3, #2
   80c24:	d80e      	bhi.n	80c44 <main+0xf4>
                if (pwr_st_from_io()) { //currently on
   80c26:	4b1d      	ldr	r3, [pc, #116]	; (80c9c <main+0x14c>)
   80c28:	4798      	blx	r3
   80c2a:	4603      	mov	r3, r0
   80c2c:	2b00      	cmp	r3, #0
   80c2e:	d002      	beq.n	80c36 <main+0xe6>
                    phywhisperer_no_pwr();
   80c30:	4b12      	ldr	r3, [pc, #72]	; (80c7c <main+0x12c>)
   80c32:	4798      	blx	r3
   80c34:	e006      	b.n	80c44 <main+0xf4>
                } else {
                    pwr_list[USB_PWR_STATE]();
   80c36:	4b15      	ldr	r3, [pc, #84]	; (80c8c <main+0x13c>)
   80c38:	781b      	ldrb	r3, [r3, #0]
   80c3a:	461a      	mov	r2, r3
   80c3c:	4b18      	ldr	r3, [pc, #96]	; (80ca0 <main+0x150>)
   80c3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   80c42:	4798      	blx	r3
                }
            }
            hacky_delay();
   80c44:	4b14      	ldr	r3, [pc, #80]	; (80c98 <main+0x148>)
   80c46:	4798      	blx	r3
    while(1) {
   80c48:	e7cd      	b.n	80be6 <main+0x96>
   80c4a:	bf00      	nop
   80c4c:	000829a1 	.word	0x000829a1
   80c50:	200003e0 	.word	0x200003e0
   80c54:	00080571 	.word	0x00080571
   80c58:	000851dd 	.word	0x000851dd
   80c5c:	00080985 	.word	0x00080985
   80c60:	2000025c 	.word	0x2000025c
   80c64:	0008d448 	.word	0x0008d448
   80c68:	000868ed 	.word	0x000868ed
   80c6c:	00080aed 	.word	0x00080aed
   80c70:	00081e09 	.word	0x00081e09
   80c74:	00085b49 	.word	0x00085b49
   80c78:	00085b79 	.word	0x00085b79
   80c7c:	000808bd 	.word	0x000808bd
   80c80:	00081561 	.word	0x00081561
   80c84:	00081a5d 	.word	0x00081a5d
   80c88:	00081b69 	.word	0x00081b69
   80c8c:	20000e3c 	.word	0x20000e3c
   80c90:	000805d9 	.word	0x000805d9
   80c94:	400e0c00 	.word	0x400e0c00
   80c98:	00080ac1 	.word	0x00080ac1
   80c9c:	0008091d 	.word	0x0008091d
   80ca0:	20000280 	.word	0x20000280

00080ca4 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   80ca4:	b580      	push	{r7, lr}
   80ca6:	b084      	sub	sp, #16
   80ca8:	af00      	add	r7, sp, #0
   80caa:	4603      	mov	r3, r0
   80cac:	71fb      	strb	r3, [r7, #7]
  int ret = 0;
   80cae:	2300      	movs	r3, #0
   80cb0:	60fb      	str	r3, [r7, #12]
  cpu_irq_enter_critical();
   80cb2:	4b09      	ldr	r3, [pc, #36]	; (80cd8 <FPGA_setlock+0x34>)
   80cb4:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   80cb6:	4b09      	ldr	r3, [pc, #36]	; (80cdc <FPGA_setlock+0x38>)
   80cb8:	781b      	ldrb	r3, [r3, #0]
   80cba:	b2db      	uxtb	r3, r3
   80cbc:	2b00      	cmp	r3, #0
   80cbe:	d104      	bne.n	80cca <FPGA_setlock+0x26>
  {
    ret = 1;
   80cc0:	2301      	movs	r3, #1
   80cc2:	60fb      	str	r3, [r7, #12]
    _fpga_locked = lockstatus;
   80cc4:	4a05      	ldr	r2, [pc, #20]	; (80cdc <FPGA_setlock+0x38>)
   80cc6:	79fb      	ldrb	r3, [r7, #7]
   80cc8:	7013      	strb	r3, [r2, #0]
  }
  cpu_irq_leave_critical();
   80cca:	4b05      	ldr	r3, [pc, #20]	; (80ce0 <FPGA_setlock+0x3c>)
   80ccc:	4798      	blx	r3
  return ret;
   80cce:	68fb      	ldr	r3, [r7, #12]
}
   80cd0:	4618      	mov	r0, r3
   80cd2:	3710      	adds	r7, #16
   80cd4:	46bd      	mov	sp, r7
   80cd6:	bd80      	pop	{r7, pc}
   80cd8:	000863d9 	.word	0x000863d9
   80cdc:	20000e3d 	.word	0x20000e3d
   80ce0:	00086431 	.word	0x00086431

00080ce4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
   80ce4:	b480      	push	{r7}
   80ce6:	af00      	add	r7, sp, #0
  _fpga_locked = fpga_unlocked;
   80ce8:	4b03      	ldr	r3, [pc, #12]	; (80cf8 <FPGA_releaselock+0x14>)
   80cea:	2200      	movs	r2, #0
   80cec:	701a      	strb	r2, [r3, #0]
}
   80cee:	bf00      	nop
   80cf0:	46bd      	mov	sp, r7
   80cf2:	bc80      	pop	{r7}
   80cf4:	4770      	bx	lr
   80cf6:	bf00      	nop
   80cf8:	20000e3d 	.word	0x20000e3d

00080cfc <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
   80cfc:	b480      	push	{r7}
   80cfe:	af00      	add	r7, sp, #0
  return _fpga_locked;
   80d00:	4b03      	ldr	r3, [pc, #12]	; (80d10 <FPGA_lockstatus+0x14>)
   80d02:	781b      	ldrb	r3, [r3, #0]
   80d04:	b2db      	uxtb	r3, r3
}
   80d06:	4618      	mov	r0, r3
   80d08:	46bd      	mov	sp, r7
   80d0a:	bc80      	pop	{r7}
   80d0c:	4770      	bx	lr
   80d0e:	bf00      	nop
   80d10:	20000e3d 	.word	0x20000e3d

00080d14 <FPGA_setaddr>:
#ifndef PIN_EBI_USB_SPARE1
#define PIN_EBI_USB_SPARE1 FPGA_ALE_GPIO
#endif

void FPGA_setaddr(uint32_t addr)
{
   80d14:	b580      	push	{r7, lr}
   80d16:	b082      	sub	sp, #8
   80d18:	af00      	add	r7, sp, #0
   80d1a:	6078      	str	r0, [r7, #4]
	#if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610)
	//husky
	  FPGA_ADDR_PORT->PIO_ODSR = (FPGA_ADDR_PORT->PIO_ODSR & 0x40) | (addr & 0x3F) | ((addr & 0xC0) << 1);
   80d1c:	4b0c      	ldr	r3, [pc, #48]	; (80d50 <FPGA_setaddr+0x3c>)
   80d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   80d20:	f003 0240 	and.w	r2, r3, #64	; 0x40
   80d24:	687b      	ldr	r3, [r7, #4]
   80d26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   80d2a:	431a      	orrs	r2, r3
   80d2c:	687b      	ldr	r3, [r7, #4]
   80d2e:	005b      	lsls	r3, r3, #1
   80d30:	f403 73c0 	and.w	r3, r3, #384	; 0x180
   80d34:	4906      	ldr	r1, [pc, #24]	; (80d50 <FPGA_setaddr+0x3c>)
   80d36:	4313      	orrs	r3, r2
   80d38:	638b      	str	r3, [r1, #56]	; 0x38
	  gpio_set_pin_low(PIN_EBI_USB_SPARE1);
   80d3a:	2031      	movs	r0, #49	; 0x31
   80d3c:	4b05      	ldr	r3, [pc, #20]	; (80d54 <FPGA_setaddr+0x40>)
   80d3e:	4798      	blx	r3
	  gpio_set_pin_high(PIN_EBI_USB_SPARE1);
   80d40:	2031      	movs	r0, #49	; 0x31
   80d42:	4b05      	ldr	r3, [pc, #20]	; (80d58 <FPGA_setaddr+0x44>)
   80d44:	4798      	blx	r3
	#else
			pio_sync_output_write(FPGA_ADDR_PORT, addr);
			gpio_set_pin_low(FPGA_ALE_GPIO);
			gpio_set_pin_high(FPGA_ALE_GPIO);
	#endif
}
   80d46:	bf00      	nop
   80d48:	3708      	adds	r7, #8
   80d4a:	46bd      	mov	sp, r7
   80d4c:	bd80      	pop	{r7, pc}
   80d4e:	bf00      	nop
   80d50:	400e0e00 	.word	0x400e0e00
   80d54:	00085b79 	.word	0x00085b79
   80d58:	00085b49 	.word	0x00085b49

00080d5c <osc_get_rate>:
{
   80d5c:	b480      	push	{r7}
   80d5e:	b083      	sub	sp, #12
   80d60:	af00      	add	r7, sp, #0
   80d62:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   80d64:	687b      	ldr	r3, [r7, #4]
   80d66:	2b07      	cmp	r3, #7
   80d68:	d823      	bhi.n	80db2 <osc_get_rate+0x56>
   80d6a:	a201      	add	r2, pc, #4	; (adr r2, 80d70 <osc_get_rate+0x14>)
   80d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   80d70:	00080d91 	.word	0x00080d91
   80d74:	00080d97 	.word	0x00080d97
   80d78:	00080d9b 	.word	0x00080d9b
   80d7c:	00080d9f 	.word	0x00080d9f
   80d80:	00080da3 	.word	0x00080da3
   80d84:	00080da7 	.word	0x00080da7
   80d88:	00080dab 	.word	0x00080dab
   80d8c:	00080daf 	.word	0x00080daf
		return OSC_SLCK_32K_RC_HZ;
   80d90:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   80d94:	e00e      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   80d96:	2300      	movs	r3, #0
   80d98:	e00c      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   80d9a:	2300      	movs	r3, #0
   80d9c:	e00a      	b.n	80db4 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   80d9e:	4b08      	ldr	r3, [pc, #32]	; (80dc0 <osc_get_rate+0x64>)
   80da0:	e008      	b.n	80db4 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   80da2:	4b08      	ldr	r3, [pc, #32]	; (80dc4 <osc_get_rate+0x68>)
   80da4:	e006      	b.n	80db4 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   80da6:	4b08      	ldr	r3, [pc, #32]	; (80dc8 <osc_get_rate+0x6c>)
   80da8:	e004      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   80daa:	4b07      	ldr	r3, [pc, #28]	; (80dc8 <osc_get_rate+0x6c>)
   80dac:	e002      	b.n	80db4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   80dae:	4b06      	ldr	r3, [pc, #24]	; (80dc8 <osc_get_rate+0x6c>)
   80db0:	e000      	b.n	80db4 <osc_get_rate+0x58>
	return 0;
   80db2:	2300      	movs	r3, #0
}
   80db4:	4618      	mov	r0, r3
   80db6:	370c      	adds	r7, #12
   80db8:	46bd      	mov	sp, r7
   80dba:	bc80      	pop	{r7}
   80dbc:	4770      	bx	lr
   80dbe:	bf00      	nop
   80dc0:	003d0900 	.word	0x003d0900
   80dc4:	007a1200 	.word	0x007a1200
   80dc8:	00b71b00 	.word	0x00b71b00

00080dcc <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern uint32_t sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
   80dcc:	b580      	push	{r7, lr}
   80dce:	af00      	add	r7, sp, #0
	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
		return OSC_MAINCK_BYPASS_HZ;
	}
#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		return pll_get_default_rate(0);
   80dd0:	2006      	movs	r0, #6
   80dd2:	4b03      	ldr	r3, [pc, #12]	; (80de0 <sysclk_get_main_hz+0x14>)
   80dd4:	4798      	blx	r3
   80dd6:	4603      	mov	r3, r0
   80dd8:	011b      	lsls	r3, r3, #4
#endif
	else {
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
   80dda:	4618      	mov	r0, r3
   80ddc:	bd80      	pop	{r7, pc}
   80dde:	bf00      	nop
   80de0:	00080d5d 	.word	0x00080d5d

00080de4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
   80de4:	b580      	push	{r7, lr}
   80de6:	af00      	add	r7, sp, #0
	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
	/* prescaler, not an immediate value. */
	return sysclk_get_main_hz() /
   80de8:	4b02      	ldr	r3, [pc, #8]	; (80df4 <sysclk_get_cpu_hz+0x10>)
   80dea:	4798      	blx	r3
   80dec:	4603      	mov	r3, r0
   80dee:	085b      	lsrs	r3, r3, #1
		((CONFIG_SYSCLK_PRES == SYSCLK_PRES_3) ? 3 :
			(1 << (CONFIG_SYSCLK_PRES >> PMC_MCKR_PRES_Pos)));
}
   80df0:	4618      	mov	r0, r3
   80df2:	bd80      	pop	{r7, pc}
   80df4:	00080dcd 	.word	0x00080dcd

00080df8 <sysclk_enable_peripheral_clock>:
 * \brief Enable a peripheral's clock.
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
   80df8:	b580      	push	{r7, lr}
   80dfa:	b082      	sub	sp, #8
   80dfc:	af00      	add	r7, sp, #0
   80dfe:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   80e00:	6878      	ldr	r0, [r7, #4]
   80e02:	4b03      	ldr	r3, [pc, #12]	; (80e10 <sysclk_enable_peripheral_clock+0x18>)
   80e04:	4798      	blx	r3
}
   80e06:	bf00      	nop
   80e08:	3708      	adds	r7, #8
   80e0a:	46bd      	mov	sp, r7
   80e0c:	bd80      	pop	{r7, pc}
   80e0e:	bf00      	nop
   80e10:	000855b9 	.word	0x000855b9

00080e14 <spi_reset>:
 * \brief Reset SPI and set it to Slave mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_reset(Spi *p_spi)
{
   80e14:	b480      	push	{r7}
   80e16:	b083      	sub	sp, #12
   80e18:	af00      	add	r7, sp, #0
   80e1a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SWRST;
   80e1c:	687b      	ldr	r3, [r7, #4]
   80e1e:	2280      	movs	r2, #128	; 0x80
   80e20:	601a      	str	r2, [r3, #0]
}
   80e22:	bf00      	nop
   80e24:	370c      	adds	r7, #12
   80e26:	46bd      	mov	sp, r7
   80e28:	bc80      	pop	{r7}
   80e2a:	4770      	bx	lr

00080e2c <spi_enable>:
 * \brief Enable SPI.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_enable(Spi *p_spi)
{
   80e2c:	b480      	push	{r7}
   80e2e:	b083      	sub	sp, #12
   80e30:	af00      	add	r7, sp, #0
   80e32:	6078      	str	r0, [r7, #4]
	p_spi->SPI_CR = SPI_CR_SPIEN;
   80e34:	687b      	ldr	r3, [r7, #4]
   80e36:	2201      	movs	r2, #1
   80e38:	601a      	str	r2, [r3, #0]
}
   80e3a:	bf00      	nop
   80e3c:	370c      	adds	r7, #12
   80e3e:	46bd      	mov	sp, r7
   80e40:	bc80      	pop	{r7}
   80e42:	4770      	bx	lr

00080e44 <spi_set_master_mode>:
 * \brief Set SPI to Master mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_set_master_mode(Spi *p_spi)
{
   80e44:	b480      	push	{r7}
   80e46:	b083      	sub	sp, #12
   80e48:	af00      	add	r7, sp, #0
   80e4a:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MSTR;
   80e4c:	687b      	ldr	r3, [r7, #4]
   80e4e:	685b      	ldr	r3, [r3, #4]
   80e50:	f043 0201 	orr.w	r2, r3, #1
   80e54:	687b      	ldr	r3, [r7, #4]
   80e56:	605a      	str	r2, [r3, #4]
}
   80e58:	bf00      	nop
   80e5a:	370c      	adds	r7, #12
   80e5c:	46bd      	mov	sp, r7
   80e5e:	bc80      	pop	{r7}
   80e60:	4770      	bx	lr

00080e62 <spi_disable_mode_fault_detect>:
 * \brief Disable Mode Fault Detection.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_mode_fault_detect(Spi *p_spi)
{
   80e62:	b480      	push	{r7}
   80e64:	b083      	sub	sp, #12
   80e66:	af00      	add	r7, sp, #0
   80e68:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR |= SPI_MR_MODFDIS;
   80e6a:	687b      	ldr	r3, [r7, #4]
   80e6c:	685b      	ldr	r3, [r3, #4]
   80e6e:	f043 0210 	orr.w	r2, r3, #16
   80e72:	687b      	ldr	r3, [r7, #4]
   80e74:	605a      	str	r2, [r3, #4]
}
   80e76:	bf00      	nop
   80e78:	370c      	adds	r7, #12
   80e7a:	46bd      	mov	sp, r7
   80e7c:	bc80      	pop	{r7}
   80e7e:	4770      	bx	lr

00080e80 <spi_disable_loopback>:
 * \brief Disable loopback mode.
 *
 * \param p_spi Pointer to an SPI instance.
 */
static inline void spi_disable_loopback(Spi *p_spi)
{
   80e80:	b480      	push	{r7}
   80e82:	b083      	sub	sp, #12
   80e84:	af00      	add	r7, sp, #0
   80e86:	6078      	str	r0, [r7, #4]
	p_spi->SPI_MR &= (~SPI_MR_LLB);
   80e88:	687b      	ldr	r3, [r7, #4]
   80e8a:	685b      	ldr	r3, [r3, #4]
   80e8c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
   80e90:	687b      	ldr	r3, [r7, #4]
   80e92:	605a      	str	r2, [r3, #4]
}
   80e94:	bf00      	nop
   80e96:	370c      	adds	r7, #12
   80e98:	46bd      	mov	sp, r7
   80e9a:	bc80      	pop	{r7}
   80e9c:	4770      	bx	lr
   80e9e:	0000      	movs	r0, r0

00080ea0 <fpga_program_spi_setup1>:
#include <asf.h>
#include "fpga_program.h"
#include "spi.h"

void fpga_program_spi_setup1(uint32_t prog_freq)
{
   80ea0:	b580      	push	{r7, lr}
   80ea2:	b082      	sub	sp, #8
   80ea4:	af00      	add	r7, sp, #0
   80ea6:	6078      	str	r0, [r7, #4]
	gpio_configure_pin(AVRISP_MOSI_GPIO, AVRISP_MOSI_FLAGS);
	gpio_configure_pin(AVRISP_SCK_GPIO, AVRISP_SCK_FLAGS);
	usart_enable_tx(AVRISP_USART);
	usart_enable_rx(AVRISP_USART);
	#else
	spi_enable_clock(SPI);
   80ea8:	481b      	ldr	r0, [pc, #108]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80eaa:	4b1c      	ldr	r3, [pc, #112]	; (80f1c <fpga_program_spi_setup1+0x7c>)
   80eac:	4798      	blx	r3
	spi_reset(SPI);
   80eae:	481a      	ldr	r0, [pc, #104]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80eb0:	4b1b      	ldr	r3, [pc, #108]	; (80f20 <fpga_program_spi_setup1+0x80>)
   80eb2:	4798      	blx	r3
	spi_set_master_mode(SPI);
   80eb4:	4818      	ldr	r0, [pc, #96]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80eb6:	4b1b      	ldr	r3, [pc, #108]	; (80f24 <fpga_program_spi_setup1+0x84>)
   80eb8:	4798      	blx	r3
	spi_disable_mode_fault_detect(SPI);
   80eba:	4817      	ldr	r0, [pc, #92]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80ebc:	4b1a      	ldr	r3, [pc, #104]	; (80f28 <fpga_program_spi_setup1+0x88>)
   80ebe:	4798      	blx	r3
	spi_disable_loopback(SPI);
   80ec0:	4815      	ldr	r0, [pc, #84]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80ec2:	4b1a      	ldr	r3, [pc, #104]	; (80f2c <fpga_program_spi_setup1+0x8c>)
   80ec4:	4798      	blx	r3

	spi_set_clock_polarity(SPI, 0, 0);
   80ec6:	2200      	movs	r2, #0
   80ec8:	2100      	movs	r1, #0
   80eca:	4813      	ldr	r0, [pc, #76]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80ecc:	4b18      	ldr	r3, [pc, #96]	; (80f30 <fpga_program_spi_setup1+0x90>)
   80ece:	4798      	blx	r3
	spi_set_clock_phase(SPI, 0, 1);
   80ed0:	2201      	movs	r2, #1
   80ed2:	2100      	movs	r1, #0
   80ed4:	4810      	ldr	r0, [pc, #64]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80ed6:	4b17      	ldr	r3, [pc, #92]	; (80f34 <fpga_program_spi_setup1+0x94>)
   80ed8:	4798      	blx	r3
	spi_set_baudrate_div(SPI, 0, spi_calc_baudrate_div(prog_freq, sysclk_get_cpu_hz()));
   80eda:	4b17      	ldr	r3, [pc, #92]	; (80f38 <fpga_program_spi_setup1+0x98>)
   80edc:	4798      	blx	r3
   80ede:	4603      	mov	r3, r0
   80ee0:	4619      	mov	r1, r3
   80ee2:	6878      	ldr	r0, [r7, #4]
   80ee4:	4b15      	ldr	r3, [pc, #84]	; (80f3c <fpga_program_spi_setup1+0x9c>)
   80ee6:	4798      	blx	r3
   80ee8:	4603      	mov	r3, r0
   80eea:	b2db      	uxtb	r3, r3
   80eec:	461a      	mov	r2, r3
   80eee:	2100      	movs	r1, #0
   80ef0:	4809      	ldr	r0, [pc, #36]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80ef2:	4b13      	ldr	r3, [pc, #76]	; (80f40 <fpga_program_spi_setup1+0xa0>)
   80ef4:	4798      	blx	r3

	spi_enable(SPI);
   80ef6:	4808      	ldr	r0, [pc, #32]	; (80f18 <fpga_program_spi_setup1+0x78>)
   80ef8:	4b12      	ldr	r3, [pc, #72]	; (80f44 <fpga_program_spi_setup1+0xa4>)
   80efa:	4798      	blx	r3

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
   80efc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f00:	200e      	movs	r0, #14
   80f02:	4b11      	ldr	r3, [pc, #68]	; (80f48 <fpga_program_spi_setup1+0xa8>)
   80f04:	4798      	blx	r3
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
   80f06:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80f0a:	200f      	movs	r0, #15
   80f0c:	4b0e      	ldr	r3, [pc, #56]	; (80f48 <fpga_program_spi_setup1+0xa8>)
   80f0e:	4798      	blx	r3
	#endif

}
   80f10:	bf00      	nop
   80f12:	3708      	adds	r7, #8
   80f14:	46bd      	mov	sp, r7
   80f16:	bd80      	pop	{r7, pc}
   80f18:	40008000 	.word	0x40008000
   80f1c:	00082ce1 	.word	0x00082ce1
   80f20:	00080e15 	.word	0x00080e15
   80f24:	00080e45 	.word	0x00080e45
   80f28:	00080e63 	.word	0x00080e63
   80f2c:	00080e81 	.word	0x00080e81
   80f30:	00082d7d 	.word	0x00082d7d
   80f34:	00082dcb 	.word	0x00082dcb
   80f38:	00080de5 	.word	0x00080de5
   80f3c:	00082e19 	.word	0x00082e19
   80f40:	00082e53 	.word	0x00082e53
   80f44:	00080e2d 	.word	0x00080e2d
   80f48:	00085ba9 	.word	0x00085ba9

00080f4c <fpga_program_spi_sendbyte>:

void fpga_program_spi_sendbyte(uint8_t databyte)
{
   80f4c:	b590      	push	{r4, r7, lr}
   80f4e:	b083      	sub	sp, #12
   80f50:	af00      	add	r7, sp, #0
   80f52:	4603      	mov	r3, r0
   80f54:	71fb      	strb	r3, [r7, #7]
	#if AVRISP_USEUART
	usart_putchar(AVRISP_USART, databyte);
	#else
	spi_write(SPI, databyte, 0, 0);
   80f56:	79fb      	ldrb	r3, [r7, #7]
   80f58:	b299      	uxth	r1, r3
   80f5a:	2300      	movs	r3, #0
   80f5c:	2200      	movs	r2, #0
   80f5e:	4803      	ldr	r0, [pc, #12]	; (80f6c <fpga_program_spi_sendbyte+0x20>)
   80f60:	4c03      	ldr	r4, [pc, #12]	; (80f70 <fpga_program_spi_sendbyte+0x24>)
   80f62:	47a0      	blx	r4
	#endif
}
   80f64:	bf00      	nop
   80f66:	370c      	adds	r7, #12
   80f68:	46bd      	mov	sp, r7
   80f6a:	bd90      	pop	{r4, r7, pc}
   80f6c:	40008000 	.word	0x40008000
   80f70:	00082cfd 	.word	0x00082cfd

00080f74 <fpga_program_init>:

/* FPGA Programming: Init pins, set to standby state */
void fpga_program_init(void)
{
   80f74:	b580      	push	{r7, lr}
   80f76:	af00      	add	r7, sp, #0
    FPGA_NPROG_SETUP();
   80f78:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f7c:	2014      	movs	r0, #20
   80f7e:	4b03      	ldr	r3, [pc, #12]	; (80f8c <fpga_program_init+0x18>)
   80f80:	4798      	blx	r3
    FPGA_NPROG_HIGH();
   80f82:	2014      	movs	r0, #20
   80f84:	4b02      	ldr	r3, [pc, #8]	; (80f90 <fpga_program_init+0x1c>)
   80f86:	4798      	blx	r3
}
   80f88:	bf00      	nop
   80f8a:	bd80      	pop	{r7, pc}
   80f8c:	00085ba9 	.word	0x00085ba9
   80f90:	00085b49 	.word	0x00085b49

00080f94 <fpga_program_setup1>:

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   80f94:	b580      	push	{r7, lr}
   80f96:	b086      	sub	sp, #24
   80f98:	af00      	add	r7, sp, #0
   80f9a:	6078      	str	r0, [r7, #4]
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   80f9c:	2014      	movs	r0, #20
   80f9e:	4b15      	ldr	r3, [pc, #84]	; (80ff4 <fpga_program_setup1+0x60>)
   80fa0:	4798      	blx	r3

#if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610) || (USB_DEVICE_PRODUCT_ID == 0xC310)
    
    usart_spi_opt_t spiopts;
    spiopts.baudrate = prog_freq;
   80fa2:	687b      	ldr	r3, [r7, #4]
   80fa4:	60bb      	str	r3, [r7, #8]
    spiopts.char_length = US_MR_CHRL_8_BIT;
   80fa6:	23c0      	movs	r3, #192	; 0xc0
   80fa8:	60fb      	str	r3, [r7, #12]
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   80faa:	2300      	movs	r3, #0
   80fac:	617b      	str	r3, [r7, #20]
    spiopts.spi_mode = SPI_MODE_0;
   80fae:	2300      	movs	r3, #0
   80fb0:	613b      	str	r3, [r7, #16]

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
   80fb2:	200d      	movs	r0, #13
   80fb4:	4b10      	ldr	r3, [pc, #64]	; (80ff8 <fpga_program_setup1+0x64>)
   80fb6:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   80fb8:	4b10      	ldr	r3, [pc, #64]	; (80ffc <fpga_program_setup1+0x68>)
   80fba:	4798      	blx	r3
   80fbc:	4602      	mov	r2, r0
   80fbe:	f107 0308 	add.w	r3, r7, #8
   80fc2:	4619      	mov	r1, r3
   80fc4:	480e      	ldr	r0, [pc, #56]	; (81000 <fpga_program_setup1+0x6c>)
   80fc6:	4b0f      	ldr	r3, [pc, #60]	; (81004 <fpga_program_setup1+0x70>)
   80fc8:	4798      	blx	r3
    FPGA_DO_SETUP();
   80fca:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80fce:	2012      	movs	r0, #18
   80fd0:	4b0d      	ldr	r3, [pc, #52]	; (81008 <fpga_program_setup1+0x74>)
   80fd2:	4798      	blx	r3
    FPGA_CCLK_SETUP();
   80fd4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80fd8:	2011      	movs	r0, #17
   80fda:	4b0b      	ldr	r3, [pc, #44]	; (81008 <fpga_program_setup1+0x74>)
   80fdc:	4798      	blx	r3

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   80fde:	4b0b      	ldr	r3, [pc, #44]	; (8100c <fpga_program_setup1+0x78>)
   80fe0:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
   80fe4:	605a      	str	r2, [r3, #4]
    usart_enable_tx(FPGA_PROG_USART);
   80fe6:	4806      	ldr	r0, [pc, #24]	; (81000 <fpga_program_setup1+0x6c>)
   80fe8:	4b09      	ldr	r3, [pc, #36]	; (81010 <fpga_program_setup1+0x7c>)
   80fea:	4798      	blx	r3

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
	#endif
#endif
}
   80fec:	bf00      	nop
   80fee:	3718      	adds	r7, #24
   80ff0:	46bd      	mov	sp, r7
   80ff2:	bd80      	pop	{r7, pc}
   80ff4:	00085b79 	.word	0x00085b79
   80ff8:	00080df9 	.word	0x00080df9
   80ffc:	00080de5 	.word	0x00080de5
   81000:	40090000 	.word	0x40090000
   81004:	00082aad 	.word	0x00082aad
   81008:	00085ba9 	.word	0x00085ba9
   8100c:	400e0c00 	.word	0x400e0c00
   81010:	00082bbd 	.word	0x00082bbd

00081014 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
   81014:	b580      	push	{r7, lr}
   81016:	af00      	add	r7, sp, #0
    FPGA_NPROG_HIGH();
   81018:	2014      	movs	r0, #20
   8101a:	4b02      	ldr	r3, [pc, #8]	; (81024 <fpga_program_setup2+0x10>)
   8101c:	4798      	blx	r3
}
   8101e:	bf00      	nop
   81020:	bd80      	pop	{r7, pc}
   81022:	bf00      	nop
   81024:	00085b49 	.word	0x00085b49

00081028 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   81028:	b580      	push	{r7, lr}
   8102a:	b082      	sub	sp, #8
   8102c:	af00      	add	r7, sp, #0
   8102e:	4603      	mov	r3, r0
   81030:	71fb      	strb	r3, [r7, #7]
    #if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610)
	//For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   81032:	79fb      	ldrb	r3, [r7, #7]
   81034:	4619      	mov	r1, r3
   81036:	4803      	ldr	r0, [pc, #12]	; (81044 <fpga_program_sendbyte+0x1c>)
   81038:	4b03      	ldr	r3, [pc, #12]	; (81048 <fpga_program_sendbyte+0x20>)
   8103a:	4798      	blx	r3
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
		#endif
	#endif
}
   8103c:	bf00      	nop
   8103e:	3708      	adds	r7, #8
   81040:	46bd      	mov	sp, r7
   81042:	bd80      	pop	{r7, pc}
   81044:	40090000 	.word	0x40090000
   81048:	00082c53 	.word	0x00082c53

0008104c <naeusb_add_in_handler>:
{
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
   8104c:	b480      	push	{r7}
   8104e:	b083      	sub	sp, #12
   81050:	af00      	add	r7, sp, #0
   81052:	6078      	str	r0, [r7, #4]
    if (naeusb_num_in_handlers < 16) {
   81054:	4b0b      	ldr	r3, [pc, #44]	; (81084 <naeusb_add_in_handler+0x38>)
   81056:	781b      	ldrb	r3, [r3, #0]
   81058:	2b0f      	cmp	r3, #15
   8105a:	d80c      	bhi.n	81076 <naeusb_add_in_handler+0x2a>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   8105c:	4b09      	ldr	r3, [pc, #36]	; (81084 <naeusb_add_in_handler+0x38>)
   8105e:	781b      	ldrb	r3, [r3, #0]
   81060:	1c5a      	adds	r2, r3, #1
   81062:	b2d1      	uxtb	r1, r2
   81064:	4a07      	ldr	r2, [pc, #28]	; (81084 <naeusb_add_in_handler+0x38>)
   81066:	7011      	strb	r1, [r2, #0]
   81068:	4619      	mov	r1, r3
   8106a:	4a07      	ldr	r2, [pc, #28]	; (81088 <naeusb_add_in_handler+0x3c>)
   8106c:	687b      	ldr	r3, [r7, #4]
   8106e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        return true;
   81072:	2301      	movs	r3, #1
   81074:	e000      	b.n	81078 <naeusb_add_in_handler+0x2c>
    }
    return false;
   81076:	2300      	movs	r3, #0
    
}
   81078:	4618      	mov	r0, r3
   8107a:	370c      	adds	r7, #12
   8107c:	46bd      	mov	sp, r7
   8107e:	bc80      	pop	{r7}
   81080:	4770      	bx	lr
   81082:	bf00      	nop
   81084:	20000e80 	.word	0x20000e80
   81088:	20000e40 	.word	0x20000e40

0008108c <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
   8108c:	b480      	push	{r7}
   8108e:	b083      	sub	sp, #12
   81090:	af00      	add	r7, sp, #0
   81092:	6078      	str	r0, [r7, #4]
    if (naeusb_num_out_handlers < 16) {
   81094:	4b0b      	ldr	r3, [pc, #44]	; (810c4 <naeusb_add_out_handler+0x38>)
   81096:	781b      	ldrb	r3, [r3, #0]
   81098:	2b0f      	cmp	r3, #15
   8109a:	d80c      	bhi.n	810b6 <naeusb_add_out_handler+0x2a>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   8109c:	4b09      	ldr	r3, [pc, #36]	; (810c4 <naeusb_add_out_handler+0x38>)
   8109e:	781b      	ldrb	r3, [r3, #0]
   810a0:	1c5a      	adds	r2, r3, #1
   810a2:	b2d1      	uxtb	r1, r2
   810a4:	4a07      	ldr	r2, [pc, #28]	; (810c4 <naeusb_add_out_handler+0x38>)
   810a6:	7011      	strb	r1, [r2, #0]
   810a8:	4619      	mov	r1, r3
   810aa:	4a07      	ldr	r2, [pc, #28]	; (810c8 <naeusb_add_out_handler+0x3c>)
   810ac:	687b      	ldr	r3, [r7, #4]
   810ae:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        return true;
   810b2:	2301      	movs	r3, #1
   810b4:	e000      	b.n	810b8 <naeusb_add_out_handler+0x2c>
    }
    return false;
   810b6:	2300      	movs	r3, #0
    
}
   810b8:	4618      	mov	r0, r3
   810ba:	370c      	adds	r7, #12
   810bc:	46bd      	mov	sp, r7
   810be:	bc80      	pop	{r7}
   810c0:	4770      	bx	lr
   810c2:	bf00      	nop
   810c4:	20000ec4 	.word	0x20000ec4
   810c8:	20000e84 	.word	0x20000e84

000810cc <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
   810cc:	b580      	push	{r7, lr}
   810ce:	af00      	add	r7, sp, #0
	active = false;
   810d0:	4b03      	ldr	r3, [pc, #12]	; (810e0 <main_suspend_action+0x14>)
   810d2:	2200      	movs	r2, #0
   810d4:	701a      	strb	r2, [r3, #0]
	ui_powerdown();
   810d6:	4b03      	ldr	r3, [pc, #12]	; (810e4 <main_suspend_action+0x18>)
   810d8:	4798      	blx	r3
}
   810da:	bf00      	nop
   810dc:	bd80      	pop	{r7, pc}
   810de:	bf00      	nop
   810e0:	20000ec5 	.word	0x20000ec5
   810e4:	0008664d 	.word	0x0008664d

000810e8 <main_resume_action>:

void main_resume_action(void)
{
   810e8:	b580      	push	{r7, lr}
   810ea:	af00      	add	r7, sp, #0
    ui_wakeup();
   810ec:	4b01      	ldr	r3, [pc, #4]	; (810f4 <main_resume_action+0xc>)
   810ee:	4798      	blx	r3
}
   810f0:	bf00      	nop
   810f2:	bd80      	pop	{r7, pc}
   810f4:	00086665 	.word	0x00086665

000810f8 <main_sof_action>:

void main_sof_action(void)
{
   810f8:	b580      	push	{r7, lr}
   810fa:	af00      	add	r7, sp, #0
    if (!main_b_vendor_enable)
   810fc:	4b08      	ldr	r3, [pc, #32]	; (81120 <main_sof_action+0x28>)
   810fe:	781b      	ldrb	r3, [r3, #0]
   81100:	b2db      	uxtb	r3, r3
   81102:	f083 0301 	eor.w	r3, r3, #1
   81106:	b2db      	uxtb	r3, r3
   81108:	2b00      	cmp	r3, #0
   8110a:	d106      	bne.n	8111a <main_sof_action+0x22>
        return;
    ui_process(udd_get_frame_number());
   8110c:	4b05      	ldr	r3, [pc, #20]	; (81124 <main_sof_action+0x2c>)
   8110e:	4798      	blx	r3
   81110:	4603      	mov	r3, r0
   81112:	4618      	mov	r0, r3
   81114:	4b04      	ldr	r3, [pc, #16]	; (81128 <main_sof_action+0x30>)
   81116:	4798      	blx	r3
   81118:	e000      	b.n	8111c <main_sof_action+0x24>
        return;
   8111a:	bf00      	nop
}
   8111c:	bd80      	pop	{r7, pc}
   8111e:	bf00      	nop
   81120:	20000290 	.word	0x20000290
   81124:	000835e9 	.word	0x000835e9
   81128:	00086679 	.word	0x00086679

0008112c <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   8112c:	b580      	push	{r7, lr}
   8112e:	af00      	add	r7, sp, #0
    active = true;
   81130:	4b07      	ldr	r3, [pc, #28]	; (81150 <main_vendor_enable+0x24>)
   81132:	2201      	movs	r2, #1
   81134:	701a      	strb	r2, [r3, #0]
    main_b_vendor_enable = true;
   81136:	4b07      	ldr	r3, [pc, #28]	; (81154 <main_vendor_enable+0x28>)
   81138:	2201      	movs	r2, #1
   8113a:	701a      	strb	r2, [r3, #0]
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   8113c:	4a06      	ldr	r2, [pc, #24]	; (81158 <main_vendor_enable+0x2c>)
   8113e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81142:	4806      	ldr	r0, [pc, #24]	; (8115c <main_vendor_enable+0x30>)
   81144:	4b06      	ldr	r3, [pc, #24]	; (81160 <main_vendor_enable+0x34>)
   81146:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
   81148:	2301      	movs	r3, #1
}
   8114a:	4618      	mov	r0, r3
   8114c:	bd80      	pop	{r7, pc}
   8114e:	bf00      	nop
   81150:	20000ec5 	.word	0x20000ec5
   81154:	20000290 	.word	0x20000290
   81158:	00081809 	.word	0x00081809
   8115c:	20000f48 	.word	0x20000f48
   81160:	000857ed 	.word	0x000857ed

00081164 <main_vendor_disable>:

void main_vendor_disable(void)
{
   81164:	b480      	push	{r7}
   81166:	af00      	add	r7, sp, #0
    main_b_vendor_enable = false;
   81168:	4b03      	ldr	r3, [pc, #12]	; (81178 <main_vendor_disable+0x14>)
   8116a:	2200      	movs	r2, #0
   8116c:	701a      	strb	r2, [r3, #0]
}
   8116e:	bf00      	nop
   81170:	46bd      	mov	sp, r7
   81172:	bc80      	pop	{r7}
   81174:	4770      	bx	lr
   81176:	bf00      	nop
   81178:	20000290 	.word	0x20000290

0008117c <main_setup_out_received>:

bool main_setup_out_received(void)
{
   8117c:	b580      	push	{r7, lr}
   8117e:	b082      	sub	sp, #8
   81180:	af00      	add	r7, sp, #0
    bool handler_status = false;
   81182:	2300      	movs	r3, #0
   81184:	71bb      	strb	r3, [r7, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   81186:	4b13      	ldr	r3, [pc, #76]	; (811d4 <main_setup_out_received+0x58>)
   81188:	4a13      	ldr	r2, [pc, #76]	; (811d8 <main_setup_out_received+0x5c>)
   8118a:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8118c:	4b11      	ldr	r3, [pc, #68]	; (811d4 <main_setup_out_received+0x58>)
   8118e:	88db      	ldrh	r3, [r3, #6]
   81190:	2b40      	cmp	r3, #64	; 0x40
   81192:	bf28      	it	cs
   81194:	2340      	movcs	r3, #64	; 0x40
   81196:	b29a      	uxth	r2, r3
   81198:	4b0e      	ldr	r3, [pc, #56]	; (811d4 <main_setup_out_received+0x58>)
   8119a:	819a      	strh	r2, [r3, #12]

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8119c:	4b0f      	ldr	r3, [pc, #60]	; (811dc <main_setup_out_received+0x60>)
   8119e:	781b      	ldrb	r3, [r3, #0]
   811a0:	71fb      	strb	r3, [r7, #7]
   811a2:	e00f      	b.n	811c4 <main_setup_out_received+0x48>
        handler_status = naeusb_out_request_handlers[i-1]();
   811a4:	79fb      	ldrb	r3, [r7, #7]
   811a6:	3b01      	subs	r3, #1
   811a8:	4a0d      	ldr	r2, [pc, #52]	; (811e0 <main_setup_out_received+0x64>)
   811aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   811ae:	4798      	blx	r3
   811b0:	4603      	mov	r3, r0
   811b2:	71bb      	strb	r3, [r7, #6]
        if (handler_status == true) {
   811b4:	79bb      	ldrb	r3, [r7, #6]
   811b6:	2b00      	cmp	r3, #0
   811b8:	d001      	beq.n	811be <main_setup_out_received+0x42>
            return true;
   811ba:	2301      	movs	r3, #1
   811bc:	e006      	b.n	811cc <main_setup_out_received+0x50>
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   811be:	79fb      	ldrb	r3, [r7, #7]
   811c0:	3b01      	subs	r3, #1
   811c2:	71fb      	strb	r3, [r7, #7]
   811c4:	79fb      	ldrb	r3, [r7, #7]
   811c6:	2b00      	cmp	r3, #0
   811c8:	d1ec      	bne.n	811a4 <main_setup_out_received+0x28>
        }
    }

    return false;
   811ca:	2300      	movs	r3, #0

}
   811cc:	4618      	mov	r0, r3
   811ce:	3708      	adds	r7, #8
   811d0:	46bd      	mov	sp, r7
   811d2:	bd80      	pop	{r7, pc}
   811d4:	200013dc 	.word	0x200013dc
   811d8:	20000ec8 	.word	0x20000ec8
   811dc:	20000ec4 	.word	0x20000ec4
   811e0:	20000e84 	.word	0x20000e84

000811e4 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   811e4:	b580      	push	{r7, lr}
   811e6:	b082      	sub	sp, #8
   811e8:	af00      	add	r7, sp, #0
    bool handler_status = false;
   811ea:	2300      	movs	r3, #0
   811ec:	71bb      	strb	r3, [r7, #6]

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   811ee:	4b0e      	ldr	r3, [pc, #56]	; (81228 <main_setup_in_received+0x44>)
   811f0:	781b      	ldrb	r3, [r3, #0]
   811f2:	71fb      	strb	r3, [r7, #7]
   811f4:	e00f      	b.n	81216 <main_setup_in_received+0x32>
        handler_status = naeusb_in_request_handlers[i-1]();
   811f6:	79fb      	ldrb	r3, [r7, #7]
   811f8:	3b01      	subs	r3, #1
   811fa:	4a0c      	ldr	r2, [pc, #48]	; (8122c <main_setup_in_received+0x48>)
   811fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   81200:	4798      	blx	r3
   81202:	4603      	mov	r3, r0
   81204:	71bb      	strb	r3, [r7, #6]
        if (handler_status == true) {
   81206:	79bb      	ldrb	r3, [r7, #6]
   81208:	2b00      	cmp	r3, #0
   8120a:	d001      	beq.n	81210 <main_setup_in_received+0x2c>
            return true;
   8120c:	2301      	movs	r3, #1
   8120e:	e006      	b.n	8121e <main_setup_in_received+0x3a>
    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81210:	79fb      	ldrb	r3, [r7, #7]
   81212:	3b01      	subs	r3, #1
   81214:	71fb      	strb	r3, [r7, #7]
   81216:	79fb      	ldrb	r3, [r7, #7]
   81218:	2b00      	cmp	r3, #0
   8121a:	d1ec      	bne.n	811f6 <main_setup_in_received+0x12>
        }
    }

    return false;
   8121c:	2300      	movs	r3, #0

   8121e:	4618      	mov	r0, r3
   81220:	3708      	adds	r7, #8
   81222:	46bd      	mov	sp, r7
   81224:	bd80      	pop	{r7, pc}
   81226:	bf00      	nop
   81228:	20000e80 	.word	0x20000e80
   8122c:	20000e40 	.word	0x20000e40

00081230 <osc_enable>:
{
   81230:	b580      	push	{r7, lr}
   81232:	b082      	sub	sp, #8
   81234:	af00      	add	r7, sp, #0
   81236:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   81238:	687b      	ldr	r3, [r7, #4]
   8123a:	2b07      	cmp	r3, #7
   8123c:	d82e      	bhi.n	8129c <osc_enable+0x6c>
   8123e:	a201      	add	r2, pc, #4	; (adr r2, 81244 <osc_enable+0x14>)
   81240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   81244:	0008129b 	.word	0x0008129b
   81248:	00081265 	.word	0x00081265
   8124c:	0008126d 	.word	0x0008126d
   81250:	00081275 	.word	0x00081275
   81254:	0008127d 	.word	0x0008127d
   81258:	00081285 	.word	0x00081285
   8125c:	0008128d 	.word	0x0008128d
   81260:	00081295 	.word	0x00081295
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   81264:	2000      	movs	r0, #0
   81266:	4b0f      	ldr	r3, [pc, #60]	; (812a4 <osc_enable+0x74>)
   81268:	4798      	blx	r3
		break;
   8126a:	e017      	b.n	8129c <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   8126c:	2001      	movs	r0, #1
   8126e:	4b0d      	ldr	r3, [pc, #52]	; (812a4 <osc_enable+0x74>)
   81270:	4798      	blx	r3
		break;
   81272:	e013      	b.n	8129c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   81274:	2000      	movs	r0, #0
   81276:	4b0c      	ldr	r3, [pc, #48]	; (812a8 <osc_enable+0x78>)
   81278:	4798      	blx	r3
		break;
   8127a:	e00f      	b.n	8129c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   8127c:	2010      	movs	r0, #16
   8127e:	4b0a      	ldr	r3, [pc, #40]	; (812a8 <osc_enable+0x78>)
   81280:	4798      	blx	r3
		break;
   81282:	e00b      	b.n	8129c <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   81284:	2020      	movs	r0, #32
   81286:	4b08      	ldr	r3, [pc, #32]	; (812a8 <osc_enable+0x78>)
   81288:	4798      	blx	r3
		break;
   8128a:	e007      	b.n	8129c <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   8128c:	203e      	movs	r0, #62	; 0x3e
   8128e:	4b07      	ldr	r3, [pc, #28]	; (812ac <osc_enable+0x7c>)
   81290:	4798      	blx	r3
		break;
   81292:	e003      	b.n	8129c <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   81294:	4b06      	ldr	r3, [pc, #24]	; (812b0 <osc_enable+0x80>)
   81296:	4798      	blx	r3
		break;
   81298:	e000      	b.n	8129c <osc_enable+0x6c>
		break;
   8129a:	bf00      	nop
}
   8129c:	bf00      	nop
   8129e:	3708      	adds	r7, #8
   812a0:	46bd      	mov	sp, r7
   812a2:	bd80      	pop	{r7, pc}
   812a4:	00085369 	.word	0x00085369
   812a8:	000853d5 	.word	0x000853d5
   812ac:	00085449 	.word	0x00085449
   812b0:	00085499 	.word	0x00085499

000812b4 <osc_is_ready>:
{
   812b4:	b580      	push	{r7, lr}
   812b6:	b082      	sub	sp, #8
   812b8:	af00      	add	r7, sp, #0
   812ba:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   812bc:	687b      	ldr	r3, [r7, #4]
   812be:	2b07      	cmp	r3, #7
   812c0:	d82f      	bhi.n	81322 <osc_is_ready+0x6e>
   812c2:	a201      	add	r2, pc, #4	; (adr r2, 812c8 <osc_is_ready+0x14>)
   812c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   812c8:	000812e9 	.word	0x000812e9
   812cc:	000812ed 	.word	0x000812ed
   812d0:	000812ed 	.word	0x000812ed
   812d4:	000812ff 	.word	0x000812ff
   812d8:	000812ff 	.word	0x000812ff
   812dc:	000812ff 	.word	0x000812ff
   812e0:	00081311 	.word	0x00081311
   812e4:	00081311 	.word	0x00081311
		return 1;
   812e8:	2301      	movs	r3, #1
   812ea:	e01b      	b.n	81324 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   812ec:	4b0f      	ldr	r3, [pc, #60]	; (8132c <osc_is_ready+0x78>)
   812ee:	4798      	blx	r3
   812f0:	4603      	mov	r3, r0
   812f2:	2b00      	cmp	r3, #0
   812f4:	bf14      	ite	ne
   812f6:	2301      	movne	r3, #1
   812f8:	2300      	moveq	r3, #0
   812fa:	b2db      	uxtb	r3, r3
   812fc:	e012      	b.n	81324 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   812fe:	4b0c      	ldr	r3, [pc, #48]	; (81330 <osc_is_ready+0x7c>)
   81300:	4798      	blx	r3
   81302:	4603      	mov	r3, r0
   81304:	2b00      	cmp	r3, #0
   81306:	bf14      	ite	ne
   81308:	2301      	movne	r3, #1
   8130a:	2300      	moveq	r3, #0
   8130c:	b2db      	uxtb	r3, r3
   8130e:	e009      	b.n	81324 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   81310:	4b08      	ldr	r3, [pc, #32]	; (81334 <osc_is_ready+0x80>)
   81312:	4798      	blx	r3
   81314:	4603      	mov	r3, r0
   81316:	2b00      	cmp	r3, #0
   81318:	bf14      	ite	ne
   8131a:	2301      	movne	r3, #1
   8131c:	2300      	moveq	r3, #0
   8131e:	b2db      	uxtb	r3, r3
   81320:	e000      	b.n	81324 <osc_is_ready+0x70>
	return 0;
   81322:	2300      	movs	r3, #0
}
   81324:	4618      	mov	r0, r3
   81326:	3708      	adds	r7, #8
   81328:	46bd      	mov	sp, r7
   8132a:	bd80      	pop	{r7, pc}
   8132c:	000853a1 	.word	0x000853a1
   81330:	00085431 	.word	0x00085431
   81334:	000854e5 	.word	0x000854e5

00081338 <osc_wait_ready>:
{
   81338:	b580      	push	{r7, lr}
   8133a:	b082      	sub	sp, #8
   8133c:	af00      	add	r7, sp, #0
   8133e:	4603      	mov	r3, r0
   81340:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   81342:	bf00      	nop
   81344:	79fb      	ldrb	r3, [r7, #7]
   81346:	4618      	mov	r0, r3
   81348:	4b06      	ldr	r3, [pc, #24]	; (81364 <osc_wait_ready+0x2c>)
   8134a:	4798      	blx	r3
   8134c:	4603      	mov	r3, r0
   8134e:	f083 0301 	eor.w	r3, r3, #1
   81352:	b2db      	uxtb	r3, r3
   81354:	2b00      	cmp	r3, #0
   81356:	d1f5      	bne.n	81344 <osc_wait_ready+0xc>
}
   81358:	bf00      	nop
   8135a:	bf00      	nop
   8135c:	3708      	adds	r7, #8
   8135e:	46bd      	mov	sp, r7
   81360:	bd80      	pop	{r7, pc}
   81362:	bf00      	nop
   81364:	000812b5 	.word	0x000812b5

00081368 <udc_detach>:
 * \brief Detaches the device from the bus
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
   81368:	b580      	push	{r7, lr}
   8136a:	af00      	add	r7, sp, #0
	udd_detach();
   8136c:	4b01      	ldr	r3, [pc, #4]	; (81374 <udc_detach+0xc>)
   8136e:	4798      	blx	r3
}
   81370:	bf00      	nop
   81372:	bd80      	pop	{r7, pc}
   81374:	00083521 	.word	0x00083521

00081378 <naeusb_sam_cfg_out>:
#define RSTC_CR_KEY_PASSWD RSTC_CR_KEY(0xA5)
#endif


void naeusb_sam_cfg_out(void)
{
   81378:	b580      	push	{r7, lr}
   8137a:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   8137c:	4b34      	ldr	r3, [pc, #208]	; (81450 <naeusb_sam_cfg_out+0xd8>)
   8137e:	885b      	ldrh	r3, [r3, #2]
   81380:	b2db      	uxtb	r3, r3
   81382:	3b01      	subs	r3, #1
   81384:	2b10      	cmp	r3, #16
   81386:	d85f      	bhi.n	81448 <naeusb_sam_cfg_out+0xd0>
   81388:	a201      	add	r2, pc, #4	; (adr r2, 81390 <naeusb_sam_cfg_out+0x18>)
   8138a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8138e:	bf00      	nop
   81390:	000813d5 	.word	0x000813d5
   81394:	000813e9 	.word	0x000813e9
   81398:	000813f1 	.word	0x000813f1
   8139c:	00081449 	.word	0x00081449
   813a0:	00081449 	.word	0x00081449
   813a4:	00081449 	.word	0x00081449
   813a8:	00081449 	.word	0x00081449
   813ac:	00081449 	.word	0x00081449
   813b0:	00081449 	.word	0x00081449
   813b4:	00081449 	.word	0x00081449
   813b8:	00081449 	.word	0x00081449
   813bc:	00081449 	.word	0x00081449
   813c0:	00081449 	.word	0x00081449
   813c4:	00081449 	.word	0x00081449
   813c8:	00081449 	.word	0x00081449
   813cc:	0008141f 	.word	0x0008141f
   813d0:	00081443 	.word	0x00081443
    {
        /* Turn on slow clock */
    case SAM_SLOW_CLOCK_ON:
        osc_enable(OSC_MAINCK_XTAL);
   813d4:	2006      	movs	r0, #6
   813d6:	4b1f      	ldr	r3, [pc, #124]	; (81454 <naeusb_sam_cfg_out+0xdc>)
   813d8:	4798      	blx	r3
        osc_wait_ready(OSC_MAINCK_XTAL);
   813da:	2006      	movs	r0, #6
   813dc:	4b1e      	ldr	r3, [pc, #120]	; (81458 <naeusb_sam_cfg_out+0xe0>)
   813de:	4798      	blx	r3
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   813e0:	2010      	movs	r0, #16
   813e2:	4b1e      	ldr	r3, [pc, #120]	; (8145c <naeusb_sam_cfg_out+0xe4>)
   813e4:	4798      	blx	r3
        break;
   813e6:	e030      	b.n	8144a <naeusb_sam_cfg_out+0xd2>

        /* Turn off slow clock */
    case SAM_SLOW_CLOCK_OFF:
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   813e8:	2010      	movs	r0, #16
   813ea:	4b1d      	ldr	r3, [pc, #116]	; (81460 <naeusb_sam_cfg_out+0xe8>)
   813ec:	4798      	blx	r3
        break;
   813ee:	e02c      	b.n	8144a <naeusb_sam_cfg_out+0xd2>
    case SAM_ENTER_BOOTLOADER:
        /* Turn off connected stuff */
        //board_power(0);

        /* Clear ROM-mapping bit. */
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   813f0:	2201      	movs	r2, #1
   813f2:	210c      	movs	r1, #12
   813f4:	481b      	ldr	r0, [pc, #108]	; (81464 <naeusb_sam_cfg_out+0xec>)
   813f6:	4b1c      	ldr	r3, [pc, #112]	; (81468 <naeusb_sam_cfg_out+0xf0>)
   813f8:	4798      	blx	r3

        /* Disconnect USB (will kill connection) */
        udc_detach();
   813fa:	4b1c      	ldr	r3, [pc, #112]	; (8146c <naeusb_sam_cfg_out+0xf4>)
   813fc:	4798      	blx	r3

        /* With knowledge that I will rise again, I lay down my life. */
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   813fe:	bf00      	nop
   81400:	4b1b      	ldr	r3, [pc, #108]	; (81470 <naeusb_sam_cfg_out+0xf8>)
   81402:	685b      	ldr	r3, [r3, #4]
   81404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   81408:	2b00      	cmp	r3, #0
   8140a:	d1f9      	bne.n	81400 <naeusb_sam_cfg_out+0x88>
        //RSTC->RSTC_CR |= RSTC_CR_KEY(0xA5) | RSTC_CR_PERRST | RSTC_CR_PROCRST;
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   8140c:	4b18      	ldr	r3, [pc, #96]	; (81470 <naeusb_sam_cfg_out+0xf8>)
   8140e:	681b      	ldr	r3, [r3, #0]
   81410:	4a17      	ldr	r2, [pc, #92]	; (81470 <naeusb_sam_cfg_out+0xf8>)
   81412:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81416:	f043 0305 	orr.w	r3, r3, #5
   8141a:	6013      	str	r3, [r2, #0]
        while(1);
   8141c:	e7fe      	b.n	8141c <naeusb_sam_cfg_out+0xa4>
        /* Disconnect USB (will kill stuff) */

        /* Make the jump */
        break;
    case SAM_RESET:
        udc_detach();
   8141e:	4b13      	ldr	r3, [pc, #76]	; (8146c <naeusb_sam_cfg_out+0xf4>)
   81420:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81422:	bf00      	nop
   81424:	4b12      	ldr	r3, [pc, #72]	; (81470 <naeusb_sam_cfg_out+0xf8>)
   81426:	685b      	ldr	r3, [r3, #4]
   81428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8142c:	2b00      	cmp	r3, #0
   8142e:	d1f9      	bne.n	81424 <naeusb_sam_cfg_out+0xac>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81430:	4b0f      	ldr	r3, [pc, #60]	; (81470 <naeusb_sam_cfg_out+0xf8>)
   81432:	681b      	ldr	r3, [r3, #0]
   81434:	4a0e      	ldr	r2, [pc, #56]	; (81470 <naeusb_sam_cfg_out+0xf8>)
   81436:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8143a:	f043 0305 	orr.w	r3, r3, #5
   8143e:	6013      	str	r3, [r2, #0]
        while(1);
   81440:	e7fe      	b.n	81440 <naeusb_sam_cfg_out+0xc8>
        break;
        
    case SAM_RELEASE_LOCK: // use in case of pipe error emergency
	#if USB_DEVICE_PRODUCT_ID != 0xACE0
        FPGA_releaselock();
   81442:	4b0c      	ldr	r3, [pc, #48]	; (81474 <naeusb_sam_cfg_out+0xfc>)
   81444:	4798      	blx	r3
	#endif
        break;
   81446:	e000      	b.n	8144a <naeusb_sam_cfg_out+0xd2>

        /* Oh well, sucks to be you */

    default:
        break;
   81448:	bf00      	nop
    }
}
   8144a:	bf00      	nop
   8144c:	bd80      	pop	{r7, pc}
   8144e:	bf00      	nop
   81450:	200013dc 	.word	0x200013dc
   81454:	00081231 	.word	0x00081231
   81458:	00081339 	.word	0x00081339
   8145c:	00085269 	.word	0x00085269
   81460:	000852e9 	.word	0x000852e9
   81464:	400e0800 	.word	0x400e0800
   81468:	000858a9 	.word	0x000858a9
   8146c:	00081369 	.word	0x00081369
   81470:	400e1200 	.word	0x400e1200
   81474:	00080ce5 	.word	0x00080ce5

00081478 <naeusb_fw_version_in>:

bool naeusb_fw_version_in(void)
{
   81478:	b480      	push	{r7}
   8147a:	af00      	add	r7, sp, #0
    respbuf[0] = FW_VER_MAJOR;
   8147c:	4b09      	ldr	r3, [pc, #36]	; (814a4 <naeusb_fw_version_in+0x2c>)
   8147e:	2201      	movs	r2, #1
   81480:	701a      	strb	r2, [r3, #0]
    respbuf[1] = FW_VER_MINOR;
   81482:	4b08      	ldr	r3, [pc, #32]	; (814a4 <naeusb_fw_version_in+0x2c>)
   81484:	2232      	movs	r2, #50	; 0x32
   81486:	705a      	strb	r2, [r3, #1]
    respbuf[2] = FW_VER_DEBUG;
   81488:	4b06      	ldr	r3, [pc, #24]	; (814a4 <naeusb_fw_version_in+0x2c>)
   8148a:	2200      	movs	r2, #0
   8148c:	709a      	strb	r2, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   8148e:	4b06      	ldr	r3, [pc, #24]	; (814a8 <naeusb_fw_version_in+0x30>)
   81490:	4a04      	ldr	r2, [pc, #16]	; (814a4 <naeusb_fw_version_in+0x2c>)
   81492:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = 3;
   81494:	4b04      	ldr	r3, [pc, #16]	; (814a8 <naeusb_fw_version_in+0x30>)
   81496:	2203      	movs	r2, #3
   81498:	819a      	strh	r2, [r3, #12]
    return true;
   8149a:	2301      	movs	r3, #1

}
   8149c:	4618      	mov	r0, r3
   8149e:	46bd      	mov	sp, r7
   814a0:	bc80      	pop	{r7}
   814a2:	4770      	bx	lr
   814a4:	20000f08 	.word	0x20000f08
   814a8:	200013dc 	.word	0x200013dc

000814ac <naeusb_build_date_in>:

static const char BUILD_DATE[] = __DATE__;
static const char BUILD_TIME[] = __TIME__;
bool naeusb_build_date_in(void)
{
   814ac:	b580      	push	{r7, lr}
   814ae:	af00      	add	r7, sp, #0
    strncpy(respbuf, BUILD_TIME, 64);
   814b0:	2240      	movs	r2, #64	; 0x40
   814b2:	490d      	ldr	r1, [pc, #52]	; (814e8 <naeusb_build_date_in+0x3c>)
   814b4:	480d      	ldr	r0, [pc, #52]	; (814ec <naeusb_build_date_in+0x40>)
   814b6:	4b0e      	ldr	r3, [pc, #56]	; (814f0 <naeusb_build_date_in+0x44>)
   814b8:	4798      	blx	r3
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   814ba:	4b0c      	ldr	r3, [pc, #48]	; (814ec <naeusb_build_date_in+0x40>)
   814bc:	2220      	movs	r2, #32
   814be:	721a      	strb	r2, [r3, #8]
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   814c0:	4b0c      	ldr	r3, [pc, #48]	; (814f4 <naeusb_build_date_in+0x48>)
   814c2:	2237      	movs	r2, #55	; 0x37
   814c4:	490c      	ldr	r1, [pc, #48]	; (814f8 <naeusb_build_date_in+0x4c>)
   814c6:	4618      	mov	r0, r3
   814c8:	4b09      	ldr	r3, [pc, #36]	; (814f0 <naeusb_build_date_in+0x44>)
   814ca:	4798      	blx	r3
    udd_g_ctrlreq.payload = respbuf;
   814cc:	4b0b      	ldr	r3, [pc, #44]	; (814fc <naeusb_build_date_in+0x50>)
   814ce:	4a07      	ldr	r2, [pc, #28]	; (814ec <naeusb_build_date_in+0x40>)
   814d0:	609a      	str	r2, [r3, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   814d2:	4806      	ldr	r0, [pc, #24]	; (814ec <naeusb_build_date_in+0x40>)
   814d4:	4b0a      	ldr	r3, [pc, #40]	; (81500 <naeusb_build_date_in+0x54>)
   814d6:	4798      	blx	r3
   814d8:	4603      	mov	r3, r0
   814da:	b29a      	uxth	r2, r3
   814dc:	4b07      	ldr	r3, [pc, #28]	; (814fc <naeusb_build_date_in+0x50>)
   814de:	819a      	strh	r2, [r3, #12]
    return true;
   814e0:	2301      	movs	r3, #1
}
   814e2:	4618      	mov	r0, r3
   814e4:	bd80      	pop	{r7, pc}
   814e6:	bf00      	nop
   814e8:	0008d45c 	.word	0x0008d45c
   814ec:	20000f08 	.word	0x20000f08
   814f0:	0008698d 	.word	0x0008698d
   814f4:	20000f11 	.word	0x20000f11
   814f8:	0008d450 	.word	0x0008d450
   814fc:	200013dc 	.word	0x200013dc
   81500:	00086931 	.word	0x00086931

00081504 <naeusb_setup_out_received>:


bool naeusb_setup_out_received(void)
{
   81504:	b480      	push	{r7}
   81506:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   81508:	4b06      	ldr	r3, [pc, #24]	; (81524 <naeusb_setup_out_received+0x20>)
   8150a:	785b      	ldrb	r3, [r3, #1]
   8150c:	2b22      	cmp	r3, #34	; 0x22
   8150e:	d104      	bne.n	8151a <naeusb_setup_out_received+0x16>
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81510:	4b04      	ldr	r3, [pc, #16]	; (81524 <naeusb_setup_out_received+0x20>)
   81512:	4a05      	ldr	r2, [pc, #20]	; (81528 <naeusb_setup_out_received+0x24>)
   81514:	611a      	str	r2, [r3, #16]
            return true;
   81516:	2301      	movs	r3, #1
   81518:	e000      	b.n	8151c <naeusb_setup_out_received+0x18>
            break;
    }
    return false;
   8151a:	2300      	movs	r3, #0
}
   8151c:	4618      	mov	r0, r3
   8151e:	46bd      	mov	sp, r7
   81520:	bc80      	pop	{r7}
   81522:	4770      	bx	lr
   81524:	200013dc 	.word	0x200013dc
   81528:	00081379 	.word	0x00081379

0008152c <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   8152c:	b580      	push	{r7, lr}
   8152e:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   81530:	4b08      	ldr	r3, [pc, #32]	; (81554 <naeusb_setup_in_received+0x28>)
   81532:	785b      	ldrb	r3, [r3, #1]
   81534:	2b17      	cmp	r3, #23
   81536:	d002      	beq.n	8153e <naeusb_setup_in_received+0x12>
   81538:	2b40      	cmp	r3, #64	; 0x40
   8153a:	d004      	beq.n	81546 <naeusb_setup_in_received+0x1a>
   8153c:	e007      	b.n	8154e <naeusb_setup_in_received+0x22>
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
   8153e:	4b06      	ldr	r3, [pc, #24]	; (81558 <naeusb_setup_in_received+0x2c>)
   81540:	4798      	blx	r3
   81542:	4603      	mov	r3, r0
   81544:	e004      	b.n	81550 <naeusb_setup_in_received+0x24>
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   81546:	4b05      	ldr	r3, [pc, #20]	; (8155c <naeusb_setup_in_received+0x30>)
   81548:	4798      	blx	r3
   8154a:	4603      	mov	r3, r0
   8154c:	e000      	b.n	81550 <naeusb_setup_in_received+0x24>
            break;
    }
    return false;
   8154e:	2300      	movs	r3, #0
}
   81550:	4618      	mov	r0, r3
   81552:	bd80      	pop	{r7, pc}
   81554:	200013dc 	.word	0x200013dc
   81558:	00081479 	.word	0x00081479
   8155c:	000814ad 	.word	0x000814ad

00081560 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81560:	b580      	push	{r7, lr}
   81562:	af00      	add	r7, sp, #0
    naeusb_add_in_handler(naeusb_setup_in_received);
   81564:	4803      	ldr	r0, [pc, #12]	; (81574 <naeusb_register_handlers+0x14>)
   81566:	4b04      	ldr	r3, [pc, #16]	; (81578 <naeusb_register_handlers+0x18>)
   81568:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   8156a:	4804      	ldr	r0, [pc, #16]	; (8157c <naeusb_register_handlers+0x1c>)
   8156c:	4b04      	ldr	r3, [pc, #16]	; (81580 <naeusb_register_handlers+0x20>)
   8156e:	4798      	blx	r3
   81570:	bf00      	nop
   81572:	bd80      	pop	{r7, pc}
   81574:	0008152d 	.word	0x0008152d
   81578:	0008104d 	.word	0x0008104d
   8157c:	00081505 	.word	0x00081505
   81580:	0008108d 	.word	0x0008108d

00081584 <openadc_progfpga_bulk>:
blockep_usage_t blockendpoint_usage = bep_emem;

static uint8_t * ctrlmemread_buf;
static unsigned int ctrlmemread_size;

void openadc_progfpga_bulk(void){
   81584:	b580      	push	{r7, lr}
   81586:	b082      	sub	sp, #8
   81588:	af00      	add	r7, sp, #0
	uint32_t prog_freq = 1E6;
   8158a:	4b2f      	ldr	r3, [pc, #188]	; (81648 <openadc_progfpga_bulk+0xc4>)
   8158c:	607b      	str	r3, [r7, #4]
    switch(udd_g_ctrlreq.req.wValue){
   8158e:	4b2f      	ldr	r3, [pc, #188]	; (8164c <openadc_progfpga_bulk+0xc8>)
   81590:	885b      	ldrh	r3, [r3, #2]
   81592:	3ba0      	subs	r3, #160	; 0xa0
   81594:	2b12      	cmp	r3, #18
   81596:	d851      	bhi.n	8163c <openadc_progfpga_bulk+0xb8>
   81598:	a201      	add	r2, pc, #4	; (adr r2, 815a0 <openadc_progfpga_bulk+0x1c>)
   8159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8159e:	bf00      	nop
   815a0:	000815ed 	.word	0x000815ed
   815a4:	00081603 	.word	0x00081603
   815a8:	0008160f 	.word	0x0008160f
   815ac:	0008163d 	.word	0x0008163d
   815b0:	0008163d 	.word	0x0008163d
   815b4:	0008163d 	.word	0x0008163d
   815b8:	0008163d 	.word	0x0008163d
   815bc:	0008163d 	.word	0x0008163d
   815c0:	0008163d 	.word	0x0008163d
   815c4:	0008163d 	.word	0x0008163d
   815c8:	0008163d 	.word	0x0008163d
   815cc:	0008163d 	.word	0x0008163d
   815d0:	0008163d 	.word	0x0008163d
   815d4:	0008163d 	.word	0x0008163d
   815d8:	0008163d 	.word	0x0008163d
   815dc:	0008163d 	.word	0x0008163d
   815e0:	00081617 	.word	0x00081617
   815e4:	0008162d 	.word	0x0008162d
   815e8:	00081635 	.word	0x00081635
    case 0xA0:
        
        if (udd_g_ctrlreq.req.wLength == 4) {
   815ec:	4b17      	ldr	r3, [pc, #92]	; (8164c <openadc_progfpga_bulk+0xc8>)
   815ee:	88db      	ldrh	r3, [r3, #6]
   815f0:	2b04      	cmp	r3, #4
   815f2:	d102      	bne.n	815fa <openadc_progfpga_bulk+0x76>
            prog_freq = *(CTRLBUFFER_WORDPTR);
   815f4:	4b16      	ldr	r3, [pc, #88]	; (81650 <openadc_progfpga_bulk+0xcc>)
   815f6:	681b      	ldr	r3, [r3, #0]
   815f8:	607b      	str	r3, [r7, #4]
        }
        fpga_program_setup1(prog_freq);
   815fa:	6878      	ldr	r0, [r7, #4]
   815fc:	4b15      	ldr	r3, [pc, #84]	; (81654 <openadc_progfpga_bulk+0xd0>)
   815fe:	4798      	blx	r3
        break;
   81600:	e01d      	b.n	8163e <openadc_progfpga_bulk+0xba>

    case 0xA1:
        /* Waiting on data... */
        fpga_program_setup2();
   81602:	4b15      	ldr	r3, [pc, #84]	; (81658 <openadc_progfpga_bulk+0xd4>)
   81604:	4798      	blx	r3
        blockendpoint_usage = bep_fpgabitstream;
   81606:	4b15      	ldr	r3, [pc, #84]	; (8165c <openadc_progfpga_bulk+0xd8>)
   81608:	220a      	movs	r2, #10
   8160a:	701a      	strb	r2, [r3, #0]
        break;
   8160c:	e017      	b.n	8163e <openadc_progfpga_bulk+0xba>

    case 0xA2:
        /* Done */
        blockendpoint_usage = bep_emem;
   8160e:	4b13      	ldr	r3, [pc, #76]	; (8165c <openadc_progfpga_bulk+0xd8>)
   81610:	2200      	movs	r2, #0
   81612:	701a      	strb	r2, [r3, #0]
        break;
   81614:	e013      	b.n	8163e <openadc_progfpga_bulk+0xba>

    case 0xB0:
        if (udd_g_ctrlreq.req.wLength == 4) {
   81616:	4b0d      	ldr	r3, [pc, #52]	; (8164c <openadc_progfpga_bulk+0xc8>)
   81618:	88db      	ldrh	r3, [r3, #6]
   8161a:	2b04      	cmp	r3, #4
   8161c:	d102      	bne.n	81624 <openadc_progfpga_bulk+0xa0>
            prog_freq = *(CTRLBUFFER_WORDPTR);
   8161e:	4b0c      	ldr	r3, [pc, #48]	; (81650 <openadc_progfpga_bulk+0xcc>)
   81620:	681b      	ldr	r3, [r3, #0]
   81622:	607b      	str	r3, [r7, #4]
        //correct for target.
        #ifdef PIN_TARG_NRST_GPIO
        gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_OUTPUT_1 | PIO_DEFAULT));
        gpio_set_pin_high(PIN_TARG_NRST_GPIO);
        #endif
        fpga_program_spi_setup1(prog_freq);
   81624:	6878      	ldr	r0, [r7, #4]
   81626:	4b0e      	ldr	r3, [pc, #56]	; (81660 <openadc_progfpga_bulk+0xdc>)
   81628:	4798      	blx	r3
        break;
   8162a:	e008      	b.n	8163e <openadc_progfpga_bulk+0xba>

    case 0xB1:
        blockendpoint_usage = bep_fpgabitstreamspi;
   8162c:	4b0b      	ldr	r3, [pc, #44]	; (8165c <openadc_progfpga_bulk+0xd8>)
   8162e:	2214      	movs	r2, #20
   81630:	701a      	strb	r2, [r3, #0]
        break;
   81632:	e004      	b.n	8163e <openadc_progfpga_bulk+0xba>
    
    case 0xB2:
        /* Done */
        blockendpoint_usage = bep_emem;
   81634:	4b09      	ldr	r3, [pc, #36]	; (8165c <openadc_progfpga_bulk+0xd8>)
   81636:	2200      	movs	r2, #0
   81638:	701a      	strb	r2, [r3, #0]
        //Can't set this back to input until after FPGA stops listening, for now we ignore it
        //gpio_configure_pin(PIN_TARG_NRST_GPIO, (PIO_TYPE_PIO_INPUT | PIO_DEFAULT));
        break;
   8163a:	e000      	b.n	8163e <openadc_progfpga_bulk+0xba>
    default:
        break;
   8163c:	bf00      	nop
    }
}
   8163e:	bf00      	nop
   81640:	3708      	adds	r7, #8
   81642:	46bd      	mov	sp, r7
   81644:	bd80      	pop	{r7, pc}
   81646:	bf00      	nop
   81648:	000f4240 	.word	0x000f4240
   8164c:	200013dc 	.word	0x200013dc
   81650:	20000ec8 	.word	0x20000ec8
   81654:	00080f95 	.word	0x00080f95
   81658:	00081015 	.word	0x00081015
   8165c:	20001348 	.word	0x20001348
   81660:	00080ea1 	.word	0x00080ea1

00081664 <openadc_readmem_bulk>:

void openadc_readmem_bulk(void)
{
   81664:	b580      	push	{r7, lr}
   81666:	b082      	sub	sp, #8
   81668:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8166a:	4b0e      	ldr	r3, [pc, #56]	; (816a4 <openadc_readmem_bulk+0x40>)
   8166c:	681b      	ldr	r3, [r3, #0]
   8166e:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81670:	4b0c      	ldr	r3, [pc, #48]	; (816a4 <openadc_readmem_bulk+0x40>)
   81672:	685b      	ldr	r3, [r3, #4]
   81674:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   81676:	4b0c      	ldr	r3, [pc, #48]	; (816a8 <openadc_readmem_bulk+0x44>)
   81678:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockin));
   8167a:	bf00      	nop
   8167c:	2002      	movs	r0, #2
   8167e:	4b0b      	ldr	r3, [pc, #44]	; (816ac <openadc_readmem_bulk+0x48>)
   81680:	4798      	blx	r3
   81682:	4603      	mov	r3, r0
   81684:	2b00      	cmp	r3, #0
   81686:	d0f9      	beq.n	8167c <openadc_readmem_bulk+0x18>

    FPGA_setaddr(address);
   81688:	6838      	ldr	r0, [r7, #0]
   8168a:	4b09      	ldr	r3, [pc, #36]	; (816b0 <openadc_readmem_bulk+0x4c>)
   8168c:	4798      	blx	r3
    if  (!udi_vendor_bulk_in_run(
   8168e:	4a09      	ldr	r2, [pc, #36]	; (816b4 <openadc_readmem_bulk+0x50>)
   81690:	6879      	ldr	r1, [r7, #4]
   81692:	f04f 40c0 	mov.w	r0, #1610612736	; 0x60000000
   81696:	4b08      	ldr	r3, [pc, #32]	; (816b8 <openadc_readmem_bulk+0x54>)
   81698:	4798      	blx	r3
        buflen,
        main_vendor_bulk_in_received
        )) {
            //abort
        }
}
   8169a:	bf00      	nop
   8169c:	3708      	adds	r7, #8
   8169e:	46bd      	mov	sp, r7
   816a0:	bd80      	pop	{r7, pc}
   816a2:	bf00      	nop
   816a4:	20000ec8 	.word	0x20000ec8
   816a8:	00080ce5 	.word	0x00080ce5
   816ac:	00080ca5 	.word	0x00080ca5
   816b0:	00080d15 	.word	0x00080d15
   816b4:	000817c9 	.word	0x000817c9
   816b8:	000857c1 	.word	0x000857c1

000816bc <openadc_writemem_bulk>:

void openadc_writemem_bulk(void)
{
   816bc:	b580      	push	{r7, lr}
   816be:	b082      	sub	sp, #8
   816c0:	af00      	add	r7, sp, #0
    //uint32_t buflen = *(CTRLBUFFER_WORDPTR);
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   816c2:	4b09      	ldr	r3, [pc, #36]	; (816e8 <openadc_writemem_bulk+0x2c>)
   816c4:	685b      	ldr	r3, [r3, #4]
   816c6:	607b      	str	r3, [r7, #4]

    // TODO: see block in
    FPGA_releaselock();
   816c8:	4b08      	ldr	r3, [pc, #32]	; (816ec <openadc_writemem_bulk+0x30>)
   816ca:	4798      	blx	r3
    while(!FPGA_setlock(fpga_blockout));
   816cc:	bf00      	nop
   816ce:	2004      	movs	r0, #4
   816d0:	4b07      	ldr	r3, [pc, #28]	; (816f0 <openadc_writemem_bulk+0x34>)
   816d2:	4798      	blx	r3
   816d4:	4603      	mov	r3, r0
   816d6:	2b00      	cmp	r3, #0
   816d8:	d0f9      	beq.n	816ce <openadc_writemem_bulk+0x12>

    /* Set address */
    FPGA_setaddr(address);
   816da:	6878      	ldr	r0, [r7, #4]
   816dc:	4b05      	ldr	r3, [pc, #20]	; (816f4 <openadc_writemem_bulk+0x38>)
   816de:	4798      	blx	r3

    /* Transaction done in generic callback */

}
   816e0:	bf00      	nop
   816e2:	3708      	adds	r7, #8
   816e4:	46bd      	mov	sp, r7
   816e6:	bd80      	pop	{r7, pc}
   816e8:	20000ec8 	.word	0x20000ec8
   816ec:	00080ce5 	.word	0x00080ce5
   816f0:	00080ca5 	.word	0x00080ca5
   816f4:	00080d15 	.word	0x00080d15

000816f8 <openadc_readmem_ctrl>:

void openadc_readmem_ctrl(void)
{
   816f8:	b580      	push	{r7, lr}
   816fa:	b082      	sub	sp, #8
   816fc:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   816fe:	4b0e      	ldr	r3, [pc, #56]	; (81738 <openadc_readmem_ctrl+0x40>)
   81700:	681b      	ldr	r3, [r3, #0]
   81702:	607b      	str	r3, [r7, #4]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   81704:	4b0c      	ldr	r3, [pc, #48]	; (81738 <openadc_readmem_ctrl+0x40>)
   81706:	685b      	ldr	r3, [r3, #4]
   81708:	603b      	str	r3, [r7, #0]

    FPGA_releaselock();
   8170a:	4b0c      	ldr	r3, [pc, #48]	; (8173c <openadc_readmem_ctrl+0x44>)
   8170c:	4798      	blx	r3
    while(!FPGA_setlock(fpga_ctrlmem));
   8170e:	bf00      	nop
   81710:	2005      	movs	r0, #5
   81712:	4b0b      	ldr	r3, [pc, #44]	; (81740 <openadc_readmem_ctrl+0x48>)
   81714:	4798      	blx	r3
   81716:	4603      	mov	r3, r0
   81718:	2b00      	cmp	r3, #0
   8171a:	d0f9      	beq.n	81710 <openadc_readmem_ctrl+0x18>

    /* Set address */
    FPGA_setaddr(address);
   8171c:	6838      	ldr	r0, [r7, #0]
   8171e:	4b09      	ldr	r3, [pc, #36]	; (81744 <openadc_readmem_ctrl+0x4c>)
   81720:	4798      	blx	r3

    /* Do memory read */
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS;
   81722:	4b09      	ldr	r3, [pc, #36]	; (81748 <openadc_readmem_ctrl+0x50>)
   81724:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
   81728:	601a      	str	r2, [r3, #0]

    /* Set size to read */
    ctrlmemread_size = buflen;
   8172a:	4a08      	ldr	r2, [pc, #32]	; (8174c <openadc_readmem_ctrl+0x54>)
   8172c:	687b      	ldr	r3, [r7, #4]
   8172e:	6013      	str	r3, [r2, #0]

    /* Start Transaction */
    
}
   81730:	bf00      	nop
   81732:	3708      	adds	r7, #8
   81734:	46bd      	mov	sp, r7
   81736:	bd80      	pop	{r7, pc}
   81738:	20000ec8 	.word	0x20000ec8
   8173c:	00080ce5 	.word	0x00080ce5
   81740:	00080ca5 	.word	0x00080ca5
   81744:	00080d15 	.word	0x00080d15
   81748:	2000134c 	.word	0x2000134c
   8174c:	20001350 	.word	0x20001350

00081750 <openadc_writemem_ctrl>:

void openadc_writemem_ctrl(void)
{
   81750:	b580      	push	{r7, lr}
   81752:	b084      	sub	sp, #16
   81754:	af00      	add	r7, sp, #0
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   81756:	4b16      	ldr	r3, [pc, #88]	; (817b0 <openadc_writemem_ctrl+0x60>)
   81758:	681b      	ldr	r3, [r3, #0]
   8175a:	60bb      	str	r3, [r7, #8]
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8175c:	4b14      	ldr	r3, [pc, #80]	; (817b0 <openadc_writemem_ctrl+0x60>)
   8175e:	685b      	ldr	r3, [r3, #4]
   81760:	607b      	str	r3, [r7, #4]

    uint8_t * ctrlbuf_payload = (uint8_t *)(CTRLBUFFER_WORDPTR + 2);
   81762:	4b14      	ldr	r3, [pc, #80]	; (817b4 <openadc_writemem_ctrl+0x64>)
   81764:	603b      	str	r3, [r7, #0]

    //printf("Writing to %x, %d\n", address, buflen);

    FPGA_releaselock();
   81766:	4b14      	ldr	r3, [pc, #80]	; (817b8 <openadc_writemem_ctrl+0x68>)
   81768:	4798      	blx	r3
    while(!FPGA_setlock(fpga_generic));
   8176a:	bf00      	nop
   8176c:	2001      	movs	r0, #1
   8176e:	4b13      	ldr	r3, [pc, #76]	; (817bc <openadc_writemem_ctrl+0x6c>)
   81770:	4798      	blx	r3
   81772:	4603      	mov	r3, r0
   81774:	2b00      	cmp	r3, #0
   81776:	d0f9      	beq.n	8176c <openadc_writemem_ctrl+0x1c>

    /* Set address */
    FPGA_setaddr(address);
   81778:	6878      	ldr	r0, [r7, #4]
   8177a:	4b11      	ldr	r3, [pc, #68]	; (817c0 <openadc_writemem_ctrl+0x70>)
   8177c:	4798      	blx	r3

    /* Start Transaction */

    /* Do memory write */
    for(unsigned int i = 0; i < buflen; i++){
   8177e:	2300      	movs	r3, #0
   81780:	60fb      	str	r3, [r7, #12]
   81782:	e00b      	b.n	8179c <openadc_writemem_ctrl+0x4c>
        xram[i] = ctrlbuf_payload[i];
   81784:	683a      	ldr	r2, [r7, #0]
   81786:	68fb      	ldr	r3, [r7, #12]
   81788:	441a      	add	r2, r3
   8178a:	4b0e      	ldr	r3, [pc, #56]	; (817c4 <openadc_writemem_ctrl+0x74>)
   8178c:	6819      	ldr	r1, [r3, #0]
   8178e:	68fb      	ldr	r3, [r7, #12]
   81790:	440b      	add	r3, r1
   81792:	7812      	ldrb	r2, [r2, #0]
   81794:	701a      	strb	r2, [r3, #0]
    for(unsigned int i = 0; i < buflen; i++){
   81796:	68fb      	ldr	r3, [r7, #12]
   81798:	3301      	adds	r3, #1
   8179a:	60fb      	str	r3, [r7, #12]
   8179c:	68fa      	ldr	r2, [r7, #12]
   8179e:	68bb      	ldr	r3, [r7, #8]
   817a0:	429a      	cmp	r2, r3
   817a2:	d3ef      	bcc.n	81784 <openadc_writemem_ctrl+0x34>
    }

    FPGA_releaselock();
   817a4:	4b04      	ldr	r3, [pc, #16]	; (817b8 <openadc_writemem_ctrl+0x68>)
   817a6:	4798      	blx	r3

}
   817a8:	bf00      	nop
   817aa:	3710      	adds	r7, #16
   817ac:	46bd      	mov	sp, r7
   817ae:	bd80      	pop	{r7, pc}
   817b0:	20000ec8 	.word	0x20000ec8
   817b4:	20000ed0 	.word	0x20000ed0
   817b8:	00080ce5 	.word	0x00080ce5
   817bc:	00080ca5 	.word	0x00080ca5
   817c0:	00080d15 	.word	0x00080d15
   817c4:	2000028c 	.word	0x2000028c

000817c8 <main_vendor_bulk_in_received>:

void main_vendor_bulk_in_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   817c8:	b580      	push	{r7, lr}
   817ca:	b082      	sub	sp, #8
   817cc:	af00      	add	r7, sp, #0
   817ce:	4603      	mov	r3, r0
   817d0:	6039      	str	r1, [r7, #0]
   817d2:	71fb      	strb	r3, [r7, #7]
   817d4:	4613      	mov	r3, r2
   817d6:	71bb      	strb	r3, [r7, #6]
    UNUSED(nb_transfered);
    UNUSED(ep);
    FPGA_releaselock();
   817d8:	4b08      	ldr	r3, [pc, #32]	; (817fc <main_vendor_bulk_in_received+0x34>)
   817da:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   817dc:	79fb      	ldrb	r3, [r7, #7]
   817de:	2b00      	cmp	r3, #0
   817e0:	d108      	bne.n	817f4 <main_vendor_bulk_in_received+0x2c>
        return; // Transfer aborted/error
    }

    if (FPGA_lockstatus() == fpga_blockin){
   817e2:	4b07      	ldr	r3, [pc, #28]	; (81800 <main_vendor_bulk_in_received+0x38>)
   817e4:	4798      	blx	r3
   817e6:	4603      	mov	r3, r0
   817e8:	2b02      	cmp	r3, #2
   817ea:	d104      	bne.n	817f6 <main_vendor_bulk_in_received+0x2e>
        FPGA_setlock(fpga_unlocked);
   817ec:	2000      	movs	r0, #0
   817ee:	4b05      	ldr	r3, [pc, #20]	; (81804 <main_vendor_bulk_in_received+0x3c>)
   817f0:	4798      	blx	r3
   817f2:	e000      	b.n	817f6 <main_vendor_bulk_in_received+0x2e>
        return; // Transfer aborted/error
   817f4:	bf00      	nop
    }
}
   817f6:	3708      	adds	r7, #8
   817f8:	46bd      	mov	sp, r7
   817fa:	bd80      	pop	{r7, pc}
   817fc:	00080ce5 	.word	0x00080ce5
   81800:	00080cfd 	.word	0x00080cfd
   81804:	00080ca5 	.word	0x00080ca5

00081808 <main_vendor_bulk_out_received>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep)
{
   81808:	b580      	push	{r7, lr}
   8180a:	b086      	sub	sp, #24
   8180c:	af00      	add	r7, sp, #0
   8180e:	4603      	mov	r3, r0
   81810:	6039      	str	r1, [r7, #0]
   81812:	71fb      	strb	r3, [r7, #7]
   81814:	4613      	mov	r3, r2
   81816:	71bb      	strb	r3, [r7, #6]
    UNUSED(ep);
    FPGA_releaselock();
   81818:	4b2f      	ldr	r3, [pc, #188]	; (818d8 <main_vendor_bulk_out_received+0xd0>)
   8181a:	4798      	blx	r3
    if (UDD_EP_TRANSFER_OK != status) {
   8181c:	79fb      	ldrb	r3, [r7, #7]
   8181e:	2b00      	cmp	r3, #0
   81820:	d006      	beq.n	81830 <main_vendor_bulk_out_received+0x28>
        // Transfer aborted

        //restart
        udi_vendor_bulk_out_run(
   81822:	4a2e      	ldr	r2, [pc, #184]	; (818dc <main_vendor_bulk_out_received+0xd4>)
   81824:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81828:	482d      	ldr	r0, [pc, #180]	; (818e0 <main_vendor_bulk_out_received+0xd8>)
   8182a:	4b2e      	ldr	r3, [pc, #184]	; (818e4 <main_vendor_bulk_out_received+0xdc>)
   8182c:	4798      	blx	r3
            main_buf_loopback,
            sizeof(main_buf_loopback),
            main_vendor_bulk_out_received);

        return;
   8182e:	e04f      	b.n	818d0 <main_vendor_bulk_out_received+0xc8>
    }

    if (blockendpoint_usage == bep_emem){
   81830:	4b2d      	ldr	r3, [pc, #180]	; (818e8 <main_vendor_bulk_out_received+0xe0>)
   81832:	781b      	ldrb	r3, [r3, #0]
   81834:	2b00      	cmp	r3, #0
   81836:	d11a      	bne.n	8186e <main_vendor_bulk_out_received+0x66>
        for(unsigned int i = 0; i < nb_transfered; i++){
   81838:	2300      	movs	r3, #0
   8183a:	617b      	str	r3, [r7, #20]
   8183c:	e00b      	b.n	81856 <main_vendor_bulk_out_received+0x4e>
            xram[i] = main_buf_loopback[i];
   8183e:	4b2b      	ldr	r3, [pc, #172]	; (818ec <main_vendor_bulk_out_received+0xe4>)
   81840:	681a      	ldr	r2, [r3, #0]
   81842:	697b      	ldr	r3, [r7, #20]
   81844:	4413      	add	r3, r2
   81846:	4926      	ldr	r1, [pc, #152]	; (818e0 <main_vendor_bulk_out_received+0xd8>)
   81848:	697a      	ldr	r2, [r7, #20]
   8184a:	440a      	add	r2, r1
   8184c:	7812      	ldrb	r2, [r2, #0]
   8184e:	701a      	strb	r2, [r3, #0]
        for(unsigned int i = 0; i < nb_transfered; i++){
   81850:	697b      	ldr	r3, [r7, #20]
   81852:	3301      	adds	r3, #1
   81854:	617b      	str	r3, [r7, #20]
   81856:	697a      	ldr	r2, [r7, #20]
   81858:	683b      	ldr	r3, [r7, #0]
   8185a:	429a      	cmp	r2, r3
   8185c:	d3ef      	bcc.n	8183e <main_vendor_bulk_out_received+0x36>
        }

        if (FPGA_lockstatus() == fpga_blockout){
   8185e:	4b24      	ldr	r3, [pc, #144]	; (818f0 <main_vendor_bulk_out_received+0xe8>)
   81860:	4798      	blx	r3
   81862:	4603      	mov	r3, r0
   81864:	2b04      	cmp	r3, #4
   81866:	d12d      	bne.n	818c4 <main_vendor_bulk_out_received+0xbc>
            FPGA_releaselock();
   81868:	4b1b      	ldr	r3, [pc, #108]	; (818d8 <main_vendor_bulk_out_received+0xd0>)
   8186a:	4798      	blx	r3
   8186c:	e02a      	b.n	818c4 <main_vendor_bulk_out_received+0xbc>
        }
    } else if (blockendpoint_usage == bep_fpgabitstream){
   8186e:	4b1e      	ldr	r3, [pc, #120]	; (818e8 <main_vendor_bulk_out_received+0xe0>)
   81870:	781b      	ldrb	r3, [r3, #0]
   81872:	2b0a      	cmp	r3, #10
   81874:	d111      	bne.n	8189a <main_vendor_bulk_out_received+0x92>

        /* Send byte to FPGA - this could eventually be done via SPI */
        // TODO: is this dangerous?
        for(unsigned int i = 0; i < nb_transfered; i++){
   81876:	2300      	movs	r3, #0
   81878:	613b      	str	r3, [r7, #16]
   8187a:	e009      	b.n	81890 <main_vendor_bulk_out_received+0x88>
            fpga_program_sendbyte(main_buf_loopback[i]);
   8187c:	4a18      	ldr	r2, [pc, #96]	; (818e0 <main_vendor_bulk_out_received+0xd8>)
   8187e:	693b      	ldr	r3, [r7, #16]
   81880:	4413      	add	r3, r2
   81882:	781b      	ldrb	r3, [r3, #0]
   81884:	4618      	mov	r0, r3
   81886:	4b1b      	ldr	r3, [pc, #108]	; (818f4 <main_vendor_bulk_out_received+0xec>)
   81888:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   8188a:	693b      	ldr	r3, [r7, #16]
   8188c:	3301      	adds	r3, #1
   8188e:	613b      	str	r3, [r7, #16]
   81890:	693a      	ldr	r2, [r7, #16]
   81892:	683b      	ldr	r3, [r7, #0]
   81894:	429a      	cmp	r2, r3
   81896:	d3f1      	bcc.n	8187c <main_vendor_bulk_out_received+0x74>
   81898:	e014      	b.n	818c4 <main_vendor_bulk_out_received+0xbc>
        }
#if FPGA_USE_BITBANG
        FPGA_CCLK_LOW();
#endif
    } else if (blockendpoint_usage == bep_fpgabitstreamspi) {
   8189a:	4b13      	ldr	r3, [pc, #76]	; (818e8 <main_vendor_bulk_out_received+0xe0>)
   8189c:	781b      	ldrb	r3, [r3, #0]
   8189e:	2b14      	cmp	r3, #20
   818a0:	d110      	bne.n	818c4 <main_vendor_bulk_out_received+0xbc>
        for(unsigned int i = 0; i < nb_transfered; i++){
   818a2:	2300      	movs	r3, #0
   818a4:	60fb      	str	r3, [r7, #12]
   818a6:	e009      	b.n	818bc <main_vendor_bulk_out_received+0xb4>
            fpga_program_spi_sendbyte(main_buf_loopback[i]);
   818a8:	4a0d      	ldr	r2, [pc, #52]	; (818e0 <main_vendor_bulk_out_received+0xd8>)
   818aa:	68fb      	ldr	r3, [r7, #12]
   818ac:	4413      	add	r3, r2
   818ae:	781b      	ldrb	r3, [r3, #0]
   818b0:	4618      	mov	r0, r3
   818b2:	4b11      	ldr	r3, [pc, #68]	; (818f8 <main_vendor_bulk_out_received+0xf0>)
   818b4:	4798      	blx	r3
        for(unsigned int i = 0; i < nb_transfered; i++){
   818b6:	68fb      	ldr	r3, [r7, #12]
   818b8:	3301      	adds	r3, #1
   818ba:	60fb      	str	r3, [r7, #12]
   818bc:	68fa      	ldr	r2, [r7, #12]
   818be:	683b      	ldr	r3, [r7, #0]
   818c0:	429a      	cmp	r2, r3
   818c2:	d3f1      	bcc.n	818a8 <main_vendor_bulk_out_received+0xa0>
        }
    }

    //printf("BULKOUT: %d bytes\n", (int)nb_transfered);

    udi_vendor_bulk_out_run(
   818c4:	4a05      	ldr	r2, [pc, #20]	; (818dc <main_vendor_bulk_out_received+0xd4>)
   818c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
   818ca:	4805      	ldr	r0, [pc, #20]	; (818e0 <main_vendor_bulk_out_received+0xd8>)
   818cc:	4b05      	ldr	r3, [pc, #20]	; (818e4 <main_vendor_bulk_out_received+0xdc>)
   818ce:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
}
   818d0:	3718      	adds	r7, #24
   818d2:	46bd      	mov	sp, r7
   818d4:	bd80      	pop	{r7, pc}
   818d6:	bf00      	nop
   818d8:	00080ce5 	.word	0x00080ce5
   818dc:	00081809 	.word	0x00081809
   818e0:	20000f48 	.word	0x20000f48
   818e4:	000857ed 	.word	0x000857ed
   818e8:	20001348 	.word	0x20001348
   818ec:	2000028c 	.word	0x2000028c
   818f0:	00080cfd 	.word	0x00080cfd
   818f4:	00081029 	.word	0x00081029
   818f8:	00080f4d 	.word	0x00080f4d

000818fc <openadc_setup_in_received>:

bool openadc_setup_in_received(void)
{
   818fc:	b580      	push	{r7, lr}
   818fe:	af00      	add	r7, sp, #0
    switch(udd_g_ctrlreq.req.bRequest){
   81900:	4b1b      	ldr	r3, [pc, #108]	; (81970 <openadc_setup_in_received+0x74>)
   81902:	785b      	ldrb	r3, [r3, #1]
   81904:	2b12      	cmp	r3, #18
   81906:	d002      	beq.n	8190e <openadc_setup_in_received+0x12>
   81908:	2b15      	cmp	r3, #21
   8190a:	d010      	beq.n	8192e <openadc_setup_in_received+0x32>
   8190c:	e02c      	b.n	81968 <openadc_setup_in_received+0x6c>
    case REQ_MEMREAD_CTRL:
        udd_g_ctrlreq.payload = ctrlmemread_buf;
   8190e:	4b19      	ldr	r3, [pc, #100]	; (81974 <openadc_setup_in_received+0x78>)
   81910:	681b      	ldr	r3, [r3, #0]
   81912:	4a17      	ldr	r2, [pc, #92]	; (81970 <openadc_setup_in_received+0x74>)
   81914:	6093      	str	r3, [r2, #8]
        udd_g_ctrlreq.payload_size = ctrlmemread_size;
   81916:	4b18      	ldr	r3, [pc, #96]	; (81978 <openadc_setup_in_received+0x7c>)
   81918:	681b      	ldr	r3, [r3, #0]
   8191a:	b29a      	uxth	r2, r3
   8191c:	4b14      	ldr	r3, [pc, #80]	; (81970 <openadc_setup_in_received+0x74>)
   8191e:	819a      	strh	r2, [r3, #12]
        ctrlmemread_size = 0;
   81920:	4b15      	ldr	r3, [pc, #84]	; (81978 <openadc_setup_in_received+0x7c>)
   81922:	2200      	movs	r2, #0
   81924:	601a      	str	r2, [r3, #0]

        FPGA_releaselock();
   81926:	4b15      	ldr	r3, [pc, #84]	; (8197c <openadc_setup_in_received+0x80>)
   81928:	4798      	blx	r3
        return true;
   8192a:	2301      	movs	r3, #1
   8192c:	e01d      	b.n	8196a <openadc_setup_in_received+0x6e>
        break;

    case REQ_FPGA_STATUS:
        respbuf[0] = FPGA_ISDONE();
   8192e:	2013      	movs	r0, #19
   81930:	4b13      	ldr	r3, [pc, #76]	; (81980 <openadc_setup_in_received+0x84>)
   81932:	4798      	blx	r3
   81934:	4603      	mov	r3, r0
   81936:	2b00      	cmp	r3, #0
   81938:	bf14      	ite	ne
   8193a:	2301      	movne	r3, #1
   8193c:	2300      	moveq	r3, #0
   8193e:	b2db      	uxtb	r3, r3
   81940:	461a      	mov	r2, r3
   81942:	4b10      	ldr	r3, [pc, #64]	; (81984 <openadc_setup_in_received+0x88>)
   81944:	701a      	strb	r2, [r3, #0]
        respbuf[1] = 0;
   81946:	4b0f      	ldr	r3, [pc, #60]	; (81984 <openadc_setup_in_received+0x88>)
   81948:	2200      	movs	r2, #0
   8194a:	705a      	strb	r2, [r3, #1]
        respbuf[2] = 0;
   8194c:	4b0d      	ldr	r3, [pc, #52]	; (81984 <openadc_setup_in_received+0x88>)
   8194e:	2200      	movs	r2, #0
   81950:	709a      	strb	r2, [r3, #2]
        respbuf[3] = 0;
   81952:	4b0c      	ldr	r3, [pc, #48]	; (81984 <openadc_setup_in_received+0x88>)
   81954:	2200      	movs	r2, #0
   81956:	70da      	strb	r2, [r3, #3]
        udd_g_ctrlreq.payload = respbuf;
   81958:	4b05      	ldr	r3, [pc, #20]	; (81970 <openadc_setup_in_received+0x74>)
   8195a:	4a0a      	ldr	r2, [pc, #40]	; (81984 <openadc_setup_in_received+0x88>)
   8195c:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   8195e:	4b04      	ldr	r3, [pc, #16]	; (81970 <openadc_setup_in_received+0x74>)
   81960:	2204      	movs	r2, #4
   81962:	819a      	strh	r2, [r3, #12]
        return true;
   81964:	2301      	movs	r3, #1
   81966:	e000      	b.n	8196a <openadc_setup_in_received+0x6e>
        break;
    }
    return false;
   81968:	2300      	movs	r3, #0
}
   8196a:	4618      	mov	r0, r3
   8196c:	bd80      	pop	{r7, pc}
   8196e:	bf00      	nop
   81970:	200013dc 	.word	0x200013dc
   81974:	2000134c 	.word	0x2000134c
   81978:	20001350 	.word	0x20001350
   8197c:	00080ce5 	.word	0x00080ce5
   81980:	00085b19 	.word	0x00085b19
   81984:	20000f08 	.word	0x20000f08

00081988 <openadc_setup_out_received>:
bool openadc_setup_out_received(void)
{
   81988:	b580      	push	{r7, lr}
   8198a:	af00      	add	r7, sp, #0
    blockendpoint_usage = bep_emem;
   8198c:	4b2b      	ldr	r3, [pc, #172]	; (81a3c <openadc_setup_out_received+0xb4>)
   8198e:	2200      	movs	r2, #0
   81990:	701a      	strb	r2, [r3, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   81992:	4b2b      	ldr	r3, [pc, #172]	; (81a40 <openadc_setup_out_received+0xb8>)
   81994:	785b      	ldrb	r3, [r3, #1]
   81996:	3b10      	subs	r3, #16
   81998:	2b06      	cmp	r3, #6
   8199a:	d842      	bhi.n	81a22 <openadc_setup_out_received+0x9a>
   8199c:	a201      	add	r2, pc, #4	; (adr r2, 819a4 <openadc_setup_out_received+0x1c>)
   8199e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   819a2:	bf00      	nop
   819a4:	000819c1 	.word	0x000819c1
   819a8:	000819ed 	.word	0x000819ed
   819ac:	000819d7 	.word	0x000819d7
   819b0:	00081a03 	.word	0x00081a03
   819b4:	00081a23 	.word	0x00081a23
   819b8:	00081a23 	.word	0x00081a23
   819bc:	00081a19 	.word	0x00081a19
        /* Memory Read */
    case REQ_MEMREAD_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   819c0:	2006      	movs	r0, #6
   819c2:	4b20      	ldr	r3, [pc, #128]	; (81a44 <openadc_setup_out_received+0xbc>)
   819c4:	4798      	blx	r3
   819c6:	4603      	mov	r3, r0
   819c8:	2b00      	cmp	r3, #0
   819ca:	d02c      	beq.n	81a26 <openadc_setup_out_received+0x9e>
            udd_g_ctrlreq.callback = openadc_readmem_bulk;
   819cc:	4b1c      	ldr	r3, [pc, #112]	; (81a40 <openadc_setup_out_received+0xb8>)
   819ce:	4a1e      	ldr	r2, [pc, #120]	; (81a48 <openadc_setup_out_received+0xc0>)
   819d0:	611a      	str	r2, [r3, #16]
            return true;
   819d2:	2301      	movs	r3, #1
   819d4:	e02f      	b.n	81a36 <openadc_setup_out_received+0xae>
        }
        break;
    case REQ_MEMREAD_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   819d6:	2006      	movs	r0, #6
   819d8:	4b1a      	ldr	r3, [pc, #104]	; (81a44 <openadc_setup_out_received+0xbc>)
   819da:	4798      	blx	r3
   819dc:	4603      	mov	r3, r0
   819de:	2b00      	cmp	r3, #0
   819e0:	d023      	beq.n	81a2a <openadc_setup_out_received+0xa2>
            udd_g_ctrlreq.callback = openadc_readmem_ctrl;
   819e2:	4b17      	ldr	r3, [pc, #92]	; (81a40 <openadc_setup_out_received+0xb8>)
   819e4:	4a19      	ldr	r2, [pc, #100]	; (81a4c <openadc_setup_out_received+0xc4>)
   819e6:	611a      	str	r2, [r3, #16]
            return true;
   819e8:	2301      	movs	r3, #1
   819ea:	e024      	b.n	81a36 <openadc_setup_out_received+0xae>
        }
        break;

        /* Memory Write */
    case REQ_MEMWRITE_BULK:
        if (FPGA_setlock(fpga_usblocked)){
   819ec:	2006      	movs	r0, #6
   819ee:	4b15      	ldr	r3, [pc, #84]	; (81a44 <openadc_setup_out_received+0xbc>)
   819f0:	4798      	blx	r3
   819f2:	4603      	mov	r3, r0
   819f4:	2b00      	cmp	r3, #0
   819f6:	d01a      	beq.n	81a2e <openadc_setup_out_received+0xa6>
            udd_g_ctrlreq.callback = openadc_writemem_bulk;
   819f8:	4b11      	ldr	r3, [pc, #68]	; (81a40 <openadc_setup_out_received+0xb8>)
   819fa:	4a15      	ldr	r2, [pc, #84]	; (81a50 <openadc_setup_out_received+0xc8>)
   819fc:	611a      	str	r2, [r3, #16]
            return true;
   819fe:	2301      	movs	r3, #1
   81a00:	e019      	b.n	81a36 <openadc_setup_out_received+0xae>
        }
        break;


    case REQ_MEMWRITE_CTRL:
        if (FPGA_setlock(fpga_usblocked)){
   81a02:	2006      	movs	r0, #6
   81a04:	4b0f      	ldr	r3, [pc, #60]	; (81a44 <openadc_setup_out_received+0xbc>)
   81a06:	4798      	blx	r3
   81a08:	4603      	mov	r3, r0
   81a0a:	2b00      	cmp	r3, #0
   81a0c:	d011      	beq.n	81a32 <openadc_setup_out_received+0xaa>
            udd_g_ctrlreq.callback = openadc_writemem_ctrl;
   81a0e:	4b0c      	ldr	r3, [pc, #48]	; (81a40 <openadc_setup_out_received+0xb8>)
   81a10:	4a10      	ldr	r2, [pc, #64]	; (81a54 <openadc_setup_out_received+0xcc>)
   81a12:	611a      	str	r2, [r3, #16]
            return true;
   81a14:	2301      	movs	r3, #1
   81a16:	e00e      	b.n	81a36 <openadc_setup_out_received+0xae>
        }
        break;

    case REQ_FPGA_PROGRAM:
        udd_g_ctrlreq.callback = openadc_progfpga_bulk;
   81a18:	4b09      	ldr	r3, [pc, #36]	; (81a40 <openadc_setup_out_received+0xb8>)
   81a1a:	4a0f      	ldr	r2, [pc, #60]	; (81a58 <openadc_setup_out_received+0xd0>)
   81a1c:	611a      	str	r2, [r3, #16]
        return true;
   81a1e:	2301      	movs	r3, #1
   81a20:	e009      	b.n	81a36 <openadc_setup_out_received+0xae>

    default:
        return false;
   81a22:	2300      	movs	r3, #0
   81a24:	e007      	b.n	81a36 <openadc_setup_out_received+0xae>
        break;
   81a26:	bf00      	nop
   81a28:	e004      	b.n	81a34 <openadc_setup_out_received+0xac>
        break;
   81a2a:	bf00      	nop
   81a2c:	e002      	b.n	81a34 <openadc_setup_out_received+0xac>
        break;
   81a2e:	bf00      	nop
   81a30:	e000      	b.n	81a34 <openadc_setup_out_received+0xac>
        break;
   81a32:	bf00      	nop
    }

    return false;
   81a34:	2300      	movs	r3, #0
}
   81a36:	4618      	mov	r0, r3
   81a38:	bd80      	pop	{r7, pc}
   81a3a:	bf00      	nop
   81a3c:	20001348 	.word	0x20001348
   81a40:	200013dc 	.word	0x200013dc
   81a44:	00080ca5 	.word	0x00080ca5
   81a48:	00081665 	.word	0x00081665
   81a4c:	000816f9 	.word	0x000816f9
   81a50:	000816bd 	.word	0x000816bd
   81a54:	00081751 	.word	0x00081751
   81a58:	00081585 	.word	0x00081585

00081a5c <openadc_register_handlers>:

void openadc_register_handlers(void)
{
   81a5c:	b580      	push	{r7, lr}
   81a5e:	af00      	add	r7, sp, #0
    FPGA_releaselock();
   81a60:	4b04      	ldr	r3, [pc, #16]	; (81a74 <openadc_register_handlers+0x18>)
   81a62:	4798      	blx	r3
    naeusb_add_in_handler(openadc_setup_in_received);
   81a64:	4804      	ldr	r0, [pc, #16]	; (81a78 <openadc_register_handlers+0x1c>)
   81a66:	4b05      	ldr	r3, [pc, #20]	; (81a7c <openadc_register_handlers+0x20>)
   81a68:	4798      	blx	r3
    naeusb_add_out_handler(openadc_setup_out_received);
   81a6a:	4805      	ldr	r0, [pc, #20]	; (81a80 <openadc_register_handlers+0x24>)
   81a6c:	4b05      	ldr	r3, [pc, #20]	; (81a84 <openadc_register_handlers+0x28>)
   81a6e:	4798      	blx	r3
}
   81a70:	bf00      	nop
   81a72:	bd80      	pop	{r7, pc}
   81a74:	00080ce5 	.word	0x00080ce5
   81a78:	000818fd 	.word	0x000818fd
   81a7c:	0008104d 	.word	0x0008104d
   81a80:	00081989 	.word	0x00081989
   81a84:	0008108d 	.word	0x0008108d

00081a88 <ctrl_change_pwr>:
#include "naeusb_phywhisperer.h"
extern uint8_t USB_PWR_STATE;

void ctrl_change_pwr(void) {
   81a88:	b480      	push	{r7}
   81a8a:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.wValue) {
   81a8c:	4b19      	ldr	r3, [pc, #100]	; (81af4 <ctrl_change_pwr+0x6c>)
   81a8e:	885b      	ldrh	r3, [r3, #2]
   81a90:	2b02      	cmp	r3, #2
   81a92:	d01e      	beq.n	81ad2 <ctrl_change_pwr+0x4a>
   81a94:	2b02      	cmp	r3, #2
   81a96:	dc28      	bgt.n	81aea <ctrl_change_pwr+0x62>
   81a98:	2b00      	cmp	r3, #0
   81a9a:	d002      	beq.n	81aa2 <ctrl_change_pwr+0x1a>
   81a9c:	2b01      	cmp	r3, #1
   81a9e:	d00c      	beq.n	81aba <ctrl_change_pwr+0x32>
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
        USB_PWR_STATE = 2;
        break;
    }

}
   81aa0:	e023      	b.n	81aea <ctrl_change_pwr+0x62>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81aa2:	4b15      	ldr	r3, [pc, #84]	; (81af8 <ctrl_change_pwr+0x70>)
   81aa4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81aa8:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   81aaa:	4b13      	ldr	r3, [pc, #76]	; (81af8 <ctrl_change_pwr+0x70>)
   81aac:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81ab0:	635a      	str	r2, [r3, #52]	; 0x34
        USB_PWR_STATE = 0;
   81ab2:	4b12      	ldr	r3, [pc, #72]	; (81afc <ctrl_change_pwr+0x74>)
   81ab4:	2200      	movs	r2, #0
   81ab6:	701a      	strb	r2, [r3, #0]
        break;
   81ab8:	e017      	b.n	81aea <ctrl_change_pwr+0x62>
        PIOA->PIO_CODR = (1 << F_VBHOST); //disable sniff power
   81aba:	4b0f      	ldr	r3, [pc, #60]	; (81af8 <ctrl_change_pwr+0x70>)
   81abc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81ac0:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VB5V); //enable host power
   81ac2:	4b0d      	ldr	r3, [pc, #52]	; (81af8 <ctrl_change_pwr+0x70>)
   81ac4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81ac8:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 1;
   81aca:	4b0c      	ldr	r3, [pc, #48]	; (81afc <ctrl_change_pwr+0x74>)
   81acc:	2201      	movs	r2, #1
   81ace:	701a      	strb	r2, [r3, #0]
        break;
   81ad0:	e00b      	b.n	81aea <ctrl_change_pwr+0x62>
        PIOA->PIO_CODR = (1 << F_VB5V); //disable host power
   81ad2:	4b09      	ldr	r3, [pc, #36]	; (81af8 <ctrl_change_pwr+0x70>)
   81ad4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   81ad8:	635a      	str	r2, [r3, #52]	; 0x34
        PIOA->PIO_SODR = (1 << F_VBHOST); //enable sniff power
   81ada:	4b07      	ldr	r3, [pc, #28]	; (81af8 <ctrl_change_pwr+0x70>)
   81adc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
   81ae0:	631a      	str	r2, [r3, #48]	; 0x30
        USB_PWR_STATE = 2;
   81ae2:	4b06      	ldr	r3, [pc, #24]	; (81afc <ctrl_change_pwr+0x74>)
   81ae4:	2202      	movs	r2, #2
   81ae6:	701a      	strb	r2, [r3, #0]
        break;
   81ae8:	bf00      	nop
}
   81aea:	bf00      	nop
   81aec:	46bd      	mov	sp, r7
   81aee:	bc80      	pop	{r7}
   81af0:	4770      	bx	lr
   81af2:	bf00      	nop
   81af4:	200013dc 	.word	0x200013dc
   81af8:	400e0c00 	.word	0x400e0c00
   81afc:	20000e3c 	.word	0x20000e3c

00081b00 <ctrl_fpga_reset>:

void ctrl_fpga_reset (void) {
   81b00:	b580      	push	{r7, lr}
   81b02:	af00      	add	r7, sp, #0
    gpio_set_pin_high(PIN_EBI_USB_SPARE0);
   81b04:	2026      	movs	r0, #38	; 0x26
   81b06:	4b03      	ldr	r3, [pc, #12]	; (81b14 <ctrl_fpga_reset+0x14>)
   81b08:	4798      	blx	r3
    gpio_set_pin_low(PIN_EBI_USB_SPARE0);
   81b0a:	2026      	movs	r0, #38	; 0x26
   81b0c:	4b02      	ldr	r3, [pc, #8]	; (81b18 <ctrl_fpga_reset+0x18>)
   81b0e:	4798      	blx	r3
}
   81b10:	bf00      	nop
   81b12:	bd80      	pop	{r7, pc}
   81b14:	00085b49 	.word	0x00085b49
   81b18:	00085b79 	.word	0x00085b79

00081b1c <phywhisperer_setup_out_received>:

bool phywhisperer_setup_out_received(void) {
   81b1c:	b480      	push	{r7}
   81b1e:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {
   81b20:	4b0a      	ldr	r3, [pc, #40]	; (81b4c <phywhisperer_setup_out_received+0x30>)
   81b22:	785b      	ldrb	r3, [r3, #1]
   81b24:	2b24      	cmp	r3, #36	; 0x24
   81b26:	d002      	beq.n	81b2e <phywhisperer_setup_out_received+0x12>
   81b28:	2b25      	cmp	r3, #37	; 0x25
   81b2a:	d005      	beq.n	81b38 <phywhisperer_setup_out_received+0x1c>
   81b2c:	e009      	b.n	81b42 <phywhisperer_setup_out_received+0x26>
    case REQ_CHANGE_PWR:
        //TODO
        udd_g_ctrlreq.callback = ctrl_change_pwr;
   81b2e:	4b07      	ldr	r3, [pc, #28]	; (81b4c <phywhisperer_setup_out_received+0x30>)
   81b30:	4a07      	ldr	r2, [pc, #28]	; (81b50 <phywhisperer_setup_out_received+0x34>)
   81b32:	611a      	str	r2, [r3, #16]
        return true;
   81b34:	2301      	movs	r3, #1
   81b36:	e005      	b.n	81b44 <phywhisperer_setup_out_received+0x28>

    case REQ_FPGA_RESET:
        udd_g_ctrlreq.callback = ctrl_fpga_reset;
   81b38:	4b04      	ldr	r3, [pc, #16]	; (81b4c <phywhisperer_setup_out_received+0x30>)
   81b3a:	4a06      	ldr	r2, [pc, #24]	; (81b54 <phywhisperer_setup_out_received+0x38>)
   81b3c:	611a      	str	r2, [r3, #16]
        return true;
   81b3e:	2301      	movs	r3, #1
   81b40:	e000      	b.n	81b44 <phywhisperer_setup_out_received+0x28>

    default:
        return false;
   81b42:	2300      	movs	r3, #0
    }
    return false;
}
   81b44:	4618      	mov	r0, r3
   81b46:	46bd      	mov	sp, r7
   81b48:	bc80      	pop	{r7}
   81b4a:	4770      	bx	lr
   81b4c:	200013dc 	.word	0x200013dc
   81b50:	00081a89 	.word	0x00081a89
   81b54:	00081b01 	.word	0x00081b01

00081b58 <phywhisperer_setup_in_received>:

bool phywhisperer_setup_in_received(void)
{
   81b58:	b480      	push	{r7}
   81b5a:	af00      	add	r7, sp, #0
    switch (udd_g_ctrlreq.req.bRequest) {

    default:
        return false;
   81b5c:	2300      	movs	r3, #0
    }
    return false;
}
   81b5e:	4618      	mov	r0, r3
   81b60:	46bd      	mov	sp, r7
   81b62:	bc80      	pop	{r7}
   81b64:	4770      	bx	lr
   81b66:	0000      	movs	r0, r0

00081b68 <phywhisperer_register_handlers>:

void phywhisperer_register_handlers(void)
{
   81b68:	b580      	push	{r7, lr}
   81b6a:	af00      	add	r7, sp, #0
    naeusb_add_in_handler(phywhisperer_setup_in_received);
   81b6c:	4803      	ldr	r0, [pc, #12]	; (81b7c <phywhisperer_register_handlers+0x14>)
   81b6e:	4b04      	ldr	r3, [pc, #16]	; (81b80 <phywhisperer_register_handlers+0x18>)
   81b70:	4798      	blx	r3
    naeusb_add_out_handler(phywhisperer_setup_out_received);
   81b72:	4804      	ldr	r0, [pc, #16]	; (81b84 <phywhisperer_register_handlers+0x1c>)
   81b74:	4b04      	ldr	r3, [pc, #16]	; (81b88 <phywhisperer_register_handlers+0x20>)
   81b76:	4798      	blx	r3
   81b78:	bf00      	nop
   81b7a:	bd80      	pop	{r7, pc}
   81b7c:	00081b59 	.word	0x00081b59
   81b80:	0008104d 	.word	0x0008104d
   81b84:	00081b1d 	.word	0x00081b1d
   81b88:	0008108d 	.word	0x0008108d

00081b8c <udc_get_string_serial_name>:
 * to a suitable pointer. This will also require the serial number length
 * define USB_DEVICE_GET_SERIAL_NAME_LENGTH.
 */
#if defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	static const uint8_t *udc_get_string_serial_name(void)
	{
   81b8c:	b480      	push	{r7}
   81b8e:	af00      	add	r7, sp, #0
		return (const uint8_t *)USB_DEVICE_GET_SERIAL_NAME_POINTER;
   81b90:	4b02      	ldr	r3, [pc, #8]	; (81b9c <udc_get_string_serial_name+0x10>)
	}
   81b92:	4618      	mov	r0, r3
   81b94:	46bd      	mov	sp, r7
   81b96:	bc80      	pop	{r7}
   81b98:	4770      	bx	lr
   81b9a:	bf00      	nop
   81b9c:	2000025c 	.word	0x2000025c

00081ba0 <udc_get_interface_desc>:
	.header.bDescriptorType = USB_DT_STRING
};
//! @}

usb_iface_desc_t UDC_DESC_STORAGE *udc_get_interface_desc(void)
{
   81ba0:	b480      	push	{r7}
   81ba2:	af00      	add	r7, sp, #0
	return udc_ptr_iface;
   81ba4:	4b02      	ldr	r3, [pc, #8]	; (81bb0 <udc_get_interface_desc+0x10>)
   81ba6:	681b      	ldr	r3, [r3, #0]
}
   81ba8:	4618      	mov	r0, r3
   81baa:	46bd      	mov	sp, r7
   81bac:	bc80      	pop	{r7}
   81bae:	4770      	bx	lr
   81bb0:	2000135c 	.word	0x2000135c

00081bb4 <udc_get_eof_conf>:
 * \brief Returns a value to check the end of USB Configuration descriptor
 *
 * \return address after the last byte of USB Configuration descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_get_eof_conf(void)
{
   81bb4:	b480      	push	{r7}
   81bb6:	af00      	add	r7, sp, #0
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
			udc_ptr_conf->desc +
   81bb8:	4b06      	ldr	r3, [pc, #24]	; (81bd4 <udc_get_eof_conf+0x20>)
   81bba:	681b      	ldr	r3, [r3, #0]
   81bbc:	681b      	ldr	r3, [r3, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81bbe:	4a05      	ldr	r2, [pc, #20]	; (81bd4 <udc_get_eof_conf+0x20>)
   81bc0:	6812      	ldr	r2, [r2, #0]
   81bc2:	6812      	ldr	r2, [r2, #0]
   81bc4:	8852      	ldrh	r2, [r2, #2]
   81bc6:	b292      	uxth	r2, r2
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81bc8:	4413      	add	r3, r2
}
   81bca:	4618      	mov	r0, r3
   81bcc:	46bd      	mov	sp, r7
   81bce:	bc80      	pop	{r7}
   81bd0:	4770      	bx	lr
   81bd2:	bf00      	nop
   81bd4:	20001358 	.word	0x20001358

00081bd8 <udc_next_desc_in_iface>:
 * \return address of specific descriptor found
 * \return NULL if it is the end of global interface descriptor
 */
static usb_conf_desc_t UDC_DESC_STORAGE *udc_next_desc_in_iface(usb_conf_desc_t
		UDC_DESC_STORAGE * desc, uint8_t desc_id)
{
   81bd8:	b580      	push	{r7, lr}
   81bda:	b084      	sub	sp, #16
   81bdc:	af00      	add	r7, sp, #0
   81bde:	6078      	str	r0, [r7, #4]
   81be0:	460b      	mov	r3, r1
   81be2:	70fb      	strb	r3, [r7, #3]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_eof_desc;

	ptr_eof_desc = udc_get_eof_conf();
   81be4:	4b12      	ldr	r3, [pc, #72]	; (81c30 <udc_next_desc_in_iface+0x58>)
   81be6:	4798      	blx	r3
   81be8:	60f8      	str	r0, [r7, #12]
	// Go to next descriptor
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
			desc->bLength);
   81bea:	687b      	ldr	r3, [r7, #4]
   81bec:	781b      	ldrb	r3, [r3, #0]
   81bee:	461a      	mov	r2, r3
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81bf0:	687b      	ldr	r3, [r7, #4]
   81bf2:	4413      	add	r3, r2
   81bf4:	607b      	str	r3, [r7, #4]
	// Check the end of configuration descriptor
	while (ptr_eof_desc > desc) {
   81bf6:	e010      	b.n	81c1a <udc_next_desc_in_iface+0x42>
		// If new interface descriptor is found,
		// then it is the end of the current global interface descriptor
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81bf8:	687b      	ldr	r3, [r7, #4]
   81bfa:	785b      	ldrb	r3, [r3, #1]
   81bfc:	2b04      	cmp	r3, #4
   81bfe:	d011      	beq.n	81c24 <udc_next_desc_in_iface+0x4c>
			break; // End of global interface descriptor
		}
		if (desc_id == desc->bDescriptorType) {
   81c00:	687b      	ldr	r3, [r7, #4]
   81c02:	785b      	ldrb	r3, [r3, #1]
   81c04:	78fa      	ldrb	r2, [r7, #3]
   81c06:	429a      	cmp	r2, r3
   81c08:	d101      	bne.n	81c0e <udc_next_desc_in_iface+0x36>
			return desc; // Specific descriptor found
   81c0a:	687b      	ldr	r3, [r7, #4]
   81c0c:	e00c      	b.n	81c28 <udc_next_desc_in_iface+0x50>
		}
		// Go to next descriptor
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
				desc->bLength);
   81c0e:	687b      	ldr	r3, [r7, #4]
   81c10:	781b      	ldrb	r3, [r3, #0]
   81c12:	461a      	mov	r2, r3
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81c14:	687b      	ldr	r3, [r7, #4]
   81c16:	4413      	add	r3, r2
   81c18:	607b      	str	r3, [r7, #4]
	while (ptr_eof_desc > desc) {
   81c1a:	68fa      	ldr	r2, [r7, #12]
   81c1c:	687b      	ldr	r3, [r7, #4]
   81c1e:	429a      	cmp	r2, r3
   81c20:	d8ea      	bhi.n	81bf8 <udc_next_desc_in_iface+0x20>
   81c22:	e000      	b.n	81c26 <udc_next_desc_in_iface+0x4e>
			break; // End of global interface descriptor
   81c24:	bf00      	nop
	}
	return NULL; // No specific descriptor found
   81c26:	2300      	movs	r3, #0
}
   81c28:	4618      	mov	r0, r3
   81c2a:	3710      	adds	r7, #16
   81c2c:	46bd      	mov	sp, r7
   81c2e:	bd80      	pop	{r7, pc}
   81c30:	00081bb5 	.word	0x00081bb5

00081c34 <udc_update_iface_desc>:
 * \param setting_num   Setting number of interface to find
 *
 * \return 1 if found or 0 if not found
 */
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
{
   81c34:	b580      	push	{r7, lr}
   81c36:	b084      	sub	sp, #16
   81c38:	af00      	add	r7, sp, #0
   81c3a:	4603      	mov	r3, r0
   81c3c:	460a      	mov	r2, r1
   81c3e:	71fb      	strb	r3, [r7, #7]
   81c40:	4613      	mov	r3, r2
   81c42:	71bb      	strb	r3, [r7, #6]
	usb_conf_desc_t UDC_DESC_STORAGE *ptr_end_desc;

	if (0 == udc_num_configuration) {
   81c44:	4b1e      	ldr	r3, [pc, #120]	; (81cc0 <udc_update_iface_desc+0x8c>)
   81c46:	781b      	ldrb	r3, [r3, #0]
   81c48:	2b00      	cmp	r3, #0
   81c4a:	d101      	bne.n	81c50 <udc_update_iface_desc+0x1c>
		return false;
   81c4c:	2300      	movs	r3, #0
   81c4e:	e032      	b.n	81cb6 <udc_update_iface_desc+0x82>
	}

	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81c50:	4b1c      	ldr	r3, [pc, #112]	; (81cc4 <udc_update_iface_desc+0x90>)
   81c52:	681b      	ldr	r3, [r3, #0]
   81c54:	681b      	ldr	r3, [r3, #0]
   81c56:	791b      	ldrb	r3, [r3, #4]
   81c58:	79fa      	ldrb	r2, [r7, #7]
   81c5a:	429a      	cmp	r2, r3
   81c5c:	d301      	bcc.n	81c62 <udc_update_iface_desc+0x2e>
		return false;
   81c5e:	2300      	movs	r3, #0
   81c60:	e029      	b.n	81cb6 <udc_update_iface_desc+0x82>
	}

	// Start at the beginning of configuration descriptor
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
			udc_ptr_conf->desc;
   81c62:	4b18      	ldr	r3, [pc, #96]	; (81cc4 <udc_update_iface_desc+0x90>)
   81c64:	681b      	ldr	r3, [r3, #0]
   81c66:	681b      	ldr	r3, [r3, #0]
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81c68:	4a17      	ldr	r2, [pc, #92]	; (81cc8 <udc_update_iface_desc+0x94>)
   81c6a:	6013      	str	r3, [r2, #0]

	// Check the end of configuration descriptor
	ptr_end_desc = udc_get_eof_conf();
   81c6c:	4b17      	ldr	r3, [pc, #92]	; (81ccc <udc_update_iface_desc+0x98>)
   81c6e:	4798      	blx	r3
   81c70:	60f8      	str	r0, [r7, #12]
	while (ptr_end_desc >
   81c72:	e01a      	b.n	81caa <udc_update_iface_desc+0x76>
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   81c74:	4b14      	ldr	r3, [pc, #80]	; (81cc8 <udc_update_iface_desc+0x94>)
   81c76:	681b      	ldr	r3, [r3, #0]
   81c78:	785b      	ldrb	r3, [r3, #1]
   81c7a:	2b04      	cmp	r3, #4
   81c7c:	d10d      	bne.n	81c9a <udc_update_iface_desc+0x66>
			// A interface descriptor is found
			// Check interface and alternate setting number
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81c7e:	4b12      	ldr	r3, [pc, #72]	; (81cc8 <udc_update_iface_desc+0x94>)
   81c80:	681b      	ldr	r3, [r3, #0]
   81c82:	789b      	ldrb	r3, [r3, #2]
   81c84:	79fa      	ldrb	r2, [r7, #7]
   81c86:	429a      	cmp	r2, r3
   81c88:	d107      	bne.n	81c9a <udc_update_iface_desc+0x66>
					(setting_num ==
					udc_ptr_iface->bAlternateSetting)) {
   81c8a:	4b0f      	ldr	r3, [pc, #60]	; (81cc8 <udc_update_iface_desc+0x94>)
   81c8c:	681b      	ldr	r3, [r3, #0]
   81c8e:	78db      	ldrb	r3, [r3, #3]
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81c90:	79ba      	ldrb	r2, [r7, #6]
   81c92:	429a      	cmp	r2, r3
   81c94:	d101      	bne.n	81c9a <udc_update_iface_desc+0x66>
				return true; // Interface found
   81c96:	2301      	movs	r3, #1
   81c98:	e00d      	b.n	81cb6 <udc_update_iface_desc+0x82>
			}
		}
		// Go to next descriptor
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81c9a:	4b0b      	ldr	r3, [pc, #44]	; (81cc8 <udc_update_iface_desc+0x94>)
   81c9c:	681b      	ldr	r3, [r3, #0]
				(uint8_t *) udc_ptr_iface +
				udc_ptr_iface->bLength);
   81c9e:	4a0a      	ldr	r2, [pc, #40]	; (81cc8 <udc_update_iface_desc+0x94>)
   81ca0:	6812      	ldr	r2, [r2, #0]
   81ca2:	7812      	ldrb	r2, [r2, #0]
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81ca4:	4413      	add	r3, r2
   81ca6:	4a08      	ldr	r2, [pc, #32]	; (81cc8 <udc_update_iface_desc+0x94>)
   81ca8:	6013      	str	r3, [r2, #0]
			(UDC_DESC_STORAGE usb_conf_desc_t *) udc_ptr_iface) {
   81caa:	4b07      	ldr	r3, [pc, #28]	; (81cc8 <udc_update_iface_desc+0x94>)
   81cac:	681b      	ldr	r3, [r3, #0]
	while (ptr_end_desc >
   81cae:	68fa      	ldr	r2, [r7, #12]
   81cb0:	429a      	cmp	r2, r3
   81cb2:	d8df      	bhi.n	81c74 <udc_update_iface_desc+0x40>
	}
	return false; // Interface not found
   81cb4:	2300      	movs	r3, #0
}
   81cb6:	4618      	mov	r0, r3
   81cb8:	3710      	adds	r7, #16
   81cba:	46bd      	mov	sp, r7
   81cbc:	bd80      	pop	{r7, pc}
   81cbe:	bf00      	nop
   81cc0:	20001356 	.word	0x20001356
   81cc4:	20001358 	.word	0x20001358
   81cc8:	2000135c 	.word	0x2000135c
   81ccc:	00081bb5 	.word	0x00081bb5

00081cd0 <udc_iface_disable>:
 * \param iface_num     Interface number to disable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_disable(uint8_t iface_num)
{
   81cd0:	b580      	push	{r7, lr}
   81cd2:	b084      	sub	sp, #16
   81cd4:	af00      	add	r7, sp, #0
   81cd6:	4603      	mov	r3, r0
   81cd8:	71fb      	strb	r3, [r7, #7]
	udi_api_t UDC_DESC_STORAGE *udi_api;

	// Select first alternate setting of the interface
	// to update udc_ptr_iface before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   81cda:	79fb      	ldrb	r3, [r7, #7]
   81cdc:	2100      	movs	r1, #0
   81cde:	4618      	mov	r0, r3
   81ce0:	4b1e      	ldr	r3, [pc, #120]	; (81d5c <udc_iface_disable+0x8c>)
   81ce2:	4798      	blx	r3
   81ce4:	4603      	mov	r3, r0
   81ce6:	f083 0301 	eor.w	r3, r3, #1
   81cea:	b2db      	uxtb	r3, r3
   81cec:	2b00      	cmp	r3, #0
   81cee:	d001      	beq.n	81cf4 <udc_iface_disable+0x24>
		return false;
   81cf0:	2300      	movs	r3, #0
   81cf2:	e02f      	b.n	81d54 <udc_iface_disable+0x84>
	}

	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81cf4:	4b1a      	ldr	r3, [pc, #104]	; (81d60 <udc_iface_disable+0x90>)
   81cf6:	681b      	ldr	r3, [r3, #0]
   81cf8:	685a      	ldr	r2, [r3, #4]
   81cfa:	79fb      	ldrb	r3, [r7, #7]
   81cfc:	009b      	lsls	r3, r3, #2
   81cfe:	4413      	add	r3, r2
   81d00:	681b      	ldr	r3, [r3, #0]
   81d02:	60bb      	str	r3, [r7, #8]

#if (0!=USB_DEVICE_MAX_EP)
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81d04:	68bb      	ldr	r3, [r7, #8]
   81d06:	68db      	ldr	r3, [r3, #12]
   81d08:	4798      	blx	r3
   81d0a:	4603      	mov	r3, r0
   81d0c:	461a      	mov	r2, r3
   81d0e:	79fb      	ldrb	r3, [r7, #7]
   81d10:	4611      	mov	r1, r2
   81d12:	4618      	mov	r0, r3
   81d14:	4b11      	ldr	r3, [pc, #68]	; (81d5c <udc_iface_disable+0x8c>)
   81d16:	4798      	blx	r3
   81d18:	4603      	mov	r3, r0
   81d1a:	f083 0301 	eor.w	r3, r3, #1
   81d1e:	b2db      	uxtb	r3, r3
   81d20:	2b00      	cmp	r3, #0
   81d22:	d001      	beq.n	81d28 <udc_iface_disable+0x58>
		return false;
   81d24:	2300      	movs	r3, #0
   81d26:	e015      	b.n	81d54 <udc_iface_disable+0x84>
	}

	// Start at the beginning of interface descriptor
	{
		usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81d28:	4b0e      	ldr	r3, [pc, #56]	; (81d64 <udc_iface_disable+0x94>)
   81d2a:	681b      	ldr	r3, [r3, #0]
   81d2c:	60fb      	str	r3, [r7, #12]
		while (1) {
			// Search Endpoint descriptor included in global interface descriptor
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
					udc_next_desc_in_iface((UDC_DESC_STORAGE
   81d2e:	2105      	movs	r1, #5
   81d30:	68f8      	ldr	r0, [r7, #12]
   81d32:	4b0d      	ldr	r3, [pc, #52]	; (81d68 <udc_iface_disable+0x98>)
   81d34:	4798      	blx	r3
   81d36:	60f8      	str	r0, [r7, #12]
					usb_conf_desc_t *)
					ep_desc, USB_DT_ENDPOINT);
			if (NULL == ep_desc) {
   81d38:	68fb      	ldr	r3, [r7, #12]
   81d3a:	2b00      	cmp	r3, #0
   81d3c:	d005      	beq.n	81d4a <udc_iface_disable+0x7a>
				break;
			}
			// Free the endpoint used by the interface
			udd_ep_free(ep_desc->bEndpointAddress);
   81d3e:	68fb      	ldr	r3, [r7, #12]
   81d40:	789b      	ldrb	r3, [r3, #2]
   81d42:	4618      	mov	r0, r3
   81d44:	4b09      	ldr	r3, [pc, #36]	; (81d6c <udc_iface_disable+0x9c>)
   81d46:	4798      	blx	r3
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   81d48:	e7f1      	b.n	81d2e <udc_iface_disable+0x5e>
				break;
   81d4a:	bf00      	nop
		}
	}
#endif

	// Disable interface
	udi_api->disable();
   81d4c:	68bb      	ldr	r3, [r7, #8]
   81d4e:	685b      	ldr	r3, [r3, #4]
   81d50:	4798      	blx	r3
	return true;
   81d52:	2301      	movs	r3, #1
}
   81d54:	4618      	mov	r0, r3
   81d56:	3710      	adds	r7, #16
   81d58:	46bd      	mov	sp, r7
   81d5a:	bd80      	pop	{r7, pc}
   81d5c:	00081c35 	.word	0x00081c35
   81d60:	20001358 	.word	0x20001358
   81d64:	2000135c 	.word	0x2000135c
   81d68:	00081bd9 	.word	0x00081bd9
   81d6c:	00083a05 	.word	0x00083a05

00081d70 <udc_iface_enable>:
 * \param setting_num   Setting number to enable
 *
 * \return 1 if it is done or 0 if interface is not found
 */
static bool udc_iface_enable(uint8_t iface_num, uint8_t setting_num)
{
   81d70:	b580      	push	{r7, lr}
   81d72:	b084      	sub	sp, #16
   81d74:	af00      	add	r7, sp, #0
   81d76:	4603      	mov	r3, r0
   81d78:	460a      	mov	r2, r1
   81d7a:	71fb      	strb	r3, [r7, #7]
   81d7c:	4613      	mov	r3, r2
   81d7e:	71bb      	strb	r3, [r7, #6]
	// Select the interface descriptor
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   81d80:	79ba      	ldrb	r2, [r7, #6]
   81d82:	79fb      	ldrb	r3, [r7, #7]
   81d84:	4611      	mov	r1, r2
   81d86:	4618      	mov	r0, r3
   81d88:	4b1a      	ldr	r3, [pc, #104]	; (81df4 <udc_iface_enable+0x84>)
   81d8a:	4798      	blx	r3
   81d8c:	4603      	mov	r3, r0
   81d8e:	f083 0301 	eor.w	r3, r3, #1
   81d92:	b2db      	uxtb	r3, r3
   81d94:	2b00      	cmp	r3, #0
   81d96:	d001      	beq.n	81d9c <udc_iface_enable+0x2c>
		return false;
   81d98:	2300      	movs	r3, #0
   81d9a:	e027      	b.n	81dec <udc_iface_enable+0x7c>

#if (0!=USB_DEVICE_MAX_EP)
	usb_ep_desc_t UDC_DESC_STORAGE *ep_desc;

	// Start at the beginning of the global interface descriptor
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81d9c:	4b16      	ldr	r3, [pc, #88]	; (81df8 <udc_iface_enable+0x88>)
   81d9e:	681b      	ldr	r3, [r3, #0]
   81da0:	60fb      	str	r3, [r7, #12]
	while (1) {
		// Search Endpoint descriptor included in the global interface descriptor
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
				udc_next_desc_in_iface((UDC_DESC_STORAGE
   81da2:	2105      	movs	r1, #5
   81da4:	68f8      	ldr	r0, [r7, #12]
   81da6:	4b15      	ldr	r3, [pc, #84]	; (81dfc <udc_iface_enable+0x8c>)
   81da8:	4798      	blx	r3
   81daa:	60f8      	str	r0, [r7, #12]
						usb_conf_desc_t *) ep_desc,
				USB_DT_ENDPOINT);
		if (NULL == ep_desc)
   81dac:	68fb      	ldr	r3, [r7, #12]
   81dae:	2b00      	cmp	r3, #0
   81db0:	d011      	beq.n	81dd6 <udc_iface_enable+0x66>
			break;
		// Alloc the endpoint used by the interface
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81db2:	68fb      	ldr	r3, [r7, #12]
   81db4:	7898      	ldrb	r0, [r3, #2]
   81db6:	68fb      	ldr	r3, [r7, #12]
   81db8:	78d9      	ldrb	r1, [r3, #3]
   81dba:	68fb      	ldr	r3, [r7, #12]
   81dbc:	889b      	ldrh	r3, [r3, #4]
   81dbe:	b29b      	uxth	r3, r3
   81dc0:	461a      	mov	r2, r3
   81dc2:	4b0f      	ldr	r3, [pc, #60]	; (81e00 <udc_iface_enable+0x90>)
   81dc4:	4798      	blx	r3
   81dc6:	4603      	mov	r3, r0
   81dc8:	f083 0301 	eor.w	r3, r3, #1
   81dcc:	b2db      	uxtb	r3, r3
   81dce:	2b00      	cmp	r3, #0
   81dd0:	d0e7      	beq.n	81da2 <udc_iface_enable+0x32>
				ep_desc->bmAttributes,
				le16_to_cpu
				(ep_desc->wMaxPacketSize))) {
			return false;
   81dd2:	2300      	movs	r3, #0
   81dd4:	e00a      	b.n	81dec <udc_iface_enable+0x7c>
			break;
   81dd6:	bf00      	nop
		}
	}
#endif
	// Enable the interface
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81dd8:	4b0a      	ldr	r3, [pc, #40]	; (81e04 <udc_iface_enable+0x94>)
   81dda:	681b      	ldr	r3, [r3, #0]
   81ddc:	685a      	ldr	r2, [r3, #4]
   81dde:	79fb      	ldrb	r3, [r7, #7]
   81de0:	009b      	lsls	r3, r3, #2
   81de2:	4413      	add	r3, r2
   81de4:	681b      	ldr	r3, [r3, #0]
   81de6:	681b      	ldr	r3, [r3, #0]
   81de8:	4798      	blx	r3
   81dea:	4603      	mov	r3, r0
}
   81dec:	4618      	mov	r0, r3
   81dee:	3710      	adds	r7, #16
   81df0:	46bd      	mov	sp, r7
   81df2:	bd80      	pop	{r7, pc}
   81df4:	00081c35 	.word	0x00081c35
   81df8:	2000135c 	.word	0x2000135c
   81dfc:	00081bd9 	.word	0x00081bd9
   81e00:	00083631 	.word	0x00083631
   81e04:	20001358 	.word	0x20001358

00081e08 <udc_start>:

/*! \brief Start the USB Device stack
 */
void udc_start(void)
{
   81e08:	b580      	push	{r7, lr}
   81e0a:	af00      	add	r7, sp, #0
	udd_enable();
   81e0c:	4b01      	ldr	r3, [pc, #4]	; (81e14 <udc_start+0xc>)
   81e0e:	4798      	blx	r3
}
   81e10:	bf00      	nop
   81e12:	bd80      	pop	{r7, pc}
   81e14:	000833cd 	.word	0x000833cd

00081e18 <udc_reset>:
/**
 * \brief Reset the current configuration of the USB device,
 * This routines can be called by UDD when a RESET on the USB line occurs.
 */
void udc_reset(void)
{
   81e18:	b580      	push	{r7, lr}
   81e1a:	b082      	sub	sp, #8
   81e1c:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   81e1e:	4b0f      	ldr	r3, [pc, #60]	; (81e5c <udc_reset+0x44>)
   81e20:	781b      	ldrb	r3, [r3, #0]
   81e22:	2b00      	cmp	r3, #0
   81e24:	d010      	beq.n	81e48 <udc_reset+0x30>
		for (iface_num = 0;
   81e26:	2300      	movs	r3, #0
   81e28:	71fb      	strb	r3, [r7, #7]
   81e2a:	e006      	b.n	81e3a <udc_reset+0x22>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			udc_iface_disable(iface_num);
   81e2c:	79fb      	ldrb	r3, [r7, #7]
   81e2e:	4618      	mov	r0, r3
   81e30:	4b0b      	ldr	r3, [pc, #44]	; (81e60 <udc_reset+0x48>)
   81e32:	4798      	blx	r3
				iface_num++) {
   81e34:	79fb      	ldrb	r3, [r7, #7]
   81e36:	3301      	adds	r3, #1
   81e38:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81e3a:	4b0a      	ldr	r3, [pc, #40]	; (81e64 <udc_reset+0x4c>)
   81e3c:	681b      	ldr	r3, [r3, #0]
   81e3e:	681b      	ldr	r3, [r3, #0]
   81e40:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   81e42:	79fa      	ldrb	r2, [r7, #7]
   81e44:	429a      	cmp	r2, r3
   81e46:	d3f1      	bcc.n	81e2c <udc_reset+0x14>
		}
	}
	udc_num_configuration = 0;
   81e48:	4b04      	ldr	r3, [pc, #16]	; (81e5c <udc_reset+0x44>)
   81e4a:	2200      	movs	r2, #0
   81e4c:	701a      	strb	r2, [r3, #0]
	if (CPU_TO_LE16(USB_DEV_STATUS_REMOTEWAKEUP) & udc_device_status) {
		// Remote wakeup is enabled then disable it
		UDC_REMOTEWAKEUP_DISABLE();
	}
#endif
	udc_device_status =
   81e4e:	4b06      	ldr	r3, [pc, #24]	; (81e68 <udc_reset+0x50>)
   81e50:	2200      	movs	r2, #0
   81e52:	801a      	strh	r2, [r3, #0]
#if (USB_DEVICE_ATTR & USB_CONFIG_ATTR_SELF_POWERED)
			CPU_TO_LE16(USB_DEV_STATUS_SELF_POWERED);
#else
			CPU_TO_LE16(USB_DEV_STATUS_BUS_POWERED);
#endif
}
   81e54:	bf00      	nop
   81e56:	3708      	adds	r7, #8
   81e58:	46bd      	mov	sp, r7
   81e5a:	bd80      	pop	{r7, pc}
   81e5c:	20001356 	.word	0x20001356
   81e60:	00081cd1 	.word	0x00081cd1
   81e64:	20001358 	.word	0x20001358
   81e68:	20001354 	.word	0x20001354

00081e6c <udc_sof_notify>:

void udc_sof_notify(void)
{
   81e6c:	b580      	push	{r7, lr}
   81e6e:	b082      	sub	sp, #8
   81e70:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	if (udc_num_configuration) {
   81e72:	4b14      	ldr	r3, [pc, #80]	; (81ec4 <udc_sof_notify+0x58>)
   81e74:	781b      	ldrb	r3, [r3, #0]
   81e76:	2b00      	cmp	r3, #0
   81e78:	d01f      	beq.n	81eba <udc_sof_notify+0x4e>
		for (iface_num = 0;
   81e7a:	2300      	movs	r3, #0
   81e7c:	71fb      	strb	r3, [r7, #7]
   81e7e:	e015      	b.n	81eac <udc_sof_notify+0x40>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
				iface_num++) {
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   81e80:	4b11      	ldr	r3, [pc, #68]	; (81ec8 <udc_sof_notify+0x5c>)
   81e82:	681b      	ldr	r3, [r3, #0]
   81e84:	685a      	ldr	r2, [r3, #4]
   81e86:	79fb      	ldrb	r3, [r7, #7]
   81e88:	009b      	lsls	r3, r3, #2
   81e8a:	4413      	add	r3, r2
   81e8c:	681b      	ldr	r3, [r3, #0]
   81e8e:	691b      	ldr	r3, [r3, #16]
   81e90:	2b00      	cmp	r3, #0
   81e92:	d008      	beq.n	81ea6 <udc_sof_notify+0x3a>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   81e94:	4b0c      	ldr	r3, [pc, #48]	; (81ec8 <udc_sof_notify+0x5c>)
   81e96:	681b      	ldr	r3, [r3, #0]
   81e98:	685a      	ldr	r2, [r3, #4]
   81e9a:	79fb      	ldrb	r3, [r7, #7]
   81e9c:	009b      	lsls	r3, r3, #2
   81e9e:	4413      	add	r3, r2
   81ea0:	681b      	ldr	r3, [r3, #0]
   81ea2:	691b      	ldr	r3, [r3, #16]
   81ea4:	4798      	blx	r3
				iface_num++) {
   81ea6:	79fb      	ldrb	r3, [r7, #7]
   81ea8:	3301      	adds	r3, #1
   81eaa:	71fb      	strb	r3, [r7, #7]
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81eac:	4b06      	ldr	r3, [pc, #24]	; (81ec8 <udc_sof_notify+0x5c>)
   81eae:	681b      	ldr	r3, [r3, #0]
   81eb0:	681b      	ldr	r3, [r3, #0]
   81eb2:	791b      	ldrb	r3, [r3, #4]
		for (iface_num = 0;
   81eb4:	79fa      	ldrb	r2, [r7, #7]
   81eb6:	429a      	cmp	r2, r3
   81eb8:	d3e2      	bcc.n	81e80 <udc_sof_notify+0x14>
			}
		}
	}
}
   81eba:	bf00      	nop
   81ebc:	3708      	adds	r7, #8
   81ebe:	46bd      	mov	sp, r7
   81ec0:	bd80      	pop	{r7, pc}
   81ec2:	bf00      	nop
   81ec4:	20001356 	.word	0x20001356
   81ec8:	20001358 	.word	0x20001358

00081ecc <udc_req_std_dev_get_status>:
 * \brief Standard device request to get device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_status(void)
{
   81ecc:	b580      	push	{r7, lr}
   81ece:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   81ed0:	4b06      	ldr	r3, [pc, #24]	; (81eec <udc_req_std_dev_get_status+0x20>)
   81ed2:	88db      	ldrh	r3, [r3, #6]
   81ed4:	2b02      	cmp	r3, #2
   81ed6:	d001      	beq.n	81edc <udc_req_std_dev_get_status+0x10>
		return false;
   81ed8:	2300      	movs	r3, #0
   81eda:	e004      	b.n	81ee6 <udc_req_std_dev_get_status+0x1a>
	}

	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81edc:	2102      	movs	r1, #2
   81ede:	4804      	ldr	r0, [pc, #16]	; (81ef0 <udc_req_std_dev_get_status+0x24>)
   81ee0:	4b04      	ldr	r3, [pc, #16]	; (81ef4 <udc_req_std_dev_get_status+0x28>)
   81ee2:	4798      	blx	r3
			sizeof(udc_device_status));
	return true;
   81ee4:	2301      	movs	r3, #1
}
   81ee6:	4618      	mov	r0, r3
   81ee8:	bd80      	pop	{r7, pc}
   81eea:	bf00      	nop
   81eec:	200013dc 	.word	0x200013dc
   81ef0:	20001354 	.word	0x20001354
   81ef4:	00083609 	.word	0x00083609

00081ef8 <udc_req_std_ep_get_status>:
 * \brief Standard endpoint request to get endpoint status
 *
 * \return true if success
 */
static bool udc_req_std_ep_get_status(void)
{
   81ef8:	b580      	push	{r7, lr}
   81efa:	af00      	add	r7, sp, #0
	static le16_t udc_ep_status;

	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   81efc:	4b0b      	ldr	r3, [pc, #44]	; (81f2c <udc_req_std_ep_get_status+0x34>)
   81efe:	88db      	ldrh	r3, [r3, #6]
   81f00:	2b02      	cmp	r3, #2
   81f02:	d001      	beq.n	81f08 <udc_req_std_ep_get_status+0x10>
		return false;
   81f04:	2300      	movs	r3, #0
   81f06:	e00e      	b.n	81f26 <udc_req_std_ep_get_status+0x2e>
	}

	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   81f08:	4b08      	ldr	r3, [pc, #32]	; (81f2c <udc_req_std_ep_get_status+0x34>)
   81f0a:	889b      	ldrh	r3, [r3, #4]
   81f0c:	b2db      	uxtb	r3, r3
   81f0e:	4618      	mov	r0, r3
   81f10:	4b07      	ldr	r3, [pc, #28]	; (81f30 <udc_req_std_ep_get_status+0x38>)
   81f12:	4798      	blx	r3
   81f14:	4603      	mov	r3, r0
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   81f16:	b29a      	uxth	r2, r3
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   81f18:	4b06      	ldr	r3, [pc, #24]	; (81f34 <udc_req_std_ep_get_status+0x3c>)
   81f1a:	801a      	strh	r2, [r3, #0]

	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81f1c:	2102      	movs	r1, #2
   81f1e:	4805      	ldr	r0, [pc, #20]	; (81f34 <udc_req_std_ep_get_status+0x3c>)
   81f20:	4b05      	ldr	r3, [pc, #20]	; (81f38 <udc_req_std_ep_get_status+0x40>)
   81f22:	4798      	blx	r3
			sizeof(udc_ep_status));
	return true;
   81f24:	2301      	movs	r3, #1
}
   81f26:	4618      	mov	r0, r3
   81f28:	bd80      	pop	{r7, pc}
   81f2a:	bf00      	nop
   81f2c:	200013dc 	.word	0x200013dc
   81f30:	00083a85 	.word	0x00083a85
   81f34:	20001360 	.word	0x20001360
   81f38:	00083609 	.word	0x00083609

00081f3c <udc_req_std_dev_clear_feature>:
 * \brief Standard device request to change device status
 *
 * \return true if success
 */
static bool udc_req_std_dev_clear_feature(void)
{
   81f3c:	b480      	push	{r7}
   81f3e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81f40:	4b0b      	ldr	r3, [pc, #44]	; (81f70 <udc_req_std_dev_clear_feature+0x34>)
   81f42:	88db      	ldrh	r3, [r3, #6]
   81f44:	2b00      	cmp	r3, #0
   81f46:	d001      	beq.n	81f4c <udc_req_std_dev_clear_feature+0x10>
		return false;
   81f48:	2300      	movs	r3, #0
   81f4a:	e00d      	b.n	81f68 <udc_req_std_dev_clear_feature+0x2c>
	}

	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81f4c:	4b08      	ldr	r3, [pc, #32]	; (81f70 <udc_req_std_dev_clear_feature+0x34>)
   81f4e:	885b      	ldrh	r3, [r3, #2]
   81f50:	2b01      	cmp	r3, #1
   81f52:	d108      	bne.n	81f66 <udc_req_std_dev_clear_feature+0x2a>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81f54:	4b07      	ldr	r3, [pc, #28]	; (81f74 <udc_req_std_dev_clear_feature+0x38>)
   81f56:	881b      	ldrh	r3, [r3, #0]
   81f58:	f023 0302 	bic.w	r3, r3, #2
   81f5c:	b29a      	uxth	r2, r3
   81f5e:	4b05      	ldr	r3, [pc, #20]	; (81f74 <udc_req_std_dev_clear_feature+0x38>)
   81f60:	801a      	strh	r2, [r3, #0]
#if (USB_CONFIG_ATTR_REMOTE_WAKEUP \
	== (USB_DEVICE_ATTR & USB_CONFIG_ATTR_REMOTE_WAKEUP))
		UDC_REMOTEWAKEUP_DISABLE();
#endif
		return true;
   81f62:	2301      	movs	r3, #1
   81f64:	e000      	b.n	81f68 <udc_req_std_dev_clear_feature+0x2c>
	}
	return false;
   81f66:	2300      	movs	r3, #0
}
   81f68:	4618      	mov	r0, r3
   81f6a:	46bd      	mov	sp, r7
   81f6c:	bc80      	pop	{r7}
   81f6e:	4770      	bx	lr
   81f70:	200013dc 	.word	0x200013dc
   81f74:	20001354 	.word	0x20001354

00081f78 <udc_req_std_ep_clear_feature>:
 * \brief Standard endpoint request to clear endpoint feature
 *
 * \return true if success
 */
static bool udc_req_std_ep_clear_feature(void)
{
   81f78:	b580      	push	{r7, lr}
   81f7a:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81f7c:	4b0a      	ldr	r3, [pc, #40]	; (81fa8 <udc_req_std_ep_clear_feature+0x30>)
   81f7e:	88db      	ldrh	r3, [r3, #6]
   81f80:	2b00      	cmp	r3, #0
   81f82:	d001      	beq.n	81f88 <udc_req_std_ep_clear_feature+0x10>
		return false;
   81f84:	2300      	movs	r3, #0
   81f86:	e00c      	b.n	81fa2 <udc_req_std_ep_clear_feature+0x2a>
	}

	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81f88:	4b07      	ldr	r3, [pc, #28]	; (81fa8 <udc_req_std_ep_clear_feature+0x30>)
   81f8a:	885b      	ldrh	r3, [r3, #2]
   81f8c:	2b00      	cmp	r3, #0
   81f8e:	d107      	bne.n	81fa0 <udc_req_std_ep_clear_feature+0x28>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81f90:	4b05      	ldr	r3, [pc, #20]	; (81fa8 <udc_req_std_ep_clear_feature+0x30>)
   81f92:	889b      	ldrh	r3, [r3, #4]
   81f94:	b2db      	uxtb	r3, r3
   81f96:	4618      	mov	r0, r3
   81f98:	4b04      	ldr	r3, [pc, #16]	; (81fac <udc_req_std_ep_clear_feature+0x34>)
   81f9a:	4798      	blx	r3
   81f9c:	4603      	mov	r3, r0
   81f9e:	e000      	b.n	81fa2 <udc_req_std_ep_clear_feature+0x2a>
	}
	return false;
   81fa0:	2300      	movs	r3, #0
}
   81fa2:	4618      	mov	r0, r3
   81fa4:	bd80      	pop	{r7, pc}
   81fa6:	bf00      	nop
   81fa8:	200013dc 	.word	0x200013dc
   81fac:	00083c01 	.word	0x00083c01

00081fb0 <udc_req_std_dev_set_feature>:
 * \brief Standard device request to set a feature
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_feature(void)
{
   81fb0:	b580      	push	{r7, lr}
   81fb2:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   81fb4:	4b26      	ldr	r3, [pc, #152]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   81fb6:	88db      	ldrh	r3, [r3, #6]
   81fb8:	2b00      	cmp	r3, #0
   81fba:	d001      	beq.n	81fc0 <udc_req_std_dev_set_feature+0x10>
		return false;
   81fbc:	2300      	movs	r3, #0
   81fbe:	e045      	b.n	8204c <udc_req_std_dev_set_feature+0x9c>
	}

	switch (udd_g_ctrlreq.req.wValue) {
   81fc0:	4b23      	ldr	r3, [pc, #140]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   81fc2:	885b      	ldrh	r3, [r3, #2]
   81fc4:	2b01      	cmp	r3, #1
   81fc6:	d002      	beq.n	81fce <udc_req_std_dev_set_feature+0x1e>
   81fc8:	2b02      	cmp	r3, #2
   81fca:	d002      	beq.n	81fd2 <udc_req_std_dev_set_feature+0x22>
			break;
		}
		break;
#endif
	default:
		break;
   81fcc:	e03d      	b.n	8204a <udc_req_std_dev_set_feature+0x9a>
		return false;
   81fce:	2300      	movs	r3, #0
   81fd0:	e03c      	b.n	8204c <udc_req_std_dev_set_feature+0x9c>
		if (!udd_is_high_speed()) {
   81fd2:	4b20      	ldr	r3, [pc, #128]	; (82054 <udc_req_std_dev_set_feature+0xa4>)
   81fd4:	4798      	blx	r3
   81fd6:	4603      	mov	r3, r0
   81fd8:	f083 0301 	eor.w	r3, r3, #1
   81fdc:	b2db      	uxtb	r3, r3
   81fde:	2b00      	cmp	r3, #0
   81fe0:	d130      	bne.n	82044 <udc_req_std_dev_set_feature+0x94>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81fe2:	4b1b      	ldr	r3, [pc, #108]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   81fe4:	889b      	ldrh	r3, [r3, #4]
   81fe6:	b2db      	uxtb	r3, r3
   81fe8:	2b00      	cmp	r3, #0
   81fea:	d12d      	bne.n	82048 <udc_req_std_dev_set_feature+0x98>
		udc_reset();
   81fec:	4b1a      	ldr	r3, [pc, #104]	; (82058 <udc_req_std_dev_set_feature+0xa8>)
   81fee:	4798      	blx	r3
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81ff0:	4b17      	ldr	r3, [pc, #92]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   81ff2:	889b      	ldrh	r3, [r3, #4]
   81ff4:	0a1b      	lsrs	r3, r3, #8
   81ff6:	b29b      	uxth	r3, r3
   81ff8:	b2db      	uxtb	r3, r3
   81ffa:	3b01      	subs	r3, #1
   81ffc:	2b03      	cmp	r3, #3
   81ffe:	d81f      	bhi.n	82040 <udc_req_std_dev_set_feature+0x90>
   82000:	a201      	add	r2, pc, #4	; (adr r2, 82008 <udc_req_std_dev_set_feature+0x58>)
   82002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82006:	bf00      	nop
   82008:	00082019 	.word	0x00082019
   8200c:	00082023 	.word	0x00082023
   82010:	0008202d 	.word	0x0008202d
   82014:	00082037 	.word	0x00082037
			udd_g_ctrlreq.callback = udd_test_mode_j;
   82018:	4b0d      	ldr	r3, [pc, #52]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   8201a:	4a10      	ldr	r2, [pc, #64]	; (8205c <udc_req_std_dev_set_feature+0xac>)
   8201c:	611a      	str	r2, [r3, #16]
			return true;
   8201e:	2301      	movs	r3, #1
   82020:	e014      	b.n	8204c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   82022:	4b0b      	ldr	r3, [pc, #44]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   82024:	4a0e      	ldr	r2, [pc, #56]	; (82060 <udc_req_std_dev_set_feature+0xb0>)
   82026:	611a      	str	r2, [r3, #16]
			return true;
   82028:	2301      	movs	r3, #1
   8202a:	e00f      	b.n	8204c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8202c:	4b08      	ldr	r3, [pc, #32]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   8202e:	4a0d      	ldr	r2, [pc, #52]	; (82064 <udc_req_std_dev_set_feature+0xb4>)
   82030:	611a      	str	r2, [r3, #16]
			return true;
   82032:	2301      	movs	r3, #1
   82034:	e00a      	b.n	8204c <udc_req_std_dev_set_feature+0x9c>
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   82036:	4b06      	ldr	r3, [pc, #24]	; (82050 <udc_req_std_dev_set_feature+0xa0>)
   82038:	4a0b      	ldr	r2, [pc, #44]	; (82068 <udc_req_std_dev_set_feature+0xb8>)
   8203a:	611a      	str	r2, [r3, #16]
			return true;
   8203c:	2301      	movs	r3, #1
   8203e:	e005      	b.n	8204c <udc_req_std_dev_set_feature+0x9c>
			break;
   82040:	bf00      	nop
		break;
   82042:	e002      	b.n	8204a <udc_req_std_dev_set_feature+0x9a>
			break;
   82044:	bf00      	nop
   82046:	e000      	b.n	8204a <udc_req_std_dev_set_feature+0x9a>
			break;
   82048:	bf00      	nop
	}
	return false;
   8204a:	2300      	movs	r3, #0
}
   8204c:	4618      	mov	r0, r3
   8204e:	bd80      	pop	{r7, pc}
   82050:	200013dc 	.word	0x200013dc
   82054:	00083565 	.word	0x00083565
   82058:	00081e19 	.word	0x00081e19
   8205c:	00083ec1 	.word	0x00083ec1
   82060:	00083ef5 	.word	0x00083ef5
   82064:	00083f29 	.word	0x00083f29
   82068:	00083f4d 	.word	0x00083f4d

0008206c <udc_req_std_ep_set_feature>:
 *
 * \return true if success
 */
#if (0!=USB_DEVICE_MAX_EP)
static bool udc_req_std_ep_set_feature(void)
{
   8206c:	b580      	push	{r7, lr}
   8206e:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   82070:	4b0d      	ldr	r3, [pc, #52]	; (820a8 <udc_req_std_ep_set_feature+0x3c>)
   82072:	88db      	ldrh	r3, [r3, #6]
   82074:	2b00      	cmp	r3, #0
   82076:	d001      	beq.n	8207c <udc_req_std_ep_set_feature+0x10>
		return false;
   82078:	2300      	movs	r3, #0
   8207a:	e012      	b.n	820a2 <udc_req_std_ep_set_feature+0x36>
	}
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8207c:	4b0a      	ldr	r3, [pc, #40]	; (820a8 <udc_req_std_ep_set_feature+0x3c>)
   8207e:	885b      	ldrh	r3, [r3, #2]
   82080:	2b00      	cmp	r3, #0
   82082:	d10d      	bne.n	820a0 <udc_req_std_ep_set_feature+0x34>
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   82084:	4b08      	ldr	r3, [pc, #32]	; (820a8 <udc_req_std_ep_set_feature+0x3c>)
   82086:	889b      	ldrh	r3, [r3, #4]
   82088:	b2db      	uxtb	r3, r3
   8208a:	4618      	mov	r0, r3
   8208c:	4b07      	ldr	r3, [pc, #28]	; (820ac <udc_req_std_ep_set_feature+0x40>)
   8208e:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   82090:	4b05      	ldr	r3, [pc, #20]	; (820a8 <udc_req_std_ep_set_feature+0x3c>)
   82092:	889b      	ldrh	r3, [r3, #4]
   82094:	b2db      	uxtb	r3, r3
   82096:	4618      	mov	r0, r3
   82098:	4b05      	ldr	r3, [pc, #20]	; (820b0 <udc_req_std_ep_set_feature+0x44>)
   8209a:	4798      	blx	r3
   8209c:	4603      	mov	r3, r0
   8209e:	e000      	b.n	820a2 <udc_req_std_ep_set_feature+0x36>
	}
	return false;
   820a0:	2300      	movs	r3, #0
}
   820a2:	4618      	mov	r0, r3
   820a4:	bd80      	pop	{r7, pc}
   820a6:	bf00      	nop
   820a8:	200013dc 	.word	0x200013dc
   820ac:	00083e39 	.word	0x00083e39
   820b0:	00083aed 	.word	0x00083aed

000820b4 <udc_valid_address>:
/**
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
   820b4:	b580      	push	{r7, lr}
   820b6:	af00      	add	r7, sp, #0
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   820b8:	4b05      	ldr	r3, [pc, #20]	; (820d0 <udc_valid_address+0x1c>)
   820ba:	885b      	ldrh	r3, [r3, #2]
   820bc:	b2db      	uxtb	r3, r3
   820be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   820c2:	b2db      	uxtb	r3, r3
   820c4:	4618      	mov	r0, r3
   820c6:	4b03      	ldr	r3, [pc, #12]	; (820d4 <udc_valid_address+0x20>)
   820c8:	4798      	blx	r3
}
   820ca:	bf00      	nop
   820cc:	bd80      	pop	{r7, pc}
   820ce:	bf00      	nop
   820d0:	200013dc 	.word	0x200013dc
   820d4:	00083589 	.word	0x00083589

000820d8 <udc_req_std_dev_set_address>:
 * \brief Standard device request to set device address
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_address(void)
{
   820d8:	b480      	push	{r7}
   820da:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength) {
   820dc:	4b06      	ldr	r3, [pc, #24]	; (820f8 <udc_req_std_dev_set_address+0x20>)
   820de:	88db      	ldrh	r3, [r3, #6]
   820e0:	2b00      	cmp	r3, #0
   820e2:	d001      	beq.n	820e8 <udc_req_std_dev_set_address+0x10>
		return false;
   820e4:	2300      	movs	r3, #0
   820e6:	e003      	b.n	820f0 <udc_req_std_dev_set_address+0x18>
	}

	// The address must be changed at the end of setup request after the handshake
	// then we use a callback to change address
	udd_g_ctrlreq.callback = udc_valid_address;
   820e8:	4b03      	ldr	r3, [pc, #12]	; (820f8 <udc_req_std_dev_set_address+0x20>)
   820ea:	4a04      	ldr	r2, [pc, #16]	; (820fc <udc_req_std_dev_set_address+0x24>)
   820ec:	611a      	str	r2, [r3, #16]
	return true;
   820ee:	2301      	movs	r3, #1
}
   820f0:	4618      	mov	r0, r3
   820f2:	46bd      	mov	sp, r7
   820f4:	bc80      	pop	{r7}
   820f6:	4770      	bx	lr
   820f8:	200013dc 	.word	0x200013dc
   820fc:	000820b5 	.word	0x000820b5

00082100 <udc_req_std_dev_get_str_desc>:
 * \brief Standard device request to get device string descriptor
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_str_desc(void)
{
   82100:	b580      	push	{r7, lr}
   82102:	b084      	sub	sp, #16
   82104:	af00      	add	r7, sp, #0
	uint8_t i;
	const uint8_t *str;
	uint8_t str_length = 0;
   82106:	2300      	movs	r3, #0
   82108:	71fb      	strb	r3, [r7, #7]

	// Link payload pointer to the string corresponding at request
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8210a:	4b29      	ldr	r3, [pc, #164]	; (821b0 <udc_req_std_dev_get_str_desc+0xb0>)
   8210c:	885b      	ldrh	r3, [r3, #2]
   8210e:	b2db      	uxtb	r3, r3
   82110:	2b03      	cmp	r3, #3
   82112:	d820      	bhi.n	82156 <udc_req_std_dev_get_str_desc+0x56>
   82114:	a201      	add	r2, pc, #4	; (adr r2, 8211c <udc_req_std_dev_get_str_desc+0x1c>)
   82116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   8211a:	bf00      	nop
   8211c:	0008212d 	.word	0x0008212d
   82120:	00082137 	.word	0x00082137
   82124:	00082141 	.word	0x00082141
   82128:	0008214b 	.word	0x0008214b
	case 0:
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   8212c:	2104      	movs	r1, #4
   8212e:	4821      	ldr	r0, [pc, #132]	; (821b4 <udc_req_std_dev_get_str_desc+0xb4>)
   82130:	4b21      	ldr	r3, [pc, #132]	; (821b8 <udc_req_std_dev_get_str_desc+0xb8>)
   82132:	4798      	blx	r3
				sizeof(udc_string_desc_languageid));
		break;
   82134:	e011      	b.n	8215a <udc_req_std_dev_get_str_desc+0x5a>

#ifdef USB_DEVICE_MANUFACTURE_NAME
	case 1:
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   82136:	2315      	movs	r3, #21
   82138:	71fb      	strb	r3, [r7, #7]
		str = udc_string_manufacturer_name;
   8213a:	4b20      	ldr	r3, [pc, #128]	; (821bc <udc_req_std_dev_get_str_desc+0xbc>)
   8213c:	60bb      	str	r3, [r7, #8]
		break;
   8213e:	e00c      	b.n	8215a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#ifdef USB_DEVICE_PRODUCT_NAME
	case 2:
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   82140:	2310      	movs	r3, #16
   82142:	71fb      	strb	r3, [r7, #7]
		str = udc_string_product_name;
   82144:	4b1e      	ldr	r3, [pc, #120]	; (821c0 <udc_req_std_dev_get_str_desc+0xc0>)
   82146:	60bb      	str	r3, [r7, #8]
		break;
   82148:	e007      	b.n	8215a <udc_req_std_dev_get_str_desc+0x5a>
#endif
#if defined USB_DEVICE_SERIAL_NAME || defined USB_DEVICE_GET_SERIAL_NAME_POINTER
	case 3:
		str_length = USB_DEVICE_SERIAL_NAME_SIZE;
   8214a:	2320      	movs	r3, #32
   8214c:	71fb      	strb	r3, [r7, #7]
		str = udc_get_string_serial_name();
   8214e:	4b1d      	ldr	r3, [pc, #116]	; (821c4 <udc_req_std_dev_get_str_desc+0xc4>)
   82150:	4798      	blx	r3
   82152:	60b8      	str	r0, [r7, #8]
		break;
   82154:	e001      	b.n	8215a <udc_req_std_dev_get_str_desc+0x5a>
#ifdef UDC_GET_EXTRA_STRING
		if (UDC_GET_EXTRA_STRING()) {
			break;
		}
#endif
		return false;
   82156:	2300      	movs	r3, #0
   82158:	e026      	b.n	821a8 <udc_req_std_dev_get_str_desc+0xa8>
	}

	if (str_length) {
   8215a:	79fb      	ldrb	r3, [r7, #7]
   8215c:	2b00      	cmp	r3, #0
   8215e:	d022      	beq.n	821a6 <udc_req_std_dev_get_str_desc+0xa6>
		for(i = 0; i < str_length; i++) {
   82160:	2300      	movs	r3, #0
   82162:	73fb      	strb	r3, [r7, #15]
   82164:	e00d      	b.n	82182 <udc_req_std_dev_get_str_desc+0x82>
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   82166:	7bfb      	ldrb	r3, [r7, #15]
   82168:	68ba      	ldr	r2, [r7, #8]
   8216a:	4413      	add	r3, r2
   8216c:	781a      	ldrb	r2, [r3, #0]
   8216e:	7bfb      	ldrb	r3, [r7, #15]
   82170:	b291      	uxth	r1, r2
   82172:	4a15      	ldr	r2, [pc, #84]	; (821c8 <udc_req_std_dev_get_str_desc+0xc8>)
   82174:	005b      	lsls	r3, r3, #1
   82176:	4413      	add	r3, r2
   82178:	460a      	mov	r2, r1
   8217a:	805a      	strh	r2, [r3, #2]
		for(i = 0; i < str_length; i++) {
   8217c:	7bfb      	ldrb	r3, [r7, #15]
   8217e:	3301      	adds	r3, #1
   82180:	73fb      	strb	r3, [r7, #15]
   82182:	7bfa      	ldrb	r2, [r7, #15]
   82184:	79fb      	ldrb	r3, [r7, #7]
   82186:	429a      	cmp	r2, r3
   82188:	d3ed      	bcc.n	82166 <udc_req_std_dev_get_str_desc+0x66>
		}

		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   8218a:	79fb      	ldrb	r3, [r7, #7]
   8218c:	3301      	adds	r3, #1
   8218e:	b2db      	uxtb	r3, r3
   82190:	005b      	lsls	r3, r3, #1
   82192:	b2da      	uxtb	r2, r3
   82194:	4b0c      	ldr	r3, [pc, #48]	; (821c8 <udc_req_std_dev_get_str_desc+0xc8>)
   82196:	701a      	strb	r2, [r3, #0]
		udd_set_setup_payload(
			(uint8_t *) &udc_string_desc,
			udc_string_desc.header.bLength);
   82198:	4b0b      	ldr	r3, [pc, #44]	; (821c8 <udc_req_std_dev_get_str_desc+0xc8>)
   8219a:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload(
   8219c:	b29b      	uxth	r3, r3
   8219e:	4619      	mov	r1, r3
   821a0:	4809      	ldr	r0, [pc, #36]	; (821c8 <udc_req_std_dev_get_str_desc+0xc8>)
   821a2:	4b05      	ldr	r3, [pc, #20]	; (821b8 <udc_req_std_dev_get_str_desc+0xb8>)
   821a4:	4798      	blx	r3
	}

	return true;
   821a6:	2301      	movs	r3, #1
}
   821a8:	4618      	mov	r0, r3
   821aa:	3710      	adds	r7, #16
   821ac:	46bd      	mov	sp, r7
   821ae:	bd80      	pop	{r7, pc}
   821b0:	200013dc 	.word	0x200013dc
   821b4:	20000358 	.word	0x20000358
   821b8:	00083609 	.word	0x00083609
   821bc:	2000035c 	.word	0x2000035c
   821c0:	20000374 	.word	0x20000374
   821c4:	00081b8d 	.word	0x00081b8d
   821c8:	20000388 	.word	0x20000388

000821cc <udc_req_std_dev_get_descriptor>:

static bool udc_req_std_dev_get_descriptor(void)
{
   821cc:	b580      	push	{r7, lr}
   821ce:	b082      	sub	sp, #8
   821d0:	af00      	add	r7, sp, #0
	uint8_t conf_num;


	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   821d2:	4b7f      	ldr	r3, [pc, #508]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   821d4:	885b      	ldrh	r3, [r3, #2]
   821d6:	71fb      	strb	r3, [r7, #7]

	// Check descriptor ID
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   821d8:	4b7d      	ldr	r3, [pc, #500]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   821da:	885b      	ldrh	r3, [r3, #2]
   821dc:	0a1b      	lsrs	r3, r3, #8
   821de:	b29b      	uxth	r3, r3
   821e0:	b2db      	uxtb	r3, r3
   821e2:	3b01      	subs	r3, #1
   821e4:	2b0e      	cmp	r3, #14
   821e6:	f200 80e0 	bhi.w	823aa <udc_req_std_dev_get_descriptor+0x1de>
   821ea:	a201      	add	r2, pc, #4	; (adr r2, 821f0 <udc_req_std_dev_get_descriptor+0x24>)
   821ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   821f0:	0008222d 	.word	0x0008222d
   821f4:	0008227d 	.word	0x0008227d
   821f8:	00082397 	.word	0x00082397
   821fc:	000823ab 	.word	0x000823ab
   82200:	000823ab 	.word	0x000823ab
   82204:	000822f7 	.word	0x000822f7
   82208:	0008230d 	.word	0x0008230d
   8220c:	000823ab 	.word	0x000823ab
   82210:	000823ab 	.word	0x000823ab
   82214:	000823ab 	.word	0x000823ab
   82218:	000823ab 	.word	0x000823ab
   8221c:	000823ab 	.word	0x000823ab
   82220:	000823ab 	.word	0x000823ab
   82224:	000823ab 	.word	0x000823ab
   82228:	0008238d 	.word	0x0008238d
	case USB_DT_DEVICE:
		// Device descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (!udd_is_high_speed()) {
   8222c:	4b69      	ldr	r3, [pc, #420]	; (823d4 <udc_req_std_dev_get_descriptor+0x208>)
   8222e:	4798      	blx	r3
   82230:	4603      	mov	r3, r0
   82232:	f083 0301 	eor.w	r3, r3, #1
   82236:	b2db      	uxtb	r3, r3
   82238:	2b00      	cmp	r3, #0
   8223a:	d00a      	beq.n	82252 <udc_req_std_dev_get_descriptor+0x86>
			//(udc_config.confdev_hs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_hs,
   8223c:	4b66      	ldr	r3, [pc, #408]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   8223e:	689a      	ldr	r2, [r3, #8]
				udc_config.confdev_hs->bLength);
   82240:	4b65      	ldr	r3, [pc, #404]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   82242:	689b      	ldr	r3, [r3, #8]
   82244:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   82246:	b29b      	uxth	r3, r3
   82248:	4619      	mov	r1, r3
   8224a:	4610      	mov	r0, r2
   8224c:	4b63      	ldr	r3, [pc, #396]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   8224e:	4798      	blx	r3
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
			udd_set_setup_payload(
				(uint8_t *) udc_config.confdev_lsfs,
				udc_config.confdev_lsfs->bLength);
		}
		break;
   82250:	e0ae      	b.n	823b0 <udc_req_std_dev_get_descriptor+0x1e4>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   82252:	4b61      	ldr	r3, [pc, #388]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   82254:	681b      	ldr	r3, [r3, #0]
   82256:	2200      	movs	r2, #0
   82258:	f042 0210 	orr.w	r2, r2, #16
   8225c:	709a      	strb	r2, [r3, #2]
   8225e:	2200      	movs	r2, #0
   82260:	f042 0202 	orr.w	r2, r2, #2
   82264:	70da      	strb	r2, [r3, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   82266:	4b5c      	ldr	r3, [pc, #368]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   82268:	681a      	ldr	r2, [r3, #0]
				udc_config.confdev_lsfs->bLength);
   8226a:	4b5b      	ldr	r3, [pc, #364]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   8226c:	681b      	ldr	r3, [r3, #0]
   8226e:	781b      	ldrb	r3, [r3, #0]
			udd_set_setup_payload(
   82270:	b29b      	uxth	r3, r3
   82272:	4619      	mov	r1, r3
   82274:	4610      	mov	r0, r2
   82276:	4b59      	ldr	r3, [pc, #356]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   82278:	4798      	blx	r3
		break;
   8227a:	e099      	b.n	823b0 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_CONFIGURATION:
		// Configuration descriptor requested
#ifdef USB_DEVICE_HS_SUPPORT
		if (udd_is_high_speed()) {
   8227c:	4b55      	ldr	r3, [pc, #340]	; (823d4 <udc_req_std_dev_get_descriptor+0x208>)
   8227e:	4798      	blx	r3
   82280:	4603      	mov	r3, r0
   82282:	2b00      	cmp	r3, #0
   82284:	d019      	beq.n	822ba <udc_req_std_dev_get_descriptor+0xee>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   82286:	4b54      	ldr	r3, [pc, #336]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   82288:	689b      	ldr	r3, [r3, #8]
   8228a:	7c5b      	ldrb	r3, [r3, #17]
   8228c:	79fa      	ldrb	r2, [r7, #7]
   8228e:	429a      	cmp	r2, r3
   82290:	d301      	bcc.n	82296 <udc_req_std_dev_get_descriptor+0xca>
					bNumConfigurations) {
				return false;
   82292:	2300      	movs	r3, #0
   82294:	e097      	b.n	823c6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   82296:	4b50      	ldr	r3, [pc, #320]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   82298:	691a      	ldr	r2, [r3, #16]
   8229a:	79fb      	ldrb	r3, [r7, #7]
   8229c:	00db      	lsls	r3, r3, #3
   8229e:	4413      	add	r3, r2
   822a0:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   822a2:	4b4d      	ldr	r3, [pc, #308]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   822a4:	691a      	ldr	r2, [r3, #16]
   822a6:	79fb      	ldrb	r3, [r7, #7]
   822a8:	00db      	lsls	r3, r3, #3
   822aa:	4413      	add	r3, r2
   822ac:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   822ae:	885b      	ldrh	r3, [r3, #2]
   822b0:	b29b      	uxth	r3, r3
   822b2:	4619      	mov	r1, r3
   822b4:	4b49      	ldr	r3, [pc, #292]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   822b6:	4798      	blx	r3
   822b8:	e018      	b.n	822ec <udc_req_std_dev_get_descriptor+0x120>
		} else
#endif
		{
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   822ba:	4b47      	ldr	r3, [pc, #284]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   822bc:	681b      	ldr	r3, [r3, #0]
   822be:	7c5b      	ldrb	r3, [r3, #17]
   822c0:	79fa      	ldrb	r2, [r7, #7]
   822c2:	429a      	cmp	r2, r3
   822c4:	d301      	bcc.n	822ca <udc_req_std_dev_get_descriptor+0xfe>
					bNumConfigurations) {
				return false;
   822c6:	2300      	movs	r3, #0
   822c8:	e07d      	b.n	823c6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   822ca:	4b43      	ldr	r3, [pc, #268]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   822cc:	685a      	ldr	r2, [r3, #4]
   822ce:	79fb      	ldrb	r3, [r7, #7]
   822d0:	00db      	lsls	r3, r3, #3
   822d2:	4413      	add	r3, r2
   822d4:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   822d6:	4b40      	ldr	r3, [pc, #256]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   822d8:	685a      	ldr	r2, [r3, #4]
   822da:	79fb      	ldrb	r3, [r7, #7]
   822dc:	00db      	lsls	r3, r3, #3
   822de:	4413      	add	r3, r2
   822e0:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   822e2:	885b      	ldrh	r3, [r3, #2]
   822e4:	b29b      	uxth	r3, r3
   822e6:	4619      	mov	r1, r3
   822e8:	4b3c      	ldr	r3, [pc, #240]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   822ea:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   822ec:	4b38      	ldr	r3, [pc, #224]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   822ee:	689b      	ldr	r3, [r3, #8]
   822f0:	2202      	movs	r2, #2
   822f2:	705a      	strb	r2, [r3, #1]
				USB_DT_CONFIGURATION;
		break;
   822f4:	e05c      	b.n	823b0 <udc_req_std_dev_get_descriptor+0x1e4>

#ifdef USB_DEVICE_HS_SUPPORT
	case USB_DT_DEVICE_QUALIFIER:
		// Device qualifier descriptor requested
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   822f6:	4b38      	ldr	r3, [pc, #224]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   822f8:	68da      	ldr	r2, [r3, #12]
				udc_config.qualifier->bLength);
   822fa:	4b37      	ldr	r3, [pc, #220]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   822fc:	68db      	ldr	r3, [r3, #12]
   822fe:	781b      	ldrb	r3, [r3, #0]
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   82300:	b29b      	uxth	r3, r3
   82302:	4619      	mov	r1, r3
   82304:	4610      	mov	r0, r2
   82306:	4b35      	ldr	r3, [pc, #212]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   82308:	4798      	blx	r3
		break;
   8230a:	e051      	b.n	823b0 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_OTHER_SPEED_CONFIGURATION:
		// Other configuration descriptor requested
		if (!udd_is_high_speed()) {
   8230c:	4b31      	ldr	r3, [pc, #196]	; (823d4 <udc_req_std_dev_get_descriptor+0x208>)
   8230e:	4798      	blx	r3
   82310:	4603      	mov	r3, r0
   82312:	f083 0301 	eor.w	r3, r3, #1
   82316:	b2db      	uxtb	r3, r3
   82318:	2b00      	cmp	r3, #0
   8231a:	d019      	beq.n	82350 <udc_req_std_dev_get_descriptor+0x184>
			// HS descriptor
			if (conf_num >= udc_config.confdev_hs->
   8231c:	4b2e      	ldr	r3, [pc, #184]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   8231e:	689b      	ldr	r3, [r3, #8]
   82320:	7c5b      	ldrb	r3, [r3, #17]
   82322:	79fa      	ldrb	r2, [r7, #7]
   82324:	429a      	cmp	r2, r3
   82326:	d301      	bcc.n	8232c <udc_req_std_dev_get_descriptor+0x160>
					bNumConfigurations) {
				return false;
   82328:	2300      	movs	r3, #0
   8232a:	e04c      	b.n	823c6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8232c:	4b2a      	ldr	r3, [pc, #168]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   8232e:	691a      	ldr	r2, [r3, #16]
   82330:	79fb      	ldrb	r3, [r7, #7]
   82332:	00db      	lsls	r3, r3, #3
   82334:	4413      	add	r3, r2
   82336:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_hs[conf_num].desc->wTotalLength));
   82338:	4b27      	ldr	r3, [pc, #156]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   8233a:	691a      	ldr	r2, [r3, #16]
   8233c:	79fb      	ldrb	r3, [r7, #7]
   8233e:	00db      	lsls	r3, r3, #3
   82340:	4413      	add	r3, r2
   82342:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   82344:	885b      	ldrh	r3, [r3, #2]
   82346:	b29b      	uxth	r3, r3
   82348:	4619      	mov	r1, r3
   8234a:	4b24      	ldr	r3, [pc, #144]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   8234c:	4798      	blx	r3
   8234e:	e018      	b.n	82382 <udc_req_std_dev_get_descriptor+0x1b6>
		} else {
			// FS descriptor
			if (conf_num >= udc_config.confdev_lsfs->
   82350:	4b21      	ldr	r3, [pc, #132]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   82352:	681b      	ldr	r3, [r3, #0]
   82354:	7c5b      	ldrb	r3, [r3, #17]
   82356:	79fa      	ldrb	r2, [r7, #7]
   82358:	429a      	cmp	r2, r3
   8235a:	d301      	bcc.n	82360 <udc_req_std_dev_get_descriptor+0x194>
					bNumConfigurations) {
				return false;
   8235c:	2300      	movs	r3, #0
   8235e:	e032      	b.n	823c6 <udc_req_std_dev_get_descriptor+0x1fa>
			}
			udd_set_setup_payload(
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   82360:	4b1d      	ldr	r3, [pc, #116]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   82362:	685a      	ldr	r2, [r3, #4]
   82364:	79fb      	ldrb	r3, [r7, #7]
   82366:	00db      	lsls	r3, r3, #3
   82368:	4413      	add	r3, r2
   8236a:	6818      	ldr	r0, [r3, #0]
				le16_to_cpu(udc_config.conf_lsfs[conf_num].desc->wTotalLength));
   8236c:	4b1a      	ldr	r3, [pc, #104]	; (823d8 <udc_req_std_dev_get_descriptor+0x20c>)
   8236e:	685a      	ldr	r2, [r3, #4]
   82370:	79fb      	ldrb	r3, [r7, #7]
   82372:	00db      	lsls	r3, r3, #3
   82374:	4413      	add	r3, r2
   82376:	681b      	ldr	r3, [r3, #0]
			udd_set_setup_payload(
   82378:	885b      	ldrh	r3, [r3, #2]
   8237a:	b29b      	uxth	r3, r3
   8237c:	4619      	mov	r1, r3
   8237e:	4b17      	ldr	r3, [pc, #92]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   82380:	4798      	blx	r3
		}
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   82382:	4b13      	ldr	r3, [pc, #76]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   82384:	689b      	ldr	r3, [r3, #8]
   82386:	2207      	movs	r2, #7
   82388:	705a      	strb	r2, [r3, #1]
				USB_DT_OTHER_SPEED_CONFIGURATION;
		break;
   8238a:	e011      	b.n	823b0 <udc_req_std_dev_get_descriptor+0x1e4>
#endif
	case USB_DT_BOS: //bos descriptor
		// handle MPSSE
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   8238c:	2121      	movs	r1, #33	; 0x21
   8238e:	4814      	ldr	r0, [pc, #80]	; (823e0 <udc_req_std_dev_get_descriptor+0x214>)
   82390:	4b12      	ldr	r3, [pc, #72]	; (823dc <udc_req_std_dev_get_descriptor+0x210>)
   82392:	4798      	blx	r3
			sizeof(struct MS_BOS_DESCRIPTOR));
		break;
   82394:	e00c      	b.n	823b0 <udc_req_std_dev_get_descriptor+0x1e4>

	case USB_DT_STRING:
		// String descriptor requested
		if (!udc_req_std_dev_get_str_desc()) {
   82396:	4b13      	ldr	r3, [pc, #76]	; (823e4 <udc_req_std_dev_get_descriptor+0x218>)
   82398:	4798      	blx	r3
   8239a:	4603      	mov	r3, r0
   8239c:	f083 0301 	eor.w	r3, r3, #1
   823a0:	b2db      	uxtb	r3, r3
   823a2:	2b00      	cmp	r3, #0
   823a4:	d003      	beq.n	823ae <udc_req_std_dev_get_descriptor+0x1e2>
			return false;
   823a6:	2300      	movs	r3, #0
   823a8:	e00d      	b.n	823c6 <udc_req_std_dev_get_descriptor+0x1fa>
		}
		break;

	default:
		// Unknown descriptor requested
		return false;
   823aa:	2300      	movs	r3, #0
   823ac:	e00b      	b.n	823c6 <udc_req_std_dev_get_descriptor+0x1fa>
		break;
   823ae:	bf00      	nop
	}
	// if the descriptor is larger than length requested, then reduce it
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   823b0:	4b07      	ldr	r3, [pc, #28]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   823b2:	88da      	ldrh	r2, [r3, #6]
   823b4:	4b06      	ldr	r3, [pc, #24]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   823b6:	899b      	ldrh	r3, [r3, #12]
   823b8:	429a      	cmp	r2, r3
   823ba:	d203      	bcs.n	823c4 <udc_req_std_dev_get_descriptor+0x1f8>
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   823bc:	4b04      	ldr	r3, [pc, #16]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   823be:	88da      	ldrh	r2, [r3, #6]
   823c0:	4b03      	ldr	r3, [pc, #12]	; (823d0 <udc_req_std_dev_get_descriptor+0x204>)
   823c2:	819a      	strh	r2, [r3, #12]
	}
	return true;
   823c4:	2301      	movs	r3, #1
}
   823c6:	4618      	mov	r0, r3
   823c8:	3708      	adds	r7, #8
   823ca:	46bd      	mov	sp, r7
   823cc:	bd80      	pop	{r7, pc}
   823ce:	bf00      	nop
   823d0:	200013dc 	.word	0x200013dc
   823d4:	00083565 	.word	0x00083565
   823d8:	20000458 	.word	0x20000458
   823dc:	00083609 	.word	0x00083609
   823e0:	20000334 	.word	0x20000334
   823e4:	00082101 	.word	0x00082101

000823e8 <udc_req_std_dev_get_configuration>:
 * \brief Standard device request to get configuration number
 *
 * \return true if success
 */
static bool udc_req_std_dev_get_configuration(void)
{
   823e8:	b580      	push	{r7, lr}
   823ea:	af00      	add	r7, sp, #0
	if (udd_g_ctrlreq.req.wLength != 1) {
   823ec:	4b06      	ldr	r3, [pc, #24]	; (82408 <udc_req_std_dev_get_configuration+0x20>)
   823ee:	88db      	ldrh	r3, [r3, #6]
   823f0:	2b01      	cmp	r3, #1
   823f2:	d001      	beq.n	823f8 <udc_req_std_dev_get_configuration+0x10>
		return false;
   823f4:	2300      	movs	r3, #0
   823f6:	e004      	b.n	82402 <udc_req_std_dev_get_configuration+0x1a>
	}

	udd_set_setup_payload(&udc_num_configuration,1);
   823f8:	2101      	movs	r1, #1
   823fa:	4804      	ldr	r0, [pc, #16]	; (8240c <udc_req_std_dev_get_configuration+0x24>)
   823fc:	4b04      	ldr	r3, [pc, #16]	; (82410 <udc_req_std_dev_get_configuration+0x28>)
   823fe:	4798      	blx	r3
	return true;
   82400:	2301      	movs	r3, #1
}
   82402:	4618      	mov	r0, r3
   82404:	bd80      	pop	{r7, pc}
   82406:	bf00      	nop
   82408:	200013dc 	.word	0x200013dc
   8240c:	20001356 	.word	0x20001356
   82410:	00083609 	.word	0x00083609

00082414 <udc_req_std_dev_set_configuration>:
 * \brief Standard device request to enable a configuration
 *
 * \return true if success
 */
static bool udc_req_std_dev_set_configuration(void)
{
   82414:	b580      	push	{r7, lr}
   82416:	b082      	sub	sp, #8
   82418:	af00      	add	r7, sp, #0
	uint8_t iface_num;

	// Check request length
	if (udd_g_ctrlreq.req.wLength) {
   8241a:	4b37      	ldr	r3, [pc, #220]	; (824f8 <udc_req_std_dev_set_configuration+0xe4>)
   8241c:	88db      	ldrh	r3, [r3, #6]
   8241e:	2b00      	cmp	r3, #0
   82420:	d001      	beq.n	82426 <udc_req_std_dev_set_configuration+0x12>
		return false;
   82422:	2300      	movs	r3, #0
   82424:	e063      	b.n	824ee <udc_req_std_dev_set_configuration+0xda>
	}
	// Authorize configuration only if the address is valid
	if (!udd_getaddress()) {
   82426:	4b35      	ldr	r3, [pc, #212]	; (824fc <udc_req_std_dev_set_configuration+0xe8>)
   82428:	4798      	blx	r3
   8242a:	4603      	mov	r3, r0
   8242c:	2b00      	cmp	r3, #0
   8242e:	d101      	bne.n	82434 <udc_req_std_dev_set_configuration+0x20>
		return false;
   82430:	2300      	movs	r3, #0
   82432:	e05c      	b.n	824ee <udc_req_std_dev_set_configuration+0xda>
	}
	// Check the configuration number requested
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   82434:	4b32      	ldr	r3, [pc, #200]	; (82500 <udc_req_std_dev_set_configuration+0xec>)
   82436:	4798      	blx	r3
   82438:	4603      	mov	r3, r0
   8243a:	2b00      	cmp	r3, #0
   8243c:	d009      	beq.n	82452 <udc_req_std_dev_set_configuration+0x3e>
		// HS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8243e:	4b2e      	ldr	r3, [pc, #184]	; (824f8 <udc_req_std_dev_set_configuration+0xe4>)
   82440:	885b      	ldrh	r3, [r3, #2]
   82442:	b2db      	uxtb	r3, r3
				udc_config.confdev_hs->bNumConfigurations) {
   82444:	4a2f      	ldr	r2, [pc, #188]	; (82504 <udc_req_std_dev_set_configuration+0xf0>)
   82446:	6892      	ldr	r2, [r2, #8]
   82448:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8244a:	4293      	cmp	r3, r2
   8244c:	dd0b      	ble.n	82466 <udc_req_std_dev_set_configuration+0x52>
			return false;
   8244e:	2300      	movs	r3, #0
   82450:	e04d      	b.n	824ee <udc_req_std_dev_set_configuration+0xda>
		}
	} else
#endif
	{
		// FS descriptor
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   82452:	4b29      	ldr	r3, [pc, #164]	; (824f8 <udc_req_std_dev_set_configuration+0xe4>)
   82454:	885b      	ldrh	r3, [r3, #2]
   82456:	b2db      	uxtb	r3, r3
				udc_config.confdev_lsfs->bNumConfigurations) {
   82458:	4a2a      	ldr	r2, [pc, #168]	; (82504 <udc_req_std_dev_set_configuration+0xf0>)
   8245a:	6812      	ldr	r2, [r2, #0]
   8245c:	7c52      	ldrb	r2, [r2, #17]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8245e:	4293      	cmp	r3, r2
   82460:	dd01      	ble.n	82466 <udc_req_std_dev_set_configuration+0x52>
			return false;
   82462:	2300      	movs	r3, #0
   82464:	e043      	b.n	824ee <udc_req_std_dev_set_configuration+0xda>
		}
	}

	// Reset current configuration
	udc_reset();
   82466:	4b28      	ldr	r3, [pc, #160]	; (82508 <udc_req_std_dev_set_configuration+0xf4>)
   82468:	4798      	blx	r3

	// Enable new configuration
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   8246a:	4b23      	ldr	r3, [pc, #140]	; (824f8 <udc_req_std_dev_set_configuration+0xe4>)
   8246c:	885b      	ldrh	r3, [r3, #2]
   8246e:	b2da      	uxtb	r2, r3
   82470:	4b26      	ldr	r3, [pc, #152]	; (8250c <udc_req_std_dev_set_configuration+0xf8>)
   82472:	701a      	strb	r2, [r3, #0]
	if (udc_num_configuration == 0) {
   82474:	4b25      	ldr	r3, [pc, #148]	; (8250c <udc_req_std_dev_set_configuration+0xf8>)
   82476:	781b      	ldrb	r3, [r3, #0]
   82478:	2b00      	cmp	r3, #0
   8247a:	d101      	bne.n	82480 <udc_req_std_dev_set_configuration+0x6c>
		return true; // Default empty configuration requested
   8247c:	2301      	movs	r3, #1
   8247e:	e036      	b.n	824ee <udc_req_std_dev_set_configuration+0xda>
	}
	// Update pointer of the configuration descriptor
#ifdef USB_DEVICE_HS_SUPPORT
	if (udd_is_high_speed()) {
   82480:	4b1f      	ldr	r3, [pc, #124]	; (82500 <udc_req_std_dev_set_configuration+0xec>)
   82482:	4798      	blx	r3
   82484:	4603      	mov	r3, r0
   82486:	2b00      	cmp	r3, #0
   82488:	d00b      	beq.n	824a2 <udc_req_std_dev_set_configuration+0x8e>
		// HS descriptor
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8248a:	4b1e      	ldr	r3, [pc, #120]	; (82504 <udc_req_std_dev_set_configuration+0xf0>)
   8248c:	691a      	ldr	r2, [r3, #16]
   8248e:	4b1f      	ldr	r3, [pc, #124]	; (8250c <udc_req_std_dev_set_configuration+0xf8>)
   82490:	781b      	ldrb	r3, [r3, #0]
   82492:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   82496:	3b01      	subs	r3, #1
   82498:	00db      	lsls	r3, r3, #3
   8249a:	4413      	add	r3, r2
   8249c:	4a1c      	ldr	r2, [pc, #112]	; (82510 <udc_req_std_dev_set_configuration+0xfc>)
   8249e:	6013      	str	r3, [r2, #0]
   824a0:	e00a      	b.n	824b8 <udc_req_std_dev_set_configuration+0xa4>
	} else
#endif
	{
		// FS descriptor
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   824a2:	4b18      	ldr	r3, [pc, #96]	; (82504 <udc_req_std_dev_set_configuration+0xf0>)
   824a4:	685a      	ldr	r2, [r3, #4]
   824a6:	4b19      	ldr	r3, [pc, #100]	; (8250c <udc_req_std_dev_set_configuration+0xf8>)
   824a8:	781b      	ldrb	r3, [r3, #0]
   824aa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   824ae:	3b01      	subs	r3, #1
   824b0:	00db      	lsls	r3, r3, #3
   824b2:	4413      	add	r3, r2
   824b4:	4a16      	ldr	r2, [pc, #88]	; (82510 <udc_req_std_dev_set_configuration+0xfc>)
   824b6:	6013      	str	r3, [r2, #0]
	}
	// Enable all interfaces of the selected configuration
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   824b8:	2300      	movs	r3, #0
   824ba:	71fb      	strb	r3, [r7, #7]
   824bc:	e00f      	b.n	824de <udc_req_std_dev_set_configuration+0xca>
			iface_num++) {
		if (!udc_iface_enable(iface_num, 0)) {
   824be:	79fb      	ldrb	r3, [r7, #7]
   824c0:	2100      	movs	r1, #0
   824c2:	4618      	mov	r0, r3
   824c4:	4b13      	ldr	r3, [pc, #76]	; (82514 <udc_req_std_dev_set_configuration+0x100>)
   824c6:	4798      	blx	r3
   824c8:	4603      	mov	r3, r0
   824ca:	f083 0301 	eor.w	r3, r3, #1
   824ce:	b2db      	uxtb	r3, r3
   824d0:	2b00      	cmp	r3, #0
   824d2:	d001      	beq.n	824d8 <udc_req_std_dev_set_configuration+0xc4>
			return false;
   824d4:	2300      	movs	r3, #0
   824d6:	e00a      	b.n	824ee <udc_req_std_dev_set_configuration+0xda>
			iface_num++) {
   824d8:	79fb      	ldrb	r3, [r7, #7]
   824da:	3301      	adds	r3, #1
   824dc:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   824de:	4b0c      	ldr	r3, [pc, #48]	; (82510 <udc_req_std_dev_set_configuration+0xfc>)
   824e0:	681b      	ldr	r3, [r3, #0]
   824e2:	681b      	ldr	r3, [r3, #0]
   824e4:	791b      	ldrb	r3, [r3, #4]
   824e6:	79fa      	ldrb	r2, [r7, #7]
   824e8:	429a      	cmp	r2, r3
   824ea:	d3e8      	bcc.n	824be <udc_req_std_dev_set_configuration+0xaa>
		}
	}
	return true;
   824ec:	2301      	movs	r3, #1
}
   824ee:	4618      	mov	r0, r3
   824f0:	3708      	adds	r7, #8
   824f2:	46bd      	mov	sp, r7
   824f4:	bd80      	pop	{r7, pc}
   824f6:	bf00      	nop
   824f8:	200013dc 	.word	0x200013dc
   824fc:	000835cd 	.word	0x000835cd
   82500:	00083565 	.word	0x00083565
   82504:	20000458 	.word	0x20000458
   82508:	00081e19 	.word	0x00081e19
   8250c:	20001356 	.word	0x20001356
   82510:	20001358 	.word	0x20001358
   82514:	00081d71 	.word	0x00081d71

00082518 <udc_req_std_iface_get_setting>:
 * to get the alternate setting number of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_get_setting(void)
{
   82518:	b580      	push	{r7, lr}
   8251a:	b082      	sub	sp, #8
   8251c:	af00      	add	r7, sp, #0
	static uint8_t udc_iface_setting;
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (udd_g_ctrlreq.req.wLength != 1) {
   8251e:	4b1e      	ldr	r3, [pc, #120]	; (82598 <udc_req_std_iface_get_setting+0x80>)
   82520:	88db      	ldrh	r3, [r3, #6]
   82522:	2b01      	cmp	r3, #1
   82524:	d001      	beq.n	8252a <udc_req_std_iface_get_setting+0x12>
		return false; // Error in request
   82526:	2300      	movs	r3, #0
   82528:	e032      	b.n	82590 <udc_req_std_iface_get_setting+0x78>
	}
	if (!udc_num_configuration) {
   8252a:	4b1c      	ldr	r3, [pc, #112]	; (8259c <udc_req_std_iface_get_setting+0x84>)
   8252c:	781b      	ldrb	r3, [r3, #0]
   8252e:	2b00      	cmp	r3, #0
   82530:	d101      	bne.n	82536 <udc_req_std_iface_get_setting+0x1e>
		return false; // The device is not is configured state yet
   82532:	2300      	movs	r3, #0
   82534:	e02c      	b.n	82590 <udc_req_std_iface_get_setting+0x78>
	}

	// Check the interface number included in the request
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82536:	4b18      	ldr	r3, [pc, #96]	; (82598 <udc_req_std_iface_get_setting+0x80>)
   82538:	889b      	ldrh	r3, [r3, #4]
   8253a:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8253c:	4b18      	ldr	r3, [pc, #96]	; (825a0 <udc_req_std_iface_get_setting+0x88>)
   8253e:	681b      	ldr	r3, [r3, #0]
   82540:	681b      	ldr	r3, [r3, #0]
   82542:	791b      	ldrb	r3, [r3, #4]
   82544:	79fa      	ldrb	r2, [r7, #7]
   82546:	429a      	cmp	r2, r3
   82548:	d301      	bcc.n	8254e <udc_req_std_iface_get_setting+0x36>
		return false;
   8254a:	2300      	movs	r3, #0
   8254c:	e020      	b.n	82590 <udc_req_std_iface_get_setting+0x78>
	}

	// Select first alternate setting of the interface to update udc_ptr_iface
	// before call iface->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   8254e:	79fb      	ldrb	r3, [r7, #7]
   82550:	2100      	movs	r1, #0
   82552:	4618      	mov	r0, r3
   82554:	4b13      	ldr	r3, [pc, #76]	; (825a4 <udc_req_std_iface_get_setting+0x8c>)
   82556:	4798      	blx	r3
   82558:	4603      	mov	r3, r0
   8255a:	f083 0301 	eor.w	r3, r3, #1
   8255e:	b2db      	uxtb	r3, r3
   82560:	2b00      	cmp	r3, #0
   82562:	d001      	beq.n	82568 <udc_req_std_iface_get_setting+0x50>
		return false;
   82564:	2300      	movs	r3, #0
   82566:	e013      	b.n	82590 <udc_req_std_iface_get_setting+0x78>
	}
	// Get alternate setting from UDI
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   82568:	4b0d      	ldr	r3, [pc, #52]	; (825a0 <udc_req_std_iface_get_setting+0x88>)
   8256a:	681b      	ldr	r3, [r3, #0]
   8256c:	685a      	ldr	r2, [r3, #4]
   8256e:	79fb      	ldrb	r3, [r7, #7]
   82570:	009b      	lsls	r3, r3, #2
   82572:	4413      	add	r3, r2
   82574:	681b      	ldr	r3, [r3, #0]
   82576:	603b      	str	r3, [r7, #0]
	udc_iface_setting = udi_api->getsetting();
   82578:	683b      	ldr	r3, [r7, #0]
   8257a:	68db      	ldr	r3, [r3, #12]
   8257c:	4798      	blx	r3
   8257e:	4603      	mov	r3, r0
   82580:	461a      	mov	r2, r3
   82582:	4b09      	ldr	r3, [pc, #36]	; (825a8 <udc_req_std_iface_get_setting+0x90>)
   82584:	701a      	strb	r2, [r3, #0]

	// Link value to payload pointer of request
	udd_set_setup_payload(&udc_iface_setting,1);
   82586:	2101      	movs	r1, #1
   82588:	4807      	ldr	r0, [pc, #28]	; (825a8 <udc_req_std_iface_get_setting+0x90>)
   8258a:	4b08      	ldr	r3, [pc, #32]	; (825ac <udc_req_std_iface_get_setting+0x94>)
   8258c:	4798      	blx	r3
	return true;
   8258e:	2301      	movs	r3, #1
}
   82590:	4618      	mov	r0, r3
   82592:	3708      	adds	r7, #8
   82594:	46bd      	mov	sp, r7
   82596:	bd80      	pop	{r7, pc}
   82598:	200013dc 	.word	0x200013dc
   8259c:	20001356 	.word	0x20001356
   825a0:	20001358 	.word	0x20001358
   825a4:	00081c35 	.word	0x00081c35
   825a8:	20001362 	.word	0x20001362
   825ac:	00083609 	.word	0x00083609

000825b0 <udc_req_std_iface_set_setting>:
 * to set an alternate setting of an interface
 *
 * \return true if success
 */
static bool udc_req_std_iface_set_setting(void)
{
   825b0:	b580      	push	{r7, lr}
   825b2:	b082      	sub	sp, #8
   825b4:	af00      	add	r7, sp, #0
	uint8_t iface_num, setting_num;

	if (udd_g_ctrlreq.req.wLength) {
   825b6:	4b14      	ldr	r3, [pc, #80]	; (82608 <udc_req_std_iface_set_setting+0x58>)
   825b8:	88db      	ldrh	r3, [r3, #6]
   825ba:	2b00      	cmp	r3, #0
   825bc:	d001      	beq.n	825c2 <udc_req_std_iface_set_setting+0x12>
		return false; // Error in request
   825be:	2300      	movs	r3, #0
   825c0:	e01e      	b.n	82600 <udc_req_std_iface_set_setting+0x50>
	}
	if (!udc_num_configuration) {
   825c2:	4b12      	ldr	r3, [pc, #72]	; (8260c <udc_req_std_iface_set_setting+0x5c>)
   825c4:	781b      	ldrb	r3, [r3, #0]
   825c6:	2b00      	cmp	r3, #0
   825c8:	d101      	bne.n	825ce <udc_req_std_iface_set_setting+0x1e>
		return false; // The device is not is configured state yet
   825ca:	2300      	movs	r3, #0
   825cc:	e018      	b.n	82600 <udc_req_std_iface_set_setting+0x50>
	}

	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   825ce:	4b0e      	ldr	r3, [pc, #56]	; (82608 <udc_req_std_iface_set_setting+0x58>)
   825d0:	889b      	ldrh	r3, [r3, #4]
   825d2:	71fb      	strb	r3, [r7, #7]
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   825d4:	4b0c      	ldr	r3, [pc, #48]	; (82608 <udc_req_std_iface_set_setting+0x58>)
   825d6:	885b      	ldrh	r3, [r3, #2]
   825d8:	71bb      	strb	r3, [r7, #6]

	// Disable current setting
	if (!udc_iface_disable(iface_num)) {
   825da:	79fb      	ldrb	r3, [r7, #7]
   825dc:	4618      	mov	r0, r3
   825de:	4b0c      	ldr	r3, [pc, #48]	; (82610 <udc_req_std_iface_set_setting+0x60>)
   825e0:	4798      	blx	r3
   825e2:	4603      	mov	r3, r0
   825e4:	f083 0301 	eor.w	r3, r3, #1
   825e8:	b2db      	uxtb	r3, r3
   825ea:	2b00      	cmp	r3, #0
   825ec:	d001      	beq.n	825f2 <udc_req_std_iface_set_setting+0x42>
		return false;
   825ee:	2300      	movs	r3, #0
   825f0:	e006      	b.n	82600 <udc_req_std_iface_set_setting+0x50>
	}

	// Enable new setting
	return udc_iface_enable(iface_num, setting_num);
   825f2:	79ba      	ldrb	r2, [r7, #6]
   825f4:	79fb      	ldrb	r3, [r7, #7]
   825f6:	4611      	mov	r1, r2
   825f8:	4618      	mov	r0, r3
   825fa:	4b06      	ldr	r3, [pc, #24]	; (82614 <udc_req_std_iface_set_setting+0x64>)
   825fc:	4798      	blx	r3
   825fe:	4603      	mov	r3, r0
}
   82600:	4618      	mov	r0, r3
   82602:	3708      	adds	r7, #8
   82604:	46bd      	mov	sp, r7
   82606:	bd80      	pop	{r7, pc}
   82608:	200013dc 	.word	0x200013dc
   8260c:	20001356 	.word	0x20001356
   82610:	00081cd1 	.word	0x00081cd1
   82614:	00081d71 	.word	0x00081d71

00082618 <udc_reqstd>:
 * \brief Main routine to manage the standard USB SETUP request
 *
 * \return true if the request is supported
 */
static bool udc_reqstd(void)
{
   82618:	b580      	push	{r7, lr}
   8261a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   8261c:	4b55      	ldr	r3, [pc, #340]	; (82774 <udc_reqstd+0x15c>)
   8261e:	781b      	ldrb	r3, [r3, #0]
   82620:	b25b      	sxtb	r3, r3
   82622:	2b00      	cmp	r3, #0
   82624:	da44      	bge.n	826b0 <udc_reqstd+0x98>
		// GET Standard Requests
		if (udd_g_ctrlreq.req.wLength == 0) {
   82626:	4b53      	ldr	r3, [pc, #332]	; (82774 <udc_reqstd+0x15c>)
   82628:	88db      	ldrh	r3, [r3, #6]
   8262a:	2b00      	cmp	r3, #0
   8262c:	d101      	bne.n	82632 <udc_reqstd+0x1a>
			return false; // Error for USB host
   8262e:	2300      	movs	r3, #0
   82630:	e09d      	b.n	8276e <udc_reqstd+0x156>
		}

		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   82632:	4b50      	ldr	r3, [pc, #320]	; (82774 <udc_reqstd+0x15c>)
   82634:	781b      	ldrb	r3, [r3, #0]
   82636:	f003 031f 	and.w	r3, r3, #31
   8263a:	2b00      	cmp	r3, #0
   8263c:	d116      	bne.n	8266c <udc_reqstd+0x54>
			// Standard Get Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   8263e:	4b4d      	ldr	r3, [pc, #308]	; (82774 <udc_reqstd+0x15c>)
   82640:	785b      	ldrb	r3, [r3, #1]
   82642:	2b08      	cmp	r3, #8
   82644:	d00e      	beq.n	82664 <udc_reqstd+0x4c>
   82646:	2b08      	cmp	r3, #8
   82648:	dc12      	bgt.n	82670 <udc_reqstd+0x58>
   8264a:	2b00      	cmp	r3, #0
   8264c:	d002      	beq.n	82654 <udc_reqstd+0x3c>
   8264e:	2b06      	cmp	r3, #6
   82650:	d004      	beq.n	8265c <udc_reqstd+0x44>
			case USB_REQ_GET_DESCRIPTOR:
				return udc_req_std_dev_get_descriptor();
			case USB_REQ_GET_CONFIGURATION:
				return udc_req_std_dev_get_configuration();
			default:
				break;
   82652:	e00d      	b.n	82670 <udc_reqstd+0x58>
				return udc_req_std_dev_get_status();
   82654:	4b48      	ldr	r3, [pc, #288]	; (82778 <udc_reqstd+0x160>)
   82656:	4798      	blx	r3
   82658:	4603      	mov	r3, r0
   8265a:	e088      	b.n	8276e <udc_reqstd+0x156>
				return udc_req_std_dev_get_descriptor();
   8265c:	4b47      	ldr	r3, [pc, #284]	; (8277c <udc_reqstd+0x164>)
   8265e:	4798      	blx	r3
   82660:	4603      	mov	r3, r0
   82662:	e084      	b.n	8276e <udc_reqstd+0x156>
				return udc_req_std_dev_get_configuration();
   82664:	4b46      	ldr	r3, [pc, #280]	; (82780 <udc_reqstd+0x168>)
   82666:	4798      	blx	r3
   82668:	4603      	mov	r3, r0
   8266a:	e080      	b.n	8276e <udc_reqstd+0x156>
			}
		}
   8266c:	bf00      	nop
   8266e:	e000      	b.n	82672 <udc_reqstd+0x5a>
				break;
   82670:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82672:	4b40      	ldr	r3, [pc, #256]	; (82774 <udc_reqstd+0x15c>)
   82674:	781b      	ldrb	r3, [r3, #0]
   82676:	f003 031f 	and.w	r3, r3, #31
   8267a:	2b01      	cmp	r3, #1
   8267c:	d107      	bne.n	8268e <udc_reqstd+0x76>
			// Standard Get Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   8267e:	4b3d      	ldr	r3, [pc, #244]	; (82774 <udc_reqstd+0x15c>)
   82680:	785b      	ldrb	r3, [r3, #1]
   82682:	2b0a      	cmp	r3, #10
   82684:	d105      	bne.n	82692 <udc_reqstd+0x7a>
			case USB_REQ_GET_INTERFACE:
				return udc_req_std_iface_get_setting();
   82686:	4b3f      	ldr	r3, [pc, #252]	; (82784 <udc_reqstd+0x16c>)
   82688:	4798      	blx	r3
   8268a:	4603      	mov	r3, r0
   8268c:	e06f      	b.n	8276e <udc_reqstd+0x156>
			default:
				break;
			}
		}
   8268e:	bf00      	nop
   82690:	e000      	b.n	82694 <udc_reqstd+0x7c>
				break;
   82692:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82694:	4b37      	ldr	r3, [pc, #220]	; (82774 <udc_reqstd+0x15c>)
   82696:	781b      	ldrb	r3, [r3, #0]
   82698:	f003 031f 	and.w	r3, r3, #31
   8269c:	2b02      	cmp	r3, #2
   8269e:	d160      	bne.n	82762 <udc_reqstd+0x14a>
			// Standard Get Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   826a0:	4b34      	ldr	r3, [pc, #208]	; (82774 <udc_reqstd+0x15c>)
   826a2:	785b      	ldrb	r3, [r3, #1]
   826a4:	2b00      	cmp	r3, #0
   826a6:	d15e      	bne.n	82766 <udc_reqstd+0x14e>
			case USB_REQ_GET_STATUS:
				return udc_req_std_ep_get_status();
   826a8:	4b37      	ldr	r3, [pc, #220]	; (82788 <udc_reqstd+0x170>)
   826aa:	4798      	blx	r3
   826ac:	4603      	mov	r3, r0
   826ae:	e05e      	b.n	8276e <udc_reqstd+0x156>
			}
		}
#endif
	} else {
		// SET Standard Requests
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   826b0:	4b30      	ldr	r3, [pc, #192]	; (82774 <udc_reqstd+0x15c>)
   826b2:	781b      	ldrb	r3, [r3, #0]
   826b4:	f003 031f 	and.w	r3, r3, #31
   826b8:	2b00      	cmp	r3, #0
   826ba:	d129      	bne.n	82710 <udc_reqstd+0xf8>
			// Standard Set Device request
			switch (udd_g_ctrlreq.req.bRequest) {
   826bc:	4b2d      	ldr	r3, [pc, #180]	; (82774 <udc_reqstd+0x15c>)
   826be:	785b      	ldrb	r3, [r3, #1]
   826c0:	3b01      	subs	r3, #1
   826c2:	2b08      	cmp	r3, #8
   826c4:	d826      	bhi.n	82714 <udc_reqstd+0xfc>
   826c6:	a201      	add	r2, pc, #4	; (adr r2, 826cc <udc_reqstd+0xb4>)
   826c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   826cc:	000826f9 	.word	0x000826f9
   826d0:	00082715 	.word	0x00082715
   826d4:	00082701 	.word	0x00082701
   826d8:	00082715 	.word	0x00082715
   826dc:	000826f1 	.word	0x000826f1
   826e0:	00082715 	.word	0x00082715
   826e4:	00082715 	.word	0x00082715
   826e8:	00082715 	.word	0x00082715
   826ec:	00082709 	.word	0x00082709
			case USB_REQ_SET_ADDRESS:
				return udc_req_std_dev_set_address();
   826f0:	4b26      	ldr	r3, [pc, #152]	; (8278c <udc_reqstd+0x174>)
   826f2:	4798      	blx	r3
   826f4:	4603      	mov	r3, r0
   826f6:	e03a      	b.n	8276e <udc_reqstd+0x156>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_dev_clear_feature();
   826f8:	4b25      	ldr	r3, [pc, #148]	; (82790 <udc_reqstd+0x178>)
   826fa:	4798      	blx	r3
   826fc:	4603      	mov	r3, r0
   826fe:	e036      	b.n	8276e <udc_reqstd+0x156>
			case USB_REQ_SET_FEATURE:
				return udc_req_std_dev_set_feature();
   82700:	4b24      	ldr	r3, [pc, #144]	; (82794 <udc_reqstd+0x17c>)
   82702:	4798      	blx	r3
   82704:	4603      	mov	r3, r0
   82706:	e032      	b.n	8276e <udc_reqstd+0x156>
			case USB_REQ_SET_CONFIGURATION:
				return udc_req_std_dev_set_configuration();
   82708:	4b23      	ldr	r3, [pc, #140]	; (82798 <udc_reqstd+0x180>)
   8270a:	4798      	blx	r3
   8270c:	4603      	mov	r3, r0
   8270e:	e02e      	b.n	8276e <udc_reqstd+0x156>
				/* Not supported (defined as optional by the USB 2.0 spec) */
				break;
			default:
				break;
			}
		}
   82710:	bf00      	nop
   82712:	e000      	b.n	82716 <udc_reqstd+0xfe>
				break;
   82714:	bf00      	nop

		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   82716:	4b17      	ldr	r3, [pc, #92]	; (82774 <udc_reqstd+0x15c>)
   82718:	781b      	ldrb	r3, [r3, #0]
   8271a:	f003 031f 	and.w	r3, r3, #31
   8271e:	2b01      	cmp	r3, #1
   82720:	d107      	bne.n	82732 <udc_reqstd+0x11a>
			// Standard Set Interface request
			switch (udd_g_ctrlreq.req.bRequest) {
   82722:	4b14      	ldr	r3, [pc, #80]	; (82774 <udc_reqstd+0x15c>)
   82724:	785b      	ldrb	r3, [r3, #1]
   82726:	2b0b      	cmp	r3, #11
   82728:	d105      	bne.n	82736 <udc_reqstd+0x11e>
			case USB_REQ_SET_INTERFACE:
				return udc_req_std_iface_set_setting();
   8272a:	4b1c      	ldr	r3, [pc, #112]	; (8279c <udc_reqstd+0x184>)
   8272c:	4798      	blx	r3
   8272e:	4603      	mov	r3, r0
   82730:	e01d      	b.n	8276e <udc_reqstd+0x156>
			default:
				break;
			}
		}
   82732:	bf00      	nop
   82734:	e000      	b.n	82738 <udc_reqstd+0x120>
				break;
   82736:	bf00      	nop
#if (0!=USB_DEVICE_MAX_EP)
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   82738:	4b0e      	ldr	r3, [pc, #56]	; (82774 <udc_reqstd+0x15c>)
   8273a:	781b      	ldrb	r3, [r3, #0]
   8273c:	f003 031f 	and.w	r3, r3, #31
   82740:	2b02      	cmp	r3, #2
   82742:	d112      	bne.n	8276a <udc_reqstd+0x152>
			// Standard Set Endpoint request
			switch (udd_g_ctrlreq.req.bRequest) {
   82744:	4b0b      	ldr	r3, [pc, #44]	; (82774 <udc_reqstd+0x15c>)
   82746:	785b      	ldrb	r3, [r3, #1]
   82748:	2b01      	cmp	r3, #1
   8274a:	d002      	beq.n	82752 <udc_reqstd+0x13a>
   8274c:	2b03      	cmp	r3, #3
   8274e:	d004      	beq.n	8275a <udc_reqstd+0x142>
			case USB_REQ_CLEAR_FEATURE:
				return udc_req_std_ep_clear_feature();
			case USB_REQ_SET_FEATURE:
				return udc_req_std_ep_set_feature();
			default:
				break;
   82750:	e00c      	b.n	8276c <udc_reqstd+0x154>
				return udc_req_std_ep_clear_feature();
   82752:	4b13      	ldr	r3, [pc, #76]	; (827a0 <udc_reqstd+0x188>)
   82754:	4798      	blx	r3
   82756:	4603      	mov	r3, r0
   82758:	e009      	b.n	8276e <udc_reqstd+0x156>
				return udc_req_std_ep_set_feature();
   8275a:	4b12      	ldr	r3, [pc, #72]	; (827a4 <udc_reqstd+0x18c>)
   8275c:	4798      	blx	r3
   8275e:	4603      	mov	r3, r0
   82760:	e005      	b.n	8276e <udc_reqstd+0x156>
		}
   82762:	bf00      	nop
   82764:	e002      	b.n	8276c <udc_reqstd+0x154>
				break;
   82766:	bf00      	nop
   82768:	e000      	b.n	8276c <udc_reqstd+0x154>
			}
		}
   8276a:	bf00      	nop
#endif
	}
	return false;
   8276c:	2300      	movs	r3, #0
}
   8276e:	4618      	mov	r0, r3
   82770:	bd80      	pop	{r7, pc}
   82772:	bf00      	nop
   82774:	200013dc 	.word	0x200013dc
   82778:	00081ecd 	.word	0x00081ecd
   8277c:	000821cd 	.word	0x000821cd
   82780:	000823e9 	.word	0x000823e9
   82784:	00082519 	.word	0x00082519
   82788:	00081ef9 	.word	0x00081ef9
   8278c:	000820d9 	.word	0x000820d9
   82790:	00081f3d 	.word	0x00081f3d
   82794:	00081fb1 	.word	0x00081fb1
   82798:	00082415 	.word	0x00082415
   8279c:	000825b1 	.word	0x000825b1
   827a0:	00081f79 	.word	0x00081f79
   827a4:	0008206d 	.word	0x0008206d

000827a8 <udc_req_iface>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_iface(void)
{
   827a8:	b580      	push	{r7, lr}
   827aa:	b082      	sub	sp, #8
   827ac:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   827ae:	4b20      	ldr	r3, [pc, #128]	; (82830 <udc_req_iface+0x88>)
   827b0:	781b      	ldrb	r3, [r3, #0]
   827b2:	2b00      	cmp	r3, #0
   827b4:	d101      	bne.n	827ba <udc_req_iface+0x12>
		return false; // The device is not is configured state yet
   827b6:	2300      	movs	r3, #0
   827b8:	e036      	b.n	82828 <udc_req_iface+0x80>
	}
	// Check interface number
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   827ba:	4b1e      	ldr	r3, [pc, #120]	; (82834 <udc_req_iface+0x8c>)
   827bc:	889b      	ldrh	r3, [r3, #4]
   827be:	71fb      	strb	r3, [r7, #7]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   827c0:	4b1d      	ldr	r3, [pc, #116]	; (82838 <udc_req_iface+0x90>)
   827c2:	681b      	ldr	r3, [r3, #0]
   827c4:	681b      	ldr	r3, [r3, #0]
   827c6:	791b      	ldrb	r3, [r3, #4]
   827c8:	79fa      	ldrb	r2, [r7, #7]
   827ca:	429a      	cmp	r2, r3
   827cc:	d301      	bcc.n	827d2 <udc_req_iface+0x2a>
		return false;
   827ce:	2300      	movs	r3, #0
   827d0:	e02a      	b.n	82828 <udc_req_iface+0x80>
	}

	//* To update udc_ptr_iface with the selected interface in request
	// Select first alternate setting of interface to update udc_ptr_iface
	// before calling udi_api->getsetting()
	if (!udc_update_iface_desc(iface_num, 0)) {
   827d2:	79fb      	ldrb	r3, [r7, #7]
   827d4:	2100      	movs	r1, #0
   827d6:	4618      	mov	r0, r3
   827d8:	4b18      	ldr	r3, [pc, #96]	; (8283c <udc_req_iface+0x94>)
   827da:	4798      	blx	r3
   827dc:	4603      	mov	r3, r0
   827de:	f083 0301 	eor.w	r3, r3, #1
   827e2:	b2db      	uxtb	r3, r3
   827e4:	2b00      	cmp	r3, #0
   827e6:	d001      	beq.n	827ec <udc_req_iface+0x44>
		return false;
   827e8:	2300      	movs	r3, #0
   827ea:	e01d      	b.n	82828 <udc_req_iface+0x80>
	}
	// Select the interface with the current alternate setting
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   827ec:	4b12      	ldr	r3, [pc, #72]	; (82838 <udc_req_iface+0x90>)
   827ee:	681b      	ldr	r3, [r3, #0]
   827f0:	685a      	ldr	r2, [r3, #4]
   827f2:	79fb      	ldrb	r3, [r7, #7]
   827f4:	009b      	lsls	r3, r3, #2
   827f6:	4413      	add	r3, r2
   827f8:	681b      	ldr	r3, [r3, #0]
   827fa:	603b      	str	r3, [r7, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   827fc:	683b      	ldr	r3, [r7, #0]
   827fe:	68db      	ldr	r3, [r3, #12]
   82800:	4798      	blx	r3
   82802:	4603      	mov	r3, r0
   82804:	461a      	mov	r2, r3
   82806:	79fb      	ldrb	r3, [r7, #7]
   82808:	4611      	mov	r1, r2
   8280a:	4618      	mov	r0, r3
   8280c:	4b0b      	ldr	r3, [pc, #44]	; (8283c <udc_req_iface+0x94>)
   8280e:	4798      	blx	r3
   82810:	4603      	mov	r3, r0
   82812:	f083 0301 	eor.w	r3, r3, #1
   82816:	b2db      	uxtb	r3, r3
   82818:	2b00      	cmp	r3, #0
   8281a:	d001      	beq.n	82820 <udc_req_iface+0x78>
		return false;
   8281c:	2300      	movs	r3, #0
   8281e:	e003      	b.n	82828 <udc_req_iface+0x80>
	}

	// Send the SETUP request to the UDI corresponding to the interface number
	return udi_api->setup();
   82820:	683b      	ldr	r3, [r7, #0]
   82822:	689b      	ldr	r3, [r3, #8]
   82824:	4798      	blx	r3
   82826:	4603      	mov	r3, r0
}
   82828:	4618      	mov	r0, r3
   8282a:	3708      	adds	r7, #8
   8282c:	46bd      	mov	sp, r7
   8282e:	bd80      	pop	{r7, pc}
   82830:	20001356 	.word	0x20001356
   82834:	200013dc 	.word	0x200013dc
   82838:	20001358 	.word	0x20001358
   8283c:	00081c35 	.word	0x00081c35

00082840 <udc_req_ep>:
 * \brief Send the SETUP interface request to UDI
 *
 * \return true if the request is supported
 */
static bool udc_req_ep(void)
{
   82840:	b580      	push	{r7, lr}
   82842:	b082      	sub	sp, #8
   82844:	af00      	add	r7, sp, #0
	uint8_t iface_num;
	udi_api_t UDC_DESC_STORAGE *udi_api;

	if (0 == udc_num_configuration) {
   82846:	4b1e      	ldr	r3, [pc, #120]	; (828c0 <udc_req_ep+0x80>)
   82848:	781b      	ldrb	r3, [r3, #0]
   8284a:	2b00      	cmp	r3, #0
   8284c:	d101      	bne.n	82852 <udc_req_ep+0x12>
		return false; // The device is not is configured state yet
   8284e:	2300      	movs	r3, #0
   82850:	e032      	b.n	828b8 <udc_req_ep+0x78>
	}
	// Send this request on all enabled interfaces
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   82852:	4b1c      	ldr	r3, [pc, #112]	; (828c4 <udc_req_ep+0x84>)
   82854:	889b      	ldrh	r3, [r3, #4]
   82856:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   82858:	2300      	movs	r3, #0
   8285a:	71fb      	strb	r3, [r7, #7]
   8285c:	e024      	b.n	828a8 <udc_req_ep+0x68>
			iface_num++) {
		// Select the interface with the current alternate setting
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   8285e:	4b1a      	ldr	r3, [pc, #104]	; (828c8 <udc_req_ep+0x88>)
   82860:	681b      	ldr	r3, [r3, #0]
   82862:	685a      	ldr	r2, [r3, #4]
   82864:	79fb      	ldrb	r3, [r7, #7]
   82866:	009b      	lsls	r3, r3, #2
   82868:	4413      	add	r3, r2
   8286a:	681b      	ldr	r3, [r3, #0]
   8286c:	603b      	str	r3, [r7, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8286e:	683b      	ldr	r3, [r7, #0]
   82870:	68db      	ldr	r3, [r3, #12]
   82872:	4798      	blx	r3
   82874:	4603      	mov	r3, r0
   82876:	461a      	mov	r2, r3
   82878:	79fb      	ldrb	r3, [r7, #7]
   8287a:	4611      	mov	r1, r2
   8287c:	4618      	mov	r0, r3
   8287e:	4b13      	ldr	r3, [pc, #76]	; (828cc <udc_req_ep+0x8c>)
   82880:	4798      	blx	r3
   82882:	4603      	mov	r3, r0
   82884:	f083 0301 	eor.w	r3, r3, #1
   82888:	b2db      	uxtb	r3, r3
   8288a:	2b00      	cmp	r3, #0
   8288c:	d001      	beq.n	82892 <udc_req_ep+0x52>
			return false;
   8288e:	2300      	movs	r3, #0
   82890:	e012      	b.n	828b8 <udc_req_ep+0x78>
		}

		// Send the SETUP request to the UDI
		if (udi_api->setup()) {
   82892:	683b      	ldr	r3, [r7, #0]
   82894:	689b      	ldr	r3, [r3, #8]
   82896:	4798      	blx	r3
   82898:	4603      	mov	r3, r0
   8289a:	2b00      	cmp	r3, #0
   8289c:	d001      	beq.n	828a2 <udc_req_ep+0x62>
			return true;
   8289e:	2301      	movs	r3, #1
   828a0:	e00a      	b.n	828b8 <udc_req_ep+0x78>
			iface_num++) {
   828a2:	79fb      	ldrb	r3, [r7, #7]
   828a4:	3301      	adds	r3, #1
   828a6:	71fb      	strb	r3, [r7, #7]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   828a8:	4b07      	ldr	r3, [pc, #28]	; (828c8 <udc_req_ep+0x88>)
   828aa:	681b      	ldr	r3, [r3, #0]
   828ac:	681b      	ldr	r3, [r3, #0]
   828ae:	791b      	ldrb	r3, [r3, #4]
   828b0:	79fa      	ldrb	r2, [r7, #7]
   828b2:	429a      	cmp	r2, r3
   828b4:	d3d3      	bcc.n	8285e <udc_req_ep+0x1e>
		}
	}
	return false;
   828b6:	2300      	movs	r3, #0
}
   828b8:	4618      	mov	r0, r3
   828ba:	3708      	adds	r7, #8
   828bc:	46bd      	mov	sp, r7
   828be:	bd80      	pop	{r7, pc}
   828c0:	20001356 	.word	0x20001356
   828c4:	200013dc 	.word	0x200013dc
   828c8:	20001358 	.word	0x20001358
   828cc:	00081c35 	.word	0x00081c35

000828d0 <udc_process_setup>:
 * sent to a specific application callback.
 *
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
   828d0:	b580      	push	{r7, lr}
   828d2:	af00      	add	r7, sp, #0
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   828d4:	4b2c      	ldr	r3, [pc, #176]	; (82988 <udc_process_setup+0xb8>)
   828d6:	2200      	movs	r2, #0
   828d8:	819a      	strh	r2, [r3, #12]
	udd_g_ctrlreq.callback = NULL;
   828da:	4b2b      	ldr	r3, [pc, #172]	; (82988 <udc_process_setup+0xb8>)
   828dc:	2200      	movs	r2, #0
   828de:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   828e0:	4b29      	ldr	r3, [pc, #164]	; (82988 <udc_process_setup+0xb8>)
   828e2:	2200      	movs	r2, #0
   828e4:	615a      	str	r2, [r3, #20]

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   828e6:	4b28      	ldr	r3, [pc, #160]	; (82988 <udc_process_setup+0xb8>)
   828e8:	781b      	ldrb	r3, [r3, #0]
   828ea:	2bc0      	cmp	r3, #192	; 0xc0
   828ec:	d109      	bne.n	82902 <udc_process_setup+0x32>
   828ee:	4b26      	ldr	r3, [pc, #152]	; (82988 <udc_process_setup+0xb8>)
   828f0:	785b      	ldrb	r3, [r3, #1]
   828f2:	2b01      	cmp	r3, #1
   828f4:	d105      	bne.n	82902 <udc_process_setup+0x32>
		} else {
			// CompatibleID = "WINUSB"
			MS_OS_DESC.FUNC[1].FEAT.CompatibleID[0] = 'W';
		}
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   828f6:	219e      	movs	r1, #158	; 0x9e
   828f8:	4824      	ldr	r0, [pc, #144]	; (8298c <udc_process_setup+0xbc>)
   828fa:	4b25      	ldr	r3, [pc, #148]	; (82990 <udc_process_setup+0xc0>)
   828fc:	4798      	blx	r3
		return true;
   828fe:	2301      	movs	r3, #1
   82900:	e03f      	b.n	82982 <udc_process_setup+0xb2>
	}

	if (Udd_setup_is_in()) {
   82902:	4b21      	ldr	r3, [pc, #132]	; (82988 <udc_process_setup+0xb8>)
   82904:	781b      	ldrb	r3, [r3, #0]
   82906:	b25b      	sxtb	r3, r3
   82908:	2b00      	cmp	r3, #0
   8290a:	da05      	bge.n	82918 <udc_process_setup+0x48>
		if (udd_g_ctrlreq.req.wLength == 0) {
   8290c:	4b1e      	ldr	r3, [pc, #120]	; (82988 <udc_process_setup+0xb8>)
   8290e:	88db      	ldrh	r3, [r3, #6]
   82910:	2b00      	cmp	r3, #0
   82912:	d101      	bne.n	82918 <udc_process_setup+0x48>
			return false; // Error from USB host
   82914:	2300      	movs	r3, #0
   82916:	e034      	b.n	82982 <udc_process_setup+0xb2>
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   82918:	4b1b      	ldr	r3, [pc, #108]	; (82988 <udc_process_setup+0xb8>)
   8291a:	781b      	ldrb	r3, [r3, #0]
   8291c:	f003 0360 	and.w	r3, r3, #96	; 0x60
   82920:	2b00      	cmp	r3, #0
   82922:	d106      	bne.n	82932 <udc_process_setup+0x62>
		if (udc_reqstd()) {
   82924:	4b1b      	ldr	r3, [pc, #108]	; (82994 <udc_process_setup+0xc4>)
   82926:	4798      	blx	r3
   82928:	4603      	mov	r3, r0
   8292a:	2b00      	cmp	r3, #0
   8292c:	d001      	beq.n	82932 <udc_process_setup+0x62>
			return true;
   8292e:	2301      	movs	r3, #1
   82930:	e027      	b.n	82982 <udc_process_setup+0xb2>
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   82932:	4b15      	ldr	r3, [pc, #84]	; (82988 <udc_process_setup+0xb8>)
   82934:	781b      	ldrb	r3, [r3, #0]
   82936:	f003 031f 	and.w	r3, r3, #31
   8293a:	2b01      	cmp	r3, #1
   8293c:	d005      	beq.n	8294a <udc_process_setup+0x7a>
   8293e:	4b12      	ldr	r3, [pc, #72]	; (82988 <udc_process_setup+0xb8>)
   82940:	781b      	ldrb	r3, [r3, #0]
   82942:	f003 031f 	and.w	r3, r3, #31
   82946:	2b00      	cmp	r3, #0
   82948:	d10d      	bne.n	82966 <udc_process_setup+0x96>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   8294a:	4b0f      	ldr	r3, [pc, #60]	; (82988 <udc_process_setup+0xb8>)
   8294c:	889b      	ldrh	r3, [r3, #4]
   8294e:	2b02      	cmp	r3, #2
   82950:	d102      	bne.n	82958 <udc_process_setup+0x88>
			udd_g_ctrlreq.req.wIndex = 1;
   82952:	4b0d      	ldr	r3, [pc, #52]	; (82988 <udc_process_setup+0xb8>)
   82954:	2201      	movs	r2, #1
   82956:	809a      	strh	r2, [r3, #4]
		}

		if (udc_req_iface()) {
   82958:	4b0f      	ldr	r3, [pc, #60]	; (82998 <udc_process_setup+0xc8>)
   8295a:	4798      	blx	r3
   8295c:	4603      	mov	r3, r0
   8295e:	2b00      	cmp	r3, #0
   82960:	d001      	beq.n	82966 <udc_process_setup+0x96>
			return true;
   82962:	2301      	movs	r3, #1
   82964:	e00d      	b.n	82982 <udc_process_setup+0xb2>
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   82966:	4b08      	ldr	r3, [pc, #32]	; (82988 <udc_process_setup+0xb8>)
   82968:	781b      	ldrb	r3, [r3, #0]
   8296a:	f003 031f 	and.w	r3, r3, #31
   8296e:	2b02      	cmp	r3, #2
   82970:	d106      	bne.n	82980 <udc_process_setup+0xb0>
		if (udc_req_ep()) {
   82972:	4b0a      	ldr	r3, [pc, #40]	; (8299c <udc_process_setup+0xcc>)
   82974:	4798      	blx	r3
   82976:	4603      	mov	r3, r0
   82978:	2b00      	cmp	r3, #0
   8297a:	d001      	beq.n	82980 <udc_process_setup+0xb0>
			return true;
   8297c:	2301      	movs	r3, #1
   8297e:	e000      	b.n	82982 <udc_process_setup+0xb2>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   82980:	2300      	movs	r3, #0
#endif
}
   82982:	4618      	mov	r0, r3
   82984:	bd80      	pop	{r7, pc}
   82986:	bf00      	nop
   82988:	200013dc 	.word	0x200013dc
   8298c:	20000294 	.word	0x20000294
   82990:	00083609 	.word	0x00083609
   82994:	00082619 	.word	0x00082619
   82998:	000827a9 	.word	0x000827a9
   8299c:	00082841 	.word	0x00082841

000829a0 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   829a0:	b590      	push	{r4, r7, lr}
   829a2:	b08b      	sub	sp, #44	; 0x2c
   829a4:	af02      	add	r7, sp, #8
   829a6:	6078      	str	r0, [r7, #4]
   829a8:	6039      	str	r1, [r7, #0]
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   829aa:	f107 030c 	add.w	r3, r7, #12
   829ae:	2204      	movs	r2, #4
   829b0:	9200      	str	r2, [sp, #0]
   829b2:	220f      	movs	r2, #15
   829b4:	210e      	movs	r1, #14
   829b6:	4813      	ldr	r0, [pc, #76]	; (82a04 <flash_read_unique_id+0x64>)
   829b8:	4c13      	ldr	r4, [pc, #76]	; (82a08 <flash_read_unique_id+0x68>)
   829ba:	47a0      	blx	r4
   829bc:	4603      	mov	r3, r0
   829be:	2b00      	cmp	r3, #0
   829c0:	d001      	beq.n	829c6 <flash_read_unique_id+0x26>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
   829c2:	2310      	movs	r3, #16
   829c4:	e01a      	b.n	829fc <flash_read_unique_id+0x5c>
	}

	if (ul_size > 4) {
   829c6:	683b      	ldr	r3, [r7, #0]
   829c8:	2b04      	cmp	r3, #4
   829ca:	d901      	bls.n	829d0 <flash_read_unique_id+0x30>
		/* Only 4 dword to store unique ID */
		ul_size = 4;
   829cc:	2304      	movs	r3, #4
   829ce:	603b      	str	r3, [r7, #0]
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   829d0:	2300      	movs	r3, #0
   829d2:	61fb      	str	r3, [r7, #28]
   829d4:	e00d      	b.n	829f2 <flash_read_unique_id+0x52>
		pul_data[ul_idx] = uid_buf[ul_idx];
   829d6:	69fb      	ldr	r3, [r7, #28]
   829d8:	009b      	lsls	r3, r3, #2
   829da:	687a      	ldr	r2, [r7, #4]
   829dc:	441a      	add	r2, r3
   829de:	69fb      	ldr	r3, [r7, #28]
   829e0:	009b      	lsls	r3, r3, #2
   829e2:	3320      	adds	r3, #32
   829e4:	443b      	add	r3, r7
   829e6:	f853 3c14 	ldr.w	r3, [r3, #-20]
   829ea:	6013      	str	r3, [r2, #0]
	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   829ec:	69fb      	ldr	r3, [r7, #28]
   829ee:	3301      	adds	r3, #1
   829f0:	61fb      	str	r3, [r7, #28]
   829f2:	69fa      	ldr	r2, [r7, #28]
   829f4:	683b      	ldr	r3, [r7, #0]
   829f6:	429a      	cmp	r2, r3
   829f8:	d3ed      	bcc.n	829d6 <flash_read_unique_id+0x36>
	}

	return FLASH_RC_OK;
   829fa:	2300      	movs	r3, #0
}
   829fc:	4618      	mov	r0, r3
   829fe:	3724      	adds	r7, #36	; 0x24
   82a00:	46bd      	mov	sp, r7
   82a02:	bd90      	pop	{r4, r7, pc}
   82a04:	400e0800 	.word	0x400e0800
   82a08:	20000001 	.word	0x20000001

00082a0c <usart_set_spi_master_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
static uint32_t usart_set_spi_master_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   82a0c:	b480      	push	{r7}
   82a0e:	b087      	sub	sp, #28
   82a10:	af00      	add	r7, sp, #0
   82a12:	60f8      	str	r0, [r7, #12]
   82a14:	60b9      	str	r1, [r7, #8]
   82a16:	607a      	str	r2, [r7, #4]
	uint32_t cd;

	/* Calculate the clock divider according to the formula in SPI mode. */
	cd = (ul_mck + baudrate / 2) / baudrate;
   82a18:	68bb      	ldr	r3, [r7, #8]
   82a1a:	085a      	lsrs	r2, r3, #1
   82a1c:	687b      	ldr	r3, [r7, #4]
   82a1e:	441a      	add	r2, r3
   82a20:	68bb      	ldr	r3, [r7, #8]
   82a22:	fbb2 f3f3 	udiv	r3, r2, r3
   82a26:	617b      	str	r3, [r7, #20]

	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   82a28:	697b      	ldr	r3, [r7, #20]
   82a2a:	2b03      	cmp	r3, #3
   82a2c:	d903      	bls.n	82a36 <usart_set_spi_master_baudrate+0x2a>
   82a2e:	697b      	ldr	r3, [r7, #20]
   82a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   82a34:	d301      	bcc.n	82a3a <usart_set_spi_master_baudrate+0x2e>
		return 1;
   82a36:	2301      	movs	r3, #1
   82a38:	e003      	b.n	82a42 <usart_set_spi_master_baudrate+0x36>
	}

	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   82a3a:	68fb      	ldr	r3, [r7, #12]
   82a3c:	697a      	ldr	r2, [r7, #20]
   82a3e:	621a      	str	r2, [r3, #32]

	return 0;
   82a40:	2300      	movs	r3, #0
}
   82a42:	4618      	mov	r0, r3
   82a44:	371c      	adds	r7, #28
   82a46:	46bd      	mov	sp, r7
   82a48:	bc80      	pop	{r7}
   82a4a:	4770      	bx	lr

00082a4c <usart_reset>:
 * \brief Reset the USART and disable TX and RX.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset(Usart *p_usart)
{
   82a4c:	b580      	push	{r7, lr}
   82a4e:	b082      	sub	sp, #8
   82a50:	af00      	add	r7, sp, #0
   82a52:	6078      	str	r0, [r7, #4]
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);
   82a54:	6878      	ldr	r0, [r7, #4]
   82a56:	4b0f      	ldr	r3, [pc, #60]	; (82a94 <usart_reset+0x48>)
   82a58:	4798      	blx	r3

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   82a5a:	687b      	ldr	r3, [r7, #4]
   82a5c:	2200      	movs	r2, #0
   82a5e:	605a      	str	r2, [r3, #4]
	p_usart->US_RTOR = 0;
   82a60:	687b      	ldr	r3, [r7, #4]
   82a62:	2200      	movs	r2, #0
   82a64:	625a      	str	r2, [r3, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82a66:	687b      	ldr	r3, [r7, #4]
   82a68:	2200      	movs	r2, #0
   82a6a:	629a      	str	r2, [r3, #40]	; 0x28

	/* Disable TX and RX. */
	usart_reset_tx(p_usart);
   82a6c:	6878      	ldr	r0, [r7, #4]
   82a6e:	4b0a      	ldr	r3, [pc, #40]	; (82a98 <usart_reset+0x4c>)
   82a70:	4798      	blx	r3
	usart_reset_rx(p_usart);
   82a72:	6878      	ldr	r0, [r7, #4]
   82a74:	4b09      	ldr	r3, [pc, #36]	; (82a9c <usart_reset+0x50>)
   82a76:	4798      	blx	r3
	/* Reset status bits. */
	usart_reset_status(p_usart);
   82a78:	6878      	ldr	r0, [r7, #4]
   82a7a:	4b09      	ldr	r3, [pc, #36]	; (82aa0 <usart_reset+0x54>)
   82a7c:	4798      	blx	r3
	/* Turn off RTS and DTR if exist. */
	usart_drive_RTS_pin_high(p_usart);
   82a7e:	6878      	ldr	r0, [r7, #4]
   82a80:	4b08      	ldr	r3, [pc, #32]	; (82aa4 <usart_reset+0x58>)
   82a82:	4798      	blx	r3
#if (SAM3S || SAM4S || SAM3U || SAM4L || SAM4E)
	usart_drive_DTR_pin_high(p_usart);
   82a84:	6878      	ldr	r0, [r7, #4]
   82a86:	4b08      	ldr	r3, [pc, #32]	; (82aa8 <usart_reset+0x5c>)
   82a88:	4798      	blx	r3
#endif
}
   82a8a:	bf00      	nop
   82a8c:	3708      	adds	r7, #8
   82a8e:	46bd      	mov	sp, r7
   82a90:	bd80      	pop	{r7, pc}
   82a92:	bf00      	nop
   82a94:	00082c81 	.word	0x00082c81
   82a98:	00082bd5 	.word	0x00082bd5
   82a9c:	00082bed 	.word	0x00082bed
   82aa0:	00082c05 	.word	0x00082c05
   82aa4:	00082c39 	.word	0x00082c39
   82aa8:	00082c1f 	.word	0x00082c1f

00082aac <usart_init_spi_master>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_spi_master(Usart *p_usart,
		const usart_spi_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82aac:	b580      	push	{r7, lr}
   82aae:	b084      	sub	sp, #16
   82ab0:	af00      	add	r7, sp, #0
   82ab2:	60f8      	str	r0, [r7, #12]
   82ab4:	60b9      	str	r1, [r7, #8]
   82ab6:	607a      	str	r2, [r7, #4]
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   82ab8:	68f8      	ldr	r0, [r7, #12]
   82aba:	4b3d      	ldr	r3, [pc, #244]	; (82bb0 <usart_init_spi_master+0x104>)
   82abc:	4798      	blx	r3

	ul_reg_val = 0;
   82abe:	4b3d      	ldr	r3, [pc, #244]	; (82bb4 <usart_init_spi_master+0x108>)
   82ac0:	2200      	movs	r2, #0
   82ac2:	601a      	str	r2, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   82ac4:	68bb      	ldr	r3, [r7, #8]
   82ac6:	2b00      	cmp	r3, #0
   82ac8:	d00d      	beq.n	82ae6 <usart_init_spi_master+0x3a>
   82aca:	68bb      	ldr	r3, [r7, #8]
   82acc:	689b      	ldr	r3, [r3, #8]
   82ace:	2b03      	cmp	r3, #3
   82ad0:	d809      	bhi.n	82ae6 <usart_init_spi_master+0x3a>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   82ad2:	68bb      	ldr	r3, [r7, #8]
   82ad4:	681b      	ldr	r3, [r3, #0]
   82ad6:	687a      	ldr	r2, [r7, #4]
   82ad8:	4619      	mov	r1, r3
   82ada:	68f8      	ldr	r0, [r7, #12]
   82adc:	4b36      	ldr	r3, [pc, #216]	; (82bb8 <usart_init_spi_master+0x10c>)
   82ade:	4798      	blx	r3
   82ae0:	4603      	mov	r3, r0
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   82ae2:	2b00      	cmp	r3, #0
   82ae4:	d001      	beq.n	82aea <usart_init_spi_master+0x3e>
			ul_mck)) {
		return 1;
   82ae6:	2301      	movs	r3, #1
   82ae8:	e05d      	b.n	82ba6 <usart_init_spi_master+0xfa>
	}

	/* Configure the character length bit in MR register. */
	ul_reg_val |= p_usart_opt->char_length;
   82aea:	68bb      	ldr	r3, [r7, #8]
   82aec:	685a      	ldr	r2, [r3, #4]
   82aee:	4b31      	ldr	r3, [pc, #196]	; (82bb4 <usart_init_spi_master+0x108>)
   82af0:	681b      	ldr	r3, [r3, #0]
   82af2:	4313      	orrs	r3, r2
   82af4:	4a2f      	ldr	r2, [pc, #188]	; (82bb4 <usart_init_spi_master+0x108>)
   82af6:	6013      	str	r3, [r2, #0]

	/* Set SPI master mode and channel mode. */
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
			p_usart_opt->channel_mode;
   82af8:	68bb      	ldr	r3, [r7, #8]
   82afa:	68da      	ldr	r2, [r3, #12]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   82afc:	4b2d      	ldr	r3, [pc, #180]	; (82bb4 <usart_init_spi_master+0x108>)
   82afe:	681b      	ldr	r3, [r3, #0]
   82b00:	4313      	orrs	r3, r2
   82b02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
   82b06:	f043 030e 	orr.w	r3, r3, #14
   82b0a:	4a2a      	ldr	r2, [pc, #168]	; (82bb4 <usart_init_spi_master+0x108>)
   82b0c:	6013      	str	r3, [r2, #0]

	switch (p_usart_opt->spi_mode) {
   82b0e:	68bb      	ldr	r3, [r7, #8]
   82b10:	689b      	ldr	r3, [r3, #8]
   82b12:	2b03      	cmp	r3, #3
   82b14:	d83e      	bhi.n	82b94 <usart_init_spi_master+0xe8>
   82b16:	a201      	add	r2, pc, #4	; (adr r2, 82b1c <usart_init_spi_master+0x70>)
   82b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   82b1c:	00082b2d 	.word	0x00082b2d
   82b20:	00082b47 	.word	0x00082b47
   82b24:	00082b61 	.word	0x00082b61
   82b28:	00082b7b 	.word	0x00082b7b
	case SPI_MODE_0:
		ul_reg_val |= US_MR_CPHA;
   82b2c:	4b21      	ldr	r3, [pc, #132]	; (82bb4 <usart_init_spi_master+0x108>)
   82b2e:	681b      	ldr	r3, [r3, #0]
   82b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82b34:	4a1f      	ldr	r2, [pc, #124]	; (82bb4 <usart_init_spi_master+0x108>)
   82b36:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   82b38:	4b1e      	ldr	r3, [pc, #120]	; (82bb4 <usart_init_spi_master+0x108>)
   82b3a:	681b      	ldr	r3, [r3, #0]
   82b3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82b40:	4a1c      	ldr	r2, [pc, #112]	; (82bb4 <usart_init_spi_master+0x108>)
   82b42:	6013      	str	r3, [r2, #0]
		break;
   82b44:	e027      	b.n	82b96 <usart_init_spi_master+0xea>

	case SPI_MODE_1:
		ul_reg_val &= ~US_MR_CPHA;
   82b46:	4b1b      	ldr	r3, [pc, #108]	; (82bb4 <usart_init_spi_master+0x108>)
   82b48:	681b      	ldr	r3, [r3, #0]
   82b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   82b4e:	4a19      	ldr	r2, [pc, #100]	; (82bb4 <usart_init_spi_master+0x108>)
   82b50:	6013      	str	r3, [r2, #0]
		ul_reg_val &= ~US_MR_CPOL;
   82b52:	4b18      	ldr	r3, [pc, #96]	; (82bb4 <usart_init_spi_master+0x108>)
   82b54:	681b      	ldr	r3, [r3, #0]
   82b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   82b5a:	4a16      	ldr	r2, [pc, #88]	; (82bb4 <usart_init_spi_master+0x108>)
   82b5c:	6013      	str	r3, [r2, #0]
		break;
   82b5e:	e01a      	b.n	82b96 <usart_init_spi_master+0xea>

	case SPI_MODE_2:
		ul_reg_val |= US_MR_CPHA;
   82b60:	4b14      	ldr	r3, [pc, #80]	; (82bb4 <usart_init_spi_master+0x108>)
   82b62:	681b      	ldr	r3, [r3, #0]
   82b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   82b68:	4a12      	ldr	r2, [pc, #72]	; (82bb4 <usart_init_spi_master+0x108>)
   82b6a:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   82b6c:	4b11      	ldr	r3, [pc, #68]	; (82bb4 <usart_init_spi_master+0x108>)
   82b6e:	681b      	ldr	r3, [r3, #0]
   82b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82b74:	4a0f      	ldr	r2, [pc, #60]	; (82bb4 <usart_init_spi_master+0x108>)
   82b76:	6013      	str	r3, [r2, #0]
		break;
   82b78:	e00d      	b.n	82b96 <usart_init_spi_master+0xea>

	case SPI_MODE_3:
		ul_reg_val &= ~US_MR_CPHA;
   82b7a:	4b0e      	ldr	r3, [pc, #56]	; (82bb4 <usart_init_spi_master+0x108>)
   82b7c:	681b      	ldr	r3, [r3, #0]
   82b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   82b82:	4a0c      	ldr	r2, [pc, #48]	; (82bb4 <usart_init_spi_master+0x108>)
   82b84:	6013      	str	r3, [r2, #0]
		ul_reg_val |= US_MR_CPOL;
   82b86:	4b0b      	ldr	r3, [pc, #44]	; (82bb4 <usart_init_spi_master+0x108>)
   82b88:	681b      	ldr	r3, [r3, #0]
   82b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   82b8e:	4a09      	ldr	r2, [pc, #36]	; (82bb4 <usart_init_spi_master+0x108>)
   82b90:	6013      	str	r3, [r2, #0]
		break;
   82b92:	e000      	b.n	82b96 <usart_init_spi_master+0xea>

	default:
		break;
   82b94:	bf00      	nop
	}

	p_usart->US_MR |= ul_reg_val;
   82b96:	68fb      	ldr	r3, [r7, #12]
   82b98:	685a      	ldr	r2, [r3, #4]
   82b9a:	4b06      	ldr	r3, [pc, #24]	; (82bb4 <usart_init_spi_master+0x108>)
   82b9c:	681b      	ldr	r3, [r3, #0]
   82b9e:	431a      	orrs	r2, r3
   82ba0:	68fb      	ldr	r3, [r7, #12]
   82ba2:	605a      	str	r2, [r3, #4]

	return 0;
   82ba4:	2300      	movs	r3, #0
}
   82ba6:	4618      	mov	r0, r3
   82ba8:	3710      	adds	r7, #16
   82baa:	46bd      	mov	sp, r7
   82bac:	bd80      	pop	{r7, pc}
   82bae:	bf00      	nop
   82bb0:	00082a4d 	.word	0x00082a4d
   82bb4:	20001364 	.word	0x20001364
   82bb8:	00082a0d 	.word	0x00082a0d

00082bbc <usart_enable_tx>:
 * \brief Enable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
   82bbc:	b480      	push	{r7}
   82bbe:	b083      	sub	sp, #12
   82bc0:	af00      	add	r7, sp, #0
   82bc2:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_TXEN;
   82bc4:	687b      	ldr	r3, [r7, #4]
   82bc6:	2240      	movs	r2, #64	; 0x40
   82bc8:	601a      	str	r2, [r3, #0]
}
   82bca:	bf00      	nop
   82bcc:	370c      	adds	r7, #12
   82bce:	46bd      	mov	sp, r7
   82bd0:	bc80      	pop	{r7}
   82bd2:	4770      	bx	lr

00082bd4 <usart_reset_tx>:
 * \brief Immediately stop and disable USART transmitter.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
   82bd4:	b480      	push	{r7}
   82bd6:	b083      	sub	sp, #12
   82bd8:	af00      	add	r7, sp, #0
   82bda:	6078      	str	r0, [r7, #4]
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82bdc:	687b      	ldr	r3, [r7, #4]
   82bde:	2288      	movs	r2, #136	; 0x88
   82be0:	601a      	str	r2, [r3, #0]
}
   82be2:	bf00      	nop
   82be4:	370c      	adds	r7, #12
   82be6:	46bd      	mov	sp, r7
   82be8:	bc80      	pop	{r7}
   82bea:	4770      	bx	lr

00082bec <usart_reset_rx>:
 * \brief Immediately stop and disable USART receiver.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
   82bec:	b480      	push	{r7}
   82bee:	b083      	sub	sp, #12
   82bf0:	af00      	add	r7, sp, #0
   82bf2:	6078      	str	r0, [r7, #4]
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82bf4:	687b      	ldr	r3, [r7, #4]
   82bf6:	2224      	movs	r2, #36	; 0x24
   82bf8:	601a      	str	r2, [r3, #0]
}
   82bfa:	bf00      	nop
   82bfc:	370c      	adds	r7, #12
   82bfe:	46bd      	mov	sp, r7
   82c00:	bc80      	pop	{r7}
   82c02:	4770      	bx	lr

00082c04 <usart_reset_status>:
 * \brief Reset status bits (PARE, OVER, MANERR, UNRE and PXBRK in US_CSR).
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
   82c04:	b480      	push	{r7}
   82c06:	b083      	sub	sp, #12
   82c08:	af00      	add	r7, sp, #0
   82c0a:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RSTSTA;
   82c0c:	687b      	ldr	r3, [r7, #4]
   82c0e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82c12:	601a      	str	r2, [r3, #0]
}
   82c14:	bf00      	nop
   82c16:	370c      	adds	r7, #12
   82c18:	46bd      	mov	sp, r7
   82c1a:	bc80      	pop	{r7}
   82c1c:	4770      	bx	lr

00082c1e <usart_drive_DTR_pin_high>:
 * \brief Drive the pin DTR to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_DTR_pin_high(Usart *p_usart)
{
   82c1e:	b480      	push	{r7}
   82c20:	b083      	sub	sp, #12
   82c22:	af00      	add	r7, sp, #0
   82c24:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_DTRDIS;
   82c26:	687b      	ldr	r3, [r7, #4]
   82c28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   82c2c:	601a      	str	r2, [r3, #0]
}
   82c2e:	bf00      	nop
   82c30:	370c      	adds	r7, #12
   82c32:	46bd      	mov	sp, r7
   82c34:	bc80      	pop	{r7}
   82c36:	4770      	bx	lr

00082c38 <usart_drive_RTS_pin_high>:
 * \brief Drive the pin RTS to 1.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
   82c38:	b480      	push	{r7}
   82c3a:	b083      	sub	sp, #12
   82c3c:	af00      	add	r7, sp, #0
   82c3e:	6078      	str	r0, [r7, #4]
	p_usart->US_CR = US_CR_RTSDIS;
   82c40:	687b      	ldr	r3, [r7, #4]
   82c42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
   82c46:	601a      	str	r2, [r3, #0]
}
   82c48:	bf00      	nop
   82c4a:	370c      	adds	r7, #12
   82c4c:	46bd      	mov	sp, r7
   82c4e:	bc80      	pop	{r7}
   82c50:	4770      	bx	lr

00082c52 <usart_putchar>:
 *
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_putchar(Usart *p_usart, uint32_t c)
{
   82c52:	b480      	push	{r7}
   82c54:	b083      	sub	sp, #12
   82c56:	af00      	add	r7, sp, #0
   82c58:	6078      	str	r0, [r7, #4]
   82c5a:	6039      	str	r1, [r7, #0]
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82c5c:	bf00      	nop
   82c5e:	687b      	ldr	r3, [r7, #4]
   82c60:	695b      	ldr	r3, [r3, #20]
   82c62:	f003 0302 	and.w	r3, r3, #2
   82c66:	2b00      	cmp	r3, #0
   82c68:	d0f9      	beq.n	82c5e <usart_putchar+0xc>
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   82c6a:	683b      	ldr	r3, [r7, #0]
   82c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
   82c70:	687b      	ldr	r3, [r7, #4]
   82c72:	61da      	str	r2, [r3, #28]

	return 0;
   82c74:	2300      	movs	r3, #0
}
   82c76:	4618      	mov	r0, r3
   82c78:	370c      	adds	r7, #12
   82c7a:	46bd      	mov	sp, r7
   82c7c:	bc80      	pop	{r7}
   82c7e:	4770      	bx	lr

00082c80 <usart_disable_writeprotect>:
 * \brief Disable write protect of USART registers.
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
   82c80:	b480      	push	{r7}
   82c82:	b083      	sub	sp, #12
   82c84:	af00      	add	r7, sp, #0
   82c86:	6078      	str	r0, [r7, #4]
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82c88:	687b      	ldr	r3, [r7, #4]
   82c8a:	4a04      	ldr	r2, [pc, #16]	; (82c9c <usart_disable_writeprotect+0x1c>)
   82c8c:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
}
   82c90:	bf00      	nop
   82c92:	370c      	adds	r7, #12
   82c94:	46bd      	mov	sp, r7
   82c96:	bc80      	pop	{r7}
   82c98:	4770      	bx	lr
   82c9a:	bf00      	nop
   82c9c:	55534100 	.word	0x55534100

00082ca0 <spi_get_peripheral_select_mode>:
{
   82ca0:	b480      	push	{r7}
   82ca2:	b083      	sub	sp, #12
   82ca4:	af00      	add	r7, sp, #0
   82ca6:	6078      	str	r0, [r7, #4]
	if (p_spi->SPI_MR & SPI_MR_PS) {
   82ca8:	687b      	ldr	r3, [r7, #4]
   82caa:	685b      	ldr	r3, [r3, #4]
   82cac:	f003 0302 	and.w	r3, r3, #2
   82cb0:	2b00      	cmp	r3, #0
   82cb2:	d001      	beq.n	82cb8 <spi_get_peripheral_select_mode+0x18>
		return 1;
   82cb4:	2301      	movs	r3, #1
   82cb6:	e000      	b.n	82cba <spi_get_peripheral_select_mode+0x1a>
		return 0;
   82cb8:	2300      	movs	r3, #0
}
   82cba:	4618      	mov	r0, r3
   82cbc:	370c      	adds	r7, #12
   82cbe:	46bd      	mov	sp, r7
   82cc0:	bc80      	pop	{r7}
   82cc2:	4770      	bx	lr

00082cc4 <sysclk_enable_peripheral_clock>:
{
   82cc4:	b580      	push	{r7, lr}
   82cc6:	b082      	sub	sp, #8
   82cc8:	af00      	add	r7, sp, #0
   82cca:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   82ccc:	6878      	ldr	r0, [r7, #4]
   82cce:	4b03      	ldr	r3, [pc, #12]	; (82cdc <sysclk_enable_peripheral_clock+0x18>)
   82cd0:	4798      	blx	r3
}
   82cd2:	bf00      	nop
   82cd4:	3708      	adds	r7, #8
   82cd6:	46bd      	mov	sp, r7
   82cd8:	bd80      	pop	{r7, pc}
   82cda:	bf00      	nop
   82cdc:	000855b9 	.word	0x000855b9

00082ce0 <spi_enable_clock>:
 * \brief Enable SPI clock.
 *
 * \param p_spi Pointer to an SPI instance.
 */
void spi_enable_clock(Spi *p_spi)
{
   82ce0:	b580      	push	{r7, lr}
   82ce2:	b082      	sub	sp, #8
   82ce4:	af00      	add	r7, sp, #0
   82ce6:	6078      	str	r0, [r7, #4]
#if (SAM4S || SAM3S || SAM3N || SAM3U || SAM4E || SAM4N || SAMG51|| SAMG53|| SAMG54)
	UNUSED(p_spi);
	sysclk_enable_peripheral_clock(ID_SPI);
   82ce8:	2014      	movs	r0, #20
   82cea:	4b03      	ldr	r3, [pc, #12]	; (82cf8 <spi_enable_clock+0x18>)
   82cec:	4798      	blx	r3
	}
	#endif
#elif SAM4L
	sysclk_enable_peripheral_clock(p_spi);
#endif
}
   82cee:	bf00      	nop
   82cf0:	3708      	adds	r7, #8
   82cf2:	46bd      	mov	sp, r7
   82cf4:	bd80      	pop	{r7, pc}
   82cf6:	bf00      	nop
   82cf8:	00082cc5 	.word	0x00082cc5

00082cfc <spi_write>:
 * \retval SPI_OK on Success.
 * \retval SPI_ERROR_TIMEOUT on Time-out.
 */
spi_status_t spi_write(Spi *p_spi, uint16_t us_data,
		uint8_t uc_pcs, uint8_t uc_last)
{
   82cfc:	b580      	push	{r7, lr}
   82cfe:	b084      	sub	sp, #16
   82d00:	af00      	add	r7, sp, #0
   82d02:	6078      	str	r0, [r7, #4]
   82d04:	4608      	mov	r0, r1
   82d06:	4611      	mov	r1, r2
   82d08:	461a      	mov	r2, r3
   82d0a:	4603      	mov	r3, r0
   82d0c:	807b      	strh	r3, [r7, #2]
   82d0e:	460b      	mov	r3, r1
   82d10:	707b      	strb	r3, [r7, #1]
   82d12:	4613      	mov	r3, r2
   82d14:	703b      	strb	r3, [r7, #0]
	uint32_t timeout = SPI_TIMEOUT;
   82d16:	f643 2398 	movw	r3, #15000	; 0x3a98
   82d1a:	60fb      	str	r3, [r7, #12]
	uint32_t value;

	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   82d1c:	e006      	b.n	82d2c <spi_write+0x30>
		if (!timeout--) {
   82d1e:	68fb      	ldr	r3, [r7, #12]
   82d20:	1e5a      	subs	r2, r3, #1
   82d22:	60fa      	str	r2, [r7, #12]
   82d24:	2b00      	cmp	r3, #0
   82d26:	d101      	bne.n	82d2c <spi_write+0x30>
			return SPI_ERROR_TIMEOUT;
   82d28:	2301      	movs	r3, #1
   82d2a:	e020      	b.n	82d6e <spi_write+0x72>
	while (!(p_spi->SPI_SR & SPI_SR_TDRE)) {
   82d2c:	687b      	ldr	r3, [r7, #4]
   82d2e:	691b      	ldr	r3, [r3, #16]
   82d30:	f003 0302 	and.w	r3, r3, #2
   82d34:	2b00      	cmp	r3, #0
   82d36:	d0f2      	beq.n	82d1e <spi_write+0x22>
		}
	}

	if (spi_get_peripheral_select_mode(p_spi)) {
   82d38:	6878      	ldr	r0, [r7, #4]
   82d3a:	4b0f      	ldr	r3, [pc, #60]	; (82d78 <spi_write+0x7c>)
   82d3c:	4798      	blx	r3
   82d3e:	4603      	mov	r3, r0
   82d40:	2b00      	cmp	r3, #0
   82d42:	d00e      	beq.n	82d62 <spi_write+0x66>
		value = SPI_TDR_TD(us_data) | SPI_TDR_PCS(uc_pcs);
   82d44:	887a      	ldrh	r2, [r7, #2]
   82d46:	787b      	ldrb	r3, [r7, #1]
   82d48:	041b      	lsls	r3, r3, #16
   82d4a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
   82d4e:	4313      	orrs	r3, r2
   82d50:	60bb      	str	r3, [r7, #8]
		if (uc_last) {
   82d52:	783b      	ldrb	r3, [r7, #0]
   82d54:	2b00      	cmp	r3, #0
   82d56:	d006      	beq.n	82d66 <spi_write+0x6a>
			value |= SPI_TDR_LASTXFER;
   82d58:	68bb      	ldr	r3, [r7, #8]
   82d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   82d5e:	60bb      	str	r3, [r7, #8]
   82d60:	e001      	b.n	82d66 <spi_write+0x6a>
		}
	} else {
		value = SPI_TDR_TD(us_data);
   82d62:	887b      	ldrh	r3, [r7, #2]
   82d64:	60bb      	str	r3, [r7, #8]
	}

	p_spi->SPI_TDR = value;
   82d66:	687b      	ldr	r3, [r7, #4]
   82d68:	68ba      	ldr	r2, [r7, #8]
   82d6a:	60da      	str	r2, [r3, #12]

	return SPI_OK;
   82d6c:	2300      	movs	r3, #0
}
   82d6e:	4618      	mov	r0, r3
   82d70:	3710      	adds	r7, #16
   82d72:	46bd      	mov	sp, r7
   82d74:	bd80      	pop	{r7, pc}
   82d76:	bf00      	nop
   82d78:	00082ca1 	.word	0x00082ca1

00082d7c <spi_set_clock_polarity>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param ul_polarity Default clock state is logical one(high)/zero(low).
 */
void spi_set_clock_polarity(Spi *p_spi, uint32_t ul_pcs_ch,
		uint32_t ul_polarity)
{
   82d7c:	b480      	push	{r7}
   82d7e:	b085      	sub	sp, #20
   82d80:	af00      	add	r7, sp, #0
   82d82:	60f8      	str	r0, [r7, #12]
   82d84:	60b9      	str	r1, [r7, #8]
   82d86:	607a      	str	r2, [r7, #4]
	if (ul_polarity) {
   82d88:	687b      	ldr	r3, [r7, #4]
   82d8a:	2b00      	cmp	r3, #0
   82d8c:	d00c      	beq.n	82da8 <spi_set_clock_polarity+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_CPOL;
   82d8e:	68fb      	ldr	r3, [r7, #12]
   82d90:	68ba      	ldr	r2, [r7, #8]
   82d92:	320c      	adds	r2, #12
   82d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82d98:	f043 0101 	orr.w	r1, r3, #1
   82d9c:	68fb      	ldr	r3, [r7, #12]
   82d9e:	68ba      	ldr	r2, [r7, #8]
   82da0:	320c      	adds	r2, #12
   82da2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
	}
}
   82da6:	e00b      	b.n	82dc0 <spi_set_clock_polarity+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_CPOL);
   82da8:	68fb      	ldr	r3, [r7, #12]
   82daa:	68ba      	ldr	r2, [r7, #8]
   82dac:	320c      	adds	r2, #12
   82dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82db2:	f023 0101 	bic.w	r1, r3, #1
   82db6:	68fb      	ldr	r3, [r7, #12]
   82db8:	68ba      	ldr	r2, [r7, #8]
   82dba:	320c      	adds	r2, #12
   82dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   82dc0:	bf00      	nop
   82dc2:	3714      	adds	r7, #20
   82dc4:	46bd      	mov	sp, r7
   82dc6:	bc80      	pop	{r7}
   82dc8:	4770      	bx	lr

00082dca <spi_set_clock_phase>:
 * \param p_spi Pointer to an SPI instance.
 *  \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 *  \param ul_phase Data capture on the rising/falling edge of clock.
 */
void spi_set_clock_phase(Spi *p_spi, uint32_t ul_pcs_ch, uint32_t ul_phase)
{
   82dca:	b480      	push	{r7}
   82dcc:	b085      	sub	sp, #20
   82dce:	af00      	add	r7, sp, #0
   82dd0:	60f8      	str	r0, [r7, #12]
   82dd2:	60b9      	str	r1, [r7, #8]
   82dd4:	607a      	str	r2, [r7, #4]
	if (ul_phase) {
   82dd6:	687b      	ldr	r3, [r7, #4]
   82dd8:	2b00      	cmp	r3, #0
   82dda:	d00c      	beq.n	82df6 <spi_set_clock_phase+0x2c>
		p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_NCPHA;
   82ddc:	68fb      	ldr	r3, [r7, #12]
   82dde:	68ba      	ldr	r2, [r7, #8]
   82de0:	320c      	adds	r2, #12
   82de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82de6:	f043 0102 	orr.w	r1, r3, #2
   82dea:	68fb      	ldr	r3, [r7, #12]
   82dec:	68ba      	ldr	r2, [r7, #8]
   82dee:	320c      	adds	r2, #12
   82df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	} else {
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
	}
}
   82df4:	e00b      	b.n	82e0e <spi_set_clock_phase+0x44>
		p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_NCPHA);
   82df6:	68fb      	ldr	r3, [r7, #12]
   82df8:	68ba      	ldr	r2, [r7, #8]
   82dfa:	320c      	adds	r2, #12
   82dfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82e00:	f023 0102 	bic.w	r1, r3, #2
   82e04:	68fb      	ldr	r3, [r7, #12]
   82e06:	68ba      	ldr	r2, [r7, #8]
   82e08:	320c      	adds	r2, #12
   82e0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   82e0e:	bf00      	nop
   82e10:	3714      	adds	r7, #20
   82e12:	46bd      	mov	sp, r7
   82e14:	bc80      	pop	{r7}
   82e16:	4770      	bx	lr

00082e18 <spi_calc_baudrate_div>:
 * \return Divider or error code.
 *   \retval > 0  Success.
 *   \retval < 0  Error.
 */
int16_t spi_calc_baudrate_div(const uint32_t baudrate, uint32_t mck)
{
   82e18:	b480      	push	{r7}
   82e1a:	b085      	sub	sp, #20
   82e1c:	af00      	add	r7, sp, #0
   82e1e:	6078      	str	r0, [r7, #4]
   82e20:	6039      	str	r1, [r7, #0]
	int baud_div = div_ceil(mck, baudrate);
   82e22:	683a      	ldr	r2, [r7, #0]
   82e24:	687b      	ldr	r3, [r7, #4]
   82e26:	4413      	add	r3, r2
   82e28:	1e5a      	subs	r2, r3, #1
   82e2a:	687b      	ldr	r3, [r7, #4]
   82e2c:	fbb2 f3f3 	udiv	r3, r2, r3
   82e30:	60fb      	str	r3, [r7, #12]

	/* The value of baud_div is from 1 to 255 in the SCBR field. */
	if (baud_div <= 0 || baud_div > 255) {
   82e32:	68fb      	ldr	r3, [r7, #12]
   82e34:	2b00      	cmp	r3, #0
   82e36:	dd02      	ble.n	82e3e <spi_calc_baudrate_div+0x26>
   82e38:	68fb      	ldr	r3, [r7, #12]
   82e3a:	2bff      	cmp	r3, #255	; 0xff
   82e3c:	dd02      	ble.n	82e44 <spi_calc_baudrate_div+0x2c>
		return -1;
   82e3e:	f04f 33ff 	mov.w	r3, #4294967295
   82e42:	e001      	b.n	82e48 <spi_calc_baudrate_div+0x30>
	}

	return baud_div;
   82e44:	68fb      	ldr	r3, [r7, #12]
   82e46:	b21b      	sxth	r3, r3
}
   82e48:	4618      	mov	r0, r3
   82e4a:	3714      	adds	r7, #20
   82e4c:	46bd      	mov	sp, r7
   82e4e:	bc80      	pop	{r7}
   82e50:	4770      	bx	lr

00082e52 <spi_set_baudrate_div>:
 * \param ul_pcs_ch Peripheral Chip Select channel (0~3).
 * \param uc_baudrate_divider Baudrate divider from MCK.
 */
void spi_set_baudrate_div(Spi *p_spi, uint32_t ul_pcs_ch,
		uint8_t uc_baudrate_divider)
{
   82e52:	b480      	push	{r7}
   82e54:	b085      	sub	sp, #20
   82e56:	af00      	add	r7, sp, #0
   82e58:	60f8      	str	r0, [r7, #12]
   82e5a:	60b9      	str	r1, [r7, #8]
   82e5c:	4613      	mov	r3, r2
   82e5e:	71fb      	strb	r3, [r7, #7]
	p_spi->SPI_CSR[ul_pcs_ch] &= (~SPI_CSR_SCBR_Msk);
   82e60:	68fb      	ldr	r3, [r7, #12]
   82e62:	68ba      	ldr	r2, [r7, #8]
   82e64:	320c      	adds	r2, #12
   82e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   82e6a:	f423 417f 	bic.w	r1, r3, #65280	; 0xff00
   82e6e:	68fb      	ldr	r3, [r7, #12]
   82e70:	68ba      	ldr	r2, [r7, #8]
   82e72:	320c      	adds	r2, #12
   82e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	p_spi->SPI_CSR[ul_pcs_ch] |= SPI_CSR_SCBR(uc_baudrate_divider);
   82e78:	68fb      	ldr	r3, [r7, #12]
   82e7a:	68ba      	ldr	r2, [r7, #8]
   82e7c:	320c      	adds	r2, #12
   82e7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   82e82:	79fb      	ldrb	r3, [r7, #7]
   82e84:	021b      	lsls	r3, r3, #8
   82e86:	b29b      	uxth	r3, r3
   82e88:	ea42 0103 	orr.w	r1, r2, r3
   82e8c:	68fb      	ldr	r3, [r7, #12]
   82e8e:	68ba      	ldr	r2, [r7, #8]
   82e90:	320c      	adds	r2, #12
   82e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
   82e96:	bf00      	nop
   82e98:	3714      	adds	r7, #20
   82e9a:	46bd      	mov	sp, r7
   82e9c:	bc80      	pop	{r7}
   82e9e:	4770      	bx	lr

00082ea0 <smc_set_setup_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
   82ea0:	b480      	push	{r7}
   82ea2:	b085      	sub	sp, #20
   82ea4:	af00      	add	r7, sp, #0
   82ea6:	60f8      	str	r0, [r7, #12]
   82ea8:	60b9      	str	r1, [r7, #8]
   82eaa:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   82eac:	68f9      	ldr	r1, [r7, #12]
   82eae:	68ba      	ldr	r2, [r7, #8]
   82eb0:	4613      	mov	r3, r2
   82eb2:	009b      	lsls	r3, r3, #2
   82eb4:	4413      	add	r3, r2
   82eb6:	009b      	lsls	r3, r3, #2
   82eb8:	440b      	add	r3, r1
   82eba:	3370      	adds	r3, #112	; 0x70
   82ebc:	687a      	ldr	r2, [r7, #4]
   82ebe:	601a      	str	r2, [r3, #0]
}
   82ec0:	bf00      	nop
   82ec2:	3714      	adds	r7, #20
   82ec4:	46bd      	mov	sp, r7
   82ec6:	bc80      	pop	{r7}
   82ec8:	4770      	bx	lr

00082eca <smc_set_pulse_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
   82eca:	b480      	push	{r7}
   82ecc:	b085      	sub	sp, #20
   82ece:	af00      	add	r7, sp, #0
   82ed0:	60f8      	str	r0, [r7, #12]
   82ed2:	60b9      	str	r1, [r7, #8]
   82ed4:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   82ed6:	68f9      	ldr	r1, [r7, #12]
   82ed8:	68ba      	ldr	r2, [r7, #8]
   82eda:	4613      	mov	r3, r2
   82edc:	009b      	lsls	r3, r3, #2
   82ede:	4413      	add	r3, r2
   82ee0:	009b      	lsls	r3, r3, #2
   82ee2:	440b      	add	r3, r1
   82ee4:	3374      	adds	r3, #116	; 0x74
   82ee6:	687a      	ldr	r2, [r7, #4]
   82ee8:	601a      	str	r2, [r3, #0]
}
   82eea:	bf00      	nop
   82eec:	3714      	adds	r7, #20
   82eee:	46bd      	mov	sp, r7
   82ef0:	bc80      	pop	{r7}
   82ef2:	4770      	bx	lr

00082ef4 <smc_set_cycle_timing>:
 * \param ul_cs Chip Select number to be set.
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
   82ef4:	b480      	push	{r7}
   82ef6:	b085      	sub	sp, #20
   82ef8:	af00      	add	r7, sp, #0
   82efa:	60f8      	str	r0, [r7, #12]
   82efc:	60b9      	str	r1, [r7, #8]
   82efe:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   82f00:	68f9      	ldr	r1, [r7, #12]
   82f02:	68ba      	ldr	r2, [r7, #8]
   82f04:	4613      	mov	r3, r2
   82f06:	009b      	lsls	r3, r3, #2
   82f08:	4413      	add	r3, r2
   82f0a:	009b      	lsls	r3, r3, #2
   82f0c:	440b      	add	r3, r1
   82f0e:	3378      	adds	r3, #120	; 0x78
   82f10:	687a      	ldr	r2, [r7, #4]
   82f12:	601a      	str	r2, [r3, #0]
}
   82f14:	bf00      	nop
   82f16:	3714      	adds	r7, #20
   82f18:	46bd      	mov	sp, r7
   82f1a:	bc80      	pop	{r7}
   82f1c:	4770      	bx	lr

00082f1e <smc_set_mode>:
 * \param p_smc Pointer to an SMC instance.
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
   82f1e:	b480      	push	{r7}
   82f20:	b085      	sub	sp, #20
   82f22:	af00      	add	r7, sp, #0
   82f24:	60f8      	str	r0, [r7, #12]
   82f26:	60b9      	str	r1, [r7, #8]
   82f28:	607a      	str	r2, [r7, #4]
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   82f2a:	68f9      	ldr	r1, [r7, #12]
   82f2c:	68ba      	ldr	r2, [r7, #8]
   82f2e:	4613      	mov	r3, r2
   82f30:	009b      	lsls	r3, r3, #2
   82f32:	4413      	add	r3, r2
   82f34:	009b      	lsls	r3, r3, #2
   82f36:	440b      	add	r3, r1
   82f38:	3380      	adds	r3, #128	; 0x80
   82f3a:	687a      	ldr	r2, [r7, #4]
   82f3c:	601a      	str	r2, [r3, #0]
}
   82f3e:	bf00      	nop
   82f40:	3714      	adds	r7, #20
   82f42:	46bd      	mov	sp, r7
   82f44:	bc80      	pop	{r7}
   82f46:	4770      	bx	lr

00082f48 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   82f48:	b580      	push	{r7, lr}
   82f4a:	b084      	sub	sp, #16
   82f4c:	af00      	add	r7, sp, #0
   82f4e:	6078      	str	r0, [r7, #4]
   82f50:	6039      	str	r1, [r7, #0]
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   82f52:	6878      	ldr	r0, [r7, #4]
   82f54:	4b26      	ldr	r3, [pc, #152]	; (82ff0 <pio_handler_process+0xa8>)
   82f56:	4798      	blx	r3
   82f58:	60f8      	str	r0, [r7, #12]
	status &= pio_get_interrupt_mask(p_pio);
   82f5a:	6878      	ldr	r0, [r7, #4]
   82f5c:	4b25      	ldr	r3, [pc, #148]	; (82ff4 <pio_handler_process+0xac>)
   82f5e:	4798      	blx	r3
   82f60:	4602      	mov	r2, r0
   82f62:	68fb      	ldr	r3, [r7, #12]
   82f64:	4013      	ands	r3, r2
   82f66:	60fb      	str	r3, [r7, #12]

	/* Check pending events */
	if (status != 0) {
   82f68:	68fb      	ldr	r3, [r7, #12]
   82f6a:	2b00      	cmp	r3, #0
   82f6c:	d03c      	beq.n	82fe8 <pio_handler_process+0xa0>
		/* Find triggering source */
		i = 0;
   82f6e:	2300      	movs	r3, #0
   82f70:	60bb      	str	r3, [r7, #8]
		while (status != 0) {
   82f72:	e034      	b.n	82fde <pio_handler_process+0x96>
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   82f74:	4a20      	ldr	r2, [pc, #128]	; (82ff8 <pio_handler_process+0xb0>)
   82f76:	68bb      	ldr	r3, [r7, #8]
   82f78:	011b      	lsls	r3, r3, #4
   82f7a:	4413      	add	r3, r2
   82f7c:	681b      	ldr	r3, [r3, #0]
   82f7e:	683a      	ldr	r2, [r7, #0]
   82f80:	429a      	cmp	r2, r3
   82f82:	d126      	bne.n	82fd2 <pio_handler_process+0x8a>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   82f84:	4a1c      	ldr	r2, [pc, #112]	; (82ff8 <pio_handler_process+0xb0>)
   82f86:	68bb      	ldr	r3, [r7, #8]
   82f88:	011b      	lsls	r3, r3, #4
   82f8a:	4413      	add	r3, r2
   82f8c:	3304      	adds	r3, #4
   82f8e:	681a      	ldr	r2, [r3, #0]
   82f90:	68fb      	ldr	r3, [r7, #12]
   82f92:	4013      	ands	r3, r2
   82f94:	2b00      	cmp	r3, #0
   82f96:	d01c      	beq.n	82fd2 <pio_handler_process+0x8a>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   82f98:	4a17      	ldr	r2, [pc, #92]	; (82ff8 <pio_handler_process+0xb0>)
   82f9a:	68bb      	ldr	r3, [r7, #8]
   82f9c:	011b      	lsls	r3, r3, #4
   82f9e:	4413      	add	r3, r2
   82fa0:	330c      	adds	r3, #12
   82fa2:	681b      	ldr	r3, [r3, #0]
   82fa4:	4914      	ldr	r1, [pc, #80]	; (82ff8 <pio_handler_process+0xb0>)
   82fa6:	68ba      	ldr	r2, [r7, #8]
   82fa8:	0112      	lsls	r2, r2, #4
   82faa:	440a      	add	r2, r1
   82fac:	6810      	ldr	r0, [r2, #0]
   82fae:	4912      	ldr	r1, [pc, #72]	; (82ff8 <pio_handler_process+0xb0>)
   82fb0:	68ba      	ldr	r2, [r7, #8]
   82fb2:	0112      	lsls	r2, r2, #4
   82fb4:	440a      	add	r2, r1
   82fb6:	3204      	adds	r2, #4
   82fb8:	6812      	ldr	r2, [r2, #0]
   82fba:	4611      	mov	r1, r2
   82fbc:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   82fbe:	4a0e      	ldr	r2, [pc, #56]	; (82ff8 <pio_handler_process+0xb0>)
   82fc0:	68bb      	ldr	r3, [r7, #8]
   82fc2:	011b      	lsls	r3, r3, #4
   82fc4:	4413      	add	r3, r2
   82fc6:	3304      	adds	r3, #4
   82fc8:	681b      	ldr	r3, [r3, #0]
   82fca:	43db      	mvns	r3, r3
   82fcc:	68fa      	ldr	r2, [r7, #12]
   82fce:	4013      	ands	r3, r2
   82fd0:	60fb      	str	r3, [r7, #12]
				}
			}
			i++;
   82fd2:	68bb      	ldr	r3, [r7, #8]
   82fd4:	3301      	adds	r3, #1
   82fd6:	60bb      	str	r3, [r7, #8]
			if (i >= MAX_INTERRUPT_SOURCES) {
   82fd8:	68bb      	ldr	r3, [r7, #8]
   82fda:	2b06      	cmp	r3, #6
   82fdc:	d803      	bhi.n	82fe6 <pio_handler_process+0x9e>
		while (status != 0) {
   82fde:	68fb      	ldr	r3, [r7, #12]
   82fe0:	2b00      	cmp	r3, #0
   82fe2:	d1c7      	bne.n	82f74 <pio_handler_process+0x2c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   82fe4:	e000      	b.n	82fe8 <pio_handler_process+0xa0>
				break;
   82fe6:	bf00      	nop
}
   82fe8:	bf00      	nop
   82fea:	3710      	adds	r7, #16
   82fec:	46bd      	mov	sp, r7
   82fee:	bd80      	pop	{r7, pc}
   82ff0:	00085aeb 	.word	0x00085aeb
   82ff4:	00085b01 	.word	0x00085b01
   82ff8:	20001368 	.word	0x20001368

00082ffc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   82ffc:	b580      	push	{r7, lr}
   82ffe:	af00      	add	r7, sp, #0
	pio_handler_process(PIOA, ID_PIOA);
   83000:	210a      	movs	r1, #10
   83002:	4802      	ldr	r0, [pc, #8]	; (8300c <PIOA_Handler+0x10>)
   83004:	4b02      	ldr	r3, [pc, #8]	; (83010 <PIOA_Handler+0x14>)
   83006:	4798      	blx	r3
}
   83008:	bf00      	nop
   8300a:	bd80      	pop	{r7, pc}
   8300c:	400e0c00 	.word	0x400e0c00
   83010:	00082f49 	.word	0x00082f49

00083014 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   83014:	b580      	push	{r7, lr}
   83016:	af00      	add	r7, sp, #0
    pio_handler_process(PIOB, ID_PIOB);
   83018:	210b      	movs	r1, #11
   8301a:	4802      	ldr	r0, [pc, #8]	; (83024 <PIOB_Handler+0x10>)
   8301c:	4b02      	ldr	r3, [pc, #8]	; (83028 <PIOB_Handler+0x14>)
   8301e:	4798      	blx	r3
}
   83020:	bf00      	nop
   83022:	bd80      	pop	{r7, pc}
   83024:	400e0e00 	.word	0x400e0e00
   83028:	00082f49 	.word	0x00082f49

0008302c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
   8302c:	b480      	push	{r7}
   8302e:	b083      	sub	sp, #12
   83030:	af00      	add	r7, sp, #0
   83032:	4603      	mov	r3, r0
   83034:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   83036:	79fb      	ldrb	r3, [r7, #7]
   83038:	f003 031f 	and.w	r3, r3, #31
   8303c:	2201      	movs	r2, #1
   8303e:	fa02 f103 	lsl.w	r1, r2, r3
   83042:	4a05      	ldr	r2, [pc, #20]	; (83058 <NVIC_EnableIRQ+0x2c>)
   83044:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83048:	095b      	lsrs	r3, r3, #5
   8304a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
   8304e:	bf00      	nop
   83050:	370c      	adds	r7, #12
   83052:	46bd      	mov	sp, r7
   83054:	bc80      	pop	{r7}
   83056:	4770      	bx	lr
   83058:	e000e100 	.word	0xe000e100

0008305c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
   8305c:	b480      	push	{r7}
   8305e:	b083      	sub	sp, #12
   83060:	af00      	add	r7, sp, #0
   83062:	4603      	mov	r3, r0
   83064:	6039      	str	r1, [r7, #0]
   83066:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
   83068:	f997 3007 	ldrsb.w	r3, [r7, #7]
   8306c:	2b00      	cmp	r3, #0
   8306e:	da0b      	bge.n	83088 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   83070:	683b      	ldr	r3, [r7, #0]
   83072:	b2da      	uxtb	r2, r3
   83074:	490c      	ldr	r1, [pc, #48]	; (830a8 <NVIC_SetPriority+0x4c>)
   83076:	79fb      	ldrb	r3, [r7, #7]
   83078:	f003 030f 	and.w	r3, r3, #15
   8307c:	3b04      	subs	r3, #4
   8307e:	0112      	lsls	r2, r2, #4
   83080:	b2d2      	uxtb	r2, r2
   83082:	440b      	add	r3, r1
   83084:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
   83086:	e009      	b.n	8309c <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   83088:	683b      	ldr	r3, [r7, #0]
   8308a:	b2da      	uxtb	r2, r3
   8308c:	4907      	ldr	r1, [pc, #28]	; (830ac <NVIC_SetPriority+0x50>)
   8308e:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83092:	0112      	lsls	r2, r2, #4
   83094:	b2d2      	uxtb	r2, r2
   83096:	440b      	add	r3, r1
   83098:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
   8309c:	bf00      	nop
   8309e:	370c      	adds	r7, #12
   830a0:	46bd      	mov	sp, r7
   830a2:	bc80      	pop	{r7}
   830a4:	4770      	bx	lr
   830a6:	bf00      	nop
   830a8:	e000ed00 	.word	0xe000ed00
   830ac:	e000e100 	.word	0xe000e100

000830b0 <cpu_irq_save>:

static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
   830b0:	b480      	push	{r7}
   830b2:	b083      	sub	sp, #12
   830b4:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   830b6:	f3ef 8310 	mrs	r3, PRIMASK
   830ba:	603b      	str	r3, [r7, #0]
  return(result);
   830bc:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   830be:	2b00      	cmp	r3, #0
   830c0:	bf0c      	ite	eq
   830c2:	2301      	moveq	r3, #1
   830c4:	2300      	movne	r3, #0
   830c6:	b2db      	uxtb	r3, r3
   830c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   830ca:	b672      	cpsid	i
}
   830cc:	bf00      	nop
  __ASM volatile ("dmb");
   830ce:	f3bf 8f5f 	dmb	sy
}
   830d2:	bf00      	nop
	cpu_irq_disable();
   830d4:	4b04      	ldr	r3, [pc, #16]	; (830e8 <cpu_irq_save+0x38>)
   830d6:	2200      	movs	r2, #0
   830d8:	701a      	strb	r2, [r3, #0]
	return flags;
   830da:	687b      	ldr	r3, [r7, #4]
}
   830dc:	4618      	mov	r0, r3
   830de:	370c      	adds	r7, #12
   830e0:	46bd      	mov	sp, r7
   830e2:	bc80      	pop	{r7}
   830e4:	4770      	bx	lr
   830e6:	bf00      	nop
   830e8:	200003e0 	.word	0x200003e0

000830ec <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
   830ec:	b480      	push	{r7}
   830ee:	b083      	sub	sp, #12
   830f0:	af00      	add	r7, sp, #0
   830f2:	6078      	str	r0, [r7, #4]
	return (flags);
   830f4:	687b      	ldr	r3, [r7, #4]
   830f6:	2b00      	cmp	r3, #0
   830f8:	bf14      	ite	ne
   830fa:	2301      	movne	r3, #1
   830fc:	2300      	moveq	r3, #0
   830fe:	b2db      	uxtb	r3, r3
}
   83100:	4618      	mov	r0, r3
   83102:	370c      	adds	r7, #12
   83104:	46bd      	mov	sp, r7
   83106:	bc80      	pop	{r7}
   83108:	4770      	bx	lr
   8310a:	0000      	movs	r0, r0

0008310c <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
   8310c:	b580      	push	{r7, lr}
   8310e:	b082      	sub	sp, #8
   83110:	af00      	add	r7, sp, #0
   83112:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   83114:	6878      	ldr	r0, [r7, #4]
   83116:	4b08      	ldr	r3, [pc, #32]	; (83138 <cpu_irq_restore+0x2c>)
   83118:	4798      	blx	r3
   8311a:	4603      	mov	r3, r0
   8311c:	2b00      	cmp	r3, #0
   8311e:	d007      	beq.n	83130 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   83120:	4b06      	ldr	r3, [pc, #24]	; (8313c <cpu_irq_restore+0x30>)
   83122:	2201      	movs	r2, #1
   83124:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   83126:	f3bf 8f5f 	dmb	sy
}
   8312a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8312c:	b662      	cpsie	i
}
   8312e:	bf00      	nop
}
   83130:	bf00      	nop
   83132:	3708      	adds	r7, #8
   83134:	46bd      	mov	sp, r7
   83136:	bd80      	pop	{r7, pc}
   83138:	000830ed 	.word	0x000830ed
   8313c:	200003e0 	.word	0x200003e0

00083140 <sleepmgr_lock_mode>:
{
   83140:	b580      	push	{r7, lr}
   83142:	b084      	sub	sp, #16
   83144:	af00      	add	r7, sp, #0
   83146:	4603      	mov	r3, r0
   83148:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   8314a:	4b08      	ldr	r3, [pc, #32]	; (8316c <sleepmgr_lock_mode+0x2c>)
   8314c:	4798      	blx	r3
   8314e:	60f8      	str	r0, [r7, #12]
	++sleepmgr_locks[mode];
   83150:	79fb      	ldrb	r3, [r7, #7]
   83152:	4a07      	ldr	r2, [pc, #28]	; (83170 <sleepmgr_lock_mode+0x30>)
   83154:	5cd2      	ldrb	r2, [r2, r3]
   83156:	3201      	adds	r2, #1
   83158:	b2d1      	uxtb	r1, r2
   8315a:	4a05      	ldr	r2, [pc, #20]	; (83170 <sleepmgr_lock_mode+0x30>)
   8315c:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   8315e:	68f8      	ldr	r0, [r7, #12]
   83160:	4b04      	ldr	r3, [pc, #16]	; (83174 <sleepmgr_lock_mode+0x34>)
   83162:	4798      	blx	r3
}
   83164:	bf00      	nop
   83166:	3710      	adds	r7, #16
   83168:	46bd      	mov	sp, r7
   8316a:	bd80      	pop	{r7, pc}
   8316c:	000830b1 	.word	0x000830b1
   83170:	20001450 	.word	0x20001450
   83174:	0008310d 	.word	0x0008310d

00083178 <sleepmgr_unlock_mode>:
{
   83178:	b580      	push	{r7, lr}
   8317a:	b084      	sub	sp, #16
   8317c:	af00      	add	r7, sp, #0
   8317e:	4603      	mov	r3, r0
   83180:	71fb      	strb	r3, [r7, #7]
	flags = cpu_irq_save();
   83182:	4b08      	ldr	r3, [pc, #32]	; (831a4 <sleepmgr_unlock_mode+0x2c>)
   83184:	4798      	blx	r3
   83186:	60f8      	str	r0, [r7, #12]
	--sleepmgr_locks[mode];
   83188:	79fb      	ldrb	r3, [r7, #7]
   8318a:	4a07      	ldr	r2, [pc, #28]	; (831a8 <sleepmgr_unlock_mode+0x30>)
   8318c:	5cd2      	ldrb	r2, [r2, r3]
   8318e:	3a01      	subs	r2, #1
   83190:	b2d1      	uxtb	r1, r2
   83192:	4a05      	ldr	r2, [pc, #20]	; (831a8 <sleepmgr_unlock_mode+0x30>)
   83194:	54d1      	strb	r1, [r2, r3]
	cpu_irq_restore(flags);
   83196:	68f8      	ldr	r0, [r7, #12]
   83198:	4b04      	ldr	r3, [pc, #16]	; (831ac <sleepmgr_unlock_mode+0x34>)
   8319a:	4798      	blx	r3
}
   8319c:	bf00      	nop
   8319e:	3710      	adds	r7, #16
   831a0:	46bd      	mov	sp, r7
   831a2:	bd80      	pop	{r7, pc}
   831a4:	000830b1 	.word	0x000830b1
   831a8:	20001450 	.word	0x20001450
   831ac:	0008310d 	.word	0x0008310d

000831b0 <udd_sleep_mode>:
/*! \brief Authorize or not the CPU powerdown mode
 *
 * \param b_enable   true to authorize idle mode
 */
static void udd_sleep_mode(bool b_idle)
{
   831b0:	b580      	push	{r7, lr}
   831b2:	b082      	sub	sp, #8
   831b4:	af00      	add	r7, sp, #0
   831b6:	4603      	mov	r3, r0
   831b8:	71fb      	strb	r3, [r7, #7]
	if (!b_idle && udd_b_idle) {
   831ba:	79fb      	ldrb	r3, [r7, #7]
   831bc:	f083 0301 	eor.w	r3, r3, #1
   831c0:	b2db      	uxtb	r3, r3
   831c2:	2b00      	cmp	r3, #0
   831c4:	d006      	beq.n	831d4 <udd_sleep_mode+0x24>
   831c6:	4b0d      	ldr	r3, [pc, #52]	; (831fc <udd_sleep_mode+0x4c>)
   831c8:	781b      	ldrb	r3, [r3, #0]
   831ca:	2b00      	cmp	r3, #0
   831cc:	d002      	beq.n	831d4 <udd_sleep_mode+0x24>
		dbg_print("_S ");
		sleepmgr_unlock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   831ce:	2002      	movs	r0, #2
   831d0:	4b0b      	ldr	r3, [pc, #44]	; (83200 <udd_sleep_mode+0x50>)
   831d2:	4798      	blx	r3
	}
	if (b_idle && !udd_b_idle) {
   831d4:	79fb      	ldrb	r3, [r7, #7]
   831d6:	2b00      	cmp	r3, #0
   831d8:	d009      	beq.n	831ee <udd_sleep_mode+0x3e>
   831da:	4b08      	ldr	r3, [pc, #32]	; (831fc <udd_sleep_mode+0x4c>)
   831dc:	781b      	ldrb	r3, [r3, #0]
   831de:	f083 0301 	eor.w	r3, r3, #1
   831e2:	b2db      	uxtb	r3, r3
   831e4:	2b00      	cmp	r3, #0
   831e6:	d002      	beq.n	831ee <udd_sleep_mode+0x3e>
		sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_IDLE);
   831e8:	2002      	movs	r0, #2
   831ea:	4b06      	ldr	r3, [pc, #24]	; (83204 <udd_sleep_mode+0x54>)
   831ec:	4798      	blx	r3
		dbg_print("_W ");
	}
	udd_b_idle = b_idle;
   831ee:	4a03      	ldr	r2, [pc, #12]	; (831fc <udd_sleep_mode+0x4c>)
   831f0:	79fb      	ldrb	r3, [r7, #7]
   831f2:	7013      	strb	r3, [r2, #0]
}
   831f4:	bf00      	nop
   831f6:	3708      	adds	r7, #8
   831f8:	46bd      	mov	sp, r7
   831fa:	bd80      	pop	{r7, pc}
   831fc:	200013d8 	.word	0x200013d8
   83200:	00083179 	.word	0x00083179
   83204:	00083141 	.word	0x00083141

00083208 <UDPHS_Handler>:
 * Here, the global interrupt mask is not clear when an USB interrupt is enabled
 * because this one can not be occurred during the USB ISR (=during INTX is masked).
 * See Technical reference $3.8.3 Masking interrupt requests in peripheral modules.
 */
ISR(UDD_USB_INT_FUN)
{
   83208:	b580      	push	{r7, lr}
   8320a:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   8320c:	201d      	movs	r0, #29
   8320e:	4b5f      	ldr	r3, [pc, #380]	; (8338c <UDPHS_Handler+0x184>)
   83210:	4798      	blx	r3
	/* For fast wakeup clocks restore
	 * In WAIT mode, clocks are switched to FASTRC.
	 * After wakeup clocks should be restored, before that ISR should not
	 * be served.
	 */
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   83212:	4b5f      	ldr	r3, [pc, #380]	; (83390 <UDPHS_Handler+0x188>)
   83214:	4798      	blx	r3
   83216:	4603      	mov	r3, r0
   83218:	f083 0301 	eor.w	r3, r3, #1
   8321c:	b2db      	uxtb	r3, r3
   8321e:	2b00      	cmp	r3, #0
   83220:	d00e      	beq.n	83240 <UDPHS_Handler+0x38>
   83222:	4b5c      	ldr	r3, [pc, #368]	; (83394 <UDPHS_Handler+0x18c>)
   83224:	695b      	ldr	r3, [r3, #20]
   83226:	f003 0302 	and.w	r3, r3, #2
   8322a:	2b00      	cmp	r3, #0
   8322c:	d108      	bne.n	83240 <UDPHS_Handler+0x38>
  __ASM volatile ("cpsid i");
   8322e:	b672      	cpsid	i
}
   83230:	bf00      	nop
  __ASM volatile ("dmb");
   83232:	f3bf 8f5f 	dmb	sy
}
   83236:	bf00      	nop
		cpu_irq_disable();
   83238:	4b57      	ldr	r3, [pc, #348]	; (83398 <UDPHS_Handler+0x190>)
   8323a:	2200      	movs	r2, #0
   8323c:	701a      	strb	r2, [r3, #0]
		return;
   8323e:	e0a4      	b.n	8338a <UDPHS_Handler+0x182>
	}

	if (Is_udd_sof()) {
   83240:	4b54      	ldr	r3, [pc, #336]	; (83394 <UDPHS_Handler+0x18c>)
   83242:	695b      	ldr	r3, [r3, #20]
   83244:	f003 0308 	and.w	r3, r3, #8
   83248:	2b00      	cmp	r3, #0
   8324a:	d00d      	beq.n	83268 <UDPHS_Handler+0x60>
		udd_ack_sof();
   8324c:	4b51      	ldr	r3, [pc, #324]	; (83394 <UDPHS_Handler+0x18c>)
   8324e:	2208      	movs	r2, #8
   83250:	619a      	str	r2, [r3, #24]
		if (Is_udd_full_speed_mode()) {
   83252:	4b50      	ldr	r3, [pc, #320]	; (83394 <UDPHS_Handler+0x18c>)
   83254:	695b      	ldr	r3, [r3, #20]
   83256:	f003 0301 	and.w	r3, r3, #1
   8325a:	2b00      	cmp	r3, #0
   8325c:	d101      	bne.n	83262 <UDPHS_Handler+0x5a>
			udc_sof_notify();
   8325e:	4b4f      	ldr	r3, [pc, #316]	; (8339c <UDPHS_Handler+0x194>)
   83260:	4798      	blx	r3
		}
#ifdef UDC_SOF_EVENT
		UDC_SOF_EVENT();
   83262:	4b4f      	ldr	r3, [pc, #316]	; (833a0 <UDPHS_Handler+0x198>)
   83264:	4798      	blx	r3
#endif
		goto udd_interrupt_sof_end;
   83266:	e08f      	b.n	83388 <UDPHS_Handler+0x180>
	}

	if (Is_udd_msof()) {
   83268:	4b4a      	ldr	r3, [pc, #296]	; (83394 <UDPHS_Handler+0x18c>)
   8326a:	695b      	ldr	r3, [r3, #20]
   8326c:	f003 0304 	and.w	r3, r3, #4
   83270:	2b00      	cmp	r3, #0
   83272:	d005      	beq.n	83280 <UDPHS_Handler+0x78>
		udd_ack_msof();
   83274:	4b47      	ldr	r3, [pc, #284]	; (83394 <UDPHS_Handler+0x18c>)
   83276:	2204      	movs	r2, #4
   83278:	619a      	str	r2, [r3, #24]
		udc_sof_notify();
   8327a:	4b48      	ldr	r3, [pc, #288]	; (8339c <UDPHS_Handler+0x194>)
   8327c:	4798      	blx	r3
		goto udd_interrupt_sof_end;
   8327e:	e083      	b.n	83388 <UDPHS_Handler+0x180>
	}
	dbg_print("%c ", udd_is_high_speed() ? 'H' : 'F');

	if (udd_ctrl_interrupt()) {
   83280:	4b48      	ldr	r3, [pc, #288]	; (833a4 <UDPHS_Handler+0x19c>)
   83282:	4798      	blx	r3
   83284:	4603      	mov	r3, r0
   83286:	2b00      	cmp	r3, #0
   83288:	d179      	bne.n	8337e <UDPHS_Handler+0x176>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
	}

#if (0 != USB_DEVICE_MAX_EP)
	if (udd_ep_interrupt()) {
   8328a:	4b47      	ldr	r3, [pc, #284]	; (833a8 <UDPHS_Handler+0x1a0>)
   8328c:	4798      	blx	r3
   8328e:	4603      	mov	r3, r0
   83290:	2b00      	cmp	r3, #0
   83292:	d176      	bne.n	83382 <UDPHS_Handler+0x17a>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
	}
#endif

	// USB bus reset detection
	if (Is_udd_reset()) {
   83294:	4b3f      	ldr	r3, [pc, #252]	; (83394 <UDPHS_Handler+0x18c>)
   83296:	695b      	ldr	r3, [r3, #20]
   83298:	f003 0310 	and.w	r3, r3, #16
   8329c:	2b00      	cmp	r3, #0
   8329e:	d01d      	beq.n	832dc <UDPHS_Handler+0xd4>
		dbg_print("EoR ");
		udd_ack_reset();
   832a0:	4b3c      	ldr	r3, [pc, #240]	; (83394 <UDPHS_Handler+0x18c>)
   832a2:	2210      	movs	r2, #16
   832a4:	619a      	str	r2, [r3, #24]
		// Abort all jobs on-going
#if (USB_DEVICE_MAX_EP != 0)
		udd_ep_job_table_kill();
   832a6:	4b41      	ldr	r3, [pc, #260]	; (833ac <UDPHS_Handler+0x1a4>)
   832a8:	4798      	blx	r3
#endif
		// Reset USB Device Stack Core
		udc_reset();
   832aa:	4b41      	ldr	r3, [pc, #260]	; (833b0 <UDPHS_Handler+0x1a8>)
   832ac:	4798      	blx	r3
		// Reset endpoint control
		udd_reset_ep_ctrl();
   832ae:	4b41      	ldr	r3, [pc, #260]	; (833b4 <UDPHS_Handler+0x1ac>)
   832b0:	4798      	blx	r3
		// Reset endpoint control management
		udd_ctrl_init();
   832b2:	4b41      	ldr	r3, [pc, #260]	; (833b8 <UDPHS_Handler+0x1b0>)
   832b4:	4798      	blx	r3
		// Enable SOF interrupts cleared by USB reset event
		udd_enable_sof_interrupt();
   832b6:	4b37      	ldr	r3, [pc, #220]	; (83394 <UDPHS_Handler+0x18c>)
   832b8:	691b      	ldr	r3, [r3, #16]
   832ba:	4a36      	ldr	r2, [pc, #216]	; (83394 <UDPHS_Handler+0x18c>)
   832bc:	f043 0308 	orr.w	r3, r3, #8
   832c0:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   832c2:	4b34      	ldr	r3, [pc, #208]	; (83394 <UDPHS_Handler+0x18c>)
   832c4:	691b      	ldr	r3, [r3, #16]
   832c6:	4a33      	ldr	r2, [pc, #204]	; (83394 <UDPHS_Handler+0x18c>)
   832c8:	f043 0304 	orr.w	r3, r3, #4
   832cc:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   832ce:	4b31      	ldr	r3, [pc, #196]	; (83394 <UDPHS_Handler+0x18c>)
   832d0:	691b      	ldr	r3, [r3, #16]
   832d2:	4a30      	ldr	r2, [pc, #192]	; (83394 <UDPHS_Handler+0x18c>)
   832d4:	f043 0302 	orr.w	r3, r3, #2
   832d8:	6113      	str	r3, [r2, #16]
		goto udd_interrupt_end;
   832da:	e055      	b.n	83388 <UDPHS_Handler+0x180>
	}

	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   832dc:	4b2d      	ldr	r3, [pc, #180]	; (83394 <UDPHS_Handler+0x18c>)
   832de:	691b      	ldr	r3, [r3, #16]
   832e0:	f003 0302 	and.w	r3, r3, #2
   832e4:	2b00      	cmp	r3, #0
   832e6:	d020      	beq.n	8332a <UDPHS_Handler+0x122>
   832e8:	4b2a      	ldr	r3, [pc, #168]	; (83394 <UDPHS_Handler+0x18c>)
   832ea:	695b      	ldr	r3, [r3, #20]
   832ec:	f003 0302 	and.w	r3, r3, #2
   832f0:	2b00      	cmp	r3, #0
   832f2:	d01a      	beq.n	8332a <UDPHS_Handler+0x122>
		dbg_print("Susp ");
		// Remove old wakeup status
		udd_ack_wake_up();
   832f4:	4b27      	ldr	r3, [pc, #156]	; (83394 <UDPHS_Handler+0x18c>)
   832f6:	2220      	movs	r2, #32
   832f8:	619a      	str	r2, [r3, #24]
		// The suspend interrupt is automatic acked when a wakeup occur
		udd_disable_suspend_interrupt();
   832fa:	4b26      	ldr	r3, [pc, #152]	; (83394 <UDPHS_Handler+0x18c>)
   832fc:	691b      	ldr	r3, [r3, #16]
   832fe:	4a25      	ldr	r2, [pc, #148]	; (83394 <UDPHS_Handler+0x18c>)
   83300:	f023 0302 	bic.w	r3, r3, #2
   83304:	6113      	str	r3, [r2, #16]
		udd_enable_wake_up_interrupt();
   83306:	4b23      	ldr	r3, [pc, #140]	; (83394 <UDPHS_Handler+0x18c>)
   83308:	691b      	ldr	r3, [r3, #16]
   8330a:	4a22      	ldr	r2, [pc, #136]	; (83394 <UDPHS_Handler+0x18c>)
   8330c:	f043 0320 	orr.w	r3, r3, #32
   83310:	6113      	str	r3, [r2, #16]

		// The wakeup interrupt is generated even if the device controller clock is disabled.
		udd_ack_suspend();
   83312:	4b20      	ldr	r3, [pc, #128]	; (83394 <UDPHS_Handler+0x18c>)
   83314:	2202      	movs	r2, #2
   83316:	619a      	str	r2, [r3, #24]

		udd_disable_periph_ck();
   83318:	201d      	movs	r0, #29
   8331a:	4b28      	ldr	r3, [pc, #160]	; (833bc <UDPHS_Handler+0x1b4>)
   8331c:	4798      	blx	r3

#ifdef UDC_SUSPEND_EVENT
		UDC_SUSPEND_EVENT();
   8331e:	4b28      	ldr	r3, [pc, #160]	; (833c0 <UDPHS_Handler+0x1b8>)
   83320:	4798      	blx	r3
#endif
		udd_sleep_mode(false); // Enter in SUSPEND mode
   83322:	2000      	movs	r0, #0
   83324:	4b27      	ldr	r3, [pc, #156]	; (833c4 <UDPHS_Handler+0x1bc>)
   83326:	4798      	blx	r3
		goto udd_interrupt_end;
   83328:	e02e      	b.n	83388 <UDPHS_Handler+0x180>
	}

	// On wakeup, _IEN is reseted only with EoR enabled
	if (Is_udd_wake_up()) {
   8332a:	4b1a      	ldr	r3, [pc, #104]	; (83394 <UDPHS_Handler+0x18c>)
   8332c:	695b      	ldr	r3, [r3, #20]
   8332e:	f003 0320 	and.w	r3, r3, #32
   83332:	2b00      	cmp	r3, #0
   83334:	d027      	beq.n	83386 <UDPHS_Handler+0x17e>
		udd_sleep_mode(true); // Enter in IDLE mode
   83336:	2001      	movs	r0, #1
   83338:	4b22      	ldr	r3, [pc, #136]	; (833c4 <UDPHS_Handler+0x1bc>)
   8333a:	4798      	blx	r3
		// Remove old suspend status
		udd_ack_suspend();
   8333c:	4b15      	ldr	r3, [pc, #84]	; (83394 <UDPHS_Handler+0x18c>)
   8333e:	2202      	movs	r2, #2
   83340:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_ack_wake_up();
   83342:	4b14      	ldr	r3, [pc, #80]	; (83394 <UDPHS_Handler+0x18c>)
   83344:	2220      	movs	r2, #32
   83346:	619a      	str	r2, [r3, #24]
		// Ack wakeup interrupt and enable suspend interrupt
		udd_disable_wake_up_interrupt();
   83348:	4b12      	ldr	r3, [pc, #72]	; (83394 <UDPHS_Handler+0x18c>)
   8334a:	691b      	ldr	r3, [r3, #16]
   8334c:	4a11      	ldr	r2, [pc, #68]	; (83394 <UDPHS_Handler+0x18c>)
   8334e:	f023 0320 	bic.w	r3, r3, #32
   83352:	6113      	str	r3, [r2, #16]
		udd_enable_suspend_interrupt();
   83354:	4b0f      	ldr	r3, [pc, #60]	; (83394 <UDPHS_Handler+0x18c>)
   83356:	691b      	ldr	r3, [r3, #16]
   83358:	4a0e      	ldr	r2, [pc, #56]	; (83394 <UDPHS_Handler+0x18c>)
   8335a:	f043 0302 	orr.w	r3, r3, #2
   8335e:	6113      	str	r3, [r2, #16]
		udd_enable_sof_interrupt();
   83360:	4b0c      	ldr	r3, [pc, #48]	; (83394 <UDPHS_Handler+0x18c>)
   83362:	691b      	ldr	r3, [r3, #16]
   83364:	4a0b      	ldr	r2, [pc, #44]	; (83394 <UDPHS_Handler+0x18c>)
   83366:	f043 0308 	orr.w	r3, r3, #8
   8336a:	6113      	str	r3, [r2, #16]
		udd_enable_msof_interrupt();
   8336c:	4b09      	ldr	r3, [pc, #36]	; (83394 <UDPHS_Handler+0x18c>)
   8336e:	691b      	ldr	r3, [r3, #16]
   83370:	4a08      	ldr	r2, [pc, #32]	; (83394 <UDPHS_Handler+0x18c>)
   83372:	f043 0304 	orr.w	r3, r3, #4
   83376:	6113      	str	r3, [r2, #16]

#ifdef UDC_RESUME_EVENT
		UDC_RESUME_EVENT();
   83378:	4b13      	ldr	r3, [pc, #76]	; (833c8 <UDPHS_Handler+0x1c0>)
   8337a:	4798      	blx	r3
#endif
		dbg_print("Wkup ");
		goto udd_interrupt_end;
   8337c:	e004      	b.n	83388 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by control endpoint managed
   8337e:	bf00      	nop
   83380:	e002      	b.n	83388 <UDPHS_Handler+0x180>
		goto udd_interrupt_end; // Interrupt acked by bulk/interrupt/isochronous endpoint managed
   83382:	bf00      	nop
   83384:	e000      	b.n	83388 <UDPHS_Handler+0x180>
	}
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);

udd_interrupt_end:
   83386:	bf00      	nop
	//dbg_print("i%08x ", UDPHS->UDPHS_INTSTA);
	//dbg_print("m%08x", UDPHS->UDPHS_IEN);
	dbg_print("\n\r");
udd_interrupt_sof_end:
	return;
   83388:	bf00      	nop
}
   8338a:	bd80      	pop	{r7, pc}
   8338c:	000855b9 	.word	0x000855b9
   83390:	0008620d 	.word	0x0008620d
   83394:	400a4000 	.word	0x400a4000
   83398:	200003e0 	.word	0x200003e0
   8339c:	00081e6d 	.word	0x00081e6d
   833a0:	000810f9 	.word	0x000810f9
   833a4:	000846b9 	.word	0x000846b9
   833a8:	00084ad5 	.word	0x00084ad5
   833ac:	000847f9 	.word	0x000847f9
   833b0:	00081e19 	.word	0x00081e19
   833b4:	00084019 	.word	0x00084019
   833b8:	00084099 	.word	0x00084099
   833bc:	00085605 	.word	0x00085605
   833c0:	000810cd 	.word	0x000810cd
   833c4:	000831b1 	.word	0x000831b1
   833c8:	000810e9 	.word	0x000810e9

000833cc <udd_enable>:
#endif
}


void udd_enable(void)
{
   833cc:	b580      	push	{r7, lr}
   833ce:	b082      	sub	sp, #8
   833d0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	sysclk_enable_usb();
   833d2:	4b19      	ldr	r3, [pc, #100]	; (83438 <udd_enable+0x6c>)
   833d4:	4798      	blx	r3

	udd_enable_periph_ck();
   833d6:	201d      	movs	r0, #29
   833d8:	4b18      	ldr	r3, [pc, #96]	; (8343c <udd_enable+0x70>)
   833da:	4798      	blx	r3

	flags = cpu_irq_save();
   833dc:	4b18      	ldr	r3, [pc, #96]	; (83440 <udd_enable+0x74>)
   833de:	4798      	blx	r3
   833e0:	6078      	str	r0, [r7, #4]

	//** Enable USB hardware
	udd_enable_periph();
   833e2:	4b18      	ldr	r3, [pc, #96]	; (83444 <udd_enable+0x78>)
   833e4:	681b      	ldr	r3, [r3, #0]
   833e6:	4a17      	ldr	r2, [pc, #92]	; (83444 <udd_enable+0x78>)
   833e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   833ec:	6013      	str	r3, [r2, #0]

	// Cortex-M3, uses NVIC, no need to register IRQ handler
	// Here, only the Device mode is possible,
	// UDPHS interrupt is UDD interrupt
	NVIC_SetPriority((IRQn_Type) ID_UDPHS, UDD_USB_INT_LEVEL);
   833ee:	2105      	movs	r1, #5
   833f0:	201d      	movs	r0, #29
   833f2:	4b15      	ldr	r3, [pc, #84]	; (83448 <udd_enable+0x7c>)
   833f4:	4798      	blx	r3
	NVIC_EnableIRQ((IRQn_Type) ID_UDPHS);
   833f6:	201d      	movs	r0, #29
   833f8:	4b14      	ldr	r3, [pc, #80]	; (8344c <udd_enable+0x80>)
   833fa:	4798      	blx	r3

	// Reset internal variables
#if (0!=USB_DEVICE_MAX_EP)
	udd_ep_job_table_reset();
   833fc:	4b14      	ldr	r3, [pc, #80]	; (83450 <udd_enable+0x84>)
   833fe:	4798      	blx	r3
#endif

	// Set the USB speed requested by configuration file
#ifdef USB_DEVICE_HS_SUPPORT
	udd_high_speed_enable();
   83400:	4b10      	ldr	r3, [pc, #64]	; (83444 <udd_enable+0x78>)
   83402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83406:	4a0f      	ldr	r2, [pc, #60]	; (83444 <udd_enable+0x78>)
   83408:	f023 0303 	bic.w	r3, r3, #3
   8340c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
#else
	udd_high_speed_disable();
#endif

	// Always authorize asynchronous USB interrupts to exit of sleep mode
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   83410:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   83414:	4b0f      	ldr	r3, [pc, #60]	; (83454 <udd_enable+0x88>)
   83416:	4798      	blx	r3

#ifndef UDD_NO_SLEEP_MGR
	// Initialize the sleep mode authorized for the USB suspend mode
	udd_b_idle = false;
   83418:	4b0f      	ldr	r3, [pc, #60]	; (83458 <udd_enable+0x8c>)
   8341a:	2200      	movs	r2, #0
   8341c:	701a      	strb	r2, [r3, #0]
	sleepmgr_lock_mode(UDPHS_SLEEP_MODE_USB_SUSPEND);
   8341e:	2003      	movs	r0, #3
   83420:	4b0e      	ldr	r3, [pc, #56]	; (8345c <udd_enable+0x90>)
   83422:	4798      	blx	r3
	if (Is_udd_vbus_high()) {
		udd_vbus_handler(USB_VBUS_PIO_ID, USB_VBUS_PIO_MASK);
	}
#else
#  ifndef USB_DEVICE_ATTACH_AUTO_DISABLE
	udd_attach();
   83424:	4b0e      	ldr	r3, [pc, #56]	; (83460 <udd_enable+0x94>)
   83426:	4798      	blx	r3
#  endif
#endif

	cpu_irq_restore(flags);
   83428:	6878      	ldr	r0, [r7, #4]
   8342a:	4b0e      	ldr	r3, [pc, #56]	; (83464 <udd_enable+0x98>)
   8342c:	4798      	blx	r3
}
   8342e:	bf00      	nop
   83430:	3708      	adds	r7, #8
   83432:	46bd      	mov	sp, r7
   83434:	bd80      	pop	{r7, pc}
   83436:	bf00      	nop
   83438:	0008519d 	.word	0x0008519d
   8343c:	000855b9 	.word	0x000855b9
   83440:	000830b1 	.word	0x000830b1
   83444:	400a4000 	.word	0x400a4000
   83448:	0008305d 	.word	0x0008305d
   8344c:	0008302d 	.word	0x0008302d
   83450:	0008479d 	.word	0x0008479d
   83454:	00085675 	.word	0x00085675
   83458:	200013d8 	.word	0x200013d8
   8345c:	00083141 	.word	0x00083141
   83460:	00083469 	.word	0x00083469
   83464:	0008310d 	.word	0x0008310d

00083468 <udd_attach>:
	cpu_irq_restore(flags);
}


void udd_attach(void)
{
   83468:	b580      	push	{r7, lr}
   8346a:	b082      	sub	sp, #8
   8346c:	af00      	add	r7, sp, #0
	irqflags_t flags;
	flags = cpu_irq_save();
   8346e:	4b26      	ldr	r3, [pc, #152]	; (83508 <udd_attach+0xa0>)
   83470:	4798      	blx	r3
   83472:	6078      	str	r0, [r7, #4]

	// At startup the USB bus state is unknown,
	// therefore the state is considered IDLE to not miss any USB event
	udd_sleep_mode(true);
   83474:	2001      	movs	r0, #1
   83476:	4b25      	ldr	r3, [pc, #148]	; (8350c <udd_attach+0xa4>)
   83478:	4798      	blx	r3
	udd_enable_periph_ck();
   8347a:	201d      	movs	r0, #29
   8347c:	4b24      	ldr	r3, [pc, #144]	; (83510 <udd_attach+0xa8>)
   8347e:	4798      	blx	r3

	// Authorize attach if Vbus is present
	udd_attach_device();
   83480:	4b24      	ldr	r3, [pc, #144]	; (83514 <udd_attach+0xac>)
   83482:	681b      	ldr	r3, [r3, #0]
   83484:	4a23      	ldr	r2, [pc, #140]	; (83514 <udd_attach+0xac>)
   83486:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8348a:	6013      	str	r3, [r2, #0]
   8348c:	4b21      	ldr	r3, [pc, #132]	; (83514 <udd_attach+0xac>)
   8348e:	681b      	ldr	r3, [r3, #0]
   83490:	4a20      	ldr	r2, [pc, #128]	; (83514 <udd_attach+0xac>)
   83492:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   83496:	6013      	str	r3, [r2, #0]

	// Enable USB line events
	udd_enable_reset_interrupt();
   83498:	4b1e      	ldr	r3, [pc, #120]	; (83514 <udd_attach+0xac>)
   8349a:	691b      	ldr	r3, [r3, #16]
   8349c:	4a1d      	ldr	r2, [pc, #116]	; (83514 <udd_attach+0xac>)
   8349e:	f043 0310 	orr.w	r3, r3, #16
   834a2:	6113      	str	r3, [r2, #16]
	udd_enable_suspend_interrupt();
   834a4:	4b1b      	ldr	r3, [pc, #108]	; (83514 <udd_attach+0xac>)
   834a6:	691b      	ldr	r3, [r3, #16]
   834a8:	4a1a      	ldr	r2, [pc, #104]	; (83514 <udd_attach+0xac>)
   834aa:	f043 0302 	orr.w	r3, r3, #2
   834ae:	6113      	str	r3, [r2, #16]
	udd_enable_wake_up_interrupt();
   834b0:	4b18      	ldr	r3, [pc, #96]	; (83514 <udd_attach+0xac>)
   834b2:	691b      	ldr	r3, [r3, #16]
   834b4:	4a17      	ldr	r2, [pc, #92]	; (83514 <udd_attach+0xac>)
   834b6:	f043 0320 	orr.w	r3, r3, #32
   834ba:	6113      	str	r3, [r2, #16]
	udd_enable_sof_interrupt();
   834bc:	4b15      	ldr	r3, [pc, #84]	; (83514 <udd_attach+0xac>)
   834be:	691b      	ldr	r3, [r3, #16]
   834c0:	4a14      	ldr	r2, [pc, #80]	; (83514 <udd_attach+0xac>)
   834c2:	f043 0308 	orr.w	r3, r3, #8
   834c6:	6113      	str	r3, [r2, #16]
#ifdef USB_DEVICE_HS_SUPPORT
	udd_enable_msof_interrupt();
   834c8:	4b12      	ldr	r3, [pc, #72]	; (83514 <udd_attach+0xac>)
   834ca:	691b      	ldr	r3, [r3, #16]
   834cc:	4a11      	ldr	r2, [pc, #68]	; (83514 <udd_attach+0xac>)
   834ce:	f043 0304 	orr.w	r3, r3, #4
   834d2:	6113      	str	r3, [r2, #16]
#endif
	// Reset following interrupts flag
	udd_ack_sof();
   834d4:	4b0f      	ldr	r3, [pc, #60]	; (83514 <udd_attach+0xac>)
   834d6:	2208      	movs	r2, #8
   834d8:	619a      	str	r2, [r3, #24]
	udd_ack_msof();
   834da:	4b0e      	ldr	r3, [pc, #56]	; (83514 <udd_attach+0xac>)
   834dc:	2204      	movs	r2, #4
   834de:	619a      	str	r2, [r3, #24]
	udd_ack_reset();
   834e0:	4b0c      	ldr	r3, [pc, #48]	; (83514 <udd_attach+0xac>)
   834e2:	2210      	movs	r2, #16
   834e4:	619a      	str	r2, [r3, #24]
	udd_ack_suspend();
   834e6:	4b0b      	ldr	r3, [pc, #44]	; (83514 <udd_attach+0xac>)
   834e8:	2202      	movs	r2, #2
   834ea:	619a      	str	r2, [r3, #24]
	udd_ack_wake_up();
   834ec:	4b09      	ldr	r3, [pc, #36]	; (83514 <udd_attach+0xac>)
   834ee:	2220      	movs	r2, #32
   834f0:	619a      	str	r2, [r3, #24]

	udd_disable_periph_ck();
   834f2:	201d      	movs	r0, #29
   834f4:	4b08      	ldr	r3, [pc, #32]	; (83518 <udd_attach+0xb0>)
   834f6:	4798      	blx	r3
	cpu_irq_restore(flags);
   834f8:	6878      	ldr	r0, [r7, #4]
   834fa:	4b08      	ldr	r3, [pc, #32]	; (8351c <udd_attach+0xb4>)
   834fc:	4798      	blx	r3
}
   834fe:	bf00      	nop
   83500:	3708      	adds	r7, #8
   83502:	46bd      	mov	sp, r7
   83504:	bd80      	pop	{r7, pc}
   83506:	bf00      	nop
   83508:	000830b1 	.word	0x000830b1
   8350c:	000831b1 	.word	0x000831b1
   83510:	000855b9 	.word	0x000855b9
   83514:	400a4000 	.word	0x400a4000
   83518:	00085605 	.word	0x00085605
   8351c:	0008310d 	.word	0x0008310d

00083520 <udd_detach>:


void udd_detach(void)
{
   83520:	b580      	push	{r7, lr}
   83522:	af00      	add	r7, sp, #0
	udd_enable_periph_ck();
   83524:	201d      	movs	r0, #29
   83526:	4b0b      	ldr	r3, [pc, #44]	; (83554 <udd_detach+0x34>)
   83528:	4798      	blx	r3
	// Detach device from the bus
	udd_detach_device();
   8352a:	4b0b      	ldr	r3, [pc, #44]	; (83558 <udd_detach+0x38>)
   8352c:	681b      	ldr	r3, [r3, #0]
   8352e:	4a0a      	ldr	r2, [pc, #40]	; (83558 <udd_detach+0x38>)
   83530:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   83534:	6013      	str	r3, [r2, #0]
   83536:	4b08      	ldr	r3, [pc, #32]	; (83558 <udd_detach+0x38>)
   83538:	681b      	ldr	r3, [r3, #0]
   8353a:	4a07      	ldr	r2, [pc, #28]	; (83558 <udd_detach+0x38>)
   8353c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   83540:	6013      	str	r3, [r2, #0]
	udd_disable_periph_ck();
   83542:	201d      	movs	r0, #29
   83544:	4b05      	ldr	r3, [pc, #20]	; (8355c <udd_detach+0x3c>)
   83546:	4798      	blx	r3
	udd_sleep_mode(false);
   83548:	2000      	movs	r0, #0
   8354a:	4b05      	ldr	r3, [pc, #20]	; (83560 <udd_detach+0x40>)
   8354c:	4798      	blx	r3
}
   8354e:	bf00      	nop
   83550:	bd80      	pop	{r7, pc}
   83552:	bf00      	nop
   83554:	000855b9 	.word	0x000855b9
   83558:	400a4000 	.word	0x400a4000
   8355c:	00085605 	.word	0x00085605
   83560:	000831b1 	.word	0x000831b1

00083564 <udd_is_high_speed>:


bool udd_is_high_speed(void)
{
   83564:	b480      	push	{r7}
   83566:	af00      	add	r7, sp, #0
#ifdef USB_DEVICE_HS_SUPPORT
	return !Is_udd_full_speed_mode();
   83568:	4b06      	ldr	r3, [pc, #24]	; (83584 <udd_is_high_speed+0x20>)
   8356a:	695b      	ldr	r3, [r3, #20]
   8356c:	f003 0301 	and.w	r3, r3, #1
   83570:	2b00      	cmp	r3, #0
   83572:	bf14      	ite	ne
   83574:	2301      	movne	r3, #1
   83576:	2300      	moveq	r3, #0
   83578:	b2db      	uxtb	r3, r3
#else
	return false;
#endif
}
   8357a:	4618      	mov	r0, r3
   8357c:	46bd      	mov	sp, r7
   8357e:	bc80      	pop	{r7}
   83580:	4770      	bx	lr
   83582:	bf00      	nop
   83584:	400a4000 	.word	0x400a4000

00083588 <udd_set_address>:


void udd_set_address(uint8_t address)
{
   83588:	b480      	push	{r7}
   8358a:	b083      	sub	sp, #12
   8358c:	af00      	add	r7, sp, #0
   8358e:	4603      	mov	r3, r0
   83590:	71fb      	strb	r3, [r7, #7]
	dbg_print("Addr%d ", address);
	udd_disable_address();
   83592:	4b0d      	ldr	r3, [pc, #52]	; (835c8 <udd_set_address+0x40>)
   83594:	681b      	ldr	r3, [r3, #0]
   83596:	4a0c      	ldr	r2, [pc, #48]	; (835c8 <udd_set_address+0x40>)
   83598:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8359c:	6013      	str	r3, [r2, #0]
	udd_configure_address(address);
   8359e:	4b0a      	ldr	r3, [pc, #40]	; (835c8 <udd_set_address+0x40>)
   835a0:	681b      	ldr	r3, [r3, #0]
   835a2:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   835a6:	79fb      	ldrb	r3, [r7, #7]
   835a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   835ac:	4906      	ldr	r1, [pc, #24]	; (835c8 <udd_set_address+0x40>)
   835ae:	4313      	orrs	r3, r2
   835b0:	600b      	str	r3, [r1, #0]
	udd_enable_address();
   835b2:	4b05      	ldr	r3, [pc, #20]	; (835c8 <udd_set_address+0x40>)
   835b4:	681b      	ldr	r3, [r3, #0]
   835b6:	4a04      	ldr	r2, [pc, #16]	; (835c8 <udd_set_address+0x40>)
   835b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   835bc:	6013      	str	r3, [r2, #0]
}
   835be:	bf00      	nop
   835c0:	370c      	adds	r7, #12
   835c2:	46bd      	mov	sp, r7
   835c4:	bc80      	pop	{r7}
   835c6:	4770      	bx	lr
   835c8:	400a4000 	.word	0x400a4000

000835cc <udd_getaddress>:


uint8_t udd_getaddress(void)
{
   835cc:	b480      	push	{r7}
   835ce:	af00      	add	r7, sp, #0
	return udd_get_configured_address();
   835d0:	4b04      	ldr	r3, [pc, #16]	; (835e4 <udd_getaddress+0x18>)
   835d2:	681b      	ldr	r3, [r3, #0]
   835d4:	b2db      	uxtb	r3, r3
   835d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   835da:	b2db      	uxtb	r3, r3
}
   835dc:	4618      	mov	r0, r3
   835de:	46bd      	mov	sp, r7
   835e0:	bc80      	pop	{r7}
   835e2:	4770      	bx	lr
   835e4:	400a4000 	.word	0x400a4000

000835e8 <udd_get_frame_number>:


uint16_t udd_get_frame_number(void)
{
   835e8:	b480      	push	{r7}
   835ea:	af00      	add	r7, sp, #0
	return udd_frame_number();
   835ec:	4b05      	ldr	r3, [pc, #20]	; (83604 <udd_get_frame_number+0x1c>)
   835ee:	685b      	ldr	r3, [r3, #4]
   835f0:	08db      	lsrs	r3, r3, #3
   835f2:	b29b      	uxth	r3, r3
   835f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   835f8:	b29b      	uxth	r3, r3
}
   835fa:	4618      	mov	r0, r3
   835fc:	46bd      	mov	sp, r7
   835fe:	bc80      	pop	{r7}
   83600:	4770      	bx	lr
   83602:	bf00      	nop
   83604:	400a4000 	.word	0x400a4000

00083608 <udd_set_setup_payload>:
	}
}


void udd_set_setup_payload(uint8_t *payload, uint16_t payload_size)
{
   83608:	b480      	push	{r7}
   8360a:	b083      	sub	sp, #12
   8360c:	af00      	add	r7, sp, #0
   8360e:	6078      	str	r0, [r7, #4]
   83610:	460b      	mov	r3, r1
   83612:	807b      	strh	r3, [r7, #2]
	udd_g_ctrlreq.payload = payload;
   83614:	4a05      	ldr	r2, [pc, #20]	; (8362c <udd_set_setup_payload+0x24>)
   83616:	687b      	ldr	r3, [r7, #4]
   83618:	6093      	str	r3, [r2, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   8361a:	4a04      	ldr	r2, [pc, #16]	; (8362c <udd_set_setup_payload+0x24>)
   8361c:	887b      	ldrh	r3, [r7, #2]
   8361e:	8193      	strh	r3, [r2, #12]
}
   83620:	bf00      	nop
   83622:	370c      	adds	r7, #12
   83624:	46bd      	mov	sp, r7
   83626:	bc80      	pop	{r7}
   83628:	4770      	bx	lr
   8362a:	bf00      	nop
   8362c:	200013dc 	.word	0x200013dc

00083630 <udd_ep_alloc>:


#if (0!=USB_DEVICE_MAX_EP)
bool udd_ep_alloc(udd_ep_id_t ep, uint8_t bmAttributes,
		uint16_t MaxEndpointSize)
{
   83630:	b590      	push	{r4, r7, lr}
   83632:	b089      	sub	sp, #36	; 0x24
   83634:	af02      	add	r7, sp, #8
   83636:	4603      	mov	r3, r0
   83638:	71fb      	strb	r3, [r7, #7]
   8363a:	460b      	mov	r3, r1
   8363c:	71bb      	strb	r3, [r7, #6]
   8363e:	4613      	mov	r3, r2
   83640:	80bb      	strh	r3, [r7, #4]
	bool b_dir_in;
	uint16_t ep_allocated;
	uint8_t nb_bank, bank, nb_tran = 0, i;
   83642:	2300      	movs	r3, #0
   83644:	74fb      	strb	r3, [r7, #19]
	bool b_iso_hbw = false;
   83646:	2300      	movs	r3, #0
   83648:	747b      	strb	r3, [r7, #17]

	b_dir_in = ep & USB_EP_DIR_IN;
   8364a:	79fb      	ldrb	r3, [r7, #7]
   8364c:	f003 0380 	and.w	r3, r3, #128	; 0x80
   83650:	2b00      	cmp	r3, #0
   83652:	bf14      	ite	ne
   83654:	2301      	movne	r3, #1
   83656:	2300      	moveq	r3, #0
   83658:	743b      	strb	r3, [r7, #16]
	ep = ep & USB_EP_ADDR_MASK;
   8365a:	79fb      	ldrb	r3, [r7, #7]
   8365c:	f003 030f 	and.w	r3, r3, #15
   83660:	71fb      	strb	r3, [r7, #7]

	if (ep > USB_DEVICE_MAX_EP) {
   83662:	79fb      	ldrb	r3, [r7, #7]
   83664:	2b02      	cmp	r3, #2
   83666:	d901      	bls.n	8366c <udd_ep_alloc+0x3c>
		return false;
   83668:	2300      	movs	r3, #0
   8366a:	e1c0      	b.n	839ee <udd_ep_alloc+0x3be>
	}
	if (Is_udd_endpoint_enabled(ep)) {
   8366c:	4a88      	ldr	r2, [pc, #544]	; (83890 <udd_ep_alloc+0x260>)
   8366e:	79fb      	ldrb	r3, [r7, #7]
   83670:	015b      	lsls	r3, r3, #5
   83672:	4413      	add	r3, r2
   83674:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83678:	681b      	ldr	r3, [r3, #0]
   8367a:	f003 0301 	and.w	r3, r3, #1
   8367e:	2b00      	cmp	r3, #0
   83680:	d001      	beq.n	83686 <udd_ep_alloc+0x56>
		return false;
   83682:	2300      	movs	r3, #0
   83684:	e1b3      	b.n	839ee <udd_ep_alloc+0x3be>
	}

	// Bank choice
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   83686:	79bb      	ldrb	r3, [r7, #6]
   83688:	f003 0303 	and.w	r3, r3, #3
   8368c:	2b03      	cmp	r3, #3
   8368e:	d01a      	beq.n	836c6 <udd_ep_alloc+0x96>
   83690:	2b03      	cmp	r3, #3
   83692:	dc2b      	bgt.n	836ec <udd_ep_alloc+0xbc>
   83694:	2b01      	cmp	r3, #1
   83696:	d002      	beq.n	8369e <udd_ep_alloc+0x6e>
   83698:	2b02      	cmp	r3, #2
   8369a:	d017      	beq.n	836cc <udd_ep_alloc+0x9c>
   8369c:	e026      	b.n	836ec <udd_ep_alloc+0xbc>
	case USB_EP_TYPE_ISOCHRONOUS:
		b_iso_hbw = Is_udd_endpoint_high_bw_supported(ep);
   8369e:	79fb      	ldrb	r3, [r7, #7]
   836a0:	2b00      	cmp	r3, #0
   836a2:	d007      	beq.n	836b4 <udd_ep_alloc+0x84>
   836a4:	79fb      	ldrb	r3, [r7, #7]
   836a6:	2b03      	cmp	r3, #3
   836a8:	d004      	beq.n	836b4 <udd_ep_alloc+0x84>
   836aa:	79fb      	ldrb	r3, [r7, #7]
   836ac:	2b04      	cmp	r3, #4
   836ae:	d001      	beq.n	836b4 <udd_ep_alloc+0x84>
   836b0:	2301      	movs	r3, #1
   836b2:	e000      	b.n	836b6 <udd_ep_alloc+0x86>
   836b4:	2300      	movs	r3, #0
   836b6:	747b      	strb	r3, [r7, #17]
   836b8:	7c7b      	ldrb	r3, [r7, #17]
   836ba:	f003 0301 	and.w	r3, r3, #1
   836be:	747b      	strb	r3, [r7, #17]
		nb_bank = UDD_ISOCHRONOUS_NB_BANK(ep);
   836c0:	2301      	movs	r3, #1
   836c2:	757b      	strb	r3, [r7, #21]
		break;
   836c4:	e014      	b.n	836f0 <udd_ep_alloc+0xc0>
	case USB_EP_TYPE_INTERRUPT:
		nb_bank = UDD_INTERRUPT_NB_BANK(ep);
   836c6:	2301      	movs	r3, #1
   836c8:	757b      	strb	r3, [r7, #21]
		break;
   836ca:	e011      	b.n	836f0 <udd_ep_alloc+0xc0>
	case USB_EP_TYPE_BULK:
		nb_bank = UDD_BULK_NB_BANK(ep);
   836cc:	79fb      	ldrb	r3, [r7, #7]
   836ce:	2b05      	cmp	r3, #5
   836d0:	d009      	beq.n	836e6 <udd_ep_alloc+0xb6>
   836d2:	79fb      	ldrb	r3, [r7, #7]
   836d4:	2b85      	cmp	r3, #133	; 0x85
   836d6:	d006      	beq.n	836e6 <udd_ep_alloc+0xb6>
   836d8:	79fb      	ldrb	r3, [r7, #7]
   836da:	2b06      	cmp	r3, #6
   836dc:	d101      	bne.n	836e2 <udd_ep_alloc+0xb2>
   836de:	2302      	movs	r3, #2
   836e0:	e002      	b.n	836e8 <udd_ep_alloc+0xb8>
   836e2:	2301      	movs	r3, #1
   836e4:	e000      	b.n	836e8 <udd_ep_alloc+0xb8>
   836e6:	2303      	movs	r3, #3
   836e8:	757b      	strb	r3, [r7, #21]
		break;
   836ea:	e001      	b.n	836f0 <udd_ep_alloc+0xc0>
	default:
		Assert(false);
		return false;
   836ec:	2300      	movs	r3, #0
   836ee:	e17e      	b.n	839ee <udd_ep_alloc+0x3be>
	}
	switch (nb_bank) {
   836f0:	7d7b      	ldrb	r3, [r7, #21]
   836f2:	2b03      	cmp	r3, #3
   836f4:	d00c      	beq.n	83710 <udd_ep_alloc+0xe0>
   836f6:	2b03      	cmp	r3, #3
   836f8:	dc0d      	bgt.n	83716 <udd_ep_alloc+0xe6>
   836fa:	2b01      	cmp	r3, #1
   836fc:	d002      	beq.n	83704 <udd_ep_alloc+0xd4>
   836fe:	2b02      	cmp	r3, #2
   83700:	d003      	beq.n	8370a <udd_ep_alloc+0xda>
   83702:	e008      	b.n	83716 <udd_ep_alloc+0xe6>
	case 1:
		bank = UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   83704:	2301      	movs	r3, #1
   83706:	753b      	strb	r3, [r7, #20]
		break;
   83708:	e007      	b.n	8371a <udd_ep_alloc+0xea>
	case 2:
		bank = UDPHS_EPTCFG_BK_NUMBER_2 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   8370a:	2302      	movs	r3, #2
   8370c:	753b      	strb	r3, [r7, #20]
		break;
   8370e:	e004      	b.n	8371a <udd_ep_alloc+0xea>
	case 3:
		bank = UDPHS_EPTCFG_BK_NUMBER_3 >> UDPHS_EPTCFG_BK_NUMBER_Pos;
   83710:	2303      	movs	r3, #3
   83712:	753b      	strb	r3, [r7, #20]
		break;
   83714:	e001      	b.n	8371a <udd_ep_alloc+0xea>
	default:
		Assert(false);
		return false;
   83716:	2300      	movs	r3, #0
   83718:	e169      	b.n	839ee <udd_ep_alloc+0x3be>
	}
	if (b_iso_hbw) {
   8371a:	7c7b      	ldrb	r3, [r7, #17]
   8371c:	2b00      	cmp	r3, #0
   8371e:	d017      	beq.n	83750 <udd_ep_alloc+0x120>
		switch(MaxEndpointSize & (0x3u << 11)) {
   83720:	88bb      	ldrh	r3, [r7, #4]
   83722:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   83726:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   8372a:	d003      	beq.n	83734 <udd_ep_alloc+0x104>
   8372c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
   83730:	d003      	beq.n	8373a <udd_ep_alloc+0x10a>
   83732:	e005      	b.n	83740 <udd_ep_alloc+0x110>
		case (0x1u << 11):
			nb_tran = 2;
   83734:	2302      	movs	r3, #2
   83736:	74fb      	strb	r3, [r7, #19]
			break;
   83738:	e005      	b.n	83746 <udd_ep_alloc+0x116>
		case (0x2u << 11):
			nb_tran = 3;
   8373a:	2303      	movs	r3, #3
   8373c:	74fb      	strb	r3, [r7, #19]
			break;
   8373e:	e002      	b.n	83746 <udd_ep_alloc+0x116>
		default:
			nb_tran = 1;
   83740:	2301      	movs	r3, #1
   83742:	74fb      	strb	r3, [r7, #19]
			break;
   83744:	bf00      	nop
		}
		MaxEndpointSize &= ~(0x3u << 11);
   83746:	88bb      	ldrh	r3, [r7, #4]
   83748:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
   8374c:	80bb      	strh	r3, [r7, #4]
   8374e:	e006      	b.n	8375e <udd_ep_alloc+0x12e>
	} else if (MaxEndpointSize & (0x3u << 11)) {
   83750:	88bb      	ldrh	r3, [r7, #4]
   83752:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
   83756:	2b00      	cmp	r3, #0
   83758:	d001      	beq.n	8375e <udd_ep_alloc+0x12e>
		// High BW not supported
		return false;
   8375a:	2300      	movs	r3, #0
   8375c:	e147      	b.n	839ee <udd_ep_alloc+0x3be>
	Assert(MaxEndpointSize <= udd_get_endpoint_size_max(ep));
	Assert(nb_bank <= udd_get_endpoint_bank_max_nbr(ep));

	// Set configuration of new endpoint
	// Note: NB_TRANS is at maximum for isochronous endpoint, else 0 (ignored).
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8375e:	4a4c      	ldr	r2, [pc, #304]	; (83890 <udd_ep_alloc+0x260>)
   83760:	79fb      	ldrb	r3, [r7, #7]
   83762:	3308      	adds	r3, #8
   83764:	015b      	lsls	r3, r3, #5
   83766:	4413      	add	r3, r2
   83768:	681b      	ldr	r3, [r3, #0]
   8376a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8376e:	f023 0303 	bic.w	r3, r3, #3
   83772:	79ba      	ldrb	r2, [r7, #6]
   83774:	0112      	lsls	r2, r2, #4
   83776:	f002 0230 	and.w	r2, r2, #48	; 0x30
   8377a:	7c39      	ldrb	r1, [r7, #16]
   8377c:	2900      	cmp	r1, #0
   8377e:	d001      	beq.n	83784 <udd_ep_alloc+0x154>
   83780:	2108      	movs	r1, #8
   83782:	e000      	b.n	83786 <udd_ep_alloc+0x156>
   83784:	2100      	movs	r1, #0
   83786:	4311      	orrs	r1, r2
   83788:	88ba      	ldrh	r2, [r7, #4]
   8378a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   8378e:	d207      	bcs.n	837a0 <udd_ep_alloc+0x170>
   83790:	88ba      	ldrh	r2, [r7, #4]
   83792:	2a08      	cmp	r2, #8
   83794:	bf38      	it	cc
   83796:	2208      	movcc	r2, #8
   83798:	b292      	uxth	r2, r2
   8379a:	0052      	lsls	r2, r2, #1
   8379c:	3a01      	subs	r2, #1
   8379e:	e001      	b.n	837a4 <udd_ep_alloc+0x174>
   837a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
   837a4:	fab2 f282 	clz	r2, r2
   837a8:	f1c2 021c 	rsb	r2, r2, #28
   837ac:	4311      	orrs	r1, r2
   837ae:	7d3a      	ldrb	r2, [r7, #20]
   837b0:	0192      	lsls	r2, r2, #6
   837b2:	b2d2      	uxtb	r2, r2
   837b4:	4311      	orrs	r1, r2
   837b6:	7c7a      	ldrb	r2, [r7, #17]
   837b8:	2a00      	cmp	r2, #0
   837ba:	d004      	beq.n	837c6 <udd_ep_alloc+0x196>
   837bc:	7cfa      	ldrb	r2, [r7, #19]
   837be:	0212      	lsls	r2, r2, #8
   837c0:	f402 7240 	and.w	r2, r2, #768	; 0x300
   837c4:	e000      	b.n	837c8 <udd_ep_alloc+0x198>
   837c6:	2200      	movs	r2, #0
   837c8:	430a      	orrs	r2, r1
   837ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
   837ce:	4830      	ldr	r0, [pc, #192]	; (83890 <udd_ep_alloc+0x260>)
   837d0:	79f9      	ldrb	r1, [r7, #7]
   837d2:	431a      	orrs	r2, r3
   837d4:	f101 0308 	add.w	r3, r1, #8
   837d8:	015b      	lsls	r3, r3, #5
   837da:	4403      	add	r3, r0
   837dc:	601a      	str	r2, [r3, #0]
			MaxEndpointSize, bank, (b_iso_hbw)?nb_tran:0);
	if (!Is_udd_endpoint_mapped(ep)) {
   837de:	4a2c      	ldr	r2, [pc, #176]	; (83890 <udd_ep_alloc+0x260>)
   837e0:	79fb      	ldrb	r3, [r7, #7]
   837e2:	3308      	adds	r3, #8
   837e4:	015b      	lsls	r3, r3, #5
   837e6:	4413      	add	r3, r2
   837e8:	681b      	ldr	r3, [r3, #0]
   837ea:	2b00      	cmp	r3, #0
   837ec:	db01      	blt.n	837f2 <udd_ep_alloc+0x1c2>
		return false;
   837ee:	2300      	movs	r3, #0
   837f0:	e0fd      	b.n	839ee <udd_ep_alloc+0x3be>
	}
	udd_enable_endpoint(ep);
   837f2:	4a27      	ldr	r2, [pc, #156]	; (83890 <udd_ep_alloc+0x260>)
   837f4:	79fb      	ldrb	r3, [r7, #7]
   837f6:	3308      	adds	r3, #8
   837f8:	015b      	lsls	r3, r3, #5
   837fa:	4413      	add	r3, r2
   837fc:	3304      	adds	r3, #4
   837fe:	2201      	movs	r2, #1
   83800:	601a      	str	r2, [r3, #0]

	// To avoid conflict during reorganization of the DPRAM
	// the superior endpoint must be unallocated and reallocated
	ep_allocated = 0;
   83802:	2300      	movs	r3, #0
   83804:	82fb      	strh	r3, [r7, #22]

	// Unalloc endpoints superior
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   83806:	2302      	movs	r3, #2
   83808:	74bb      	strb	r3, [r7, #18]
   8380a:	e039      	b.n	83880 <udd_ep_alloc+0x250>
		if (Is_udd_endpoint_enabled(i)) {
   8380c:	4a20      	ldr	r2, [pc, #128]	; (83890 <udd_ep_alloc+0x260>)
   8380e:	7cbb      	ldrb	r3, [r7, #18]
   83810:	015b      	lsls	r3, r3, #5
   83812:	4413      	add	r3, r2
   83814:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83818:	681b      	ldr	r3, [r3, #0]
   8381a:	f003 0301 	and.w	r3, r3, #1
   8381e:	2b00      	cmp	r3, #0
   83820:	d02b      	beq.n	8387a <udd_ep_alloc+0x24a>
			// Save number of bank value
			bank = udd_get_endpoint_bank(i);
   83822:	4a1b      	ldr	r2, [pc, #108]	; (83890 <udd_ep_alloc+0x260>)
   83824:	7cbb      	ldrb	r3, [r7, #18]
   83826:	3308      	adds	r3, #8
   83828:	015b      	lsls	r3, r3, #5
   8382a:	4413      	add	r3, r2
   8382c:	681b      	ldr	r3, [r3, #0]
   8382e:	099b      	lsrs	r3, r3, #6
   83830:	b2db      	uxtb	r3, r3
   83832:	f003 0303 	and.w	r3, r3, #3
   83836:	753b      	strb	r3, [r7, #20]
			ep_allocated |=  bank << (i * 2);
   83838:	7d3a      	ldrb	r2, [r7, #20]
   8383a:	7cbb      	ldrb	r3, [r7, #18]
   8383c:	005b      	lsls	r3, r3, #1
   8383e:	fa02 f303 	lsl.w	r3, r2, r3
   83842:	b21a      	sxth	r2, r3
   83844:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
   83848:	4313      	orrs	r3, r2
   8384a:	b21b      	sxth	r3, r3
   8384c:	82fb      	strh	r3, [r7, #22]
			// Disable and unallocate endpoint
			udd_disable_endpoint(i);
   8384e:	4a10      	ldr	r2, [pc, #64]	; (83890 <udd_ep_alloc+0x260>)
   83850:	7cbb      	ldrb	r3, [r7, #18]
   83852:	015b      	lsls	r3, r3, #5
   83854:	4413      	add	r3, r2
   83856:	f503 7384 	add.w	r3, r3, #264	; 0x108
   8385a:	2201      	movs	r2, #1
   8385c:	601a      	str	r2, [r3, #0]
			udd_configure_endpoint_bank(i, 0);
   8385e:	4a0c      	ldr	r2, [pc, #48]	; (83890 <udd_ep_alloc+0x260>)
   83860:	7cbb      	ldrb	r3, [r7, #18]
   83862:	3308      	adds	r3, #8
   83864:	015b      	lsls	r3, r3, #5
   83866:	4413      	add	r3, r2
   83868:	681a      	ldr	r2, [r3, #0]
   8386a:	4909      	ldr	r1, [pc, #36]	; (83890 <udd_ep_alloc+0x260>)
   8386c:	7cbb      	ldrb	r3, [r7, #18]
   8386e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   83872:	3308      	adds	r3, #8
   83874:	015b      	lsls	r3, r3, #5
   83876:	440b      	add	r3, r1
   83878:	601a      	str	r2, [r3, #0]
	for (i = USB_DEVICE_MAX_EP; i >= ep; i--) {
   8387a:	7cbb      	ldrb	r3, [r7, #18]
   8387c:	3b01      	subs	r3, #1
   8387e:	74bb      	strb	r3, [r7, #18]
   83880:	7cba      	ldrb	r2, [r7, #18]
   83882:	79fb      	ldrb	r3, [r7, #7]
   83884:	429a      	cmp	r2, r3
   83886:	d2c1      	bcs.n	8380c <udd_ep_alloc+0x1dc>

		}
	}

	// Realloc/Enable endpoints
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   83888:	79fb      	ldrb	r3, [r7, #7]
   8388a:	74bb      	strb	r3, [r7, #18]
   8388c:	e0aa      	b.n	839e4 <udd_ep_alloc+0x3b4>
   8388e:	bf00      	nop
   83890:	400a4000 	.word	0x400a4000
		udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   83894:	7cbb      	ldrb	r3, [r7, #18]
   83896:	1e5a      	subs	r2, r3, #1
   83898:	4613      	mov	r3, r2
   8389a:	005b      	lsls	r3, r3, #1
   8389c:	4413      	add	r3, r2
   8389e:	00db      	lsls	r3, r3, #3
   838a0:	4a55      	ldr	r2, [pc, #340]	; (839f8 <udd_ep_alloc+0x3c8>)
   838a2:	4413      	add	r3, r2
   838a4:	60fb      	str	r3, [r7, #12]
		bool b_restart = ptr_job->busy;
   838a6:	68fb      	ldr	r3, [r7, #12]
   838a8:	7d1b      	ldrb	r3, [r3, #20]
   838aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
   838ae:	b2db      	uxtb	r3, r3
   838b0:	2b00      	cmp	r3, #0
   838b2:	bf14      	ite	ne
   838b4:	2301      	movne	r3, #1
   838b6:	2300      	moveq	r3, #0
   838b8:	72fb      	strb	r3, [r7, #11]
		// Unallocated banks?
		bank = (ep_allocated >> (i * 2)) & 0x03;
   838ba:	8afa      	ldrh	r2, [r7, #22]
   838bc:	7cbb      	ldrb	r3, [r7, #18]
   838be:	005b      	lsls	r3, r3, #1
   838c0:	fa42 f303 	asr.w	r3, r2, r3
   838c4:	b2db      	uxtb	r3, r3
   838c6:	f003 0303 	and.w	r3, r3, #3
   838ca:	753b      	strb	r3, [r7, #20]
		if (bank == 0) {
   838cc:	7d3b      	ldrb	r3, [r7, #20]
   838ce:	2b00      	cmp	r3, #0
   838d0:	f000 8084 	beq.w	839dc <udd_ep_alloc+0x3ac>
			continue;
		}
		// Restart running job because
		// memory window slides up and its data is lost
		ptr_job->busy = false;
   838d4:	68fa      	ldr	r2, [r7, #12]
   838d6:	7d13      	ldrb	r3, [r2, #20]
   838d8:	f36f 0300 	bfc	r3, #0, #1
   838dc:	7513      	strb	r3, [r2, #20]
		// Re-allocate memory
		udd_configure_endpoint_bank(i, bank);
   838de:	4a47      	ldr	r2, [pc, #284]	; (839fc <udd_ep_alloc+0x3cc>)
   838e0:	7cbb      	ldrb	r3, [r7, #18]
   838e2:	3308      	adds	r3, #8
   838e4:	015b      	lsls	r3, r3, #5
   838e6:	4413      	add	r3, r2
   838e8:	681b      	ldr	r3, [r3, #0]
   838ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
   838ee:	7d3b      	ldrb	r3, [r7, #20]
   838f0:	019b      	lsls	r3, r3, #6
   838f2:	b2da      	uxtb	r2, r3
   838f4:	4841      	ldr	r0, [pc, #260]	; (839fc <udd_ep_alloc+0x3cc>)
   838f6:	7cbb      	ldrb	r3, [r7, #18]
   838f8:	430a      	orrs	r2, r1
   838fa:	3308      	adds	r3, #8
   838fc:	015b      	lsls	r3, r3, #5
   838fe:	4403      	add	r3, r0
   83900:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint(i);
   83902:	4a3e      	ldr	r2, [pc, #248]	; (839fc <udd_ep_alloc+0x3cc>)
   83904:	7cbb      	ldrb	r3, [r7, #18]
   83906:	3308      	adds	r3, #8
   83908:	015b      	lsls	r3, r3, #5
   8390a:	4413      	add	r3, r2
   8390c:	3304      	adds	r3, #4
   8390e:	2201      	movs	r2, #1
   83910:	601a      	str	r2, [r3, #0]
		if (!Is_udd_endpoint_mapped(i)) {
   83912:	4a3a      	ldr	r2, [pc, #232]	; (839fc <udd_ep_alloc+0x3cc>)
   83914:	7cbb      	ldrb	r3, [r7, #18]
   83916:	3308      	adds	r3, #8
   83918:	015b      	lsls	r3, r3, #5
   8391a:	4413      	add	r3, r2
   8391c:	681b      	ldr	r3, [r3, #0]
   8391e:	2b00      	cmp	r3, #0
   83920:	db1c      	blt.n	8395c <udd_ep_alloc+0x32c>
			dbg_print("ErrRealloc%d-JobE ", i);
			if (NULL == ptr_job->call_trans) {
   83922:	68fb      	ldr	r3, [r7, #12]
   83924:	681b      	ldr	r3, [r3, #0]
   83926:	2b00      	cmp	r3, #0
   83928:	d101      	bne.n	8392e <udd_ep_alloc+0x2fe>
				return false;
   8392a:	2300      	movs	r3, #0
   8392c:	e05f      	b.n	839ee <udd_ep_alloc+0x3be>
			}
			if (Is_udd_endpoint_in(i)) {
   8392e:	4a33      	ldr	r2, [pc, #204]	; (839fc <udd_ep_alloc+0x3cc>)
   83930:	7cbb      	ldrb	r3, [r7, #18]
   83932:	3308      	adds	r3, #8
   83934:	015b      	lsls	r3, r3, #5
   83936:	4413      	add	r3, r2
   83938:	681b      	ldr	r3, [r3, #0]
   8393a:	f003 0308 	and.w	r3, r3, #8
   8393e:	2b00      	cmp	r3, #0
   83940:	d003      	beq.n	8394a <udd_ep_alloc+0x31a>
				i |= USB_EP_DIR_IN;
   83942:	7cbb      	ldrb	r3, [r7, #18]
   83944:	f063 037f 	orn	r3, r3, #127	; 0x7f
   83948:	74bb      	strb	r3, [r7, #18]
			}
			ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8394a:	68fb      	ldr	r3, [r7, #12]
   8394c:	681b      	ldr	r3, [r3, #0]
   8394e:	68fa      	ldr	r2, [r7, #12]
   83950:	68d1      	ldr	r1, [r2, #12]
   83952:	7cba      	ldrb	r2, [r7, #18]
   83954:	2001      	movs	r0, #1
   83956:	4798      	blx	r3
					ptr_job->buf_cnt, i);
			return false;
   83958:	2300      	movs	r3, #0
   8395a:	e048      	b.n	839ee <udd_ep_alloc+0x3be>
		}
		udd_enable_endpoint_bank_autoswitch(i);
   8395c:	4a27      	ldr	r2, [pc, #156]	; (839fc <udd_ep_alloc+0x3cc>)
   8395e:	7cbb      	ldrb	r3, [r7, #18]
   83960:	3308      	adds	r3, #8
   83962:	015b      	lsls	r3, r3, #5
   83964:	4413      	add	r3, r2
   83966:	3304      	adds	r3, #4
   83968:	681a      	ldr	r2, [r3, #0]
   8396a:	4924      	ldr	r1, [pc, #144]	; (839fc <udd_ep_alloc+0x3cc>)
   8396c:	7cbb      	ldrb	r3, [r7, #18]
   8396e:	f042 0202 	orr.w	r2, r2, #2
   83972:	3308      	adds	r3, #8
   83974:	015b      	lsls	r3, r3, #5
   83976:	440b      	add	r3, r1
   83978:	3304      	adds	r3, #4
   8397a:	601a      	str	r2, [r3, #0]
		if (b_restart) {
   8397c:	7afb      	ldrb	r3, [r7, #11]
   8397e:	2b00      	cmp	r3, #0
   83980:	d02d      	beq.n	839de <udd_ep_alloc+0x3ae>
			// Re-run the job remaining part
			ptr_job->buf_cnt -= ptr_job->buf_load;
   83982:	68fb      	ldr	r3, [r7, #12]
   83984:	68da      	ldr	r2, [r3, #12]
   83986:	68fb      	ldr	r3, [r7, #12]
   83988:	691b      	ldr	r3, [r3, #16]
   8398a:	1ad2      	subs	r2, r2, r3
   8398c:	68fb      	ldr	r3, [r7, #12]
   8398e:	60da      	str	r2, [r3, #12]
			b_restart = udd_ep_run(i,
					ptr_job->b_shortpacket,
   83990:	68fb      	ldr	r3, [r7, #12]
   83992:	7d1b      	ldrb	r3, [r3, #20]
   83994:	f3c3 0340 	ubfx	r3, r3, #1, #1
   83998:	b2db      	uxtb	r3, r3
			b_restart = udd_ep_run(i,
   8399a:	2b00      	cmp	r3, #0
   8399c:	bf14      	ite	ne
   8399e:	2301      	movne	r3, #1
   839a0:	2300      	moveq	r3, #0
   839a2:	b2d9      	uxtb	r1, r3
					&ptr_job->buf[ptr_job->buf_cnt],
   839a4:	68fb      	ldr	r3, [r7, #12]
   839a6:	685a      	ldr	r2, [r3, #4]
   839a8:	68fb      	ldr	r3, [r7, #12]
   839aa:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   839ac:	18d4      	adds	r4, r2, r3
					ptr_job->buf_size
   839ae:	68fb      	ldr	r3, [r7, #12]
   839b0:	689a      	ldr	r2, [r3, #8]
						- ptr_job->buf_cnt,
   839b2:	68fb      	ldr	r3, [r7, #12]
   839b4:	68db      	ldr	r3, [r3, #12]
			b_restart = udd_ep_run(i,
   839b6:	1ad2      	subs	r2, r2, r3
   839b8:	68fb      	ldr	r3, [r7, #12]
   839ba:	681b      	ldr	r3, [r3, #0]
   839bc:	7cb8      	ldrb	r0, [r7, #18]
   839be:	9300      	str	r3, [sp, #0]
   839c0:	4613      	mov	r3, r2
   839c2:	4622      	mov	r2, r4
   839c4:	4c0e      	ldr	r4, [pc, #56]	; (83a00 <udd_ep_alloc+0x3d0>)
   839c6:	47a0      	blx	r4
   839c8:	4603      	mov	r3, r0
   839ca:	72fb      	strb	r3, [r7, #11]
					ptr_job->call_trans);
			if (!b_restart) {
   839cc:	7afb      	ldrb	r3, [r7, #11]
   839ce:	f083 0301 	eor.w	r3, r3, #1
   839d2:	b2db      	uxtb	r3, r3
   839d4:	2b00      	cmp	r3, #0
   839d6:	d002      	beq.n	839de <udd_ep_alloc+0x3ae>
				dbg_print("ErrReRun%d ", i);
				return false;
   839d8:	2300      	movs	r3, #0
   839da:	e008      	b.n	839ee <udd_ep_alloc+0x3be>
			continue;
   839dc:	bf00      	nop
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   839de:	7cbb      	ldrb	r3, [r7, #18]
   839e0:	3301      	adds	r3, #1
   839e2:	74bb      	strb	r3, [r7, #18]
   839e4:	7cbb      	ldrb	r3, [r7, #18]
   839e6:	2b02      	cmp	r3, #2
   839e8:	f67f af54 	bls.w	83894 <udd_ep_alloc+0x264>
			}
		}
	}
	dbg_print("ep_alloc(%d:%08x) ", ep, UDPHS->UDPHS_EPT[ep].UDPHS_EPTCFG);
	return true;
   839ec:	2301      	movs	r3, #1
}
   839ee:	4618      	mov	r0, r3
   839f0:	371c      	adds	r7, #28
   839f2:	46bd      	mov	sp, r7
   839f4:	bd90      	pop	{r4, r7, pc}
   839f6:	bf00      	nop
   839f8:	200013fc 	.word	0x200013fc
   839fc:	400a4000 	.word	0x400a4000
   83a00:	00083d31 	.word	0x00083d31

00083a04 <udd_ep_free>:


void udd_ep_free(udd_ep_id_t ep)
{
   83a04:	b580      	push	{r7, lr}
   83a06:	b084      	sub	sp, #16
   83a08:	af00      	add	r7, sp, #0
   83a0a:	4603      	mov	r3, r0
   83a0c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83a0e:	79fb      	ldrb	r3, [r7, #7]
   83a10:	f003 030f 	and.w	r3, r3, #15
   83a14:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   83a16:	7bfb      	ldrb	r3, [r7, #15]
   83a18:	2b02      	cmp	r3, #2
   83a1a:	d828      	bhi.n	83a6e <udd_ep_free+0x6a>
		return;
	}
	udd_disable_endpoint(ep_index);
   83a1c:	4a16      	ldr	r2, [pc, #88]	; (83a78 <udd_ep_free+0x74>)
   83a1e:	7bfb      	ldrb	r3, [r7, #15]
   83a20:	015b      	lsls	r3, r3, #5
   83a22:	4413      	add	r3, r2
   83a24:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83a28:	2201      	movs	r2, #1
   83a2a:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint_bank(ep_index, 0);
   83a2c:	4a12      	ldr	r2, [pc, #72]	; (83a78 <udd_ep_free+0x74>)
   83a2e:	7bfb      	ldrb	r3, [r7, #15]
   83a30:	3308      	adds	r3, #8
   83a32:	015b      	lsls	r3, r3, #5
   83a34:	4413      	add	r3, r2
   83a36:	681a      	ldr	r2, [r3, #0]
   83a38:	490f      	ldr	r1, [pc, #60]	; (83a78 <udd_ep_free+0x74>)
   83a3a:	7bfb      	ldrb	r3, [r7, #15]
   83a3c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
   83a40:	3308      	adds	r3, #8
   83a42:	015b      	lsls	r3, r3, #5
   83a44:	440b      	add	r3, r1
   83a46:	601a      	str	r2, [r3, #0]
	udd_ep_abort_job(ep);
   83a48:	79fb      	ldrb	r3, [r7, #7]
   83a4a:	4618      	mov	r0, r3
   83a4c:	4b0b      	ldr	r3, [pc, #44]	; (83a7c <udd_ep_free+0x78>)
   83a4e:	4798      	blx	r3
	udd_ep_job[ep_index - 1].stall_requested = false;
   83a50:	7bfb      	ldrb	r3, [r7, #15]
   83a52:	1e5a      	subs	r2, r3, #1
   83a54:	490a      	ldr	r1, [pc, #40]	; (83a80 <udd_ep_free+0x7c>)
   83a56:	4613      	mov	r3, r2
   83a58:	005b      	lsls	r3, r3, #1
   83a5a:	4413      	add	r3, r2
   83a5c:	00db      	lsls	r3, r3, #3
   83a5e:	440b      	add	r3, r1
   83a60:	f103 0210 	add.w	r2, r3, #16
   83a64:	7913      	ldrb	r3, [r2, #4]
   83a66:	f36f 0382 	bfc	r3, #2, #1
   83a6a:	7113      	strb	r3, [r2, #4]
   83a6c:	e000      	b.n	83a70 <udd_ep_free+0x6c>
		return;
   83a6e:	bf00      	nop
}
   83a70:	3710      	adds	r7, #16
   83a72:	46bd      	mov	sp, r7
   83a74:	bd80      	pop	{r7, pc}
   83a76:	bf00      	nop
   83a78:	400a4000 	.word	0x400a4000
   83a7c:	00084841 	.word	0x00084841
   83a80:	200013fc 	.word	0x200013fc

00083a84 <udd_ep_is_halted>:


bool udd_ep_is_halted(udd_ep_id_t ep)
{
   83a84:	b480      	push	{r7}
   83a86:	b085      	sub	sp, #20
   83a88:	af00      	add	r7, sp, #0
   83a8a:	4603      	mov	r3, r0
   83a8c:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83a8e:	79fb      	ldrb	r3, [r7, #7]
   83a90:	f003 030f 	and.w	r3, r3, #15
   83a94:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   83a96:	7bfb      	ldrb	r3, [r7, #15]
   83a98:	1e5a      	subs	r2, r3, #1
   83a9a:	4613      	mov	r3, r2
   83a9c:	005b      	lsls	r3, r3, #1
   83a9e:	4413      	add	r3, r2
   83aa0:	00db      	lsls	r3, r3, #3
   83aa2:	4a10      	ldr	r2, [pc, #64]	; (83ae4 <udd_ep_is_halted+0x60>)
   83aa4:	4413      	add	r3, r2
   83aa6:	60bb      	str	r3, [r7, #8]
	return (Is_udd_endpoint_stall_requested(ep_index)
   83aa8:	4a0f      	ldr	r2, [pc, #60]	; (83ae8 <udd_ep_is_halted+0x64>)
   83aaa:	7bfb      	ldrb	r3, [r7, #15]
   83aac:	015b      	lsls	r3, r3, #5
   83aae:	4413      	add	r3, r2
   83ab0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83ab4:	681b      	ldr	r3, [r3, #0]
   83ab6:	f003 0320 	and.w	r3, r3, #32
			|| ptr_job->stall_requested);
   83aba:	2b00      	cmp	r3, #0
   83abc:	d106      	bne.n	83acc <udd_ep_is_halted+0x48>
   83abe:	68bb      	ldr	r3, [r7, #8]
   83ac0:	7d1b      	ldrb	r3, [r3, #20]
   83ac2:	f003 0304 	and.w	r3, r3, #4
   83ac6:	b2db      	uxtb	r3, r3
   83ac8:	2b00      	cmp	r3, #0
   83aca:	d001      	beq.n	83ad0 <udd_ep_is_halted+0x4c>
   83acc:	2301      	movs	r3, #1
   83ace:	e000      	b.n	83ad2 <udd_ep_is_halted+0x4e>
   83ad0:	2300      	movs	r3, #0
   83ad2:	f003 0301 	and.w	r3, r3, #1
   83ad6:	b2db      	uxtb	r3, r3
}
   83ad8:	4618      	mov	r0, r3
   83ada:	3714      	adds	r7, #20
   83adc:	46bd      	mov	sp, r7
   83ade:	bc80      	pop	{r7}
   83ae0:	4770      	bx	lr
   83ae2:	bf00      	nop
   83ae4:	200013fc 	.word	0x200013fc
   83ae8:	400a4000 	.word	0x400a4000

00083aec <udd_ep_set_halt>:


bool udd_ep_set_halt(udd_ep_id_t ep)
{
   83aec:	b480      	push	{r7}
   83aee:	b085      	sub	sp, #20
   83af0:	af00      	add	r7, sp, #0
   83af2:	4603      	mov	r3, r0
   83af4:	71fb      	strb	r3, [r7, #7]
	udd_ep_job_t *ptr_job;
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83af6:	79fb      	ldrb	r3, [r7, #7]
   83af8:	f003 030f 	and.w	r3, r3, #15
   83afc:	73fb      	strb	r3, [r7, #15]

	if (USB_DEVICE_MAX_EP < ep_index) {
   83afe:	7bfb      	ldrb	r3, [r7, #15]
   83b00:	2b02      	cmp	r3, #2
   83b02:	d901      	bls.n	83b08 <udd_ep_set_halt+0x1c>
		return false;
   83b04:	2300      	movs	r3, #0
   83b06:	e071      	b.n	83bec <udd_ep_set_halt+0x100>
	}

	ptr_job = &udd_ep_job[ep_index - 1];
   83b08:	7bfb      	ldrb	r3, [r7, #15]
   83b0a:	1e5a      	subs	r2, r3, #1
   83b0c:	4613      	mov	r3, r2
   83b0e:	005b      	lsls	r3, r3, #1
   83b10:	4413      	add	r3, r2
   83b12:	00db      	lsls	r3, r3, #3
   83b14:	4a38      	ldr	r2, [pc, #224]	; (83bf8 <udd_ep_set_halt+0x10c>)
   83b16:	4413      	add	r3, r2
   83b18:	60bb      	str	r3, [r7, #8]

	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   83b1a:	4a38      	ldr	r2, [pc, #224]	; (83bfc <udd_ep_set_halt+0x110>)
   83b1c:	7bfb      	ldrb	r3, [r7, #15]
   83b1e:	015b      	lsls	r3, r3, #5
   83b20:	4413      	add	r3, r2
   83b22:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83b26:	681b      	ldr	r3, [r3, #0]
   83b28:	f003 0320 	and.w	r3, r3, #32
   83b2c:	2b00      	cmp	r3, #0
   83b2e:	d106      	bne.n	83b3e <udd_ep_set_halt+0x52>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   83b30:	68bb      	ldr	r3, [r7, #8]
   83b32:	7d1b      	ldrb	r3, [r3, #20]
   83b34:	f003 0304 	and.w	r3, r3, #4
   83b38:	b2db      	uxtb	r3, r3
   83b3a:	2b00      	cmp	r3, #0
   83b3c:	d001      	beq.n	83b42 <udd_ep_set_halt+0x56>
		return true; // Already STALL
   83b3e:	2301      	movs	r3, #1
   83b40:	e054      	b.n	83bec <udd_ep_set_halt+0x100>
	}

	if (ptr_job->busy == true) {
   83b42:	68bb      	ldr	r3, [r7, #8]
   83b44:	7d1b      	ldrb	r3, [r3, #20]
   83b46:	f003 0301 	and.w	r3, r3, #1
   83b4a:	b2db      	uxtb	r3, r3
   83b4c:	2b00      	cmp	r3, #0
   83b4e:	d001      	beq.n	83b54 <udd_ep_set_halt+0x68>
		return false; // Job on going, stall impossible
   83b50:	2300      	movs	r3, #0
   83b52:	e04b      	b.n	83bec <udd_ep_set_halt+0x100>
	}

	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   83b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83b58:	2b00      	cmp	r3, #0
   83b5a:	da25      	bge.n	83ba8 <udd_ep_set_halt+0xbc>
   83b5c:	4a27      	ldr	r2, [pc, #156]	; (83bfc <udd_ep_set_halt+0x110>)
   83b5e:	7bfb      	ldrb	r3, [r7, #15]
   83b60:	015b      	lsls	r3, r3, #5
   83b62:	4413      	add	r3, r2
   83b64:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83b68:	681b      	ldr	r3, [r3, #0]
   83b6a:	0c9b      	lsrs	r3, r3, #18
   83b6c:	f003 0303 	and.w	r3, r3, #3
   83b70:	2b00      	cmp	r3, #0
   83b72:	d019      	beq.n	83ba8 <udd_ep_set_halt+0xbc>
			// Delay the stall after the end of IN transfer on USB line
			ptr_job->stall_requested = true;
   83b74:	68ba      	ldr	r2, [r7, #8]
   83b76:	7d13      	ldrb	r3, [r2, #20]
   83b78:	f043 0304 	orr.w	r3, r3, #4
   83b7c:	7513      	strb	r3, [r2, #20]
			udd_enable_bank_interrupt(ep_index);
   83b7e:	4a1f      	ldr	r2, [pc, #124]	; (83bfc <udd_ep_set_halt+0x110>)
   83b80:	7bfb      	ldrb	r3, [r7, #15]
   83b82:	3308      	adds	r3, #8
   83b84:	015b      	lsls	r3, r3, #5
   83b86:	4413      	add	r3, r2
   83b88:	3304      	adds	r3, #4
   83b8a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   83b8e:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep_index);
   83b90:	4b1a      	ldr	r3, [pc, #104]	; (83bfc <udd_ep_set_halt+0x110>)
   83b92:	691a      	ldr	r2, [r3, #16]
   83b94:	7bfb      	ldrb	r3, [r7, #15]
   83b96:	f44f 7180 	mov.w	r1, #256	; 0x100
   83b9a:	fa01 f303 	lsl.w	r3, r1, r3
   83b9e:	4917      	ldr	r1, [pc, #92]	; (83bfc <udd_ep_set_halt+0x110>)
   83ba0:	4313      	orrs	r3, r2
   83ba2:	610b      	str	r3, [r1, #16]
			dbg_print("<reqHalt%x> ", ep);
			return true;
   83ba4:	2301      	movs	r3, #1
   83ba6:	e021      	b.n	83bec <udd_ep_set_halt+0x100>
	}

	// Stall endpoint immediately
	udd_disable_endpoint_bank_autoswitch(ep_index);
   83ba8:	4a14      	ldr	r2, [pc, #80]	; (83bfc <udd_ep_set_halt+0x110>)
   83baa:	7bfb      	ldrb	r3, [r7, #15]
   83bac:	015b      	lsls	r3, r3, #5
   83bae:	4413      	add	r3, r2
   83bb0:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83bb4:	681a      	ldr	r2, [r3, #0]
   83bb6:	4911      	ldr	r1, [pc, #68]	; (83bfc <udd_ep_set_halt+0x110>)
   83bb8:	7bfb      	ldrb	r3, [r7, #15]
   83bba:	f022 0202 	bic.w	r2, r2, #2
   83bbe:	015b      	lsls	r3, r3, #5
   83bc0:	440b      	add	r3, r1
   83bc2:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83bc6:	601a      	str	r2, [r3, #0]
	udd_ack_stall(ep_index);
   83bc8:	4a0c      	ldr	r2, [pc, #48]	; (83bfc <udd_ep_set_halt+0x110>)
   83bca:	7bfb      	ldrb	r3, [r7, #15]
   83bcc:	015b      	lsls	r3, r3, #5
   83bce:	4413      	add	r3, r2
   83bd0:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83bd4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83bd8:	601a      	str	r2, [r3, #0]
	udd_enable_stall_handshake(ep_index);
   83bda:	4a08      	ldr	r2, [pc, #32]	; (83bfc <udd_ep_set_halt+0x110>)
   83bdc:	7bfb      	ldrb	r3, [r7, #15]
   83bde:	015b      	lsls	r3, r3, #5
   83be0:	4413      	add	r3, r2
   83be2:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83be6:	2220      	movs	r2, #32
   83be8:	601a      	str	r2, [r3, #0]
	dbg_print("<Halt%x> ", ep);
	return true;
   83bea:	2301      	movs	r3, #1
}
   83bec:	4618      	mov	r0, r3
   83bee:	3714      	adds	r7, #20
   83bf0:	46bd      	mov	sp, r7
   83bf2:	bc80      	pop	{r7}
   83bf4:	4770      	bx	lr
   83bf6:	bf00      	nop
   83bf8:	200013fc 	.word	0x200013fc
   83bfc:	400a4000 	.word	0x400a4000

00083c00 <udd_ep_clear_halt>:


bool udd_ep_clear_halt(udd_ep_id_t ep)
{
   83c00:	b580      	push	{r7, lr}
   83c02:	b084      	sub	sp, #16
   83c04:	af00      	add	r7, sp, #0
   83c06:	4603      	mov	r3, r0
   83c08:	71fb      	strb	r3, [r7, #7]
	bool b_stall_cleared = false;
   83c0a:	2300      	movs	r3, #0
   83c0c:	73fb      	strb	r3, [r7, #15]
	udd_ep_job_t *ptr_job;

	ep &= USB_EP_ADDR_MASK;
   83c0e:	79fb      	ldrb	r3, [r7, #7]
   83c10:	f003 030f 	and.w	r3, r3, #15
   83c14:	71fb      	strb	r3, [r7, #7]
	if (USB_DEVICE_MAX_EP < ep)
   83c16:	79fb      	ldrb	r3, [r7, #7]
   83c18:	2b02      	cmp	r3, #2
   83c1a:	d901      	bls.n	83c20 <udd_ep_clear_halt+0x20>
		return false;
   83c1c:	2300      	movs	r3, #0
   83c1e:	e07e      	b.n	83d1e <udd_ep_clear_halt+0x11e>
	ptr_job = &udd_ep_job[ep - 1];
   83c20:	79fb      	ldrb	r3, [r7, #7]
   83c22:	1e5a      	subs	r2, r3, #1
   83c24:	4613      	mov	r3, r2
   83c26:	005b      	lsls	r3, r3, #1
   83c28:	4413      	add	r3, r2
   83c2a:	00db      	lsls	r3, r3, #3
   83c2c:	4a3e      	ldr	r2, [pc, #248]	; (83d28 <udd_ep_clear_halt+0x128>)
   83c2e:	4413      	add	r3, r2
   83c30:	60bb      	str	r3, [r7, #8]

	if (ptr_job->stall_requested) {
   83c32:	68bb      	ldr	r3, [r7, #8]
   83c34:	7d1b      	ldrb	r3, [r3, #20]
   83c36:	f003 0304 	and.w	r3, r3, #4
   83c3a:	b2db      	uxtb	r3, r3
   83c3c:	2b00      	cmp	r3, #0
   83c3e:	d01a      	beq.n	83c76 <udd_ep_clear_halt+0x76>
		// Endpoint stall has been requested but not done
		// Remove stall request
		dbg_print("<unWHalt%x> ", ep);
		ptr_job->stall_requested = false;
   83c40:	68ba      	ldr	r2, [r7, #8]
   83c42:	7d13      	ldrb	r3, [r2, #20]
   83c44:	f36f 0382 	bfc	r3, #2, #1
   83c48:	7513      	strb	r3, [r2, #20]
		udd_disable_bank_interrupt(ep);
   83c4a:	4a38      	ldr	r2, [pc, #224]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83c4c:	79fb      	ldrb	r3, [r7, #7]
   83c4e:	015b      	lsls	r3, r3, #5
   83c50:	4413      	add	r3, r2
   83c52:	f503 7384 	add.w	r3, r3, #264	; 0x108
   83c56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   83c5a:	601a      	str	r2, [r3, #0]
		udd_disable_endpoint_interrupt(ep);
   83c5c:	4b33      	ldr	r3, [pc, #204]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83c5e:	691a      	ldr	r2, [r3, #16]
   83c60:	79fb      	ldrb	r3, [r7, #7]
   83c62:	f44f 7180 	mov.w	r1, #256	; 0x100
   83c66:	fa01 f303 	lsl.w	r3, r1, r3
   83c6a:	43db      	mvns	r3, r3
   83c6c:	492f      	ldr	r1, [pc, #188]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83c6e:	4013      	ands	r3, r2
   83c70:	610b      	str	r3, [r1, #16]
		b_stall_cleared = true;
   83c72:	2301      	movs	r3, #1
   83c74:	73fb      	strb	r3, [r7, #15]
	}
	if (Is_udd_endpoint_stall_requested(ep)) {
   83c76:	4a2d      	ldr	r2, [pc, #180]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83c78:	79fb      	ldrb	r3, [r7, #7]
   83c7a:	015b      	lsls	r3, r3, #5
   83c7c:	4413      	add	r3, r2
   83c7e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83c82:	681b      	ldr	r3, [r3, #0]
   83c84:	f003 0320 	and.w	r3, r3, #32
   83c88:	2b00      	cmp	r3, #0
   83c8a:	d035      	beq.n	83cf8 <udd_ep_clear_halt+0xf8>
		dbg_print("<unHalt%x> ", ep);
		if (Is_udd_stall(ep)) {
   83c8c:	4a27      	ldr	r2, [pc, #156]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83c8e:	79fb      	ldrb	r3, [r7, #7]
   83c90:	015b      	lsls	r3, r3, #5
   83c92:	4413      	add	r3, r2
   83c94:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83c98:	681b      	ldr	r3, [r3, #0]
   83c9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   83c9e:	2b00      	cmp	r3, #0
   83ca0:	d010      	beq.n	83cc4 <udd_ep_clear_halt+0xc4>
			udd_ack_stall(ep);
   83ca2:	4a22      	ldr	r2, [pc, #136]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83ca4:	79fb      	ldrb	r3, [r7, #7]
   83ca6:	015b      	lsls	r3, r3, #5
   83ca8:	4413      	add	r3, r2
   83caa:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83cae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   83cb2:	601a      	str	r2, [r3, #0]
			// A packet has been stalled
			// then reset datatoggle
			udd_reset_data_toggle(ep);
   83cb4:	4a1d      	ldr	r2, [pc, #116]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83cb6:	79fb      	ldrb	r3, [r7, #7]
   83cb8:	015b      	lsls	r3, r3, #5
   83cba:	4413      	add	r3, r2
   83cbc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83cc0:	2240      	movs	r2, #64	; 0x40
   83cc2:	601a      	str	r2, [r3, #0]
		}
		// Disable stall
		udd_disable_stall_handshake(ep);
   83cc4:	4a19      	ldr	r2, [pc, #100]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83cc6:	79fb      	ldrb	r3, [r7, #7]
   83cc8:	015b      	lsls	r3, r3, #5
   83cca:	4413      	add	r3, r2
   83ccc:	f503 738c 	add.w	r3, r3, #280	; 0x118
   83cd0:	2220      	movs	r2, #32
   83cd2:	601a      	str	r2, [r3, #0]
		udd_enable_endpoint_bank_autoswitch(ep);
   83cd4:	4a15      	ldr	r2, [pc, #84]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83cd6:	79fb      	ldrb	r3, [r7, #7]
   83cd8:	3308      	adds	r3, #8
   83cda:	015b      	lsls	r3, r3, #5
   83cdc:	4413      	add	r3, r2
   83cde:	3304      	adds	r3, #4
   83ce0:	681a      	ldr	r2, [r3, #0]
   83ce2:	4912      	ldr	r1, [pc, #72]	; (83d2c <udd_ep_clear_halt+0x12c>)
   83ce4:	79fb      	ldrb	r3, [r7, #7]
   83ce6:	f042 0202 	orr.w	r2, r2, #2
   83cea:	3308      	adds	r3, #8
   83cec:	015b      	lsls	r3, r3, #5
   83cee:	440b      	add	r3, r1
   83cf0:	3304      	adds	r3, #4
   83cf2:	601a      	str	r2, [r3, #0]
		b_stall_cleared = true;
   83cf4:	2301      	movs	r3, #1
   83cf6:	73fb      	strb	r3, [r7, #15]
	}
	if (b_stall_cleared) {
   83cf8:	7bfb      	ldrb	r3, [r7, #15]
   83cfa:	2b00      	cmp	r3, #0
   83cfc:	d00e      	beq.n	83d1c <udd_ep_clear_halt+0x11c>
		// If a job is register on clear halt action
		// then execute callback
		if (ptr_job->busy == true) {
   83cfe:	68bb      	ldr	r3, [r7, #8]
   83d00:	7d1b      	ldrb	r3, [r3, #20]
   83d02:	f003 0301 	and.w	r3, r3, #1
   83d06:	b2db      	uxtb	r3, r3
   83d08:	2b00      	cmp	r3, #0
   83d0a:	d007      	beq.n	83d1c <udd_ep_clear_halt+0x11c>
			ptr_job->busy = false;
   83d0c:	68ba      	ldr	r2, [r7, #8]
   83d0e:	7d13      	ldrb	r3, [r2, #20]
   83d10:	f36f 0300 	bfc	r3, #0, #1
   83d14:	7513      	strb	r3, [r2, #20]
			ptr_job->call_nohalt();
   83d16:	68bb      	ldr	r3, [r7, #8]
   83d18:	681b      	ldr	r3, [r3, #0]
   83d1a:	4798      	blx	r3
		}
	}
	return true;
   83d1c:	2301      	movs	r3, #1
}
   83d1e:	4618      	mov	r0, r3
   83d20:	3710      	adds	r7, #16
   83d22:	46bd      	mov	sp, r7
   83d24:	bd80      	pop	{r7, pc}
   83d26:	bf00      	nop
   83d28:	200013fc 	.word	0x200013fc
   83d2c:	400a4000 	.word	0x400a4000

00083d30 <udd_ep_run>:


bool udd_ep_run(udd_ep_id_t ep, bool b_shortpacket,
		uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83d30:	b580      	push	{r7, lr}
   83d32:	b086      	sub	sp, #24
   83d34:	af00      	add	r7, sp, #0
   83d36:	60ba      	str	r2, [r7, #8]
   83d38:	607b      	str	r3, [r7, #4]
   83d3a:	4603      	mov	r3, r0
   83d3c:	73fb      	strb	r3, [r7, #15]
   83d3e:	460b      	mov	r3, r1
   83d40:	73bb      	strb	r3, [r7, #14]
	udd_ep_job_t *ptr_job;
	irqflags_t flags;

	ep &= USB_EP_ADDR_MASK;
   83d42:	7bfb      	ldrb	r3, [r7, #15]
   83d44:	f003 030f 	and.w	r3, r3, #15
   83d48:	73fb      	strb	r3, [r7, #15]
	if (USB_DEVICE_MAX_EP < ep) {
   83d4a:	7bfb      	ldrb	r3, [r7, #15]
   83d4c:	2b02      	cmp	r3, #2
   83d4e:	d901      	bls.n	83d54 <udd_ep_run+0x24>
		return false;
   83d50:	2300      	movs	r3, #0
   83d52:	e063      	b.n	83e1c <udd_ep_run+0xec>
	}

	// Get job about endpoint
	ptr_job = &udd_ep_job[ep - 1];
   83d54:	7bfb      	ldrb	r3, [r7, #15]
   83d56:	1e5a      	subs	r2, r3, #1
   83d58:	4613      	mov	r3, r2
   83d5a:	005b      	lsls	r3, r3, #1
   83d5c:	4413      	add	r3, r2
   83d5e:	00db      	lsls	r3, r3, #3
   83d60:	4a30      	ldr	r2, [pc, #192]	; (83e24 <udd_ep_run+0xf4>)
   83d62:	4413      	add	r3, r2
   83d64:	617b      	str	r3, [r7, #20]

	if ((!Is_udd_endpoint_enabled(ep))
   83d66:	4a30      	ldr	r2, [pc, #192]	; (83e28 <udd_ep_run+0xf8>)
   83d68:	7bfb      	ldrb	r3, [r7, #15]
   83d6a:	015b      	lsls	r3, r3, #5
   83d6c:	4413      	add	r3, r2
   83d6e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   83d72:	681b      	ldr	r3, [r3, #0]
   83d74:	f003 0301 	and.w	r3, r3, #1
   83d78:	2b00      	cmp	r3, #0
   83d7a:	d011      	beq.n	83da0 <udd_ep_run+0x70>
			|| Is_udd_endpoint_stall_requested(ep)
   83d7c:	4a2a      	ldr	r2, [pc, #168]	; (83e28 <udd_ep_run+0xf8>)
   83d7e:	7bfb      	ldrb	r3, [r7, #15]
   83d80:	015b      	lsls	r3, r3, #5
   83d82:	4413      	add	r3, r2
   83d84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83d88:	681b      	ldr	r3, [r3, #0]
   83d8a:	f003 0320 	and.w	r3, r3, #32
   83d8e:	2b00      	cmp	r3, #0
   83d90:	d106      	bne.n	83da0 <udd_ep_run+0x70>
			|| ptr_job->stall_requested) {
   83d92:	697b      	ldr	r3, [r7, #20]
   83d94:	7d1b      	ldrb	r3, [r3, #20]
   83d96:	f003 0304 	and.w	r3, r3, #4
   83d9a:	b2db      	uxtb	r3, r3
   83d9c:	2b00      	cmp	r3, #0
   83d9e:	d001      	beq.n	83da4 <udd_ep_run+0x74>
		return false; // Endpoint is halted
   83da0:	2300      	movs	r3, #0
   83da2:	e03b      	b.n	83e1c <udd_ep_run+0xec>
	}

	flags = cpu_irq_save();
   83da4:	4b21      	ldr	r3, [pc, #132]	; (83e2c <udd_ep_run+0xfc>)
   83da6:	4798      	blx	r3
   83da8:	6138      	str	r0, [r7, #16]
	if (ptr_job->busy == true) {
   83daa:	697b      	ldr	r3, [r7, #20]
   83dac:	7d1b      	ldrb	r3, [r3, #20]
   83dae:	f003 0301 	and.w	r3, r3, #1
   83db2:	b2db      	uxtb	r3, r3
   83db4:	2b00      	cmp	r3, #0
   83db6:	d004      	beq.n	83dc2 <udd_ep_run+0x92>
		cpu_irq_restore(flags);
   83db8:	6938      	ldr	r0, [r7, #16]
   83dba:	4b1d      	ldr	r3, [pc, #116]	; (83e30 <udd_ep_run+0x100>)
   83dbc:	4798      	blx	r3
		return false; // Job already on going
   83dbe:	2300      	movs	r3, #0
   83dc0:	e02c      	b.n	83e1c <udd_ep_run+0xec>
	}
	ptr_job->busy = true;
   83dc2:	697a      	ldr	r2, [r7, #20]
   83dc4:	7d13      	ldrb	r3, [r2, #20]
   83dc6:	f043 0301 	orr.w	r3, r3, #1
   83dca:	7513      	strb	r3, [r2, #20]
	cpu_irq_restore(flags);
   83dcc:	6938      	ldr	r0, [r7, #16]
   83dce:	4b18      	ldr	r3, [pc, #96]	; (83e30 <udd_ep_run+0x100>)
   83dd0:	4798      	blx	r3

	// No job running. Let's setup a new one.
	ptr_job->buf = buf;
   83dd2:	697b      	ldr	r3, [r7, #20]
   83dd4:	68ba      	ldr	r2, [r7, #8]
   83dd6:	605a      	str	r2, [r3, #4]
	ptr_job->buf_size = buf_size;
   83dd8:	697b      	ldr	r3, [r7, #20]
   83dda:	687a      	ldr	r2, [r7, #4]
   83ddc:	609a      	str	r2, [r3, #8]
	ptr_job->buf_cnt = 0;
   83dde:	697b      	ldr	r3, [r7, #20]
   83de0:	2200      	movs	r2, #0
   83de2:	60da      	str	r2, [r3, #12]
	ptr_job->buf_load = 0;
   83de4:	697b      	ldr	r3, [r7, #20]
   83de6:	2200      	movs	r2, #0
   83de8:	611a      	str	r2, [r3, #16]
	ptr_job->call_trans = callback;
   83dea:	697b      	ldr	r3, [r7, #20]
   83dec:	6a3a      	ldr	r2, [r7, #32]
   83dee:	601a      	str	r2, [r3, #0]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   83df0:	7bbb      	ldrb	r3, [r7, #14]
   83df2:	2b00      	cmp	r3, #0
   83df4:	d102      	bne.n	83dfc <udd_ep_run+0xcc>
   83df6:	687b      	ldr	r3, [r7, #4]
   83df8:	2b00      	cmp	r3, #0
   83dfa:	d101      	bne.n	83e00 <udd_ep_run+0xd0>
   83dfc:	2301      	movs	r3, #1
   83dfe:	e000      	b.n	83e02 <udd_ep_run+0xd2>
   83e00:	2300      	movs	r3, #0
   83e02:	f003 0301 	and.w	r3, r3, #1
   83e06:	b2d9      	uxtb	r1, r3
   83e08:	697a      	ldr	r2, [r7, #20]
   83e0a:	7d13      	ldrb	r3, [r2, #20]
   83e0c:	f361 0341 	bfi	r3, r1, #1, #1
   83e10:	7513      	strb	r3, [r2, #20]

	// Request first DMA transfer
	//dbg_print("runDMA%d\n\r", ep);
	udd_ep_trans_done(ep);
   83e12:	7bfb      	ldrb	r3, [r7, #15]
   83e14:	4618      	mov	r0, r3
   83e16:	4b07      	ldr	r3, [pc, #28]	; (83e34 <udd_ep_run+0x104>)
   83e18:	4798      	blx	r3
	return true;
   83e1a:	2301      	movs	r3, #1
}
   83e1c:	4618      	mov	r0, r3
   83e1e:	3718      	adds	r7, #24
   83e20:	46bd      	mov	sp, r7
   83e22:	bd80      	pop	{r7, pc}
   83e24:	200013fc 	.word	0x200013fc
   83e28:	400a4000 	.word	0x400a4000
   83e2c:	000830b1 	.word	0x000830b1
   83e30:	0008310d 	.word	0x0008310d
   83e34:	000848ed 	.word	0x000848ed

00083e38 <udd_ep_abort>:


void udd_ep_abort(udd_ep_id_t ep)
{
   83e38:	b580      	push	{r7, lr}
   83e3a:	b084      	sub	sp, #16
   83e3c:	af00      	add	r7, sp, #0
   83e3e:	4603      	mov	r3, r0
   83e40:	71fb      	strb	r3, [r7, #7]
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   83e42:	79fb      	ldrb	r3, [r7, #7]
   83e44:	f003 030f 	and.w	r3, r3, #15
   83e48:	73fb      	strb	r3, [r7, #15]
	// Stop DMA transfer
	udd_endpoint_dma_set_control(ep_index, 0);
   83e4a:	7bfb      	ldrb	r3, [r7, #15]
   83e4c:	011a      	lsls	r2, r3, #4
   83e4e:	4b19      	ldr	r3, [pc, #100]	; (83eb4 <udd_ep_abort+0x7c>)
   83e50:	4413      	add	r3, r2
   83e52:	2200      	movs	r2, #0
   83e54:	609a      	str	r2, [r3, #8]
	// Kill banks for IN
	if (ep & USB_EP_DIR_IN) {
   83e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
   83e5a:	2b00      	cmp	r3, #0
   83e5c:	da21      	bge.n	83ea2 <udd_ep_abort+0x6a>
		for(;udd_nb_busy_bank(ep_index);) {
   83e5e:	e014      	b.n	83e8a <udd_ep_abort+0x52>
			udd_kill_last_in_bank(ep_index);
   83e60:	4a15      	ldr	r2, [pc, #84]	; (83eb8 <udd_ep_abort+0x80>)
   83e62:	7bfb      	ldrb	r3, [r7, #15]
   83e64:	015b      	lsls	r3, r3, #5
   83e66:	4413      	add	r3, r2
   83e68:	f503 738a 	add.w	r3, r3, #276	; 0x114
   83e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
   83e70:	601a      	str	r2, [r3, #0]
			while(Is_udd_kill_last(ep_index));
   83e72:	bf00      	nop
   83e74:	4a10      	ldr	r2, [pc, #64]	; (83eb8 <udd_ep_abort+0x80>)
   83e76:	7bfb      	ldrb	r3, [r7, #15]
   83e78:	015b      	lsls	r3, r3, #5
   83e7a:	4413      	add	r3, r2
   83e7c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83e80:	681b      	ldr	r3, [r3, #0]
   83e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
   83e86:	2b00      	cmp	r3, #0
   83e88:	d1f4      	bne.n	83e74 <udd_ep_abort+0x3c>
		for(;udd_nb_busy_bank(ep_index);) {
   83e8a:	4a0b      	ldr	r2, [pc, #44]	; (83eb8 <udd_ep_abort+0x80>)
   83e8c:	7bfb      	ldrb	r3, [r7, #15]
   83e8e:	015b      	lsls	r3, r3, #5
   83e90:	4413      	add	r3, r2
   83e92:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   83e96:	681b      	ldr	r3, [r3, #0]
   83e98:	0c9b      	lsrs	r3, r3, #18
   83e9a:	f003 0303 	and.w	r3, r3, #3
   83e9e:	2b00      	cmp	r3, #0
   83ea0:	d1de      	bne.n	83e60 <udd_ep_abort+0x28>
		}
	}
	udd_ep_abort_job(ep);
   83ea2:	79fb      	ldrb	r3, [r7, #7]
   83ea4:	4618      	mov	r0, r3
   83ea6:	4b05      	ldr	r3, [pc, #20]	; (83ebc <udd_ep_abort+0x84>)
   83ea8:	4798      	blx	r3
}
   83eaa:	bf00      	nop
   83eac:	3710      	adds	r7, #16
   83eae:	46bd      	mov	sp, r7
   83eb0:	bd80      	pop	{r7, pc}
   83eb2:	bf00      	nop
   83eb4:	400a4300 	.word	0x400a4300
   83eb8:	400a4000 	.word	0x400a4000
   83ebc:	00084841 	.word	0x00084841

00083ec0 <udd_test_mode_j>:


#ifdef USB_DEVICE_HS_SUPPORT

void udd_test_mode_j(void)
{
   83ec0:	b480      	push	{r7}
   83ec2:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   83ec4:	4b0a      	ldr	r3, [pc, #40]	; (83ef0 <udd_test_mode_j+0x30>)
   83ec6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83eca:	f023 0303 	bic.w	r3, r3, #3
   83ece:	4a08      	ldr	r2, [pc, #32]	; (83ef0 <udd_test_mode_j+0x30>)
   83ed0:	f043 0302 	orr.w	r3, r3, #2
   83ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_j();
   83ed8:	4b05      	ldr	r3, [pc, #20]	; (83ef0 <udd_test_mode_j+0x30>)
   83eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83ede:	4a04      	ldr	r2, [pc, #16]	; (83ef0 <udd_test_mode_j+0x30>)
   83ee0:	f043 0304 	orr.w	r3, r3, #4
   83ee4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   83ee8:	bf00      	nop
   83eea:	46bd      	mov	sp, r7
   83eec:	bc80      	pop	{r7}
   83eee:	4770      	bx	lr
   83ef0:	400a4000 	.word	0x400a4000

00083ef4 <udd_test_mode_k>:


void udd_test_mode_k(void)
{
   83ef4:	b480      	push	{r7}
   83ef6:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   83ef8:	4b0a      	ldr	r3, [pc, #40]	; (83f24 <udd_test_mode_k+0x30>)
   83efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83efe:	f023 0303 	bic.w	r3, r3, #3
   83f02:	4a08      	ldr	r2, [pc, #32]	; (83f24 <udd_test_mode_k+0x30>)
   83f04:	f043 0302 	orr.w	r3, r3, #2
   83f08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_k();
   83f0c:	4b05      	ldr	r3, [pc, #20]	; (83f24 <udd_test_mode_k+0x30>)
   83f0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83f12:	4a04      	ldr	r2, [pc, #16]	; (83f24 <udd_test_mode_k+0x30>)
   83f14:	f043 0308 	orr.w	r3, r3, #8
   83f18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   83f1c:	bf00      	nop
   83f1e:	46bd      	mov	sp, r7
   83f20:	bc80      	pop	{r7}
   83f22:	4770      	bx	lr
   83f24:	400a4000 	.word	0x400a4000

00083f28 <udd_test_mode_se0_nak>:


void udd_test_mode_se0_nak(void)
{
   83f28:	b480      	push	{r7}
   83f2a:	af00      	add	r7, sp, #0
	udd_enable_hs_test_mode();
   83f2c:	4b06      	ldr	r3, [pc, #24]	; (83f48 <udd_test_mode_se0_nak+0x20>)
   83f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83f32:	f023 0303 	bic.w	r3, r3, #3
   83f36:	4a04      	ldr	r2, [pc, #16]	; (83f48 <udd_test_mode_se0_nak+0x20>)
   83f38:	f043 0302 	orr.w	r3, r3, #2
   83f3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
}
   83f40:	bf00      	nop
   83f42:	46bd      	mov	sp, r7
   83f44:	bc80      	pop	{r7}
   83f46:	4770      	bx	lr
   83f48:	400a4000 	.word	0x400a4000

00083f4c <udd_test_mode_packet>:


void udd_test_mode_packet(void)
{
   83f4c:	b4b0      	push	{r4, r5, r7}
   83f4e:	b093      	sub	sp, #76	; 0x4c
   83f50:	af00      	add	r7, sp, #0
	uint8_t i;
	uint8_t *ptr_dest;
	const uint8_t *ptr_src;

	const uint8_t test_packet[] = {
   83f52:	4b2e      	ldr	r3, [pc, #184]	; (8400c <udd_test_mode_packet+0xc0>)
   83f54:	1d3c      	adds	r4, r7, #4
   83f56:	461d      	mov	r5, r3
   83f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   83f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   83f64:	e895 0003 	ldmia.w	r5, {r0, r1}
   83f68:	6020      	str	r0, [r4, #0]
   83f6a:	3404      	adds	r4, #4
   83f6c:	7021      	strb	r1, [r4, #0]
		// 00111111, {S0111111 * 9}, S0
		0xFC, 0x7E, 0xBF, 0xDF, 0xEF, 0xF7, 0xFB, 0xFD, 0x7E
	};

	// Reconfigure control endpoint to bulk IN endpoint
	udd_disable_endpoint(0);
   83f6e:	4b28      	ldr	r3, [pc, #160]	; (84010 <udd_test_mode_packet+0xc4>)
   83f70:	2201      	movs	r2, #1
   83f72:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_configure_endpoint(0, // endpoint number: 0
   83f76:	4b26      	ldr	r3, [pc, #152]	; (84010 <udd_test_mode_packet+0xc4>)
   83f78:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   83f7c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   83f80:	f023 0303 	bic.w	r3, r3, #3
   83f84:	4a22      	ldr	r2, [pc, #136]	; (84010 <udd_test_mode_packet+0xc4>)
   83f86:	f043 036b 	orr.w	r3, r3, #107	; 0x6b
   83f8a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_EP_TYPE_BULK, // Type: bulk
			1, // dir: IN
			64, //Size
			1, // Bank Number
			0); // NB Trans (not used for bulk ept)
	udd_enable_endpoint(0);
   83f8e:	4b20      	ldr	r3, [pc, #128]	; (84010 <udd_test_mode_packet+0xc4>)
   83f90:	2201      	movs	r2, #1
   83f92:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

	udd_enable_hs_test_mode();
   83f96:	4b1e      	ldr	r3, [pc, #120]	; (84010 <udd_test_mode_packet+0xc4>)
   83f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83f9c:	f023 0303 	bic.w	r3, r3, #3
   83fa0:	4a1b      	ldr	r2, [pc, #108]	; (84010 <udd_test_mode_packet+0xc4>)
   83fa2:	f043 0302 	orr.w	r3, r3, #2
   83fa6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
	udd_enable_hs_test_mode_packet();
   83faa:	4b19      	ldr	r3, [pc, #100]	; (84010 <udd_test_mode_packet+0xc4>)
   83fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
   83fb0:	4a17      	ldr	r2, [pc, #92]	; (84010 <udd_test_mode_packet+0xc4>)
   83fb2:	f043 0310 	orr.w	r3, r3, #16
   83fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0

	// Send packet on endpoint 0
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83fba:	4b16      	ldr	r3, [pc, #88]	; (84014 <udd_test_mode_packet+0xc8>)
   83fbc:	643b      	str	r3, [r7, #64]	; 0x40
	ptr_src = test_packet;
   83fbe:	1d3b      	adds	r3, r7, #4
   83fc0:	63fb      	str	r3, [r7, #60]	; 0x3c

	for (i = 0; i < sizeof(test_packet); i++) {
   83fc2:	2300      	movs	r3, #0
   83fc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   83fc8:	e00c      	b.n	83fe4 <udd_test_mode_packet+0x98>
		*ptr_dest++ = *ptr_src++;
   83fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
   83fcc:	1c53      	adds	r3, r2, #1
   83fce:	63fb      	str	r3, [r7, #60]	; 0x3c
   83fd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   83fd2:	1c59      	adds	r1, r3, #1
   83fd4:	6439      	str	r1, [r7, #64]	; 0x40
   83fd6:	7812      	ldrb	r2, [r2, #0]
   83fd8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   83fda:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   83fde:	3301      	adds	r3, #1
   83fe0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
   83fe4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
   83fe8:	2b34      	cmp	r3, #52	; 0x34
   83fea:	d9ee      	bls.n	83fca <udd_test_mode_packet+0x7e>
	}
	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   83fec:	4b08      	ldr	r3, [pc, #32]	; (84010 <udd_test_mode_packet+0xc4>)
   83fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
   83ff2:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   83ff6:	4b06      	ldr	r3, [pc, #24]	; (84010 <udd_test_mode_packet+0xc4>)
   83ff8:	f44f 6200 	mov.w	r2, #2048	; 0x800
   83ffc:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   84000:	bf00      	nop
   84002:	374c      	adds	r7, #76	; 0x4c
   84004:	46bd      	mov	sp, r7
   84006:	bcb0      	pop	{r4, r5, r7}
   84008:	4770      	bx	lr
   8400a:	bf00      	nop
   8400c:	0008d468 	.word	0x0008d468
   84010:	400a4000 	.word	0x400a4000
   84014:	20180000 	.word	0x20180000

00084018 <udd_reset_ep_ctrl>:

//--------------------------------------------------------
//--- INTERNAL ROUTINES TO MANAGED THE CONTROL ENDPOINT

static void udd_reset_ep_ctrl(void)
{
   84018:	b580      	push	{r7, lr}
   8401a:	b082      	sub	sp, #8
   8401c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	// Reset USB address to 0
	udd_configure_address(0);
   8401e:	4b1b      	ldr	r3, [pc, #108]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84020:	681b      	ldr	r3, [r3, #0]
   84022:	4a1a      	ldr	r2, [pc, #104]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84024:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84028:	6013      	str	r3, [r2, #0]
	udd_enable_address();
   8402a:	4b18      	ldr	r3, [pc, #96]	; (8408c <udd_reset_ep_ctrl+0x74>)
   8402c:	681b      	ldr	r3, [r3, #0]
   8402e:	4a17      	ldr	r2, [pc, #92]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   84034:	6013      	str	r3, [r2, #0]

	// Alloc and configure control endpoint
	udd_configure_endpoint(0,
   84036:	4b15      	ldr	r3, [pc, #84]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84038:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   8403c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   84040:	f023 0303 	bic.w	r3, r3, #3
   84044:	4a11      	ldr	r2, [pc, #68]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84046:	f043 0343 	orr.w	r3, r3, #67	; 0x43
   8404a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
			USB_DEVICE_EP_CTRL_SIZE,
			UDPHS_EPTCFG_BK_NUMBER_1 >> UDPHS_EPTCFG_BK_NUMBER_Pos,
			0);

	dbg_print("rst(0:%08x) ", UDPHS->UDPHS_EPT[0].UDPHS_EPTCFG);
	udd_enable_endpoint(0);
   8404e:	4b0f      	ldr	r3, [pc, #60]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84050:	2201      	movs	r2, #1
   84052:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	flags = cpu_irq_save();
   84056:	4b0e      	ldr	r3, [pc, #56]	; (84090 <udd_reset_ep_ctrl+0x78>)
   84058:	4798      	blx	r3
   8405a:	6078      	str	r0, [r7, #4]
	udd_enable_setup_received_interrupt(0);
   8405c:	4b0b      	ldr	r3, [pc, #44]	; (8408c <udd_reset_ep_ctrl+0x74>)
   8405e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84062:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_out_received_interrupt(0);
   84066:	4b09      	ldr	r3, [pc, #36]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84068:	f44f 7200 	mov.w	r2, #512	; 0x200
   8406c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	udd_enable_endpoint_interrupt(0);
   84070:	4b06      	ldr	r3, [pc, #24]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84072:	691b      	ldr	r3, [r3, #16]
   84074:	4a05      	ldr	r2, [pc, #20]	; (8408c <udd_reset_ep_ctrl+0x74>)
   84076:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   8407a:	6113      	str	r3, [r2, #16]
	cpu_irq_restore(flags);
   8407c:	6878      	ldr	r0, [r7, #4]
   8407e:	4b05      	ldr	r3, [pc, #20]	; (84094 <udd_reset_ep_ctrl+0x7c>)
   84080:	4798      	blx	r3
}
   84082:	bf00      	nop
   84084:	3708      	adds	r7, #8
   84086:	46bd      	mov	sp, r7
   84088:	bd80      	pop	{r7, pc}
   8408a:	bf00      	nop
   8408c:	400a4000 	.word	0x400a4000
   84090:	000830b1 	.word	0x000830b1
   84094:	0008310d 	.word	0x0008310d

00084098 <udd_ctrl_init>:

static void udd_ctrl_init(void)
{
   84098:	b580      	push	{r7, lr}
   8409a:	b082      	sub	sp, #8
   8409c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	dbg_print("ctlInit ");

	flags = cpu_irq_save();
   8409e:	4b10      	ldr	r3, [pc, #64]	; (840e0 <udd_ctrl_init+0x48>)
   840a0:	4798      	blx	r3
   840a2:	6078      	str	r0, [r7, #4]
	// In case of abort of IN Data Phase:
	// No need to abort IN transfer (rise TXINI),
	// because it is automatically done by hardware when a Setup packet is received.
	// But the interrupt must be disabled to don't generate interrupt TXINI
	// after SETUP reception.
	udd_disable_in_send_interrupt(0);
   840a4:	4b0f      	ldr	r3, [pc, #60]	; (840e4 <udd_ctrl_init+0x4c>)
   840a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
   840aa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   840ae:	6878      	ldr	r0, [r7, #4]
   840b0:	4b0d      	ldr	r3, [pc, #52]	; (840e8 <udd_ctrl_init+0x50>)
   840b2:	4798      	blx	r3

	// In case of OUT ZLP event is no processed before Setup event occurs
	udd_ack_out_received(0);
   840b4:	4b0b      	ldr	r3, [pc, #44]	; (840e4 <udd_ctrl_init+0x4c>)
   840b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   840ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	udd_g_ctrlreq.callback = NULL;
   840be:	4b0b      	ldr	r3, [pc, #44]	; (840ec <udd_ctrl_init+0x54>)
   840c0:	2200      	movs	r2, #0
   840c2:	611a      	str	r2, [r3, #16]
	udd_g_ctrlreq.over_under_run = NULL;
   840c4:	4b09      	ldr	r3, [pc, #36]	; (840ec <udd_ctrl_init+0x54>)
   840c6:	2200      	movs	r2, #0
   840c8:	615a      	str	r2, [r3, #20]
	udd_g_ctrlreq.payload_size = 0;
   840ca:	4b08      	ldr	r3, [pc, #32]	; (840ec <udd_ctrl_init+0x54>)
   840cc:	2200      	movs	r2, #0
   840ce:	819a      	strh	r2, [r3, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   840d0:	4b07      	ldr	r3, [pc, #28]	; (840f0 <udd_ctrl_init+0x58>)
   840d2:	2200      	movs	r2, #0
   840d4:	701a      	strb	r2, [r3, #0]
}
   840d6:	bf00      	nop
   840d8:	3708      	adds	r7, #8
   840da:	46bd      	mov	sp, r7
   840dc:	bd80      	pop	{r7, pc}
   840de:	bf00      	nop
   840e0:	000830b1 	.word	0x000830b1
   840e4:	400a4000 	.word	0x400a4000
   840e8:	0008310d 	.word	0x0008310d
   840ec:	200013dc 	.word	0x200013dc
   840f0:	200013f4 	.word	0x200013f4

000840f4 <udd_ctrl_setup_received>:


static void udd_ctrl_setup_received(void)
{
   840f4:	b580      	push	{r7, lr}
   840f6:	b084      	sub	sp, #16
   840f8:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;

	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   840fa:	4b40      	ldr	r3, [pc, #256]	; (841fc <udd_ctrl_setup_received+0x108>)
   840fc:	781b      	ldrb	r3, [r3, #0]
   840fe:	2b00      	cmp	r3, #0
   84100:	d003      	beq.n	8410a <udd_ctrl_setup_received+0x16>
		dbg_print("sErr ");
		// May be a hidden DATA or ZLP phase
		// or protocol abort
		udd_ctrl_endofrequest();
   84102:	4b3f      	ldr	r3, [pc, #252]	; (84200 <udd_ctrl_setup_received+0x10c>)
   84104:	4798      	blx	r3

		// Reinitializes control endpoint management
		udd_ctrl_init();
   84106:	4b3f      	ldr	r3, [pc, #252]	; (84204 <udd_ctrl_setup_received+0x110>)
   84108:	4798      	blx	r3
	}
	// Fill setup request structure
	if (8 != udd_byte_count(0)) {
   8410a:	4b3f      	ldr	r3, [pc, #252]	; (84208 <udd_ctrl_setup_received+0x114>)
   8410c:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84110:	0d1b      	lsrs	r3, r3, #20
   84112:	f3c3 030a 	ubfx	r3, r3, #0, #11
   84116:	2b08      	cmp	r3, #8
   84118:	d007      	beq.n	8412a <udd_ctrl_setup_received+0x36>
		dbg_print("cntErr ");
		udd_ctrl_stall_data();
   8411a:	4b3c      	ldr	r3, [pc, #240]	; (8420c <udd_ctrl_setup_received+0x118>)
   8411c:	4798      	blx	r3
		udd_ack_setup_received(0);
   8411e:	4b3a      	ldr	r3, [pc, #232]	; (84208 <udd_ctrl_setup_received+0x114>)
   84120:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84124:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return; // Error data number doesn't correspond to SETUP packet
   84128:	e064      	b.n	841f4 <udd_ctrl_setup_received+0x100>
	}

	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8412a:	4b39      	ldr	r3, [pc, #228]	; (84210 <udd_ctrl_setup_received+0x11c>)
   8412c:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
   8412e:	2300      	movs	r3, #0
   84130:	73fb      	strb	r3, [r7, #15]
   84132:	e00a      	b.n	8414a <udd_ctrl_setup_received+0x56>
		((uint8_t *) & udd_g_ctrlreq.req)[i] = *ptr++;
   84134:	68bb      	ldr	r3, [r7, #8]
   84136:	1c5a      	adds	r2, r3, #1
   84138:	60ba      	str	r2, [r7, #8]
   8413a:	7bfa      	ldrb	r2, [r7, #15]
   8413c:	4935      	ldr	r1, [pc, #212]	; (84214 <udd_ctrl_setup_received+0x120>)
   8413e:	440a      	add	r2, r1
   84140:	781b      	ldrb	r3, [r3, #0]
   84142:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < 8; i++) {
   84144:	7bfb      	ldrb	r3, [r7, #15]
   84146:	3301      	adds	r3, #1
   84148:	73fb      	strb	r3, [r7, #15]
   8414a:	7bfb      	ldrb	r3, [r7, #15]
   8414c:	2b07      	cmp	r3, #7
   8414e:	d9f1      	bls.n	84134 <udd_ctrl_setup_received+0x40>
	}
	// Manage LSB/MSB to fit with CPU usage
	udd_g_ctrlreq.req.wValue = le16_to_cpu(udd_g_ctrlreq.req.wValue);
   84150:	4b30      	ldr	r3, [pc, #192]	; (84214 <udd_ctrl_setup_received+0x120>)
   84152:	885a      	ldrh	r2, [r3, #2]
   84154:	4b2f      	ldr	r3, [pc, #188]	; (84214 <udd_ctrl_setup_received+0x120>)
   84156:	805a      	strh	r2, [r3, #2]
	udd_g_ctrlreq.req.wIndex = le16_to_cpu(udd_g_ctrlreq.req.wIndex);
   84158:	4b2e      	ldr	r3, [pc, #184]	; (84214 <udd_ctrl_setup_received+0x120>)
   8415a:	889a      	ldrh	r2, [r3, #4]
   8415c:	4b2d      	ldr	r3, [pc, #180]	; (84214 <udd_ctrl_setup_received+0x120>)
   8415e:	809a      	strh	r2, [r3, #4]
	udd_g_ctrlreq.req.wLength = le16_to_cpu(udd_g_ctrlreq.req.wLength);
   84160:	4b2c      	ldr	r3, [pc, #176]	; (84214 <udd_ctrl_setup_received+0x120>)
   84162:	88da      	ldrh	r2, [r3, #6]
   84164:	4b2b      	ldr	r3, [pc, #172]	; (84214 <udd_ctrl_setup_received+0x120>)
   84166:	80da      	strh	r2, [r3, #6]
			udd_g_ctrlreq.req.bRequest, udd_g_ctrlreq.req.bmRequestType,
			udd_g_ctrlreq.req.wValue, udd_g_ctrlreq.req.wIndex,
			udd_g_ctrlreq.req.wLength);

	// Decode setup request
	if (udc_process_setup() == false) {
   84168:	4b2b      	ldr	r3, [pc, #172]	; (84218 <udd_ctrl_setup_received+0x124>)
   8416a:	4798      	blx	r3
   8416c:	4603      	mov	r3, r0
   8416e:	f083 0301 	eor.w	r3, r3, #1
   84172:	b2db      	uxtb	r3, r3
   84174:	2b00      	cmp	r3, #0
   84176:	d007      	beq.n	84188 <udd_ctrl_setup_received+0x94>
		// Setup request unknown then stall it
		dbg_print("ProcErr ");
		udd_ctrl_stall_data();
   84178:	4b24      	ldr	r3, [pc, #144]	; (8420c <udd_ctrl_setup_received+0x118>)
   8417a:	4798      	blx	r3
		udd_ack_setup_received(0);
   8417c:	4b22      	ldr	r3, [pc, #136]	; (84208 <udd_ctrl_setup_received+0x114>)
   8417e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   84182:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		return;
   84186:	e035      	b.n	841f4 <udd_ctrl_setup_received+0x100>
	}
	udd_ack_setup_received(0);
   84188:	4b1f      	ldr	r3, [pc, #124]	; (84208 <udd_ctrl_setup_received+0x114>)
   8418a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   8418e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	if (Udd_setup_is_in()) {
   84192:	4b20      	ldr	r3, [pc, #128]	; (84214 <udd_ctrl_setup_received+0x120>)
   84194:	781b      	ldrb	r3, [r3, #0]
   84196:	b25b      	sxtb	r3, r3
   84198:	2b00      	cmp	r3, #0
   8419a:	da0b      	bge.n	841b4 <udd_ctrl_setup_received+0xc0>
		dbg_print("_I ");
		// IN data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   8419c:	4b1f      	ldr	r3, [pc, #124]	; (8421c <udd_ctrl_setup_received+0x128>)
   8419e:	2200      	movs	r2, #0
   841a0:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   841a2:	4b1f      	ldr	r3, [pc, #124]	; (84220 <udd_ctrl_setup_received+0x12c>)
   841a4:	2200      	movs	r2, #0
   841a6:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   841a8:	4b14      	ldr	r3, [pc, #80]	; (841fc <udd_ctrl_setup_received+0x108>)
   841aa:	2202      	movs	r2, #2
   841ac:	701a      	strb	r2, [r3, #0]
		udd_ctrl_in_sent(); // Send first data transfer
   841ae:	4b1d      	ldr	r3, [pc, #116]	; (84224 <udd_ctrl_setup_received+0x130>)
   841b0:	4798      	blx	r3
   841b2:	e01f      	b.n	841f4 <udd_ctrl_setup_received+0x100>
	} else {
		dbg_print("_O ");
		if (0 == udd_g_ctrlreq.req.wLength) {
   841b4:	4b17      	ldr	r3, [pc, #92]	; (84214 <udd_ctrl_setup_received+0x120>)
   841b6:	88db      	ldrh	r3, [r3, #6]
   841b8:	2b00      	cmp	r3, #0
   841ba:	d102      	bne.n	841c2 <udd_ctrl_setup_received+0xce>
			// No data phase requested
			dbg_print("Zl ");
			// Send IN ZLP to ACK setup request
			udd_ctrl_send_zlp_in();
   841bc:	4b1a      	ldr	r3, [pc, #104]	; (84228 <udd_ctrl_setup_received+0x134>)
   841be:	4798      	blx	r3
			return;
   841c0:	e018      	b.n	841f4 <udd_ctrl_setup_received+0x100>
		}
		// OUT data phase requested
		udd_ctrl_prev_payload_buf_cnt = 0;
   841c2:	4b16      	ldr	r3, [pc, #88]	; (8421c <udd_ctrl_setup_received+0x128>)
   841c4:	2200      	movs	r2, #0
   841c6:	801a      	strh	r2, [r3, #0]
		udd_ctrl_payload_buf_cnt = 0;
   841c8:	4b15      	ldr	r3, [pc, #84]	; (84220 <udd_ctrl_setup_received+0x12c>)
   841ca:	2200      	movs	r2, #0
   841cc:	801a      	strh	r2, [r3, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   841ce:	4b0b      	ldr	r3, [pc, #44]	; (841fc <udd_ctrl_setup_received+0x108>)
   841d0:	2201      	movs	r2, #1
   841d2:	701a      	strb	r2, [r3, #0]
		// To detect a protocol error, enable nak interrupt on data IN phase
		udd_ack_nak_in(0);
   841d4:	4b0c      	ldr	r3, [pc, #48]	; (84208 <udd_ctrl_setup_received+0x114>)
   841d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   841da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		flags = cpu_irq_save();
   841de:	4b13      	ldr	r3, [pc, #76]	; (8422c <udd_ctrl_setup_received+0x138>)
   841e0:	4798      	blx	r3
   841e2:	6078      	str	r0, [r7, #4]
		udd_enable_nak_in_interrupt(0);
   841e4:	4b08      	ldr	r3, [pc, #32]	; (84208 <udd_ctrl_setup_received+0x114>)
   841e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   841ea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
		cpu_irq_restore(flags);
   841ee:	6878      	ldr	r0, [r7, #4]
   841f0:	4b0f      	ldr	r3, [pc, #60]	; (84230 <udd_ctrl_setup_received+0x13c>)
   841f2:	4798      	blx	r3
	}
}
   841f4:	3710      	adds	r7, #16
   841f6:	46bd      	mov	sp, r7
   841f8:	bd80      	pop	{r7, pc}
   841fa:	bf00      	nop
   841fc:	200013f4 	.word	0x200013f4
   84200:	0008469d 	.word	0x0008469d
   84204:	00084099 	.word	0x00084099
   84208:	400a4000 	.word	0x400a4000
   8420c:	000845d1 	.word	0x000845d1
   84210:	20180000 	.word	0x20180000
   84214:	200013dc 	.word	0x200013dc
   84218:	000828d1 	.word	0x000828d1
   8421c:	200013f6 	.word	0x200013f6
   84220:	200013f8 	.word	0x200013f8
   84224:	00084235 	.word	0x00084235
   84228:	000845f5 	.word	0x000845f5
   8422c:	000830b1 	.word	0x000830b1
   84230:	0008310d 	.word	0x0008310d

00084234 <udd_ctrl_in_sent>:


static void udd_ctrl_in_sent(void)
{
   84234:	b580      	push	{r7, lr}
   84236:	b084      	sub	sp, #16
   84238:	af00      	add	r7, sp, #0
	uint16_t nb_remain;
	uint8_t i;
	uint8_t *ptr_dest, *ptr_src;
	irqflags_t flags;

	flags = cpu_irq_save();
   8423a:	4b4c      	ldr	r3, [pc, #304]	; (8436c <udd_ctrl_in_sent+0x138>)
   8423c:	4798      	blx	r3
   8423e:	6038      	str	r0, [r7, #0]
	udd_disable_in_send_interrupt(0);
   84240:	4b4b      	ldr	r3, [pc, #300]	; (84370 <udd_ctrl_in_sent+0x13c>)
   84242:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84246:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	cpu_irq_restore(flags);
   8424a:	6838      	ldr	r0, [r7, #0]
   8424c:	4b49      	ldr	r3, [pc, #292]	; (84374 <udd_ctrl_in_sent+0x140>)
   8424e:	4798      	blx	r3

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84250:	4b49      	ldr	r3, [pc, #292]	; (84378 <udd_ctrl_in_sent+0x144>)
   84252:	781b      	ldrb	r3, [r3, #0]
   84254:	2b03      	cmp	r3, #3
   84256:	d104      	bne.n	84262 <udd_ctrl_in_sent+0x2e>
		dbg_print("ZlpE\n\r");
		// ZLP on IN is sent, then valid end of setup request
		udd_ctrl_endofrequest();
   84258:	4b48      	ldr	r3, [pc, #288]	; (8437c <udd_ctrl_in_sent+0x148>)
   8425a:	4798      	blx	r3
		// Reinitializes control endpoint management
		udd_ctrl_init();
   8425c:	4b48      	ldr	r3, [pc, #288]	; (84380 <udd_ctrl_in_sent+0x14c>)
   8425e:	4798      	blx	r3
		return;
   84260:	e081      	b.n	84366 <udd_ctrl_in_sent+0x132>
	}
	Assert(udd_ep_control_state == UDD_EPCTRL_DATA_IN);

	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84262:	4b48      	ldr	r3, [pc, #288]	; (84384 <udd_ctrl_in_sent+0x150>)
   84264:	899a      	ldrh	r2, [r3, #12]
   84266:	4b48      	ldr	r3, [pc, #288]	; (84388 <udd_ctrl_in_sent+0x154>)
   84268:	881b      	ldrh	r3, [r3, #0]
   8426a:	1ad3      	subs	r3, r2, r3
   8426c:	81fb      	strh	r3, [r7, #14]
	if (0 == nb_remain) {
   8426e:	89fb      	ldrh	r3, [r7, #14]
   84270:	2b00      	cmp	r3, #0
   84272:	d127      	bne.n	842c4 <udd_ctrl_in_sent+0x90>
		// All content of current buffer payload are sent
		// Update number of total data sending by previous payload buffer
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84274:	4b45      	ldr	r3, [pc, #276]	; (8438c <udd_ctrl_in_sent+0x158>)
   84276:	881a      	ldrh	r2, [r3, #0]
   84278:	4b43      	ldr	r3, [pc, #268]	; (84388 <udd_ctrl_in_sent+0x154>)
   8427a:	881b      	ldrh	r3, [r3, #0]
   8427c:	4413      	add	r3, r2
   8427e:	b29a      	uxth	r2, r3
   84280:	4b42      	ldr	r3, [pc, #264]	; (8438c <udd_ctrl_in_sent+0x158>)
   84282:	801a      	strh	r2, [r3, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84284:	4b3f      	ldr	r3, [pc, #252]	; (84384 <udd_ctrl_in_sent+0x150>)
   84286:	88da      	ldrh	r2, [r3, #6]
   84288:	4b40      	ldr	r3, [pc, #256]	; (8438c <udd_ctrl_in_sent+0x158>)
   8428a:	881b      	ldrh	r3, [r3, #0]
   8428c:	429a      	cmp	r2, r3
   8428e:	d003      	beq.n	84298 <udd_ctrl_in_sent+0x64>
				|| b_shortpacket) {
   84290:	4b3f      	ldr	r3, [pc, #252]	; (84390 <udd_ctrl_in_sent+0x15c>)
   84292:	781b      	ldrb	r3, [r3, #0]
   84294:	2b00      	cmp	r3, #0
   84296:	d002      	beq.n	8429e <udd_ctrl_in_sent+0x6a>
			// All data requested are transfered or a short packet has been sent
			// then it is the end of data phase.
			// Generate an OUT ZLP for handshake phase.
			dbg_print("_zO ");
			udd_ctrl_send_zlp_out();
   84298:	4b3e      	ldr	r3, [pc, #248]	; (84394 <udd_ctrl_in_sent+0x160>)
   8429a:	4798      	blx	r3
			return;
   8429c:	e063      	b.n	84366 <udd_ctrl_in_sent+0x132>
		}
		// Need of new buffer because the data phase is not complete
		if ((!udd_g_ctrlreq.over_under_run)
   8429e:	4b39      	ldr	r3, [pc, #228]	; (84384 <udd_ctrl_in_sent+0x150>)
   842a0:	695b      	ldr	r3, [r3, #20]
   842a2:	2b00      	cmp	r3, #0
   842a4:	d00e      	beq.n	842c4 <udd_ctrl_in_sent+0x90>
				|| (!udd_g_ctrlreq.over_under_run())) {
   842a6:	4b37      	ldr	r3, [pc, #220]	; (84384 <udd_ctrl_in_sent+0x150>)
   842a8:	695b      	ldr	r3, [r3, #20]
   842aa:	4798      	blx	r3
   842ac:	4603      	mov	r3, r0
   842ae:	f083 0301 	eor.w	r3, r3, #1
   842b2:	b2db      	uxtb	r3, r3
   842b4:	2b00      	cmp	r3, #0
   842b6:	d105      	bne.n	842c4 <udd_ctrl_in_sent+0x90>
			// Underrun then send zlp on IN
			// Here nb_remain=0 and allows to send a IN ZLP
		} else {
			// A new payload buffer is given
			udd_ctrl_payload_buf_cnt = 0;
   842b8:	4b33      	ldr	r3, [pc, #204]	; (84388 <udd_ctrl_in_sent+0x154>)
   842ba:	2200      	movs	r2, #0
   842bc:	801a      	strh	r2, [r3, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   842be:	4b31      	ldr	r3, [pc, #196]	; (84384 <udd_ctrl_in_sent+0x150>)
   842c0:	899b      	ldrh	r3, [r3, #12]
   842c2:	81fb      	strh	r3, [r7, #14]
		}
	}
	// Continue transfer and send next data
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   842c4:	89fb      	ldrh	r3, [r7, #14]
   842c6:	2b3f      	cmp	r3, #63	; 0x3f
   842c8:	d905      	bls.n	842d6 <udd_ctrl_in_sent+0xa2>
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   842ca:	2340      	movs	r3, #64	; 0x40
   842cc:	81fb      	strh	r3, [r7, #14]
		b_shortpacket = false;
   842ce:	4b30      	ldr	r3, [pc, #192]	; (84390 <udd_ctrl_in_sent+0x15c>)
   842d0:	2200      	movs	r2, #0
   842d2:	701a      	strb	r2, [r3, #0]
   842d4:	e002      	b.n	842dc <udd_ctrl_in_sent+0xa8>
	} else {
		b_shortpacket = true;
   842d6:	4b2e      	ldr	r3, [pc, #184]	; (84390 <udd_ctrl_in_sent+0x15c>)
   842d8:	2201      	movs	r2, #1
   842da:	701a      	strb	r2, [r3, #0]
	}
	// Fill buffer of endpoint control
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   842dc:	4b2e      	ldr	r3, [pc, #184]	; (84398 <udd_ctrl_in_sent+0x164>)
   842de:	60bb      	str	r3, [r7, #8]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   842e0:	4b28      	ldr	r3, [pc, #160]	; (84384 <udd_ctrl_in_sent+0x150>)
   842e2:	689b      	ldr	r3, [r3, #8]
   842e4:	4a28      	ldr	r2, [pc, #160]	; (84388 <udd_ctrl_in_sent+0x154>)
   842e6:	8812      	ldrh	r2, [r2, #0]
   842e8:	4413      	add	r3, r2
   842ea:	607b      	str	r3, [r7, #4]
	// The IN data don't must be written in endpoint 0 DPRAM during
	// a next setup reception in same endpoint 0 DPRAM.
	// Thereby, an OUT ZLP reception must check before IN data write
	// and if no OUT ZLP is received the data must be written quickly (800us)
	// before an eventually ZLP OUT and SETUP reception
	flags = cpu_irq_save();
   842ec:	4b1f      	ldr	r3, [pc, #124]	; (8436c <udd_ctrl_in_sent+0x138>)
   842ee:	4798      	blx	r3
   842f0:	6038      	str	r0, [r7, #0]
	if (Is_udd_out_received(0)) {
   842f2:	4b1f      	ldr	r3, [pc, #124]	; (84370 <udd_ctrl_in_sent+0x13c>)
   842f4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   842f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
   842fc:	2b00      	cmp	r3, #0
   842fe:	d006      	beq.n	8430e <udd_ctrl_in_sent+0xda>
		dbg_print("Abort ");
		// IN DATA phase aborted by OUT ZLP
		cpu_irq_restore(flags);
   84300:	6838      	ldr	r0, [r7, #0]
   84302:	4b1c      	ldr	r3, [pc, #112]	; (84374 <udd_ctrl_in_sent+0x140>)
   84304:	4798      	blx	r3
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84306:	4b1c      	ldr	r3, [pc, #112]	; (84378 <udd_ctrl_in_sent+0x144>)
   84308:	2204      	movs	r2, #4
   8430a:	701a      	strb	r2, [r3, #0]
		return; // Exit of IN DATA phase
   8430c:	e02b      	b.n	84366 <udd_ctrl_in_sent+0x132>
	}
	// dbg_print("t%d ", nb_remain);
	// Write quickly the IN data
	for (i = 0; i < nb_remain; i++) {
   8430e:	2300      	movs	r3, #0
   84310:	737b      	strb	r3, [r7, #13]
   84312:	e00a      	b.n	8432a <udd_ctrl_in_sent+0xf6>
		*ptr_dest++ = *ptr_src++;
   84314:	687a      	ldr	r2, [r7, #4]
   84316:	1c53      	adds	r3, r2, #1
   84318:	607b      	str	r3, [r7, #4]
   8431a:	68bb      	ldr	r3, [r7, #8]
   8431c:	1c59      	adds	r1, r3, #1
   8431e:	60b9      	str	r1, [r7, #8]
   84320:	7812      	ldrb	r2, [r2, #0]
   84322:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_remain; i++) {
   84324:	7b7b      	ldrb	r3, [r7, #13]
   84326:	3301      	adds	r3, #1
   84328:	737b      	strb	r3, [r7, #13]
   8432a:	7b7b      	ldrb	r3, [r7, #13]
   8432c:	b29b      	uxth	r3, r3
   8432e:	89fa      	ldrh	r2, [r7, #14]
   84330:	429a      	cmp	r2, r3
   84332:	d8ef      	bhi.n	84314 <udd_ctrl_in_sent+0xe0>
	}
	udd_ctrl_payload_buf_cnt += nb_remain;
   84334:	4b14      	ldr	r3, [pc, #80]	; (84388 <udd_ctrl_in_sent+0x154>)
   84336:	881a      	ldrh	r2, [r3, #0]
   84338:	89fb      	ldrh	r3, [r7, #14]
   8433a:	4413      	add	r3, r2
   8433c:	b29a      	uxth	r2, r3
   8433e:	4b12      	ldr	r3, [pc, #72]	; (84388 <udd_ctrl_in_sent+0x154>)
   84340:	801a      	strh	r2, [r3, #0]

	// Validate and send the data available in the control endpoint buffer
	udd_ack_in_send(0);
   84342:	4b0b      	ldr	r3, [pc, #44]	; (84370 <udd_ctrl_in_sent+0x13c>)
   84344:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84348:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   8434c:	4b08      	ldr	r3, [pc, #32]	; (84370 <udd_ctrl_in_sent+0x13c>)
   8434e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84352:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   84356:	4b06      	ldr	r3, [pc, #24]	; (84370 <udd_ctrl_in_sent+0x13c>)
   84358:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8435c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// In case of abort of DATA IN phase, no need to enable nak OUT interrupt
	// because OUT endpoint is already free and ZLP OUT accepted.
	cpu_irq_restore(flags);
   84360:	6838      	ldr	r0, [r7, #0]
   84362:	4b04      	ldr	r3, [pc, #16]	; (84374 <udd_ctrl_in_sent+0x140>)
   84364:	4798      	blx	r3
}
   84366:	3710      	adds	r7, #16
   84368:	46bd      	mov	sp, r7
   8436a:	bd80      	pop	{r7, pc}
   8436c:	000830b1 	.word	0x000830b1
   84370:	400a4000 	.word	0x400a4000
   84374:	0008310d 	.word	0x0008310d
   84378:	200013f4 	.word	0x200013f4
   8437c:	0008469d 	.word	0x0008469d
   84380:	00084099 	.word	0x00084099
   84384:	200013dc 	.word	0x200013dc
   84388:	200013f8 	.word	0x200013f8
   8438c:	200013f6 	.word	0x200013f6
   84390:	2000142c 	.word	0x2000142c
   84394:	00084659 	.word	0x00084659
   84398:	20180000 	.word	0x20180000

0008439c <udd_ctrl_out_received>:


static void udd_ctrl_out_received(void)
{
   8439c:	b580      	push	{r7, lr}
   8439e:	b084      	sub	sp, #16
   843a0:	af00      	add	r7, sp, #0
	irqflags_t flags;
	uint8_t i;
	uint16_t nb_data;

	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   843a2:	4b61      	ldr	r3, [pc, #388]	; (84528 <udd_ctrl_out_received+0x18c>)
   843a4:	781b      	ldrb	r3, [r3, #0]
   843a6:	2b01      	cmp	r3, #1
   843a8:	d00f      	beq.n	843ca <udd_ctrl_out_received+0x2e>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   843aa:	4b5f      	ldr	r3, [pc, #380]	; (84528 <udd_ctrl_out_received+0x18c>)
   843ac:	781b      	ldrb	r3, [r3, #0]
   843ae:	2b02      	cmp	r3, #2
   843b0:	d003      	beq.n	843ba <udd_ctrl_out_received+0x1e>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   843b2:	4b5d      	ldr	r3, [pc, #372]	; (84528 <udd_ctrl_out_received+0x18c>)
   843b4:	781b      	ldrb	r3, [r3, #0]
   843b6:	2b04      	cmp	r3, #4
   843b8:	d102      	bne.n	843c0 <udd_ctrl_out_received+0x24>
			dbg_print("EoStp\n\r");
			// End of SETUP request:
			// - Data IN Phase aborted,
			// - or last Data IN Phase hidden by ZLP OUT sending quickly,
			// - or ZLP OUT received normally.
			udd_ctrl_endofrequest();
   843ba:	4b5c      	ldr	r3, [pc, #368]	; (8452c <udd_ctrl_out_received+0x190>)
   843bc:	4798      	blx	r3
   843be:	e001      	b.n	843c4 <udd_ctrl_out_received+0x28>
		} else {
			dbg_print("ErrStp\n\r");
			// Protocol error during SETUP request
			udd_ctrl_stall_data();
   843c0:	4b5b      	ldr	r3, [pc, #364]	; (84530 <udd_ctrl_out_received+0x194>)
   843c2:	4798      	blx	r3
		}
		// Reinitializes control endpoint management
		udd_ctrl_init();
   843c4:	4b5b      	ldr	r3, [pc, #364]	; (84534 <udd_ctrl_out_received+0x198>)
   843c6:	4798      	blx	r3
		return;
   843c8:	e0ab      	b.n	84522 <udd_ctrl_out_received+0x186>
	}
	// Read data received during OUT phase
	nb_data = udd_byte_count(0);
   843ca:	4b5b      	ldr	r3, [pc, #364]	; (84538 <udd_ctrl_out_received+0x19c>)
   843cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   843d0:	0d1b      	lsrs	r3, r3, #20
   843d2:	b29b      	uxth	r3, r3
   843d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
   843d8:	81bb      	strh	r3, [r7, #12]
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   843da:	4b58      	ldr	r3, [pc, #352]	; (8453c <udd_ctrl_out_received+0x1a0>)
   843dc:	899b      	ldrh	r3, [r3, #12]
   843de:	461a      	mov	r2, r3
   843e0:	4b57      	ldr	r3, [pc, #348]	; (84540 <udd_ctrl_out_received+0x1a4>)
   843e2:	881b      	ldrh	r3, [r3, #0]
   843e4:	4619      	mov	r1, r3
   843e6:	89bb      	ldrh	r3, [r7, #12]
   843e8:	440b      	add	r3, r1
   843ea:	429a      	cmp	r2, r3
   843ec:	da05      	bge.n	843fa <udd_ctrl_out_received+0x5e>
		// Payload buffer too small
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   843ee:	4b53      	ldr	r3, [pc, #332]	; (8453c <udd_ctrl_out_received+0x1a0>)
   843f0:	899a      	ldrh	r2, [r3, #12]
   843f2:	4b53      	ldr	r3, [pc, #332]	; (84540 <udd_ctrl_out_received+0x1a4>)
   843f4:	881b      	ldrh	r3, [r3, #0]
   843f6:	1ad3      	subs	r3, r2, r3
   843f8:	81bb      	strh	r3, [r7, #12]
	}
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   843fa:	4b52      	ldr	r3, [pc, #328]	; (84544 <udd_ctrl_out_received+0x1a8>)
   843fc:	60bb      	str	r3, [r7, #8]
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   843fe:	4b4f      	ldr	r3, [pc, #316]	; (8453c <udd_ctrl_out_received+0x1a0>)
   84400:	689b      	ldr	r3, [r3, #8]
   84402:	4a4f      	ldr	r2, [pc, #316]	; (84540 <udd_ctrl_out_received+0x1a4>)
   84404:	8812      	ldrh	r2, [r2, #0]
   84406:	4413      	add	r3, r2
   84408:	607b      	str	r3, [r7, #4]
	for (i = 0; i < nb_data; i++) {
   8440a:	2300      	movs	r3, #0
   8440c:	73fb      	strb	r3, [r7, #15]
   8440e:	e00a      	b.n	84426 <udd_ctrl_out_received+0x8a>
		*ptr_dest++ = *ptr_src++;
   84410:	68ba      	ldr	r2, [r7, #8]
   84412:	1c53      	adds	r3, r2, #1
   84414:	60bb      	str	r3, [r7, #8]
   84416:	687b      	ldr	r3, [r7, #4]
   84418:	1c59      	adds	r1, r3, #1
   8441a:	6079      	str	r1, [r7, #4]
   8441c:	7812      	ldrb	r2, [r2, #0]
   8441e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < nb_data; i++) {
   84420:	7bfb      	ldrb	r3, [r7, #15]
   84422:	3301      	adds	r3, #1
   84424:	73fb      	strb	r3, [r7, #15]
   84426:	7bfb      	ldrb	r3, [r7, #15]
   84428:	b29b      	uxth	r3, r3
   8442a:	89ba      	ldrh	r2, [r7, #12]
   8442c:	429a      	cmp	r2, r3
   8442e:	d8ef      	bhi.n	84410 <udd_ctrl_out_received+0x74>
	}
	udd_ctrl_payload_buf_cnt += nb_data;
   84430:	4b43      	ldr	r3, [pc, #268]	; (84540 <udd_ctrl_out_received+0x1a4>)
   84432:	881a      	ldrh	r2, [r3, #0]
   84434:	89bb      	ldrh	r3, [r7, #12]
   84436:	4413      	add	r3, r2
   84438:	b29a      	uxth	r2, r3
   8443a:	4b41      	ldr	r3, [pc, #260]	; (84540 <udd_ctrl_out_received+0x1a4>)
   8443c:	801a      	strh	r2, [r3, #0]

	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   8443e:	89bb      	ldrh	r3, [r7, #12]
   84440:	2b40      	cmp	r3, #64	; 0x40
   84442:	d10a      	bne.n	8445a <udd_ctrl_out_received+0xbe>
			|| (udd_g_ctrlreq.req.wLength <=
   84444:	4b3d      	ldr	r3, [pc, #244]	; (8453c <udd_ctrl_out_received+0x1a0>)
   84446:	88db      	ldrh	r3, [r3, #6]
   84448:	461a      	mov	r2, r3
			(udd_ctrl_prev_payload_buf_cnt +
   8444a:	4b3f      	ldr	r3, [pc, #252]	; (84548 <udd_ctrl_out_received+0x1ac>)
   8444c:	881b      	ldrh	r3, [r3, #0]
   8444e:	4619      	mov	r1, r3
   84450:	4b3b      	ldr	r3, [pc, #236]	; (84540 <udd_ctrl_out_received+0x1a4>)
   84452:	881b      	ldrh	r3, [r3, #0]
   84454:	440b      	add	r3, r1
			|| (udd_g_ctrlreq.req.wLength <=
   84456:	429a      	cmp	r2, r3
   84458:	dc20      	bgt.n	8449c <udd_ctrl_out_received+0x100>
			udd_ctrl_payload_buf_cnt))) {
		// End of reception because it is a short packet
		// Before send ZLP, call intermediate callback
		// in case of data receive generate a stall
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   8445a:	4b39      	ldr	r3, [pc, #228]	; (84540 <udd_ctrl_out_received+0x1a4>)
   8445c:	881a      	ldrh	r2, [r3, #0]
   8445e:	4b37      	ldr	r3, [pc, #220]	; (8453c <udd_ctrl_out_received+0x1a0>)
   84460:	819a      	strh	r2, [r3, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84462:	4b36      	ldr	r3, [pc, #216]	; (8453c <udd_ctrl_out_received+0x1a0>)
   84464:	695b      	ldr	r3, [r3, #20]
   84466:	2b00      	cmp	r3, #0
   84468:	d010      	beq.n	8448c <udd_ctrl_out_received+0xf0>
			if (!udd_g_ctrlreq.over_under_run()) {
   8446a:	4b34      	ldr	r3, [pc, #208]	; (8453c <udd_ctrl_out_received+0x1a0>)
   8446c:	695b      	ldr	r3, [r3, #20]
   8446e:	4798      	blx	r3
   84470:	4603      	mov	r3, r0
   84472:	f083 0301 	eor.w	r3, r3, #1
   84476:	b2db      	uxtb	r3, r3
   84478:	2b00      	cmp	r3, #0
   8447a:	d007      	beq.n	8448c <udd_ctrl_out_received+0xf0>
				// Stall ZLP
				udd_ctrl_stall_data();
   8447c:	4b2c      	ldr	r3, [pc, #176]	; (84530 <udd_ctrl_out_received+0x194>)
   8447e:	4798      	blx	r3
				// Ack reception of OUT to replace NAK by a STALL
				udd_ack_out_received(0);
   84480:	4b2d      	ldr	r3, [pc, #180]	; (84538 <udd_ctrl_out_received+0x19c>)
   84482:	f44f 7200 	mov.w	r2, #512	; 0x200
   84486:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
				return;
   8448a:	e04a      	b.n	84522 <udd_ctrl_out_received+0x186>
			}
		}
		// Send IN ZLP to ACK setup request
		udd_ack_out_received(0);
   8448c:	4b2a      	ldr	r3, [pc, #168]	; (84538 <udd_ctrl_out_received+0x19c>)
   8448e:	f44f 7200 	mov.w	r2, #512	; 0x200
   84492:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_send_zlp_in();
   84496:	4b2d      	ldr	r3, [pc, #180]	; (8454c <udd_ctrl_out_received+0x1b0>)
   84498:	4798      	blx	r3
		return;
   8449a:	e042      	b.n	84522 <udd_ctrl_out_received+0x186>
	}

	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   8449c:	4b27      	ldr	r3, [pc, #156]	; (8453c <udd_ctrl_out_received+0x1a0>)
   8449e:	899a      	ldrh	r2, [r3, #12]
   844a0:	4b27      	ldr	r3, [pc, #156]	; (84540 <udd_ctrl_out_received+0x1a4>)
   844a2:	881b      	ldrh	r3, [r3, #0]
   844a4:	429a      	cmp	r2, r3
   844a6:	d127      	bne.n	844f8 <udd_ctrl_out_received+0x15c>
		// Overrun then request a new payload buffer
		if (!udd_g_ctrlreq.over_under_run) {
   844a8:	4b24      	ldr	r3, [pc, #144]	; (8453c <udd_ctrl_out_received+0x1a0>)
   844aa:	695b      	ldr	r3, [r3, #20]
   844ac:	2b00      	cmp	r3, #0
   844ae:	d107      	bne.n	844c0 <udd_ctrl_out_received+0x124>
			// No callback available to request a new payload buffer
			udd_ctrl_stall_data();
   844b0:	4b1f      	ldr	r3, [pc, #124]	; (84530 <udd_ctrl_out_received+0x194>)
   844b2:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   844b4:	4b20      	ldr	r3, [pc, #128]	; (84538 <udd_ctrl_out_received+0x19c>)
   844b6:	f44f 7200 	mov.w	r2, #512	; 0x200
   844ba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   844be:	e030      	b.n	84522 <udd_ctrl_out_received+0x186>
		}
		if (!udd_g_ctrlreq.over_under_run()) {
   844c0:	4b1e      	ldr	r3, [pc, #120]	; (8453c <udd_ctrl_out_received+0x1a0>)
   844c2:	695b      	ldr	r3, [r3, #20]
   844c4:	4798      	blx	r3
   844c6:	4603      	mov	r3, r0
   844c8:	f083 0301 	eor.w	r3, r3, #1
   844cc:	b2db      	uxtb	r3, r3
   844ce:	2b00      	cmp	r3, #0
   844d0:	d007      	beq.n	844e2 <udd_ctrl_out_received+0x146>
			// No new payload buffer delivered
			udd_ctrl_stall_data();
   844d2:	4b17      	ldr	r3, [pc, #92]	; (84530 <udd_ctrl_out_received+0x194>)
   844d4:	4798      	blx	r3
			// Ack reception of OUT to replace NAK by a STALL
			udd_ack_out_received(0);
   844d6:	4b18      	ldr	r3, [pc, #96]	; (84538 <udd_ctrl_out_received+0x19c>)
   844d8:	f44f 7200 	mov.w	r2, #512	; 0x200
   844dc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
			return;
   844e0:	e01f      	b.n	84522 <udd_ctrl_out_received+0x186>
		}
		// New payload buffer available
		// Update number of total data received
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   844e2:	4b19      	ldr	r3, [pc, #100]	; (84548 <udd_ctrl_out_received+0x1ac>)
   844e4:	881a      	ldrh	r2, [r3, #0]
   844e6:	4b16      	ldr	r3, [pc, #88]	; (84540 <udd_ctrl_out_received+0x1a4>)
   844e8:	881b      	ldrh	r3, [r3, #0]
   844ea:	4413      	add	r3, r2
   844ec:	b29a      	uxth	r2, r3
   844ee:	4b16      	ldr	r3, [pc, #88]	; (84548 <udd_ctrl_out_received+0x1ac>)
   844f0:	801a      	strh	r2, [r3, #0]
		// Reinit reception on payload buffer
		udd_ctrl_payload_buf_cnt = 0;
   844f2:	4b13      	ldr	r3, [pc, #76]	; (84540 <udd_ctrl_out_received+0x1a4>)
   844f4:	2200      	movs	r2, #0
   844f6:	801a      	strh	r2, [r3, #0]
	}
	// Free buffer of control endpoint to authorize next reception
	udd_ack_out_received(0);
   844f8:	4b0f      	ldr	r3, [pc, #60]	; (84538 <udd_ctrl_out_received+0x19c>)
   844fa:	f44f 7200 	mov.w	r2, #512	; 0x200
   844fe:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	// To detect a protocol error, enable nak interrupt on data IN phase
	udd_ack_nak_in(0);
   84502:	4b0d      	ldr	r3, [pc, #52]	; (84538 <udd_ctrl_out_received+0x19c>)
   84504:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84508:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	flags = cpu_irq_save();
   8450c:	4b10      	ldr	r3, [pc, #64]	; (84550 <udd_ctrl_out_received+0x1b4>)
   8450e:	4798      	blx	r3
   84510:	6038      	str	r0, [r7, #0]
	udd_enable_nak_in_interrupt(0);
   84512:	4b09      	ldr	r3, [pc, #36]	; (84538 <udd_ctrl_out_received+0x19c>)
   84514:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84518:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   8451c:	6838      	ldr	r0, [r7, #0]
   8451e:	4b0d      	ldr	r3, [pc, #52]	; (84554 <udd_ctrl_out_received+0x1b8>)
   84520:	4798      	blx	r3
}
   84522:	3710      	adds	r7, #16
   84524:	46bd      	mov	sp, r7
   84526:	bd80      	pop	{r7, pc}
   84528:	200013f4 	.word	0x200013f4
   8452c:	0008469d 	.word	0x0008469d
   84530:	000845d1 	.word	0x000845d1
   84534:	00084099 	.word	0x00084099
   84538:	400a4000 	.word	0x400a4000
   8453c:	200013dc 	.word	0x200013dc
   84540:	200013f8 	.word	0x200013f8
   84544:	20180000 	.word	0x20180000
   84548:	200013f6 	.word	0x200013f6
   8454c:	000845f5 	.word	0x000845f5
   84550:	000830b1 	.word	0x000830b1
   84554:	0008310d 	.word	0x0008310d

00084558 <udd_ctrl_underflow>:


static void udd_ctrl_underflow(void)
{
   84558:	b580      	push	{r7, lr}
   8455a:	af00      	add	r7, sp, #0
	if (Is_udd_out_received(0))
   8455c:	4b0c      	ldr	r3, [pc, #48]	; (84590 <udd_ctrl_underflow+0x38>)
   8455e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   84562:	f403 7300 	and.w	r3, r3, #512	; 0x200
   84566:	2b00      	cmp	r3, #0
   84568:	d10f      	bne.n	8458a <udd_ctrl_underflow+0x32>
		return; // underflow ignored if OUT data is received

	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   8456a:	4b0a      	ldr	r3, [pc, #40]	; (84594 <udd_ctrl_underflow+0x3c>)
   8456c:	781b      	ldrb	r3, [r3, #0]
   8456e:	2b01      	cmp	r3, #1
   84570:	d102      	bne.n	84578 <udd_ctrl_underflow+0x20>
		// Host want to stop OUT transaction
		// then stop to wait OUT data phase and wait IN ZLP handshake
		udd_ctrl_send_zlp_in();
   84572:	4b09      	ldr	r3, [pc, #36]	; (84598 <udd_ctrl_underflow+0x40>)
   84574:	4798      	blx	r3
   84576:	e009      	b.n	8458c <udd_ctrl_underflow+0x34>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84578:	4b06      	ldr	r3, [pc, #24]	; (84594 <udd_ctrl_underflow+0x3c>)
   8457a:	781b      	ldrb	r3, [r3, #0]
   8457c:	2b04      	cmp	r3, #4
   8457e:	d105      	bne.n	8458c <udd_ctrl_underflow+0x34>
		// A OUT handshake is waiting by device,
		// but host want extra IN data then stall extra IN data
		udd_enable_stall_handshake(0);
   84580:	4b03      	ldr	r3, [pc, #12]	; (84590 <udd_ctrl_underflow+0x38>)
   84582:	2220      	movs	r2, #32
   84584:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   84588:	e000      	b.n	8458c <udd_ctrl_underflow+0x34>
		return; // underflow ignored if OUT data is received
   8458a:	bf00      	nop
	}
}
   8458c:	bd80      	pop	{r7, pc}
   8458e:	bf00      	nop
   84590:	400a4000 	.word	0x400a4000
   84594:	200013f4 	.word	0x200013f4
   84598:	000845f5 	.word	0x000845f5

0008459c <udd_ctrl_overflow>:


static void udd_ctrl_overflow(void)
{
   8459c:	b480      	push	{r7}
   8459e:	af00      	add	r7, sp, #0
	if (Is_udd_in_send(0))
   845a0:	4b09      	ldr	r3, [pc, #36]	; (845c8 <udd_ctrl_overflow+0x2c>)
   845a2:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   845a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   845aa:	2b00      	cmp	r3, #0
   845ac:	d108      	bne.n	845c0 <udd_ctrl_overflow+0x24>
		return; // overflow ignored if IN data is received

	// The case of UDD_EPCTRL_DATA_IN is not managed
	// because the OUT endpoint is already free and OUT ZLP accepted

	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   845ae:	4b07      	ldr	r3, [pc, #28]	; (845cc <udd_ctrl_overflow+0x30>)
   845b0:	781b      	ldrb	r3, [r3, #0]
   845b2:	2b03      	cmp	r3, #3
   845b4:	d105      	bne.n	845c2 <udd_ctrl_overflow+0x26>
		// A IN handshake is waiting by device,
		// but host want extra OUT data then stall extra OUT data
		udd_enable_stall_handshake(0);
   845b6:	4b04      	ldr	r3, [pc, #16]	; (845c8 <udd_ctrl_overflow+0x2c>)
   845b8:	2220      	movs	r2, #32
   845ba:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
   845be:	e000      	b.n	845c2 <udd_ctrl_overflow+0x26>
		return; // overflow ignored if IN data is received
   845c0:	bf00      	nop
	}
}
   845c2:	46bd      	mov	sp, r7
   845c4:	bc80      	pop	{r7}
   845c6:	4770      	bx	lr
   845c8:	400a4000 	.word	0x400a4000
   845cc:	200013f4 	.word	0x200013f4

000845d0 <udd_ctrl_stall_data>:


static void udd_ctrl_stall_data(void)
{
   845d0:	b480      	push	{r7}
   845d2:	af00      	add	r7, sp, #0
	// Stall all packets on IN & OUT control endpoint
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   845d4:	4b05      	ldr	r3, [pc, #20]	; (845ec <udd_ctrl_stall_data+0x1c>)
   845d6:	2205      	movs	r2, #5
   845d8:	701a      	strb	r2, [r3, #0]
	udd_enable_stall_handshake(0);
   845da:	4b05      	ldr	r3, [pc, #20]	; (845f0 <udd_ctrl_stall_data+0x20>)
   845dc:	2220      	movs	r2, #32
   845de:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   845e2:	bf00      	nop
   845e4:	46bd      	mov	sp, r7
   845e6:	bc80      	pop	{r7}
   845e8:	4770      	bx	lr
   845ea:	bf00      	nop
   845ec:	200013f4 	.word	0x200013f4
   845f0:	400a4000 	.word	0x400a4000

000845f4 <udd_ctrl_send_zlp_in>:


static void udd_ctrl_send_zlp_in(void)
{
   845f4:	b580      	push	{r7, lr}
   845f6:	b082      	sub	sp, #8
   845f8:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   845fa:	4b13      	ldr	r3, [pc, #76]	; (84648 <udd_ctrl_send_zlp_in+0x54>)
   845fc:	2203      	movs	r2, #3
   845fe:	701a      	strb	r2, [r3, #0]

	// Validate and send empty IN packet on control endpoint
	flags = cpu_irq_save();
   84600:	4b12      	ldr	r3, [pc, #72]	; (8464c <udd_ctrl_send_zlp_in+0x58>)
   84602:	4798      	blx	r3
   84604:	6078      	str	r0, [r7, #4]
	// Send ZLP on IN endpoint
	udd_ack_in_send(0);
   84606:	4b12      	ldr	r3, [pc, #72]	; (84650 <udd_ctrl_send_zlp_in+0x5c>)
   84608:	f44f 6280 	mov.w	r2, #1024	; 0x400
   8460c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_raise_tx_pkt_ready(0);
   84610:	4b0f      	ldr	r3, [pc, #60]	; (84650 <udd_ctrl_send_zlp_in+0x5c>)
   84612:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84616:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	udd_enable_in_send_interrupt(0);
   8461a:	4b0d      	ldr	r3, [pc, #52]	; (84650 <udd_ctrl_send_zlp_in+0x5c>)
   8461c:	f44f 6280 	mov.w	r2, #1024	; 0x400
   84620:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	// To detect a protocol error, enable nak interrupt on data OUT phase
	udd_ack_nak_out(0);
   84624:	4b0a      	ldr	r3, [pc, #40]	; (84650 <udd_ctrl_send_zlp_in+0x5c>)
   84626:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   8462a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_out_interrupt(0);
   8462e:	4b08      	ldr	r3, [pc, #32]	; (84650 <udd_ctrl_send_zlp_in+0x5c>)
   84630:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84634:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   84638:	6878      	ldr	r0, [r7, #4]
   8463a:	4b06      	ldr	r3, [pc, #24]	; (84654 <udd_ctrl_send_zlp_in+0x60>)
   8463c:	4798      	blx	r3
}
   8463e:	bf00      	nop
   84640:	3708      	adds	r7, #8
   84642:	46bd      	mov	sp, r7
   84644:	bd80      	pop	{r7, pc}
   84646:	bf00      	nop
   84648:	200013f4 	.word	0x200013f4
   8464c:	000830b1 	.word	0x000830b1
   84650:	400a4000 	.word	0x400a4000
   84654:	0008310d 	.word	0x0008310d

00084658 <udd_ctrl_send_zlp_out>:


static void udd_ctrl_send_zlp_out(void)
{
   84658:	b580      	push	{r7, lr}
   8465a:	b082      	sub	sp, #8
   8465c:	af00      	add	r7, sp, #0
	irqflags_t flags;

	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   8465e:	4b0b      	ldr	r3, [pc, #44]	; (8468c <udd_ctrl_send_zlp_out+0x34>)
   84660:	2204      	movs	r2, #4
   84662:	701a      	strb	r2, [r3, #0]
	// No action is necessary to accept OUT ZLP
	// because the buffer of control endpoint is already free

	// To detect a protocol error, enable nak interrupt on data IN phase
	flags = cpu_irq_save();
   84664:	4b0a      	ldr	r3, [pc, #40]	; (84690 <udd_ctrl_send_zlp_out+0x38>)
   84666:	4798      	blx	r3
   84668:	6078      	str	r0, [r7, #4]
	udd_ack_nak_in(0);
   8466a:	4b0a      	ldr	r3, [pc, #40]	; (84694 <udd_ctrl_send_zlp_out+0x3c>)
   8466c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   84670:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	udd_enable_nak_in_interrupt(0);
   84674:	4b07      	ldr	r3, [pc, #28]	; (84694 <udd_ctrl_send_zlp_out+0x3c>)
   84676:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8467a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	cpu_irq_restore(flags);
   8467e:	6878      	ldr	r0, [r7, #4]
   84680:	4b05      	ldr	r3, [pc, #20]	; (84698 <udd_ctrl_send_zlp_out+0x40>)
   84682:	4798      	blx	r3
}
   84684:	bf00      	nop
   84686:	3708      	adds	r7, #8
   84688:	46bd      	mov	sp, r7
   8468a:	bd80      	pop	{r7, pc}
   8468c:	200013f4 	.word	0x200013f4
   84690:	000830b1 	.word	0x000830b1
   84694:	400a4000 	.word	0x400a4000
   84698:	0008310d 	.word	0x0008310d

0008469c <udd_ctrl_endofrequest>:


static void udd_ctrl_endofrequest(void)
{
   8469c:	b580      	push	{r7, lr}
   8469e:	af00      	add	r7, sp, #0
	// If a callback is registered then call it
	if (udd_g_ctrlreq.callback) {
   846a0:	4b04      	ldr	r3, [pc, #16]	; (846b4 <udd_ctrl_endofrequest+0x18>)
   846a2:	691b      	ldr	r3, [r3, #16]
   846a4:	2b00      	cmp	r3, #0
   846a6:	d002      	beq.n	846ae <udd_ctrl_endofrequest+0x12>
		udd_g_ctrlreq.callback();
   846a8:	4b02      	ldr	r3, [pc, #8]	; (846b4 <udd_ctrl_endofrequest+0x18>)
   846aa:	691b      	ldr	r3, [r3, #16]
   846ac:	4798      	blx	r3
	}
}
   846ae:	bf00      	nop
   846b0:	bd80      	pop	{r7, pc}
   846b2:	bf00      	nop
   846b4:	200013dc 	.word	0x200013dc

000846b8 <udd_ctrl_interrupt>:


static bool udd_ctrl_interrupt(void)
{
   846b8:	b580      	push	{r7, lr}
   846ba:	b082      	sub	sp, #8
   846bc:	af00      	add	r7, sp, #0
	uint32_t status = udd_get_endpoint_status(0);
   846be:	4b31      	ldr	r3, [pc, #196]	; (84784 <udd_ctrl_interrupt+0xcc>)
   846c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
   846c4:	607b      	str	r3, [r7, #4]

	if (!Is_udd_endpoint_interrupt(0)) {
   846c6:	4b2f      	ldr	r3, [pc, #188]	; (84784 <udd_ctrl_interrupt+0xcc>)
   846c8:	695b      	ldr	r3, [r3, #20]
   846ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
   846ce:	2b00      	cmp	r3, #0
   846d0:	d101      	bne.n	846d6 <udd_ctrl_interrupt+0x1e>
		return false; // No interrupt events on control endpoint
   846d2:	2300      	movs	r3, #0
   846d4:	e052      	b.n	8477c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("0: ");

	// By default disable overflow and underflow interrupt
	udd_disable_nak_in_interrupt(0);
   846d6:	4b2b      	ldr	r3, [pc, #172]	; (84784 <udd_ctrl_interrupt+0xcc>)
   846d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   846dc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	udd_disable_nak_out_interrupt(0);
   846e0:	4b28      	ldr	r3, [pc, #160]	; (84784 <udd_ctrl_interrupt+0xcc>)
   846e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   846e6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	// Search event on control endpoint
	if (Is_udd_endpoint_status_setup_received(status)) {
   846ea:	687b      	ldr	r3, [r7, #4]
   846ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
   846f0:	2b00      	cmp	r3, #0
   846f2:	d003      	beq.n	846fc <udd_ctrl_interrupt+0x44>
		// SETUP packet received
		dbg_print("Stp ");
		udd_ctrl_setup_received();
   846f4:	4b24      	ldr	r3, [pc, #144]	; (84788 <udd_ctrl_interrupt+0xd0>)
   846f6:	4798      	blx	r3
		return true;
   846f8:	2301      	movs	r3, #1
   846fa:	e03f      	b.n	8477c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_in_sent(status)
   846fc:	687b      	ldr	r3, [r7, #4]
   846fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   84702:	2b00      	cmp	r3, #0
   84704:	d00a      	beq.n	8471c <udd_ctrl_interrupt+0x64>
			&& Is_udd_in_send_interrupt_enabled(0)) {
   84706:	4b1f      	ldr	r3, [pc, #124]	; (84784 <udd_ctrl_interrupt+0xcc>)
   84708:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
   8470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
   84710:	2b00      	cmp	r3, #0
   84712:	d003      	beq.n	8471c <udd_ctrl_interrupt+0x64>
		// IN packet sent
		dbg_print("In ");
		udd_ctrl_in_sent();
   84714:	4b1d      	ldr	r3, [pc, #116]	; (8478c <udd_ctrl_interrupt+0xd4>)
   84716:	4798      	blx	r3
		return true;
   84718:	2301      	movs	r3, #1
   8471a:	e02f      	b.n	8477c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_out_received(status)) {
   8471c:	687b      	ldr	r3, [r7, #4]
   8471e:	f403 7300 	and.w	r3, r3, #512	; 0x200
   84722:	2b00      	cmp	r3, #0
   84724:	d003      	beq.n	8472e <udd_ctrl_interrupt+0x76>
		// OUT packet received
		dbg_print("Out ");
		udd_ctrl_out_received();
   84726:	4b1a      	ldr	r3, [pc, #104]	; (84790 <udd_ctrl_interrupt+0xd8>)
   84728:	4798      	blx	r3
		return true;
   8472a:	2301      	movs	r3, #1
   8472c:	e026      	b.n	8477c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_stall(status)) {
   8472e:	687b      	ldr	r3, [r7, #4]
   84730:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
   84734:	2b00      	cmp	r3, #0
   84736:	d004      	beq.n	84742 <udd_ctrl_interrupt+0x8a>
		dbg_print("Stall\n\r");
		// STALLed
		udd_ack_stall(0);
   84738:	4b12      	ldr	r3, [pc, #72]	; (84784 <udd_ctrl_interrupt+0xcc>)
   8473a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   8473e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
	}
	if (Is_udd_endpoint_status_nak_out(status)) {
   84742:	687b      	ldr	r3, [r7, #4]
   84744:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
   84748:	2b00      	cmp	r3, #0
   8474a:	d008      	beq.n	8475e <udd_ctrl_interrupt+0xa6>
		// Overflow on OUT packet
		dbg_print("NakO ");
		udd_ack_nak_out(0);
   8474c:	4b0d      	ldr	r3, [pc, #52]	; (84784 <udd_ctrl_interrupt+0xcc>)
   8474e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   84752:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_overflow();
   84756:	4b0f      	ldr	r3, [pc, #60]	; (84794 <udd_ctrl_interrupt+0xdc>)
   84758:	4798      	blx	r3
		return true;
   8475a:	2301      	movs	r3, #1
   8475c:	e00e      	b.n	8477c <udd_ctrl_interrupt+0xc4>
	}
	if (Is_udd_endpoint_status_nak_in(status)) {
   8475e:	687b      	ldr	r3, [r7, #4]
   84760:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
   84764:	2b00      	cmp	r3, #0
   84766:	d008      	beq.n	8477a <udd_ctrl_interrupt+0xc2>
		// Underflow on IN packet
		dbg_print("NakI ");
		udd_ack_nak_in(0);
   84768:	4b06      	ldr	r3, [pc, #24]	; (84784 <udd_ctrl_interrupt+0xcc>)
   8476a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   8476e:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
		udd_ctrl_underflow();
   84772:	4b09      	ldr	r3, [pc, #36]	; (84798 <udd_ctrl_interrupt+0xe0>)
   84774:	4798      	blx	r3
		return true;
   84776:	2301      	movs	r3, #1
   84778:	e000      	b.n	8477c <udd_ctrl_interrupt+0xc4>
	}
	dbg_print("UnH ");
	return false;
   8477a:	2300      	movs	r3, #0
}
   8477c:	4618      	mov	r0, r3
   8477e:	3708      	adds	r7, #8
   84780:	46bd      	mov	sp, r7
   84782:	bd80      	pop	{r7, pc}
   84784:	400a4000 	.word	0x400a4000
   84788:	000840f5 	.word	0x000840f5
   8478c:	00084235 	.word	0x00084235
   84790:	0008439d 	.word	0x0008439d
   84794:	0008459d 	.word	0x0008459d
   84798:	00084559 	.word	0x00084559

0008479c <udd_ep_job_table_reset>:
//--- INTERNAL ROUTINES TO MANAGED THE BULK/INTERRUPT/ISOCHRONOUS ENDPOINTS

#if (0!=USB_DEVICE_MAX_EP)

static void udd_ep_job_table_reset(void)
{
   8479c:	b480      	push	{r7}
   8479e:	b083      	sub	sp, #12
   847a0:	af00      	add	r7, sp, #0
	uint8_t i;
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   847a2:	2300      	movs	r3, #0
   847a4:	71fb      	strb	r3, [r7, #7]
   847a6:	e01c      	b.n	847e2 <udd_ep_job_table_reset+0x46>
		udd_ep_job[i].busy = false;
   847a8:	79fa      	ldrb	r2, [r7, #7]
   847aa:	4912      	ldr	r1, [pc, #72]	; (847f4 <udd_ep_job_table_reset+0x58>)
   847ac:	4613      	mov	r3, r2
   847ae:	005b      	lsls	r3, r3, #1
   847b0:	4413      	add	r3, r2
   847b2:	00db      	lsls	r3, r3, #3
   847b4:	440b      	add	r3, r1
   847b6:	f103 0210 	add.w	r2, r3, #16
   847ba:	7913      	ldrb	r3, [r2, #4]
   847bc:	f36f 0300 	bfc	r3, #0, #1
   847c0:	7113      	strb	r3, [r2, #4]
		udd_ep_job[i].stall_requested = false;
   847c2:	79fa      	ldrb	r2, [r7, #7]
   847c4:	490b      	ldr	r1, [pc, #44]	; (847f4 <udd_ep_job_table_reset+0x58>)
   847c6:	4613      	mov	r3, r2
   847c8:	005b      	lsls	r3, r3, #1
   847ca:	4413      	add	r3, r2
   847cc:	00db      	lsls	r3, r3, #3
   847ce:	440b      	add	r3, r1
   847d0:	f103 0210 	add.w	r2, r3, #16
   847d4:	7913      	ldrb	r3, [r2, #4]
   847d6:	f36f 0382 	bfc	r3, #2, #1
   847da:	7113      	strb	r3, [r2, #4]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   847dc:	79fb      	ldrb	r3, [r7, #7]
   847de:	3301      	adds	r3, #1
   847e0:	71fb      	strb	r3, [r7, #7]
   847e2:	79fb      	ldrb	r3, [r7, #7]
   847e4:	2b01      	cmp	r3, #1
   847e6:	d9df      	bls.n	847a8 <udd_ep_job_table_reset+0xc>
	}
}
   847e8:	bf00      	nop
   847ea:	bf00      	nop
   847ec:	370c      	adds	r7, #12
   847ee:	46bd      	mov	sp, r7
   847f0:	bc80      	pop	{r7}
   847f2:	4770      	bx	lr
   847f4:	200013fc 	.word	0x200013fc

000847f8 <udd_ep_job_table_kill>:


static void udd_ep_job_table_kill(void)
{
   847f8:	b580      	push	{r7, lr}
   847fa:	b082      	sub	sp, #8
   847fc:	af00      	add	r7, sp, #0
	uint8_t i;

	// For each endpoint, kill job
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   847fe:	2300      	movs	r3, #0
   84800:	71fb      	strb	r3, [r7, #7]
   84802:	e010      	b.n	84826 <udd_ep_job_table_kill+0x2e>
		udd_ep_finish_job(&udd_ep_job[i], true, i + 1);
   84804:	79fa      	ldrb	r2, [r7, #7]
   84806:	4613      	mov	r3, r2
   84808:	005b      	lsls	r3, r3, #1
   8480a:	4413      	add	r3, r2
   8480c:	00db      	lsls	r3, r3, #3
   8480e:	4a0a      	ldr	r2, [pc, #40]	; (84838 <udd_ep_job_table_kill+0x40>)
   84810:	1898      	adds	r0, r3, r2
   84812:	79fb      	ldrb	r3, [r7, #7]
   84814:	3301      	adds	r3, #1
   84816:	b2db      	uxtb	r3, r3
   84818:	461a      	mov	r2, r3
   8481a:	2101      	movs	r1, #1
   8481c:	4b07      	ldr	r3, [pc, #28]	; (8483c <udd_ep_job_table_kill+0x44>)
   8481e:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84820:	79fb      	ldrb	r3, [r7, #7]
   84822:	3301      	adds	r3, #1
   84824:	71fb      	strb	r3, [r7, #7]
   84826:	79fb      	ldrb	r3, [r7, #7]
   84828:	2b01      	cmp	r3, #1
   8482a:	d9eb      	bls.n	84804 <udd_ep_job_table_kill+0xc>
	}
}
   8482c:	bf00      	nop
   8482e:	bf00      	nop
   84830:	3708      	adds	r7, #8
   84832:	46bd      	mov	sp, r7
   84834:	bd80      	pop	{r7, pc}
   84836:	bf00      	nop
   84838:	200013fc 	.word	0x200013fc
   8483c:	0008487d 	.word	0x0008487d

00084840 <udd_ep_abort_job>:


static void udd_ep_abort_job(udd_ep_id_t ep)
{
   84840:	b580      	push	{r7, lr}
   84842:	b082      	sub	sp, #8
   84844:	af00      	add	r7, sp, #0
   84846:	4603      	mov	r3, r0
   84848:	71fb      	strb	r3, [r7, #7]
	ep &= USB_EP_ADDR_MASK;
   8484a:	79fb      	ldrb	r3, [r7, #7]
   8484c:	f003 030f 	and.w	r3, r3, #15
   84850:	71fb      	strb	r3, [r7, #7]

	// Abort job on endpoint
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84852:	79fb      	ldrb	r3, [r7, #7]
   84854:	1e5a      	subs	r2, r3, #1
   84856:	4613      	mov	r3, r2
   84858:	005b      	lsls	r3, r3, #1
   8485a:	4413      	add	r3, r2
   8485c:	00db      	lsls	r3, r3, #3
   8485e:	4a05      	ldr	r2, [pc, #20]	; (84874 <udd_ep_abort_job+0x34>)
   84860:	4413      	add	r3, r2
   84862:	79fa      	ldrb	r2, [r7, #7]
   84864:	2101      	movs	r1, #1
   84866:	4618      	mov	r0, r3
   84868:	4b03      	ldr	r3, [pc, #12]	; (84878 <udd_ep_abort_job+0x38>)
   8486a:	4798      	blx	r3
}
   8486c:	bf00      	nop
   8486e:	3708      	adds	r7, #8
   84870:	46bd      	mov	sp, r7
   84872:	bd80      	pop	{r7, pc}
   84874:	200013fc 	.word	0x200013fc
   84878:	0008487d 	.word	0x0008487d

0008487c <udd_ep_finish_job>:


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
   8487c:	b580      	push	{r7, lr}
   8487e:	b082      	sub	sp, #8
   84880:	af00      	add	r7, sp, #0
   84882:	6078      	str	r0, [r7, #4]
   84884:	460b      	mov	r3, r1
   84886:	70fb      	strb	r3, [r7, #3]
   84888:	4613      	mov	r3, r2
   8488a:	70bb      	strb	r3, [r7, #2]
	if (ptr_job->busy == false) {
   8488c:	687b      	ldr	r3, [r7, #4]
   8488e:	7d1b      	ldrb	r3, [r3, #20]
   84890:	f003 0301 	and.w	r3, r3, #1
   84894:	b2db      	uxtb	r3, r3
   84896:	2b00      	cmp	r3, #0
   84898:	d01f      	beq.n	848da <udd_ep_finish_job+0x5e>
		return; // No on-going job
	}
	ptr_job->busy = false;
   8489a:	687a      	ldr	r2, [r7, #4]
   8489c:	7d13      	ldrb	r3, [r2, #20]
   8489e:	f36f 0300 	bfc	r3, #0, #1
   848a2:	7513      	strb	r3, [r2, #20]
	dbg_print("JobE%d ", b_abort);
	if (NULL == ptr_job->call_trans) {
   848a4:	687b      	ldr	r3, [r7, #4]
   848a6:	681b      	ldr	r3, [r3, #0]
   848a8:	2b00      	cmp	r3, #0
   848aa:	d018      	beq.n	848de <udd_ep_finish_job+0x62>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
   848ac:	4a0e      	ldr	r2, [pc, #56]	; (848e8 <udd_ep_finish_job+0x6c>)
   848ae:	78bb      	ldrb	r3, [r7, #2]
   848b0:	3308      	adds	r3, #8
   848b2:	015b      	lsls	r3, r3, #5
   848b4:	4413      	add	r3, r2
   848b6:	681b      	ldr	r3, [r3, #0]
   848b8:	f003 0308 	and.w	r3, r3, #8
   848bc:	2b00      	cmp	r3, #0
   848be:	d003      	beq.n	848c8 <udd_ep_finish_job+0x4c>
		ep_num |= USB_EP_DIR_IN;
   848c0:	78bb      	ldrb	r3, [r7, #2]
   848c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
   848c6:	70bb      	strb	r3, [r7, #2]
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   848c8:	687b      	ldr	r3, [r7, #4]
   848ca:	681b      	ldr	r3, [r3, #0]
   848cc:	78fa      	ldrb	r2, [r7, #3]
   848ce:	4610      	mov	r0, r2
   848d0:	687a      	ldr	r2, [r7, #4]
   848d2:	6891      	ldr	r1, [r2, #8]
   848d4:	78ba      	ldrb	r2, [r7, #2]
   848d6:	4798      	blx	r3
   848d8:	e002      	b.n	848e0 <udd_ep_finish_job+0x64>
		return; // No on-going job
   848da:	bf00      	nop
   848dc:	e000      	b.n	848e0 <udd_ep_finish_job+0x64>
		return; // No callback linked to job
   848de:	bf00      	nop
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   848e0:	3708      	adds	r7, #8
   848e2:	46bd      	mov	sp, r7
   848e4:	bd80      	pop	{r7, pc}
   848e6:	bf00      	nop
   848e8:	400a4000 	.word	0x400a4000

000848ec <udd_ep_trans_done>:

static void udd_ep_trans_done(udd_ep_id_t ep)
{
   848ec:	b580      	push	{r7, lr}
   848ee:	b086      	sub	sp, #24
   848f0:	af00      	add	r7, sp, #0
   848f2:	4603      	mov	r3, r0
   848f4:	71fb      	strb	r3, [r7, #7]
	uint32_t udd_dma_ctrl = 0;
   848f6:	2300      	movs	r3, #0
   848f8:	617b      	str	r3, [r7, #20]
	udd_ep_job_t *ptr_job;
	iram_size_t next_trans;
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];
   848fa:	79fb      	ldrb	r3, [r7, #7]
   848fc:	1e5a      	subs	r2, r3, #1
   848fe:	4613      	mov	r3, r2
   84900:	005b      	lsls	r3, r3, #1
   84902:	4413      	add	r3, r2
   84904:	00db      	lsls	r3, r3, #3
   84906:	4a6d      	ldr	r2, [pc, #436]	; (84abc <udd_ep_trans_done+0x1d0>)
   84908:	4413      	add	r3, r2
   8490a:	60fb      	str	r3, [r7, #12]

	if (!ptr_job->busy) {
   8490c:	68fb      	ldr	r3, [r7, #12]
   8490e:	7d1b      	ldrb	r3, [r3, #20]
   84910:	f003 0301 	and.w	r3, r3, #1
   84914:	b2db      	uxtb	r3, r3
   84916:	2b00      	cmp	r3, #0
   84918:	f000 80cc 	beq.w	84ab4 <udd_ep_trans_done+0x1c8>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   8491c:	68fb      	ldr	r3, [r7, #12]
   8491e:	68da      	ldr	r2, [r3, #12]
   84920:	68fb      	ldr	r3, [r7, #12]
   84922:	689b      	ldr	r3, [r3, #8]
   84924:	429a      	cmp	r2, r3
   84926:	f000 8099 	beq.w	84a5c <udd_ep_trans_done+0x170>
		// Need to send or receive other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   8492a:	68fb      	ldr	r3, [r7, #12]
   8492c:	689a      	ldr	r2, [r3, #8]
   8492e:	68fb      	ldr	r3, [r7, #12]
   84930:	68db      	ldr	r3, [r3, #12]
   84932:	1ad3      	subs	r3, r2, r3
   84934:	613b      	str	r3, [r7, #16]

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   84936:	693b      	ldr	r3, [r7, #16]
   84938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
   8493c:	d905      	bls.n	8494a <udd_ep_trans_done+0x5e>
			// The USB hardware support a maximum
			// transfer size of UDD_ENDPOINT_MAX_TRANS Bytes
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   8493e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   84942:	613b      	str	r3, [r7, #16]

			// Set 0 to transfer the maximum
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(0);
   84944:	2300      	movs	r3, #0
   84946:	617b      	str	r3, [r7, #20]
   84948:	e002      	b.n	84950 <udd_ep_trans_done+0x64>
		} else {
			udd_dma_ctrl = UDPHS_DMACONTROL_BUFF_LENGTH(next_trans);
   8494a:	693b      	ldr	r3, [r7, #16]
   8494c:	041b      	lsls	r3, r3, #16
   8494e:	617b      	str	r3, [r7, #20]
		}
		if (Is_udd_endpoint_in(ep)) {
   84950:	4a5b      	ldr	r2, [pc, #364]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84952:	79fb      	ldrb	r3, [r7, #7]
   84954:	3308      	adds	r3, #8
   84956:	015b      	lsls	r3, r3, #5
   84958:	4413      	add	r3, r2
   8495a:	681b      	ldr	r3, [r3, #0]
   8495c:	f003 0308 	and.w	r3, r3, #8
   84960:	2b00      	cmp	r3, #0
   84962:	d01d      	beq.n	849a0 <udd_ep_trans_done+0xb4>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   84964:	4a56      	ldr	r2, [pc, #344]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84966:	79fb      	ldrb	r3, [r7, #7]
   84968:	3308      	adds	r3, #8
   8496a:	015b      	lsls	r3, r3, #5
   8496c:	4413      	add	r3, r2
   8496e:	681b      	ldr	r3, [r3, #0]
   84970:	f003 0307 	and.w	r3, r3, #7
   84974:	2208      	movs	r2, #8
   84976:	fa02 f303 	lsl.w	r3, r2, r3
   8497a:	461a      	mov	r2, r3
   8497c:	693b      	ldr	r3, [r7, #16]
   8497e:	fbb3 f1f2 	udiv	r1, r3, r2
   84982:	fb01 f202 	mul.w	r2, r1, r2
   84986:	1a9b      	subs	r3, r3, r2
   84988:	2b00      	cmp	r3, #0
   8498a:	d027      	beq.n	849dc <udd_ep_trans_done+0xf0>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_B_EN;
   8498c:	697b      	ldr	r3, [r7, #20]
   8498e:	f043 0308 	orr.w	r3, r3, #8
   84992:	617b      	str	r3, [r7, #20]
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   84994:	68fa      	ldr	r2, [r7, #12]
   84996:	7d13      	ldrb	r3, [r2, #20]
   84998:	f36f 0341 	bfc	r3, #1, #1
   8499c:	7513      	strb	r3, [r2, #20]
   8499e:	e01d      	b.n	849dc <udd_ep_trans_done+0xf0>
			}
		} else {
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   849a0:	4a47      	ldr	r2, [pc, #284]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   849a2:	79fb      	ldrb	r3, [r7, #7]
   849a4:	3308      	adds	r3, #8
   849a6:	015b      	lsls	r3, r3, #5
   849a8:	4413      	add	r3, r2
   849aa:	681b      	ldr	r3, [r3, #0]
   849ac:	091b      	lsrs	r3, r3, #4
   849ae:	f003 0303 	and.w	r3, r3, #3
   849b2:	2b01      	cmp	r3, #1
   849b4:	d10e      	bne.n	849d4 <udd_ep_trans_done+0xe8>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   849b6:	4a42      	ldr	r2, [pc, #264]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   849b8:	79fb      	ldrb	r3, [r7, #7]
   849ba:	3308      	adds	r3, #8
   849bc:	015b      	lsls	r3, r3, #5
   849be:	4413      	add	r3, r2
   849c0:	681b      	ldr	r3, [r3, #0]
   849c2:	f003 0307 	and.w	r3, r3, #7
   849c6:	2208      	movs	r2, #8
   849c8:	fa02 f303 	lsl.w	r3, r2, r3
   849cc:	461a      	mov	r2, r3
   849ce:	693b      	ldr	r3, [r7, #16]
   849d0:	4293      	cmp	r3, r2
   849d2:	d803      	bhi.n	849dc <udd_ep_trans_done+0xf0>

				// Enable short packet reception
				udd_dma_ctrl |= UDPHS_DMACONTROL_END_TR_IT
   849d4:	697b      	ldr	r3, [r7, #20]
   849d6:	f043 0314 	orr.w	r3, r3, #20
   849da:	617b      	str	r3, [r7, #20]
						| UDPHS_DMACONTROL_END_TR_EN;
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   849dc:	68fb      	ldr	r3, [r7, #12]
   849de:	685a      	ldr	r2, [r3, #4]
   849e0:	68fb      	ldr	r3, [r7, #12]
   849e2:	68db      	ldr	r3, [r3, #12]
   849e4:	18d1      	adds	r1, r2, r3
   849e6:	79fb      	ldrb	r3, [r7, #7]
   849e8:	011a      	lsls	r2, r3, #4
   849ea:	4b36      	ldr	r3, [pc, #216]	; (84ac4 <udd_ep_trans_done+0x1d8>)
   849ec:	4413      	add	r3, r2
   849ee:	460a      	mov	r2, r1
   849f0:	605a      	str	r2, [r3, #4]
		udd_dma_ctrl |= UDPHS_DMACONTROL_END_BUFFIT | UDPHS_DMACONTROL_CHANN_ENB;
   849f2:	697b      	ldr	r3, [r7, #20]
   849f4:	f043 0321 	orr.w	r3, r3, #33	; 0x21
   849f8:	617b      	str	r3, [r7, #20]

		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
   849fa:	4b33      	ldr	r3, [pc, #204]	; (84ac8 <udd_ep_trans_done+0x1dc>)
   849fc:	4798      	blx	r3
   849fe:	60b8      	str	r0, [r7, #8]
		if (!(udd_endpoint_dma_get_status(ep)
   84a00:	79fb      	ldrb	r3, [r7, #7]
   84a02:	011a      	lsls	r2, r3, #4
   84a04:	4b2f      	ldr	r3, [pc, #188]	; (84ac4 <udd_ep_trans_done+0x1d8>)
   84a06:	4413      	add	r3, r2
   84a08:	68db      	ldr	r3, [r3, #12]
				& UDPHS_DMASTATUS_END_TR_ST)) {
   84a0a:	f003 0310 	and.w	r3, r3, #16
		if (!(udd_endpoint_dma_get_status(ep)
   84a0e:	2b00      	cmp	r3, #0
   84a10:	d11d      	bne.n	84a4e <udd_ep_trans_done+0x162>
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   84a12:	79fb      	ldrb	r3, [r7, #7]
   84a14:	011a      	lsls	r2, r3, #4
   84a16:	4b2b      	ldr	r3, [pc, #172]	; (84ac4 <udd_ep_trans_done+0x1d8>)
   84a18:	4413      	add	r3, r2
   84a1a:	697a      	ldr	r2, [r7, #20]
   84a1c:	609a      	str	r2, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   84a1e:	68fb      	ldr	r3, [r7, #12]
   84a20:	68da      	ldr	r2, [r3, #12]
   84a22:	693b      	ldr	r3, [r7, #16]
   84a24:	441a      	add	r2, r3
   84a26:	68fb      	ldr	r3, [r7, #12]
   84a28:	60da      	str	r2, [r3, #12]
			ptr_job->buf_load = next_trans;
   84a2a:	68fb      	ldr	r3, [r7, #12]
   84a2c:	693a      	ldr	r2, [r7, #16]
   84a2e:	611a      	str	r2, [r3, #16]
			udd_enable_endpoint_dma_interrupt(ep);
   84a30:	4b23      	ldr	r3, [pc, #140]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84a32:	691a      	ldr	r2, [r3, #16]
   84a34:	79fb      	ldrb	r3, [r7, #7]
   84a36:	3b01      	subs	r3, #1
   84a38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   84a3c:	fa01 f303 	lsl.w	r3, r1, r3
   84a40:	491f      	ldr	r1, [pc, #124]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84a42:	4313      	orrs	r3, r2
   84a44:	610b      	str	r3, [r1, #16]
			cpu_irq_restore(flags);
   84a46:	68b8      	ldr	r0, [r7, #8]
   84a48:	4b20      	ldr	r3, [pc, #128]	; (84acc <udd_ep_trans_done+0x1e0>)
   84a4a:	4798      	blx	r3
			return;
   84a4c:	e033      	b.n	84ab6 <udd_ep_trans_done+0x1ca>
		}
		cpu_irq_restore(flags);
   84a4e:	68b8      	ldr	r0, [r7, #8]
   84a50:	4b1e      	ldr	r3, [pc, #120]	; (84acc <udd_ep_trans_done+0x1e0>)
   84a52:	4798      	blx	r3

		// Here a ZLP has been received
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   84a54:	68fb      	ldr	r3, [r7, #12]
   84a56:	68da      	ldr	r2, [r3, #12]
   84a58:	68fb      	ldr	r3, [r7, #12]
   84a5a:	609a      	str	r2, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   84a5c:	4a18      	ldr	r2, [pc, #96]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84a5e:	79fb      	ldrb	r3, [r7, #7]
   84a60:	3308      	adds	r3, #8
   84a62:	015b      	lsls	r3, r3, #5
   84a64:	4413      	add	r3, r2
   84a66:	681b      	ldr	r3, [r3, #0]
   84a68:	f003 0308 	and.w	r3, r3, #8
   84a6c:	2b00      	cmp	r3, #0
   84a6e:	d01a      	beq.n	84aa6 <udd_ep_trans_done+0x1ba>
		if (ptr_job->b_shortpacket) {
   84a70:	68fb      	ldr	r3, [r7, #12]
   84a72:	7d1b      	ldrb	r3, [r3, #20]
   84a74:	f003 0302 	and.w	r3, r3, #2
   84a78:	b2db      	uxtb	r3, r3
   84a7a:	2b00      	cmp	r3, #0
   84a7c:	d013      	beq.n	84aa6 <udd_ep_trans_done+0x1ba>
			dbg_print("zlp ");
			// Need to send a ZLP (No possible with USB DMA)
			// enable interrupt to wait a free bank to sent ZLP
			udd_enable_tx_pkt_ready_interrupt(ep);
   84a7e:	4a10      	ldr	r2, [pc, #64]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84a80:	79fb      	ldrb	r3, [r7, #7]
   84a82:	3308      	adds	r3, #8
   84a84:	015b      	lsls	r3, r3, #5
   84a86:	4413      	add	r3, r2
   84a88:	3304      	adds	r3, #4
   84a8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84a8e:	601a      	str	r2, [r3, #0]
			udd_enable_endpoint_interrupt(ep);
   84a90:	4b0b      	ldr	r3, [pc, #44]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84a92:	691a      	ldr	r2, [r3, #16]
   84a94:	79fb      	ldrb	r3, [r7, #7]
   84a96:	f44f 7180 	mov.w	r1, #256	; 0x100
   84a9a:	fa01 f303 	lsl.w	r3, r1, r3
   84a9e:	4908      	ldr	r1, [pc, #32]	; (84ac0 <udd_ep_trans_done+0x1d4>)
   84aa0:	4313      	orrs	r3, r2
   84aa2:	610b      	str	r3, [r1, #16]
			return;
   84aa4:	e007      	b.n	84ab6 <udd_ep_trans_done+0x1ca>
		}
	}
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   84aa6:	79fb      	ldrb	r3, [r7, #7]
   84aa8:	461a      	mov	r2, r3
   84aaa:	2100      	movs	r1, #0
   84aac:	68f8      	ldr	r0, [r7, #12]
   84aae:	4b08      	ldr	r3, [pc, #32]	; (84ad0 <udd_ep_trans_done+0x1e4>)
   84ab0:	4798      	blx	r3
   84ab2:	e000      	b.n	84ab6 <udd_ep_trans_done+0x1ca>
		return; // No job is running, then ignore it (system error)
   84ab4:	bf00      	nop
}
   84ab6:	3718      	adds	r7, #24
   84ab8:	46bd      	mov	sp, r7
   84aba:	bd80      	pop	{r7, pc}
   84abc:	200013fc 	.word	0x200013fc
   84ac0:	400a4000 	.word	0x400a4000
   84ac4:	400a4300 	.word	0x400a4300
   84ac8:	000830b1 	.word	0x000830b1
   84acc:	0008310d 	.word	0x0008310d
   84ad0:	0008487d 	.word	0x0008487d

00084ad4 <udd_ep_interrupt>:


static bool udd_ep_interrupt(void)
{
   84ad4:	b580      	push	{r7, lr}
   84ad6:	b084      	sub	sp, #16
   84ad8:	af00      	add	r7, sp, #0
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84ada:	2301      	movs	r3, #1
   84adc:	73fb      	strb	r3, [r7, #15]
   84ade:	e0e0      	b.n	84ca2 <udd_ep_interrupt+0x1ce>
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];
   84ae0:	7bfb      	ldrb	r3, [r7, #15]
   84ae2:	1e5a      	subs	r2, r3, #1
   84ae4:	4613      	mov	r3, r2
   84ae6:	005b      	lsls	r3, r3, #1
   84ae8:	4413      	add	r3, r2
   84aea:	00db      	lsls	r3, r3, #3
   84aec:	4a71      	ldr	r2, [pc, #452]	; (84cb4 <udd_ep_interrupt+0x1e0>)
   84aee:	4413      	add	r3, r2
   84af0:	60bb      	str	r3, [r7, #8]

		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84af2:	4b71      	ldr	r3, [pc, #452]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84af4:	691a      	ldr	r2, [r3, #16]
   84af6:	7bfb      	ldrb	r3, [r7, #15]
   84af8:	3b01      	subs	r3, #1
   84afa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   84afe:	fa01 f303 	lsl.w	r3, r1, r3
   84b02:	4013      	ands	r3, r2
   84b04:	2b00      	cmp	r3, #0
   84b06:	d03c      	beq.n	84b82 <udd_ep_interrupt+0xae>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   84b08:	4b6b      	ldr	r3, [pc, #428]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84b0a:	695a      	ldr	r2, [r3, #20]
   84b0c:	7bfb      	ldrb	r3, [r7, #15]
   84b0e:	3b01      	subs	r3, #1
   84b10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   84b14:	fa01 f303 	lsl.w	r3, r1, r3
   84b18:	4013      	ands	r3, r2
   84b1a:	2b00      	cmp	r3, #0
   84b1c:	d031      	beq.n	84b82 <udd_ep_interrupt+0xae>
			uint32_t nb_remaining;
			if (udd_endpoint_dma_get_status(ep)
   84b1e:	7bfb      	ldrb	r3, [r7, #15]
   84b20:	011a      	lsls	r2, r3, #4
   84b22:	4b66      	ldr	r3, [pc, #408]	; (84cbc <udd_ep_interrupt+0x1e8>)
   84b24:	4413      	add	r3, r2
   84b26:	68db      	ldr	r3, [r3, #12]
					& UDPHS_DMASTATUS_CHANN_ENB) {
   84b28:	f003 0301 	and.w	r3, r3, #1
			if (udd_endpoint_dma_get_status(ep)
   84b2c:	2b00      	cmp	r3, #0
   84b2e:	d001      	beq.n	84b34 <udd_ep_interrupt+0x60>
				return true; // Ignore EOT_STA interrupt
   84b30:	2301      	movs	r3, #1
   84b32:	e0bb      	b.n	84cac <udd_ep_interrupt+0x1d8>
			}
			dbg_print("dma%d: ", ep);
			udd_disable_endpoint_dma_interrupt(ep);
   84b34:	4b60      	ldr	r3, [pc, #384]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84b36:	691a      	ldr	r2, [r3, #16]
   84b38:	7bfb      	ldrb	r3, [r7, #15]
   84b3a:	3b01      	subs	r3, #1
   84b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   84b40:	fa01 f303 	lsl.w	r3, r1, r3
   84b44:	43db      	mvns	r3, r3
   84b46:	495c      	ldr	r1, [pc, #368]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84b48:	4013      	ands	r3, r2
   84b4a:	610b      	str	r3, [r1, #16]
			// Save number of data no transfered
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84b4c:	7bfb      	ldrb	r3, [r7, #15]
   84b4e:	011a      	lsls	r2, r3, #4
   84b50:	4b5a      	ldr	r3, [pc, #360]	; (84cbc <udd_ep_interrupt+0x1e8>)
   84b52:	4413      	add	r3, r2
   84b54:	68db      	ldr	r3, [r3, #12]
					UDPHS_DMASTATUS_BUFF_COUNT_Msk)
					>> UDPHS_DMASTATUS_BUFF_COUNT_Pos;
   84b56:	0c1b      	lsrs	r3, r3, #16
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84b58:	b29b      	uxth	r3, r3
   84b5a:	607b      	str	r3, [r7, #4]
			if (nb_remaining) {
   84b5c:	687b      	ldr	r3, [r7, #4]
   84b5e:	2b00      	cmp	r3, #0
   84b60:	d009      	beq.n	84b76 <udd_ep_interrupt+0xa2>
				// Transfer no complete (short packet or ZLP) then:
				// Update number of data transfered
				ptr_job->buf_cnt -= nb_remaining;
   84b62:	68bb      	ldr	r3, [r7, #8]
   84b64:	68da      	ldr	r2, [r3, #12]
   84b66:	687b      	ldr	r3, [r7, #4]
   84b68:	1ad2      	subs	r2, r2, r3
   84b6a:	68bb      	ldr	r3, [r7, #8]
   84b6c:	60da      	str	r2, [r3, #12]
				// Set transfer complete to stop the transfer
				ptr_job->buf_size = ptr_job->buf_cnt;
   84b6e:	68bb      	ldr	r3, [r7, #8]
   84b70:	68da      	ldr	r2, [r3, #12]
   84b72:	68bb      	ldr	r3, [r7, #8]
   84b74:	609a      	str	r2, [r3, #8]
			}
			udd_ep_trans_done(ep);
   84b76:	7bfb      	ldrb	r3, [r7, #15]
   84b78:	4618      	mov	r0, r3
   84b7a:	4b51      	ldr	r3, [pc, #324]	; (84cc0 <udd_ep_interrupt+0x1ec>)
   84b7c:	4798      	blx	r3
			return true;
   84b7e:	2301      	movs	r3, #1
   84b80:	e094      	b.n	84cac <udd_ep_interrupt+0x1d8>
		}
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   84b82:	4b4d      	ldr	r3, [pc, #308]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84b84:	691a      	ldr	r2, [r3, #16]
   84b86:	7bfb      	ldrb	r3, [r7, #15]
   84b88:	f44f 7180 	mov.w	r1, #256	; 0x100
   84b8c:	fa01 f303 	lsl.w	r3, r1, r3
   84b90:	4013      	ands	r3, r2
   84b92:	2b00      	cmp	r3, #0
   84b94:	f000 8082 	beq.w	84c9c <udd_ep_interrupt+0x1c8>
			if (Is_udd_tx_pkt_ready_interrupt_enabled(ep)
   84b98:	4a47      	ldr	r2, [pc, #284]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84b9a:	7bfb      	ldrb	r3, [r7, #15]
   84b9c:	015b      	lsls	r3, r3, #5
   84b9e:	4413      	add	r3, r2
   84ba0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84ba4:	681b      	ldr	r3, [r3, #0]
   84ba6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   84baa:	2b00      	cmp	r3, #0
   84bac:	d024      	beq.n	84bf8 <udd_ep_interrupt+0x124>
					&& !Is_udd_tx_pkt_ready(ep)) {
   84bae:	4a42      	ldr	r2, [pc, #264]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84bb0:	7bfb      	ldrb	r3, [r7, #15]
   84bb2:	015b      	lsls	r3, r3, #5
   84bb4:	4413      	add	r3, r2
   84bb6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84bba:	681b      	ldr	r3, [r3, #0]
   84bbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
   84bc0:	2b00      	cmp	r3, #0
   84bc2:	d119      	bne.n	84bf8 <udd_ep_interrupt+0x124>
				udd_disable_tx_pkt_ready_interrupt(ep);
   84bc4:	4a3c      	ldr	r2, [pc, #240]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84bc6:	7bfb      	ldrb	r3, [r7, #15]
   84bc8:	015b      	lsls	r3, r3, #5
   84bca:	4413      	add	r3, r2
   84bcc:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84bd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84bd4:	601a      	str	r2, [r3, #0]
				// One bank is free then send a ZLP
				udd_raise_tx_pkt_ready(ep);
   84bd6:	4a38      	ldr	r2, [pc, #224]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84bd8:	7bfb      	ldrb	r3, [r7, #15]
   84bda:	015b      	lsls	r3, r3, #5
   84bdc:	4413      	add	r3, r2
   84bde:	f503 738a 	add.w	r3, r3, #276	; 0x114
   84be2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   84be6:	601a      	str	r2, [r3, #0]
				udd_ep_finish_job(ptr_job, false, ep);
   84be8:	7bfb      	ldrb	r3, [r7, #15]
   84bea:	461a      	mov	r2, r3
   84bec:	2100      	movs	r1, #0
   84bee:	68b8      	ldr	r0, [r7, #8]
   84bf0:	4b34      	ldr	r3, [pc, #208]	; (84cc4 <udd_ep_interrupt+0x1f0>)
   84bf2:	4798      	blx	r3
				return true;
   84bf4:	2301      	movs	r3, #1
   84bf6:	e059      	b.n	84cac <udd_ep_interrupt+0x1d8>
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84bf8:	4a2f      	ldr	r2, [pc, #188]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84bfa:	7bfb      	ldrb	r3, [r7, #15]
   84bfc:	015b      	lsls	r3, r3, #5
   84bfe:	4413      	add	r3, r2
   84c00:	f503 7386 	add.w	r3, r3, #268	; 0x10c
   84c04:	681b      	ldr	r3, [r3, #0]
   84c06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
   84c0a:	2b00      	cmp	r3, #0
   84c0c:	d046      	beq.n	84c9c <udd_ep_interrupt+0x1c8>
					&& (0 == udd_nb_busy_bank(ep))) {
   84c0e:	4a2a      	ldr	r2, [pc, #168]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c10:	7bfb      	ldrb	r3, [r7, #15]
   84c12:	015b      	lsls	r3, r3, #5
   84c14:	4413      	add	r3, r2
   84c16:	f503 738e 	add.w	r3, r3, #284	; 0x11c
   84c1a:	681b      	ldr	r3, [r3, #0]
   84c1c:	0c9b      	lsrs	r3, r3, #18
   84c1e:	f003 0303 	and.w	r3, r3, #3
   84c22:	2b00      	cmp	r3, #0
   84c24:	d13a      	bne.n	84c9c <udd_ep_interrupt+0x1c8>
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84c26:	4a24      	ldr	r2, [pc, #144]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c28:	7bfb      	ldrb	r3, [r7, #15]
   84c2a:	015b      	lsls	r3, r3, #5
   84c2c:	4413      	add	r3, r2
   84c2e:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84c32:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   84c36:	601a      	str	r2, [r3, #0]
				udd_disable_endpoint_interrupt(ep);
   84c38:	4b1f      	ldr	r3, [pc, #124]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c3a:	691a      	ldr	r2, [r3, #16]
   84c3c:	7bfb      	ldrb	r3, [r7, #15]
   84c3e:	f44f 7180 	mov.w	r1, #256	; 0x100
   84c42:	fa01 f303 	lsl.w	r3, r1, r3
   84c46:	43db      	mvns	r3, r3
   84c48:	491b      	ldr	r1, [pc, #108]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c4a:	4013      	ands	r3, r2
   84c4c:	610b      	str	r3, [r1, #16]

				Assert(ptr_job->stall_requested);
				// A stall has been requested during background transfer
				ptr_job->stall_requested = false;
   84c4e:	68ba      	ldr	r2, [r7, #8]
   84c50:	7d13      	ldrb	r3, [r2, #20]
   84c52:	f36f 0382 	bfc	r3, #2, #1
   84c56:	7513      	strb	r3, [r2, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84c58:	4a17      	ldr	r2, [pc, #92]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c5a:	7bfb      	ldrb	r3, [r7, #15]
   84c5c:	015b      	lsls	r3, r3, #5
   84c5e:	4413      	add	r3, r2
   84c60:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84c64:	681a      	ldr	r2, [r3, #0]
   84c66:	4914      	ldr	r1, [pc, #80]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c68:	7bfb      	ldrb	r3, [r7, #15]
   84c6a:	f022 0202 	bic.w	r2, r2, #2
   84c6e:	015b      	lsls	r3, r3, #5
   84c70:	440b      	add	r3, r1
   84c72:	f503 7384 	add.w	r3, r3, #264	; 0x108
   84c76:	601a      	str	r2, [r3, #0]
				udd_enable_stall_handshake(ep);
   84c78:	4a0f      	ldr	r2, [pc, #60]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c7a:	7bfb      	ldrb	r3, [r7, #15]
   84c7c:	015b      	lsls	r3, r3, #5
   84c7e:	4413      	add	r3, r2
   84c80:	f503 738a 	add.w	r3, r3, #276	; 0x114
   84c84:	2220      	movs	r2, #32
   84c86:	601a      	str	r2, [r3, #0]
				udd_reset_data_toggle(ep);
   84c88:	4a0b      	ldr	r2, [pc, #44]	; (84cb8 <udd_ep_interrupt+0x1e4>)
   84c8a:	7bfb      	ldrb	r3, [r7, #15]
   84c8c:	015b      	lsls	r3, r3, #5
   84c8e:	4413      	add	r3, r2
   84c90:	f503 738c 	add.w	r3, r3, #280	; 0x118
   84c94:	2240      	movs	r2, #64	; 0x40
   84c96:	601a      	str	r2, [r3, #0]
				//dbg_print("exHalt%x ", ep);
				return true;
   84c98:	2301      	movs	r3, #1
   84c9a:	e007      	b.n	84cac <udd_ep_interrupt+0x1d8>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84c9c:	7bfb      	ldrb	r3, [r7, #15]
   84c9e:	3301      	adds	r3, #1
   84ca0:	73fb      	strb	r3, [r7, #15]
   84ca2:	7bfb      	ldrb	r3, [r7, #15]
   84ca4:	2b02      	cmp	r3, #2
   84ca6:	f67f af1b 	bls.w	84ae0 <udd_ep_interrupt+0xc>
			}
		}
	}
	return false;
   84caa:	2300      	movs	r3, #0
}
   84cac:	4618      	mov	r0, r3
   84cae:	3710      	adds	r7, #16
   84cb0:	46bd      	mov	sp, r7
   84cb2:	bd80      	pop	{r7, pc}
   84cb4:	200013fc 	.word	0x200013fc
   84cb8:	400a4000 	.word	0x400a4000
   84cbc:	400a4300 	.word	0x400a4300
   84cc0:	000848ed 	.word	0x000848ed
   84cc4:	0008487d 	.word	0x0008487d

00084cc8 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   84cc8:	b580      	push	{r7, lr}
   84cca:	b086      	sub	sp, #24
   84ccc:	af00      	add	r7, sp, #0
   84cce:	60f8      	str	r0, [r7, #12]
   84cd0:	60b9      	str	r1, [r7, #8]
   84cd2:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   84cd4:	2300      	movs	r3, #0
   84cd6:	617b      	str	r3, [r7, #20]

	if ((file != 1) && (file != 2) && (file!=3)) {
   84cd8:	68fb      	ldr	r3, [r7, #12]
   84cda:	2b01      	cmp	r3, #1
   84cdc:	d01e      	beq.n	84d1c <_write+0x54>
   84cde:	68fb      	ldr	r3, [r7, #12]
   84ce0:	2b02      	cmp	r3, #2
   84ce2:	d01b      	beq.n	84d1c <_write+0x54>
   84ce4:	68fb      	ldr	r3, [r7, #12]
   84ce6:	2b03      	cmp	r3, #3
   84ce8:	d018      	beq.n	84d1c <_write+0x54>
		return -1;
   84cea:	f04f 33ff 	mov.w	r3, #4294967295
   84cee:	e019      	b.n	84d24 <_write+0x5c>
	}

	for (; len != 0; --len) {
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84cf0:	4b0e      	ldr	r3, [pc, #56]	; (84d2c <_write+0x64>)
   84cf2:	681a      	ldr	r2, [r3, #0]
   84cf4:	4b0e      	ldr	r3, [pc, #56]	; (84d30 <_write+0x68>)
   84cf6:	6818      	ldr	r0, [r3, #0]
   84cf8:	68bb      	ldr	r3, [r7, #8]
   84cfa:	1c59      	adds	r1, r3, #1
   84cfc:	60b9      	str	r1, [r7, #8]
   84cfe:	781b      	ldrb	r3, [r3, #0]
   84d00:	4619      	mov	r1, r3
   84d02:	4790      	blx	r2
   84d04:	4603      	mov	r3, r0
   84d06:	2b00      	cmp	r3, #0
   84d08:	da02      	bge.n	84d10 <_write+0x48>
			return -1;
   84d0a:	f04f 33ff 	mov.w	r3, #4294967295
   84d0e:	e009      	b.n	84d24 <_write+0x5c>
		}
		++nChars;
   84d10:	697b      	ldr	r3, [r7, #20]
   84d12:	3301      	adds	r3, #1
   84d14:	617b      	str	r3, [r7, #20]
	for (; len != 0; --len) {
   84d16:	687b      	ldr	r3, [r7, #4]
   84d18:	3b01      	subs	r3, #1
   84d1a:	607b      	str	r3, [r7, #4]
   84d1c:	687b      	ldr	r3, [r7, #4]
   84d1e:	2b00      	cmp	r3, #0
   84d20:	d1e6      	bne.n	84cf0 <_write+0x28>
	}
	return nChars;
   84d22:	697b      	ldr	r3, [r7, #20]
}
   84d24:	4618      	mov	r0, r3
   84d26:	3718      	adds	r7, #24
   84d28:	46bd      	mov	sp, r7
   84d2a:	bd80      	pop	{r7, pc}
   84d2c:	20001434 	.word	0x20001434
   84d30:	20001430 	.word	0x20001430

00084d34 <LED_Off>:
 * \param led_gpio LED to turn off (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_Off(uint32_t led_gpio)
{
   84d34:	b580      	push	{r7, lr}
   84d36:	b084      	sub	sp, #16
   84d38:	af00      	add	r7, sp, #0
   84d3a:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84d3c:	2300      	movs	r3, #0
   84d3e:	60fb      	str	r3, [r7, #12]
   84d40:	e017      	b.n	84d72 <LED_Off+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84d42:	4a10      	ldr	r2, [pc, #64]	; (84d84 <LED_Off+0x50>)
   84d44:	68fb      	ldr	r3, [r7, #12]
   84d46:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   84d4a:	687a      	ldr	r2, [r7, #4]
   84d4c:	429a      	cmp	r2, r3
   84d4e:	d10d      	bne.n	84d6c <LED_Off+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   84d50:	4a0c      	ldr	r2, [pc, #48]	; (84d84 <LED_Off+0x50>)
   84d52:	68fb      	ldr	r3, [r7, #12]
   84d54:	00db      	lsls	r3, r3, #3
   84d56:	4413      	add	r3, r2
   84d58:	685b      	ldr	r3, [r3, #4]
   84d5a:	2b01      	cmp	r3, #1
   84d5c:	d103      	bne.n	84d66 <LED_Off+0x32>
				gpio_set_pin_low(led_gpio);
   84d5e:	6878      	ldr	r0, [r7, #4]
   84d60:	4b09      	ldr	r3, [pc, #36]	; (84d88 <LED_Off+0x54>)
   84d62:	4798      	blx	r3
   84d64:	e002      	b.n	84d6c <LED_Off+0x38>
			} else {
				gpio_set_pin_high(led_gpio);
   84d66:	6878      	ldr	r0, [r7, #4]
   84d68:	4b08      	ldr	r3, [pc, #32]	; (84d8c <LED_Off+0x58>)
   84d6a:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84d6c:	68fb      	ldr	r3, [r7, #12]
   84d6e:	3301      	adds	r3, #1
   84d70:	60fb      	str	r3, [r7, #12]
   84d72:	68fb      	ldr	r3, [r7, #12]
   84d74:	2b01      	cmp	r3, #1
   84d76:	d9e4      	bls.n	84d42 <LED_Off+0xe>
			}
		}
	}
}
   84d78:	bf00      	nop
   84d7a:	bf00      	nop
   84d7c:	3710      	adds	r7, #16
   84d7e:	46bd      	mov	sp, r7
   84d80:	bd80      	pop	{r7, pc}
   84d82:	bf00      	nop
   84d84:	0008d4a0 	.word	0x0008d4a0
   84d88:	00085b79 	.word	0x00085b79
   84d8c:	00085b49 	.word	0x00085b49

00084d90 <LED_On>:
 * \param led_gpio LED to turn on (LEDx_GPIO).
 *
 * \note The pins of the specified LEDs are set to GPIO output mode.
 */
void LED_On(uint32_t led_gpio)
{
   84d90:	b580      	push	{r7, lr}
   84d92:	b084      	sub	sp, #16
   84d94:	af00      	add	r7, sp, #0
   84d96:	6078      	str	r0, [r7, #4]
	uint32_t i;
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84d98:	2300      	movs	r3, #0
   84d9a:	60fb      	str	r3, [r7, #12]
   84d9c:	e017      	b.n	84dce <LED_On+0x3e>
		if (led_gpio == LED_DESCRIPTOR[i].ul_port_id) {
   84d9e:	4a10      	ldr	r2, [pc, #64]	; (84de0 <LED_On+0x50>)
   84da0:	68fb      	ldr	r3, [r7, #12]
   84da2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
   84da6:	687a      	ldr	r2, [r7, #4]
   84da8:	429a      	cmp	r2, r3
   84daa:	d10d      	bne.n	84dc8 <LED_On+0x38>
			if (LED_DESCRIPTOR[i].ul_active_level == ACTIVE_LEVEL_IS_HIGH) {
   84dac:	4a0c      	ldr	r2, [pc, #48]	; (84de0 <LED_On+0x50>)
   84dae:	68fb      	ldr	r3, [r7, #12]
   84db0:	00db      	lsls	r3, r3, #3
   84db2:	4413      	add	r3, r2
   84db4:	685b      	ldr	r3, [r3, #4]
   84db6:	2b01      	cmp	r3, #1
   84db8:	d103      	bne.n	84dc2 <LED_On+0x32>
				gpio_set_pin_high(led_gpio);
   84dba:	6878      	ldr	r0, [r7, #4]
   84dbc:	4b09      	ldr	r3, [pc, #36]	; (84de4 <LED_On+0x54>)
   84dbe:	4798      	blx	r3
   84dc0:	e002      	b.n	84dc8 <LED_On+0x38>
			} else {
				gpio_set_pin_low(led_gpio);
   84dc2:	6878      	ldr	r0, [r7, #4]
   84dc4:	4b08      	ldr	r3, [pc, #32]	; (84de8 <LED_On+0x58>)
   84dc6:	4798      	blx	r3
	for (i = 0; i < BOARD_NUM_OF_LED; i++) {
   84dc8:	68fb      	ldr	r3, [r7, #12]
   84dca:	3301      	adds	r3, #1
   84dcc:	60fb      	str	r3, [r7, #12]
   84dce:	68fb      	ldr	r3, [r7, #12]
   84dd0:	2b01      	cmp	r3, #1
   84dd2:	d9e4      	bls.n	84d9e <LED_On+0xe>
			}
		}
	}
}
   84dd4:	bf00      	nop
   84dd6:	bf00      	nop
   84dd8:	3710      	adds	r7, #16
   84dda:	46bd      	mov	sp, r7
   84ddc:	bd80      	pop	{r7, pc}
   84dde:	bf00      	nop
   84de0:	0008d4a0 	.word	0x0008d4a0
   84de4:	00085b49 	.word	0x00085b49
   84de8:	00085b79 	.word	0x00085b79

00084dec <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   84dec:	b580      	push	{r7, lr}
   84dee:	b082      	sub	sp, #8
   84df0:	af00      	add	r7, sp, #0
	uint32_t *pSrc, *pDest;

	/* Initialize the relocate segment */
	pSrc = &_etext;
   84df2:	4b1e      	ldr	r3, [pc, #120]	; (84e6c <Reset_Handler+0x80>)
   84df4:	607b      	str	r3, [r7, #4]
	pDest = &_srelocate;
   84df6:	4b1e      	ldr	r3, [pc, #120]	; (84e70 <Reset_Handler+0x84>)
   84df8:	603b      	str	r3, [r7, #0]

	if (pSrc != pDest) {
   84dfa:	687a      	ldr	r2, [r7, #4]
   84dfc:	683b      	ldr	r3, [r7, #0]
   84dfe:	429a      	cmp	r2, r3
   84e00:	d00c      	beq.n	84e1c <Reset_Handler+0x30>
		for (; pDest < &_erelocate;) {
   84e02:	e007      	b.n	84e14 <Reset_Handler+0x28>
			*pDest++ = *pSrc++;
   84e04:	687a      	ldr	r2, [r7, #4]
   84e06:	1d13      	adds	r3, r2, #4
   84e08:	607b      	str	r3, [r7, #4]
   84e0a:	683b      	ldr	r3, [r7, #0]
   84e0c:	1d19      	adds	r1, r3, #4
   84e0e:	6039      	str	r1, [r7, #0]
   84e10:	6812      	ldr	r2, [r2, #0]
   84e12:	601a      	str	r2, [r3, #0]
		for (; pDest < &_erelocate;) {
   84e14:	683b      	ldr	r3, [r7, #0]
   84e16:	4a17      	ldr	r2, [pc, #92]	; (84e74 <Reset_Handler+0x88>)
   84e18:	4293      	cmp	r3, r2
   84e1a:	d3f3      	bcc.n	84e04 <Reset_Handler+0x18>
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84e1c:	4b16      	ldr	r3, [pc, #88]	; (84e78 <Reset_Handler+0x8c>)
   84e1e:	603b      	str	r3, [r7, #0]
   84e20:	e004      	b.n	84e2c <Reset_Handler+0x40>
		*pDest++ = 0;
   84e22:	683b      	ldr	r3, [r7, #0]
   84e24:	1d1a      	adds	r2, r3, #4
   84e26:	603a      	str	r2, [r7, #0]
   84e28:	2200      	movs	r2, #0
   84e2a:	601a      	str	r2, [r3, #0]
	for (pDest = &_szero; pDest < &_ezero;) {
   84e2c:	683b      	ldr	r3, [r7, #0]
   84e2e:	4a13      	ldr	r2, [pc, #76]	; (84e7c <Reset_Handler+0x90>)
   84e30:	4293      	cmp	r3, r2
   84e32:	d3f6      	bcc.n	84e22 <Reset_Handler+0x36>
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
   84e34:	4b12      	ldr	r3, [pc, #72]	; (84e80 <Reset_Handler+0x94>)
   84e36:	607b      	str	r3, [r7, #4]
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84e38:	687b      	ldr	r3, [r7, #4]
   84e3a:	4a12      	ldr	r2, [pc, #72]	; (84e84 <Reset_Handler+0x98>)
   84e3c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
   84e40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   84e44:	6093      	str	r3, [r2, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < IRAM0_ADDR + IRAM_SIZE)) {
   84e46:	687b      	ldr	r3, [r7, #4]
   84e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
   84e4c:	d309      	bcc.n	84e62 <Reset_Handler+0x76>
   84e4e:	687b      	ldr	r3, [r7, #4]
   84e50:	4a0d      	ldr	r2, [pc, #52]	; (84e88 <Reset_Handler+0x9c>)
   84e52:	4293      	cmp	r3, r2
   84e54:	d205      	bcs.n	84e62 <Reset_Handler+0x76>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84e56:	4b0b      	ldr	r3, [pc, #44]	; (84e84 <Reset_Handler+0x98>)
   84e58:	689b      	ldr	r3, [r3, #8]
   84e5a:	4a0a      	ldr	r2, [pc, #40]	; (84e84 <Reset_Handler+0x98>)
   84e5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84e60:	6093      	str	r3, [r2, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   84e62:	4b0a      	ldr	r3, [pc, #40]	; (84e8c <Reset_Handler+0xa0>)
   84e64:	4798      	blx	r3

	/* Branch to main function */
	main();
   84e66:	4b0a      	ldr	r3, [pc, #40]	; (84e90 <Reset_Handler+0xa4>)
   84e68:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84e6a:	e7fe      	b.n	84e6a <Reset_Handler+0x7e>
   84e6c:	0008d8f4 	.word	0x0008d8f4
   84e70:	20000000 	.word	0x20000000
   84e74:	20000e20 	.word	0x20000e20
   84e78:	20000e20 	.word	0x20000e20
   84e7c:	200014a0 	.word	0x200014a0
   84e80:	00080000 	.word	0x00080000
   84e84:	e000ed00 	.word	0xe000ed00
   84e88:	20004000 	.word	0x20004000
   84e8c:	000866ed 	.word	0x000866ed
   84e90:	00080b51 	.word	0x00080b51

00084e94 <osc_enable>:
{
   84e94:	b580      	push	{r7, lr}
   84e96:	b082      	sub	sp, #8
   84e98:	af00      	add	r7, sp, #0
   84e9a:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   84e9c:	687b      	ldr	r3, [r7, #4]
   84e9e:	2b07      	cmp	r3, #7
   84ea0:	d82e      	bhi.n	84f00 <osc_enable+0x6c>
   84ea2:	a201      	add	r2, pc, #4	; (adr r2, 84ea8 <osc_enable+0x14>)
   84ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84ea8:	00084eff 	.word	0x00084eff
   84eac:	00084ec9 	.word	0x00084ec9
   84eb0:	00084ed1 	.word	0x00084ed1
   84eb4:	00084ed9 	.word	0x00084ed9
   84eb8:	00084ee1 	.word	0x00084ee1
   84ebc:	00084ee9 	.word	0x00084ee9
   84ec0:	00084ef1 	.word	0x00084ef1
   84ec4:	00084ef9 	.word	0x00084ef9
		pmc_switch_sclk_to_32kxtal(PMC_OSC_XTAL);
   84ec8:	2000      	movs	r0, #0
   84eca:	4b0f      	ldr	r3, [pc, #60]	; (84f08 <osc_enable+0x74>)
   84ecc:	4798      	blx	r3
		break;
   84ece:	e017      	b.n	84f00 <osc_enable+0x6c>
		pmc_switch_sclk_to_32kxtal(PMC_OSC_BYPASS);
   84ed0:	2001      	movs	r0, #1
   84ed2:	4b0d      	ldr	r3, [pc, #52]	; (84f08 <osc_enable+0x74>)
   84ed4:	4798      	blx	r3
		break;
   84ed6:	e013      	b.n	84f00 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_4_MHz);
   84ed8:	2000      	movs	r0, #0
   84eda:	4b0c      	ldr	r3, [pc, #48]	; (84f0c <osc_enable+0x78>)
   84edc:	4798      	blx	r3
		break;
   84ede:	e00f      	b.n	84f00 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_8_MHz);
   84ee0:	2010      	movs	r0, #16
   84ee2:	4b0a      	ldr	r3, [pc, #40]	; (84f0c <osc_enable+0x78>)
   84ee4:	4798      	blx	r3
		break;
   84ee6:	e00b      	b.n	84f00 <osc_enable+0x6c>
		pmc_osc_enable_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
   84ee8:	2020      	movs	r0, #32
   84eea:	4b08      	ldr	r3, [pc, #32]	; (84f0c <osc_enable+0x78>)
   84eec:	4798      	blx	r3
		break;
   84eee:	e007      	b.n	84f00 <osc_enable+0x6c>
		pmc_osc_enable_main_xtal(pmc_us_to_moscxtst(
   84ef0:	203e      	movs	r0, #62	; 0x3e
   84ef2:	4b07      	ldr	r3, [pc, #28]	; (84f10 <osc_enable+0x7c>)
   84ef4:	4798      	blx	r3
		break;
   84ef6:	e003      	b.n	84f00 <osc_enable+0x6c>
		pmc_osc_bypass_main_xtal();
   84ef8:	4b06      	ldr	r3, [pc, #24]	; (84f14 <osc_enable+0x80>)
   84efa:	4798      	blx	r3
		break;
   84efc:	e000      	b.n	84f00 <osc_enable+0x6c>
		break;
   84efe:	bf00      	nop
}
   84f00:	bf00      	nop
   84f02:	3708      	adds	r7, #8
   84f04:	46bd      	mov	sp, r7
   84f06:	bd80      	pop	{r7, pc}
   84f08:	00085369 	.word	0x00085369
   84f0c:	000853d5 	.word	0x000853d5
   84f10:	00085449 	.word	0x00085449
   84f14:	00085499 	.word	0x00085499

00084f18 <osc_is_ready>:
{
   84f18:	b580      	push	{r7, lr}
   84f1a:	b082      	sub	sp, #8
   84f1c:	af00      	add	r7, sp, #0
   84f1e:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   84f20:	687b      	ldr	r3, [r7, #4]
   84f22:	2b07      	cmp	r3, #7
   84f24:	d82f      	bhi.n	84f86 <osc_is_ready+0x6e>
   84f26:	a201      	add	r2, pc, #4	; (adr r2, 84f2c <osc_is_ready+0x14>)
   84f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84f2c:	00084f4d 	.word	0x00084f4d
   84f30:	00084f51 	.word	0x00084f51
   84f34:	00084f51 	.word	0x00084f51
   84f38:	00084f63 	.word	0x00084f63
   84f3c:	00084f63 	.word	0x00084f63
   84f40:	00084f63 	.word	0x00084f63
   84f44:	00084f75 	.word	0x00084f75
   84f48:	00084f75 	.word	0x00084f75
		return 1;
   84f4c:	2301      	movs	r3, #1
   84f4e:	e01b      	b.n	84f88 <osc_is_ready+0x70>
		return pmc_osc_is_ready_32kxtal();
   84f50:	4b0f      	ldr	r3, [pc, #60]	; (84f90 <osc_is_ready+0x78>)
   84f52:	4798      	blx	r3
   84f54:	4603      	mov	r3, r0
   84f56:	2b00      	cmp	r3, #0
   84f58:	bf14      	ite	ne
   84f5a:	2301      	movne	r3, #1
   84f5c:	2300      	moveq	r3, #0
   84f5e:	b2db      	uxtb	r3, r3
   84f60:	e012      	b.n	84f88 <osc_is_ready+0x70>
		return pmc_osc_is_ready_fastrc();
   84f62:	4b0c      	ldr	r3, [pc, #48]	; (84f94 <osc_is_ready+0x7c>)
   84f64:	4798      	blx	r3
   84f66:	4603      	mov	r3, r0
   84f68:	2b00      	cmp	r3, #0
   84f6a:	bf14      	ite	ne
   84f6c:	2301      	movne	r3, #1
   84f6e:	2300      	moveq	r3, #0
   84f70:	b2db      	uxtb	r3, r3
   84f72:	e009      	b.n	84f88 <osc_is_ready+0x70>
		return pmc_osc_is_ready_main_xtal();
   84f74:	4b08      	ldr	r3, [pc, #32]	; (84f98 <osc_is_ready+0x80>)
   84f76:	4798      	blx	r3
   84f78:	4603      	mov	r3, r0
   84f7a:	2b00      	cmp	r3, #0
   84f7c:	bf14      	ite	ne
   84f7e:	2301      	movne	r3, #1
   84f80:	2300      	moveq	r3, #0
   84f82:	b2db      	uxtb	r3, r3
   84f84:	e000      	b.n	84f88 <osc_is_ready+0x70>
	return 0;
   84f86:	2300      	movs	r3, #0
}
   84f88:	4618      	mov	r0, r3
   84f8a:	3708      	adds	r7, #8
   84f8c:	46bd      	mov	sp, r7
   84f8e:	bd80      	pop	{r7, pc}
   84f90:	000853a1 	.word	0x000853a1
   84f94:	00085431 	.word	0x00085431
   84f98:	000854e5 	.word	0x000854e5

00084f9c <osc_get_rate>:
{
   84f9c:	b480      	push	{r7}
   84f9e:	b083      	sub	sp, #12
   84fa0:	af00      	add	r7, sp, #0
   84fa2:	6078      	str	r0, [r7, #4]
	switch (ul_id) {
   84fa4:	687b      	ldr	r3, [r7, #4]
   84fa6:	2b07      	cmp	r3, #7
   84fa8:	d823      	bhi.n	84ff2 <osc_get_rate+0x56>
   84faa:	a201      	add	r2, pc, #4	; (adr r2, 84fb0 <osc_get_rate+0x14>)
   84fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   84fb0:	00084fd1 	.word	0x00084fd1
   84fb4:	00084fd7 	.word	0x00084fd7
   84fb8:	00084fdb 	.word	0x00084fdb
   84fbc:	00084fdf 	.word	0x00084fdf
   84fc0:	00084fe3 	.word	0x00084fe3
   84fc4:	00084fe7 	.word	0x00084fe7
   84fc8:	00084feb 	.word	0x00084feb
   84fcc:	00084fef 	.word	0x00084fef
		return OSC_SLCK_32K_RC_HZ;
   84fd0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
   84fd4:	e00e      	b.n	84ff4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_XTAL;
   84fd6:	2300      	movs	r3, #0
   84fd8:	e00c      	b.n	84ff4 <osc_get_rate+0x58>
		return BOARD_FREQ_SLCK_BYPASS;
   84fda:	2300      	movs	r3, #0
   84fdc:	e00a      	b.n	84ff4 <osc_get_rate+0x58>
		return OSC_MAINCK_4M_RC_HZ;
   84fde:	4b08      	ldr	r3, [pc, #32]	; (85000 <osc_get_rate+0x64>)
   84fe0:	e008      	b.n	84ff4 <osc_get_rate+0x58>
		return OSC_MAINCK_8M_RC_HZ;
   84fe2:	4b08      	ldr	r3, [pc, #32]	; (85004 <osc_get_rate+0x68>)
   84fe4:	e006      	b.n	84ff4 <osc_get_rate+0x58>
		return OSC_MAINCK_12M_RC_HZ;
   84fe6:	4b08      	ldr	r3, [pc, #32]	; (85008 <osc_get_rate+0x6c>)
   84fe8:	e004      	b.n	84ff4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_XTAL;
   84fea:	4b07      	ldr	r3, [pc, #28]	; (85008 <osc_get_rate+0x6c>)
   84fec:	e002      	b.n	84ff4 <osc_get_rate+0x58>
		return BOARD_FREQ_MAINCK_BYPASS;
   84fee:	4b06      	ldr	r3, [pc, #24]	; (85008 <osc_get_rate+0x6c>)
   84ff0:	e000      	b.n	84ff4 <osc_get_rate+0x58>
	return 0;
   84ff2:	2300      	movs	r3, #0
}
   84ff4:	4618      	mov	r0, r3
   84ff6:	370c      	adds	r7, #12
   84ff8:	46bd      	mov	sp, r7
   84ffa:	bc80      	pop	{r7}
   84ffc:	4770      	bx	lr
   84ffe:	bf00      	nop
   85000:	003d0900 	.word	0x003d0900
   85004:	007a1200 	.word	0x007a1200
   85008:	00b71b00 	.word	0x00b71b00

0008500c <osc_wait_ready>:
{
   8500c:	b580      	push	{r7, lr}
   8500e:	b082      	sub	sp, #8
   85010:	af00      	add	r7, sp, #0
   85012:	4603      	mov	r3, r0
   85014:	71fb      	strb	r3, [r7, #7]
	while (!osc_is_ready(id)) {
   85016:	bf00      	nop
   85018:	79fb      	ldrb	r3, [r7, #7]
   8501a:	4618      	mov	r0, r3
   8501c:	4b06      	ldr	r3, [pc, #24]	; (85038 <osc_wait_ready+0x2c>)
   8501e:	4798      	blx	r3
   85020:	4603      	mov	r3, r0
   85022:	f083 0301 	eor.w	r3, r3, #1
   85026:	b2db      	uxtb	r3, r3
   85028:	2b00      	cmp	r3, #0
   8502a:	d1f5      	bne.n	85018 <osc_wait_ready+0xc>
}
   8502c:	bf00      	nop
   8502e:	bf00      	nop
   85030:	3708      	adds	r7, #8
   85032:	46bd      	mov	sp, r7
   85034:	bd80      	pop	{r7, pc}
   85036:	bf00      	nop
   85038:	00084f19 	.word	0x00084f19

0008503c <pll_config_init>:
{
   8503c:	b580      	push	{r7, lr}
   8503e:	b086      	sub	sp, #24
   85040:	af00      	add	r7, sp, #0
   85042:	60f8      	str	r0, [r7, #12]
   85044:	607a      	str	r2, [r7, #4]
   85046:	603b      	str	r3, [r7, #0]
   85048:	460b      	mov	r3, r1
   8504a:	72fb      	strb	r3, [r7, #11]
	if (ul_div == 0 && ul_mul == 0) { /* Must only be true for UTMI PLL */
   8504c:	687b      	ldr	r3, [r7, #4]
   8504e:	2b00      	cmp	r3, #0
   85050:	d107      	bne.n	85062 <pll_config_init+0x26>
   85052:	683b      	ldr	r3, [r7, #0]
   85054:	2b00      	cmp	r3, #0
   85056:	d104      	bne.n	85062 <pll_config_init+0x26>
		p_cfg->ctrl = CKGR_UCKR_UPLLCOUNT(PLL_COUNT);
   85058:	68fb      	ldr	r3, [r7, #12]
   8505a:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
   8505e:	601a      	str	r2, [r3, #0]
   85060:	e01a      	b.n	85098 <pll_config_init+0x5c>
		vco_hz = osc_get_rate(e_src) / ul_div;
   85062:	7afb      	ldrb	r3, [r7, #11]
   85064:	4618      	mov	r0, r3
   85066:	4b0e      	ldr	r3, [pc, #56]	; (850a0 <pll_config_init+0x64>)
   85068:	4798      	blx	r3
   8506a:	4602      	mov	r2, r0
   8506c:	687b      	ldr	r3, [r7, #4]
   8506e:	fbb2 f3f3 	udiv	r3, r2, r3
   85072:	617b      	str	r3, [r7, #20]
		vco_hz *= ul_mul;
   85074:	697b      	ldr	r3, [r7, #20]
   85076:	683a      	ldr	r2, [r7, #0]
   85078:	fb02 f303 	mul.w	r3, r2, r3
   8507c:	617b      	str	r3, [r7, #20]
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8507e:	683b      	ldr	r3, [r7, #0]
   85080:	3b01      	subs	r3, #1
   85082:	041a      	lsls	r2, r3, #16
   85084:	4b07      	ldr	r3, [pc, #28]	; (850a4 <pll_config_init+0x68>)
   85086:	4013      	ands	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   85088:	687a      	ldr	r2, [r7, #4]
   8508a:	b2d2      	uxtb	r2, r2
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   8508c:	4313      	orrs	r3, r2
			CKGR_PLLAR_DIVA(ul_div) |
   8508e:	f443 527c 	orr.w	r2, r3, #16128	; 0x3f00
		p_cfg->ctrl = CKGR_PLLAR_MULA(ul_mul - 1) |
   85092:	68fb      	ldr	r3, [r7, #12]
   85094:	601a      	str	r2, [r3, #0]
}
   85096:	bf00      	nop
   85098:	bf00      	nop
   8509a:	3718      	adds	r7, #24
   8509c:	46bd      	mov	sp, r7
   8509e:	bd80      	pop	{r7, pc}
   850a0:	00084f9d 	.word	0x00084f9d
   850a4:	07ff0000 	.word	0x07ff0000

000850a8 <pll_enable>:
{
   850a8:	b580      	push	{r7, lr}
   850aa:	b082      	sub	sp, #8
   850ac:	af00      	add	r7, sp, #0
   850ae:	6078      	str	r0, [r7, #4]
   850b0:	6039      	str	r1, [r7, #0]
	if (ul_pll_id == PLLA_ID) {
   850b2:	683b      	ldr	r3, [r7, #0]
   850b4:	2b00      	cmp	r3, #0
   850b6:	d108      	bne.n	850ca <pll_enable+0x22>
		pmc_disable_pllack(); // Always stop PLL first!
   850b8:	4b09      	ldr	r3, [pc, #36]	; (850e0 <pll_enable+0x38>)
   850ba:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   850bc:	687b      	ldr	r3, [r7, #4]
   850be:	681b      	ldr	r3, [r3, #0]
   850c0:	4a08      	ldr	r2, [pc, #32]	; (850e4 <pll_enable+0x3c>)
   850c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   850c6:	6293      	str	r3, [r2, #40]	; 0x28
}
   850c8:	e005      	b.n	850d6 <pll_enable+0x2e>
		PMC->CKGR_UCKR = p_cfg->ctrl | CKGR_UCKR_UPLLEN;
   850ca:	687b      	ldr	r3, [r7, #4]
   850cc:	681b      	ldr	r3, [r3, #0]
   850ce:	4a05      	ldr	r2, [pc, #20]	; (850e4 <pll_enable+0x3c>)
   850d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   850d4:	61d3      	str	r3, [r2, #28]
}
   850d6:	bf00      	nop
   850d8:	3708      	adds	r7, #8
   850da:	46bd      	mov	sp, r7
   850dc:	bd80      	pop	{r7, pc}
   850de:	bf00      	nop
   850e0:	00085555 	.word	0x00085555
   850e4:	400e0400 	.word	0x400e0400

000850e8 <pll_is_locked>:
{
   850e8:	b580      	push	{r7, lr}
   850ea:	b082      	sub	sp, #8
   850ec:	af00      	add	r7, sp, #0
   850ee:	6078      	str	r0, [r7, #4]
	if (ul_pll_id == PLLA_ID) {
   850f0:	687b      	ldr	r3, [r7, #4]
   850f2:	2b00      	cmp	r3, #0
   850f4:	d103      	bne.n	850fe <pll_is_locked+0x16>
		return pmc_is_locked_pllack();
   850f6:	4b05      	ldr	r3, [pc, #20]	; (8510c <pll_is_locked+0x24>)
   850f8:	4798      	blx	r3
   850fa:	4603      	mov	r3, r0
   850fc:	e002      	b.n	85104 <pll_is_locked+0x1c>
		return pmc_is_locked_upll();
   850fe:	4b04      	ldr	r3, [pc, #16]	; (85110 <pll_is_locked+0x28>)
   85100:	4798      	blx	r3
   85102:	4603      	mov	r3, r0
}
   85104:	4618      	mov	r0, r3
   85106:	3708      	adds	r7, #8
   85108:	46bd      	mov	sp, r7
   8510a:	bd80      	pop	{r7, pc}
   8510c:	0008556d 	.word	0x0008556d
   85110:	000855a1 	.word	0x000855a1

00085114 <pll_enable_source>:
{
   85114:	b580      	push	{r7, lr}
   85116:	b082      	sub	sp, #8
   85118:	af00      	add	r7, sp, #0
   8511a:	4603      	mov	r3, r0
   8511c:	71fb      	strb	r3, [r7, #7]
	switch (e_src) {
   8511e:	79fb      	ldrb	r3, [r7, #7]
   85120:	3b03      	subs	r3, #3
   85122:	2b04      	cmp	r3, #4
   85124:	d808      	bhi.n	85138 <pll_enable_source+0x24>
		osc_enable(e_src);
   85126:	79fb      	ldrb	r3, [r7, #7]
   85128:	4618      	mov	r0, r3
   8512a:	4b06      	ldr	r3, [pc, #24]	; (85144 <pll_enable_source+0x30>)
   8512c:	4798      	blx	r3
		osc_wait_ready(e_src);
   8512e:	79fb      	ldrb	r3, [r7, #7]
   85130:	4618      	mov	r0, r3
   85132:	4b05      	ldr	r3, [pc, #20]	; (85148 <pll_enable_source+0x34>)
   85134:	4798      	blx	r3
		break;
   85136:	e000      	b.n	8513a <pll_enable_source+0x26>
		break;
   85138:	bf00      	nop
}
   8513a:	bf00      	nop
   8513c:	3708      	adds	r7, #8
   8513e:	46bd      	mov	sp, r7
   85140:	bd80      	pop	{r7, pc}
   85142:	bf00      	nop
   85144:	00084e95 	.word	0x00084e95
   85148:	0008500d 	.word	0x0008500d

0008514c <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
   8514c:	b580      	push	{r7, lr}
   8514e:	b082      	sub	sp, #8
   85150:	af00      	add	r7, sp, #0
   85152:	6078      	str	r0, [r7, #4]
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   85154:	bf00      	nop
   85156:	6878      	ldr	r0, [r7, #4]
   85158:	4b04      	ldr	r3, [pc, #16]	; (8516c <pll_wait_for_lock+0x20>)
   8515a:	4798      	blx	r3
   8515c:	4603      	mov	r3, r0
   8515e:	2b00      	cmp	r3, #0
   85160:	d0f9      	beq.n	85156 <pll_wait_for_lock+0xa>
		/* Do nothing */
	}

	return 0;
   85162:	2300      	movs	r3, #0
}
   85164:	4618      	mov	r0, r3
   85166:	3708      	adds	r7, #8
   85168:	46bd      	mov	sp, r7
   8516a:	bd80      	pop	{r7, pc}
   8516c:	000850e9 	.word	0x000850e9

00085170 <sysclk_get_main_hz>:
{
   85170:	b580      	push	{r7, lr}
   85172:	af00      	add	r7, sp, #0
		return pll_get_default_rate(0);
   85174:	2006      	movs	r0, #6
   85176:	4b03      	ldr	r3, [pc, #12]	; (85184 <sysclk_get_main_hz+0x14>)
   85178:	4798      	blx	r3
   8517a:	4603      	mov	r3, r0
   8517c:	011b      	lsls	r3, r3, #4
}
   8517e:	4618      	mov	r0, r3
   85180:	bd80      	pop	{r7, pc}
   85182:	bf00      	nop
   85184:	00084f9d 	.word	0x00084f9d

00085188 <sysclk_get_cpu_hz>:
{
   85188:	b580      	push	{r7, lr}
   8518a:	af00      	add	r7, sp, #0
	return sysclk_get_main_hz() /
   8518c:	4b02      	ldr	r3, [pc, #8]	; (85198 <sysclk_get_cpu_hz+0x10>)
   8518e:	4798      	blx	r3
   85190:	4603      	mov	r3, r0
   85192:	085b      	lsrs	r3, r3, #1
}
   85194:	4618      	mov	r0, r3
   85196:	bd80      	pop	{r7, pc}
   85198:	00085171 	.word	0x00085171

0008519c <sysclk_enable_usb>:
 *
 * \param pll_id Source of the USB clock.
 * \param div Actual clock divisor. Must be superior to 0.
 */
void sysclk_enable_usb(void)
{
   8519c:	b590      	push	{r4, r7, lr}
   8519e:	b083      	sub	sp, #12
   851a0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	pll_enable_source(CONFIG_PLL1_SOURCE);
   851a2:	2006      	movs	r0, #6
   851a4:	4b09      	ldr	r3, [pc, #36]	; (851cc <sysclk_enable_usb+0x30>)
   851a6:	4798      	blx	r3
	pll_config_defaults(&pllcfg, 1);
   851a8:	1d38      	adds	r0, r7, #4
   851aa:	2300      	movs	r3, #0
   851ac:	2200      	movs	r2, #0
   851ae:	2106      	movs	r1, #6
   851b0:	4c07      	ldr	r4, [pc, #28]	; (851d0 <sysclk_enable_usb+0x34>)
   851b2:	47a0      	blx	r4
	pll_enable(&pllcfg, 1);
   851b4:	1d3b      	adds	r3, r7, #4
   851b6:	2101      	movs	r1, #1
   851b8:	4618      	mov	r0, r3
   851ba:	4b06      	ldr	r3, [pc, #24]	; (851d4 <sysclk_enable_usb+0x38>)
   851bc:	4798      	blx	r3
	pll_wait_for_lock(1);
   851be:	2001      	movs	r0, #1
   851c0:	4b05      	ldr	r3, [pc, #20]	; (851d8 <sysclk_enable_usb+0x3c>)
   851c2:	4798      	blx	r3
}
   851c4:	bf00      	nop
   851c6:	370c      	adds	r7, #12
   851c8:	46bd      	mov	sp, r7
   851ca:	bd90      	pop	{r4, r7, pc}
   851cc:	00085115 	.word	0x00085115
   851d0:	0008503d 	.word	0x0008503d
   851d4:	000850a9 	.word	0x000850a9
   851d8:	0008514d 	.word	0x0008514d

000851dc <sysclk_init>:
		pll_disable(1);
	}
}

void sysclk_init(void)
{
   851dc:	b590      	push	{r4, r7, lr}
   851de:	b083      	sub	sp, #12
   851e0:	af00      	add	r7, sp, #0
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   851e2:	4816      	ldr	r0, [pc, #88]	; (8523c <sysclk_init+0x60>)
   851e4:	4b16      	ldr	r3, [pc, #88]	; (85240 <sysclk_init+0x64>)
   851e6:	4798      	blx	r3
		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
	}

#ifdef CONFIG_PLL0_SOURCE
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
   851e8:	2006      	movs	r0, #6
   851ea:	4b16      	ldr	r3, [pc, #88]	; (85244 <sysclk_init+0x68>)
   851ec:	4798      	blx	r3
#  ifndef CONFIG_PLL1_SOURCE
			pmc_osc_disable_main_xtal();
#  endif
		} else if (CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_XTAL ||
				CONFIG_PLL0_SOURCE == PLL_SRC_MAINCK_BYPASS) {
			pmc_mainck_osc_select(CKGR_MOR_MOSCSEL);
   851ee:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
   851f2:	4b15      	ldr	r3, [pc, #84]	; (85248 <sysclk_init+0x6c>)
   851f4:	4798      	blx	r3
			while(!pmc_osc_is_ready_mainck());
   851f6:	bf00      	nop
   851f8:	4b14      	ldr	r3, [pc, #80]	; (8524c <sysclk_init+0x70>)
   851fa:	4798      	blx	r3
   851fc:	4603      	mov	r3, r0
   851fe:	2b00      	cmp	r3, #0
   85200:	d0fa      	beq.n	851f8 <sysclk_init+0x1c>
		}
		pll_config_defaults(&pllcfg, 0);
   85202:	1d38      	adds	r0, r7, #4
   85204:	2310      	movs	r3, #16
   85206:	2201      	movs	r2, #1
   85208:	2106      	movs	r1, #6
   8520a:	4c11      	ldr	r4, [pc, #68]	; (85250 <sysclk_init+0x74>)
   8520c:	47a0      	blx	r4
		pll_enable(&pllcfg, 0);
   8520e:	1d3b      	adds	r3, r7, #4
   85210:	2100      	movs	r1, #0
   85212:	4618      	mov	r0, r3
   85214:	4b0f      	ldr	r3, [pc, #60]	; (85254 <sysclk_init+0x78>)
   85216:	4798      	blx	r3
		pll_wait_for_lock(0);
   85218:	2000      	movs	r0, #0
   8521a:	4b0f      	ldr	r3, [pc, #60]	; (85258 <sysclk_init+0x7c>)
   8521c:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8521e:	2010      	movs	r0, #16
   85220:	4b0e      	ldr	r3, [pc, #56]	; (8525c <sysclk_init+0x80>)
   85222:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   85224:	4b0e      	ldr	r3, [pc, #56]	; (85260 <sysclk_init+0x84>)
   85226:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   85228:	4b0e      	ldr	r3, [pc, #56]	; (85264 <sysclk_init+0x88>)
   8522a:	4798      	blx	r3
   8522c:	4603      	mov	r3, r0
   8522e:	4618      	mov	r0, r3
   85230:	4b03      	ldr	r3, [pc, #12]	; (85240 <sysclk_init+0x64>)
   85232:	4798      	blx	r3

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   85234:	bf00      	nop
   85236:	370c      	adds	r7, #12
   85238:	46bd      	mov	sp, r7
   8523a:	bd90      	pop	{r4, r7, pc}
   8523c:	05b8d800 	.word	0x05b8d800
   85240:	200001bd 	.word	0x200001bd
   85244:	00085115 	.word	0x00085115
   85248:	00085515 	.word	0x00085515
   8524c:	000854fd 	.word	0x000854fd
   85250:	0008503d 	.word	0x0008503d
   85254:	000850a9 	.word	0x000850a9
   85258:	0008514d 	.word	0x0008514d
   8525c:	000852e9 	.word	0x000852e9
   85260:	000864c9 	.word	0x000864c9
   85264:	00085189 	.word	0x00085189

00085268 <pmc_switch_mck_to_mainck>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
   85268:	b480      	push	{r7}
   8526a:	b085      	sub	sp, #20
   8526c:	af00      	add	r7, sp, #0
   8526e:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85270:	4b1c      	ldr	r3, [pc, #112]	; (852e4 <pmc_switch_mck_to_mainck+0x7c>)
   85272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85274:	f023 0303 	bic.w	r3, r3, #3
   85278:	4a1a      	ldr	r2, [pc, #104]	; (852e4 <pmc_switch_mck_to_mainck+0x7c>)
   8527a:	f043 0301 	orr.w	r3, r3, #1
   8527e:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85280:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85284:	60fb      	str	r3, [r7, #12]
   85286:	e007      	b.n	85298 <pmc_switch_mck_to_mainck+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85288:	68fb      	ldr	r3, [r7, #12]
   8528a:	2b00      	cmp	r3, #0
   8528c:	d101      	bne.n	85292 <pmc_switch_mck_to_mainck+0x2a>
			return 1;
   8528e:	2301      	movs	r3, #1
   85290:	e023      	b.n	852da <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   85292:	68fb      	ldr	r3, [r7, #12]
   85294:	3b01      	subs	r3, #1
   85296:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85298:	4b12      	ldr	r3, [pc, #72]	; (852e4 <pmc_switch_mck_to_mainck+0x7c>)
   8529a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8529c:	f003 0308 	and.w	r3, r3, #8
   852a0:	2b00      	cmp	r3, #0
   852a2:	d0f1      	beq.n	85288 <pmc_switch_mck_to_mainck+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   852a4:	4b0f      	ldr	r3, [pc, #60]	; (852e4 <pmc_switch_mck_to_mainck+0x7c>)
   852a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   852a8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   852ac:	490d      	ldr	r1, [pc, #52]	; (852e4 <pmc_switch_mck_to_mainck+0x7c>)
   852ae:	687b      	ldr	r3, [r7, #4]
   852b0:	4313      	orrs	r3, r2
   852b2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   852b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
   852b8:	60fb      	str	r3, [r7, #12]
   852ba:	e007      	b.n	852cc <pmc_switch_mck_to_mainck+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   852bc:	68fb      	ldr	r3, [r7, #12]
   852be:	2b00      	cmp	r3, #0
   852c0:	d101      	bne.n	852c6 <pmc_switch_mck_to_mainck+0x5e>
			return 1;
   852c2:	2301      	movs	r3, #1
   852c4:	e009      	b.n	852da <pmc_switch_mck_to_mainck+0x72>
			--ul_timeout) {
   852c6:	68fb      	ldr	r3, [r7, #12]
   852c8:	3b01      	subs	r3, #1
   852ca:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   852cc:	4b05      	ldr	r3, [pc, #20]	; (852e4 <pmc_switch_mck_to_mainck+0x7c>)
   852ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   852d0:	f003 0308 	and.w	r3, r3, #8
   852d4:	2b00      	cmp	r3, #0
   852d6:	d0f1      	beq.n	852bc <pmc_switch_mck_to_mainck+0x54>
		}
	}

	return 0;
   852d8:	2300      	movs	r3, #0
}
   852da:	4618      	mov	r0, r3
   852dc:	3714      	adds	r7, #20
   852de:	46bd      	mov	sp, r7
   852e0:	bc80      	pop	{r7}
   852e2:	4770      	bx	lr
   852e4:	400e0400 	.word	0x400e0400

000852e8 <pmc_switch_mck_to_pllack>:
 *
 * \retval 0 Success.
 * \retval 1 Timeout error.
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
   852e8:	b480      	push	{r7}
   852ea:	b085      	sub	sp, #20
   852ec:	af00      	add	r7, sp, #0
   852ee:	6078      	str	r0, [r7, #4]
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   852f0:	4b1c      	ldr	r3, [pc, #112]	; (85364 <pmc_switch_mck_to_pllack+0x7c>)
   852f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   852f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
   852f8:	491a      	ldr	r1, [pc, #104]	; (85364 <pmc_switch_mck_to_pllack+0x7c>)
   852fa:	687b      	ldr	r3, [r7, #4]
   852fc:	4313      	orrs	r3, r2
   852fe:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85300:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85304:	60fb      	str	r3, [r7, #12]
   85306:	e007      	b.n	85318 <pmc_switch_mck_to_pllack+0x30>
			--ul_timeout) {
		if (ul_timeout == 0) {
   85308:	68fb      	ldr	r3, [r7, #12]
   8530a:	2b00      	cmp	r3, #0
   8530c:	d101      	bne.n	85312 <pmc_switch_mck_to_pllack+0x2a>
			return 1;
   8530e:	2301      	movs	r3, #1
   85310:	e023      	b.n	8535a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   85312:	68fb      	ldr	r3, [r7, #12]
   85314:	3b01      	subs	r3, #1
   85316:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85318:	4b12      	ldr	r3, [pc, #72]	; (85364 <pmc_switch_mck_to_pllack+0x7c>)
   8531a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8531c:	f003 0308 	and.w	r3, r3, #8
   85320:	2b00      	cmp	r3, #0
   85322:	d0f1      	beq.n	85308 <pmc_switch_mck_to_pllack+0x20>
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   85324:	4b0f      	ldr	r3, [pc, #60]	; (85364 <pmc_switch_mck_to_pllack+0x7c>)
   85326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85328:	f023 0303 	bic.w	r3, r3, #3
   8532c:	4a0d      	ldr	r2, [pc, #52]	; (85364 <pmc_switch_mck_to_pllack+0x7c>)
   8532e:	f043 0302 	orr.w	r3, r3, #2
   85332:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   85334:	f44f 6300 	mov.w	r3, #2048	; 0x800
   85338:	60fb      	str	r3, [r7, #12]
   8533a:	e007      	b.n	8534c <pmc_switch_mck_to_pllack+0x64>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8533c:	68fb      	ldr	r3, [r7, #12]
   8533e:	2b00      	cmp	r3, #0
   85340:	d101      	bne.n	85346 <pmc_switch_mck_to_pllack+0x5e>
			return 1;
   85342:	2301      	movs	r3, #1
   85344:	e009      	b.n	8535a <pmc_switch_mck_to_pllack+0x72>
			--ul_timeout) {
   85346:	68fb      	ldr	r3, [r7, #12]
   85348:	3b01      	subs	r3, #1
   8534a:	60fb      	str	r3, [r7, #12]
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8534c:	4b05      	ldr	r3, [pc, #20]	; (85364 <pmc_switch_mck_to_pllack+0x7c>)
   8534e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85350:	f003 0308 	and.w	r3, r3, #8
   85354:	2b00      	cmp	r3, #0
   85356:	d0f1      	beq.n	8533c <pmc_switch_mck_to_pllack+0x54>
		}
	}

	return 0;
   85358:	2300      	movs	r3, #0
}
   8535a:	4618      	mov	r0, r3
   8535c:	3714      	adds	r7, #20
   8535e:	46bd      	mov	sp, r7
   85360:	bc80      	pop	{r7}
   85362:	4770      	bx	lr
   85364:	400e0400 	.word	0x400e0400

00085368 <pmc_switch_sclk_to_32kxtal>:
 *       VDDIO power supply.
 *
 * \param ul_bypass 0 for Xtal, 1 for bypass.
 */
void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
{
   85368:	b480      	push	{r7}
   8536a:	b083      	sub	sp, #12
   8536c:	af00      	add	r7, sp, #0
   8536e:	6078      	str	r0, [r7, #4]
	/* Set Bypass mode if required */
	if (ul_bypass == 1) {
   85370:	687b      	ldr	r3, [r7, #4]
   85372:	2b01      	cmp	r3, #1
   85374:	d107      	bne.n	85386 <pmc_switch_sclk_to_32kxtal+0x1e>
		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
   85376:	4b08      	ldr	r3, [pc, #32]	; (85398 <pmc_switch_sclk_to_32kxtal+0x30>)
   85378:	689b      	ldr	r3, [r3, #8]
   8537a:	4a07      	ldr	r2, [pc, #28]	; (85398 <pmc_switch_sclk_to_32kxtal+0x30>)
   8537c:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   85380:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   85384:	6093      	str	r3, [r2, #8]
			SUPC_MR_OSCBYPASS;
	}

	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
   85386:	4b04      	ldr	r3, [pc, #16]	; (85398 <pmc_switch_sclk_to_32kxtal+0x30>)
   85388:	4a04      	ldr	r2, [pc, #16]	; (8539c <pmc_switch_sclk_to_32kxtal+0x34>)
   8538a:	601a      	str	r2, [r3, #0]
}
   8538c:	bf00      	nop
   8538e:	370c      	adds	r7, #12
   85390:	46bd      	mov	sp, r7
   85392:	bc80      	pop	{r7}
   85394:	4770      	bx	lr
   85396:	bf00      	nop
   85398:	400e1210 	.word	0x400e1210
   8539c:	a5000008 	.word	0xa5000008

000853a0 <pmc_osc_is_ready_32kxtal>:
 *
 * \retval 1 External 32k Xtal is ready.
 * \retval 0 External 32k Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_32kxtal(void)
{
   853a0:	b480      	push	{r7}
   853a2:	af00      	add	r7, sp, #0
	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
   853a4:	4b09      	ldr	r3, [pc, #36]	; (853cc <pmc_osc_is_ready_32kxtal+0x2c>)
   853a6:	695b      	ldr	r3, [r3, #20]
   853a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
   853ac:	2b00      	cmp	r3, #0
   853ae:	d007      	beq.n	853c0 <pmc_osc_is_ready_32kxtal+0x20>
   853b0:	4b07      	ldr	r3, [pc, #28]	; (853d0 <pmc_osc_is_ready_32kxtal+0x30>)
   853b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   853b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
   853b8:	2b00      	cmp	r3, #0
   853ba:	d001      	beq.n	853c0 <pmc_osc_is_ready_32kxtal+0x20>
   853bc:	2301      	movs	r3, #1
   853be:	e000      	b.n	853c2 <pmc_osc_is_ready_32kxtal+0x22>
   853c0:	2300      	movs	r3, #0
}
   853c2:	4618      	mov	r0, r3
   853c4:	46bd      	mov	sp, r7
   853c6:	bc80      	pop	{r7}
   853c8:	4770      	bx	lr
   853ca:	bf00      	nop
   853cc:	400e1210 	.word	0x400e1210
   853d0:	400e0400 	.word	0x400e0400

000853d4 <pmc_osc_enable_fastrc>:
 * \brief Enable fast RC oscillator.
 *
 * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 */
void pmc_osc_enable_fastrc(uint32_t ul_rc)
{
   853d4:	b480      	push	{r7}
   853d6:	b083      	sub	sp, #12
   853d8:	af00      	add	r7, sp, #0
   853da:	6078      	str	r0, [r7, #4]
	/* Enable Fast RC oscillator but DO NOT switch to RC */
	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
   853dc:	4b13      	ldr	r3, [pc, #76]	; (8542c <pmc_osc_enable_fastrc+0x58>)
   853de:	6a1b      	ldr	r3, [r3, #32]
   853e0:	4a12      	ldr	r2, [pc, #72]	; (8542c <pmc_osc_enable_fastrc+0x58>)
   853e2:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   853e6:	f043 0308 	orr.w	r3, r3, #8
   853ea:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   853ec:	bf00      	nop
   853ee:	4b0f      	ldr	r3, [pc, #60]	; (8542c <pmc_osc_enable_fastrc+0x58>)
   853f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   853f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   853f6:	2b00      	cmp	r3, #0
   853f8:	d0f9      	beq.n	853ee <pmc_osc_enable_fastrc+0x1a>

	/* Change Fast RC oscillator frequency */
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   853fa:	4b0c      	ldr	r3, [pc, #48]	; (8542c <pmc_osc_enable_fastrc+0x58>)
   853fc:	6a1b      	ldr	r3, [r3, #32]
   853fe:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
			CKGR_MOR_KEY_PASSWD | ul_rc;
   85406:	687a      	ldr	r2, [r7, #4]
   85408:	4313      	orrs	r3, r2
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   8540a:	4a08      	ldr	r2, [pc, #32]	; (8542c <pmc_osc_enable_fastrc+0x58>)
			CKGR_MOR_KEY_PASSWD | ul_rc;
   8540c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
   85410:	6213      	str	r3, [r2, #32]
	/* Wait the Fast RC to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   85412:	bf00      	nop
   85414:	4b05      	ldr	r3, [pc, #20]	; (8542c <pmc_osc_enable_fastrc+0x58>)
   85416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   8541c:	2b00      	cmp	r3, #0
   8541e:	d0f9      	beq.n	85414 <pmc_osc_enable_fastrc+0x40>
}
   85420:	bf00      	nop
   85422:	bf00      	nop
   85424:	370c      	adds	r7, #12
   85426:	46bd      	mov	sp, r7
   85428:	bc80      	pop	{r7}
   8542a:	4770      	bx	lr
   8542c:	400e0400 	.word	0x400e0400

00085430 <pmc_osc_is_ready_fastrc>:
 * \brief Check if the main fastrc is ready.
 *
 * \retval 0 Xtal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_fastrc(void)
{
   85430:	b480      	push	{r7}
   85432:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
   85434:	4b03      	ldr	r3, [pc, #12]	; (85444 <pmc_osc_is_ready_fastrc+0x14>)
   85436:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
}
   8543c:	4618      	mov	r0, r3
   8543e:	46bd      	mov	sp, r7
   85440:	bc80      	pop	{r7}
   85442:	4770      	bx	lr
   85444:	400e0400 	.word	0x400e0400

00085448 <pmc_osc_enable_main_xtal>:
 * \brief Enable main XTAL oscillator.
 *
 * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 */
void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
{
   85448:	b480      	push	{r7}
   8544a:	b085      	sub	sp, #20
   8544c:	af00      	add	r7, sp, #0
   8544e:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   85450:	4b10      	ldr	r3, [pc, #64]	; (85494 <pmc_osc_enable_main_xtal+0x4c>)
   85452:	6a1b      	ldr	r3, [r3, #32]
   85454:	60fb      	str	r3, [r7, #12]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   85456:	68fb      	ldr	r3, [r7, #12]
   85458:	f023 0303 	bic.w	r3, r3, #3
   8545c:	60fb      	str	r3, [r7, #12]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8545e:	687b      	ldr	r3, [r7, #4]
   85460:	021b      	lsls	r3, r3, #8
   85462:	b29a      	uxth	r2, r3
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   85464:	68fb      	ldr	r3, [r7, #12]
   85466:	4313      	orrs	r3, r2
   85468:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8546c:	f043 0301 	orr.w	r3, r3, #1
   85470:	60fb      	str	r3, [r7, #12]
	PMC->CKGR_MOR = mor;
   85472:	4a08      	ldr	r2, [pc, #32]	; (85494 <pmc_osc_enable_main_xtal+0x4c>)
   85474:	68fb      	ldr	r3, [r7, #12]
   85476:	6213      	str	r3, [r2, #32]
	/* Wait the main Xtal to stabilize */
	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   85478:	bf00      	nop
   8547a:	4b06      	ldr	r3, [pc, #24]	; (85494 <pmc_osc_enable_main_xtal+0x4c>)
   8547c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8547e:	f003 0301 	and.w	r3, r3, #1
   85482:	2b00      	cmp	r3, #0
   85484:	d0f9      	beq.n	8547a <pmc_osc_enable_main_xtal+0x32>
}
   85486:	bf00      	nop
   85488:	bf00      	nop
   8548a:	3714      	adds	r7, #20
   8548c:	46bd      	mov	sp, r7
   8548e:	bc80      	pop	{r7}
   85490:	4770      	bx	lr
   85492:	bf00      	nop
   85494:	400e0400 	.word	0x400e0400

00085498 <pmc_osc_bypass_main_xtal>:

/**
 * \brief Bypass main XTAL.
 */
void pmc_osc_bypass_main_xtal(void)
{
   85498:	b480      	push	{r7}
   8549a:	b083      	sub	sp, #12
   8549c:	af00      	add	r7, sp, #0
	uint32_t mor = PMC->CKGR_MOR;
   8549e:	4b0a      	ldr	r3, [pc, #40]	; (854c8 <pmc_osc_bypass_main_xtal+0x30>)
   854a0:	6a1b      	ldr	r3, [r3, #32]
   854a2:	607b      	str	r3, [r7, #4]
	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
   854a4:	687b      	ldr	r3, [r7, #4]
   854a6:	f023 0303 	bic.w	r3, r3, #3
   854aa:	607b      	str	r3, [r7, #4]
	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
   854ac:	687b      	ldr	r3, [r7, #4]
   854ae:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   854b2:	f043 0302 	orr.w	r3, r3, #2
   854b6:	607b      	str	r3, [r7, #4]
	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
	PMC->CKGR_MOR = mor;
   854b8:	4a03      	ldr	r2, [pc, #12]	; (854c8 <pmc_osc_bypass_main_xtal+0x30>)
   854ba:	687b      	ldr	r3, [r7, #4]
   854bc:	6213      	str	r3, [r2, #32]
	/* The MOSCXTS in PMC_SR is automatically set */
}
   854be:	bf00      	nop
   854c0:	370c      	adds	r7, #12
   854c2:	46bd      	mov	sp, r7
   854c4:	bc80      	pop	{r7}
   854c6:	4770      	bx	lr
   854c8:	400e0400 	.word	0x400e0400

000854cc <pmc_osc_is_bypassed_main_xtal>:
 * \brief Check if the main crystal is bypassed.
 *
 * \retval 0 Xtal is bypassed, otherwise not.
 */
uint32_t pmc_osc_is_bypassed_main_xtal(void)
{
   854cc:	b480      	push	{r7}
   854ce:	af00      	add	r7, sp, #0
	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
   854d0:	4b03      	ldr	r3, [pc, #12]	; (854e0 <pmc_osc_is_bypassed_main_xtal+0x14>)
   854d2:	6a1b      	ldr	r3, [r3, #32]
   854d4:	f003 0302 	and.w	r3, r3, #2
}
   854d8:	4618      	mov	r0, r3
   854da:	46bd      	mov	sp, r7
   854dc:	bc80      	pop	{r7}
   854de:	4770      	bx	lr
   854e0:	400e0400 	.word	0x400e0400

000854e4 <pmc_osc_is_ready_main_xtal>:
 * \note If main crystal is bypassed, it's always ready.
 *
 * \retval 0 main crystal is not ready, otherwise ready.
 */
uint32_t pmc_osc_is_ready_main_xtal(void)
{
   854e4:	b480      	push	{r7}
   854e6:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
   854e8:	4b03      	ldr	r3, [pc, #12]	; (854f8 <pmc_osc_is_ready_main_xtal+0x14>)
   854ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   854ec:	f003 0301 	and.w	r3, r3, #1
}
   854f0:	4618      	mov	r0, r3
   854f2:	46bd      	mov	sp, r7
   854f4:	bc80      	pop	{r7}
   854f6:	4770      	bx	lr
   854f8:	400e0400 	.word	0x400e0400

000854fc <pmc_osc_is_ready_mainck>:
 *
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
   854fc:	b480      	push	{r7}
   854fe:	af00      	add	r7, sp, #0
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   85500:	4b03      	ldr	r3, [pc, #12]	; (85510 <pmc_osc_is_ready_mainck+0x14>)
   85502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
   85508:	4618      	mov	r0, r3
   8550a:	46bd      	mov	sp, r7
   8550c:	bc80      	pop	{r7}
   8550e:	4770      	bx	lr
   85510:	400e0400 	.word	0x400e0400

00085514 <pmc_mainck_osc_select>:
 * \note This function will not enable/disable RC or Main Crystal.
 *
 * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 */
void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
{
   85514:	b480      	push	{r7}
   85516:	b085      	sub	sp, #20
   85518:	af00      	add	r7, sp, #0
   8551a:	6078      	str	r0, [r7, #4]
	uint32_t mor = PMC->CKGR_MOR;
   8551c:	4b0c      	ldr	r3, [pc, #48]	; (85550 <pmc_mainck_osc_select+0x3c>)
   8551e:	6a1b      	ldr	r3, [r3, #32]
   85520:	60fb      	str	r3, [r7, #12]
	if (ul_xtal_rc) {
   85522:	687b      	ldr	r3, [r7, #4]
   85524:	2b00      	cmp	r3, #0
   85526:	d004      	beq.n	85532 <pmc_mainck_osc_select+0x1e>
		mor |=  CKGR_MOR_MOSCSEL;
   85528:	68fb      	ldr	r3, [r7, #12]
   8552a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   8552e:	60fb      	str	r3, [r7, #12]
   85530:	e003      	b.n	8553a <pmc_mainck_osc_select+0x26>
	} else {
		mor &= ~CKGR_MOR_MOSCSEL;
   85532:	68fb      	ldr	r3, [r7, #12]
   85534:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   85538:	60fb      	str	r3, [r7, #12]
	}
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
   8553a:	4a05      	ldr	r2, [pc, #20]	; (85550 <pmc_mainck_osc_select+0x3c>)
   8553c:	68fb      	ldr	r3, [r7, #12]
   8553e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85542:	6213      	str	r3, [r2, #32]
}
   85544:	bf00      	nop
   85546:	3714      	adds	r7, #20
   85548:	46bd      	mov	sp, r7
   8554a:	bc80      	pop	{r7}
   8554c:	4770      	bx	lr
   8554e:	bf00      	nop
   85550:	400e0400 	.word	0x400e0400

00085554 <pmc_disable_pllack>:

/**
 * \brief Disable PLLA clock.
 */
void pmc_disable_pllack(void)
{
   85554:	b480      	push	{r7}
   85556:	af00      	add	r7, sp, #0
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   85558:	4b03      	ldr	r3, [pc, #12]	; (85568 <pmc_disable_pllack+0x14>)
   8555a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   8555e:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   85560:	bf00      	nop
   85562:	46bd      	mov	sp, r7
   85564:	bc80      	pop	{r7}
   85566:	4770      	bx	lr
   85568:	400e0400 	.word	0x400e0400

0008556c <pmc_is_locked_pllack>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
   8556c:	b480      	push	{r7}
   8556e:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   85570:	4b03      	ldr	r3, [pc, #12]	; (85580 <pmc_is_locked_pllack+0x14>)
   85572:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85574:	f003 0302 	and.w	r3, r3, #2
}
   85578:	4618      	mov	r0, r3
   8557a:	46bd      	mov	sp, r7
   8557c:	bc80      	pop	{r7}
   8557e:	4770      	bx	lr
   85580:	400e0400 	.word	0x400e0400

00085584 <pmc_disable_upll_clock>:

/**
 * \brief Disable UPLL clock.
 */
void pmc_disable_upll_clock(void)
{
   85584:	b480      	push	{r7}
   85586:	af00      	add	r7, sp, #0
	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
   85588:	4b04      	ldr	r3, [pc, #16]	; (8559c <pmc_disable_upll_clock+0x18>)
   8558a:	69db      	ldr	r3, [r3, #28]
   8558c:	4a03      	ldr	r2, [pc, #12]	; (8559c <pmc_disable_upll_clock+0x18>)
   8558e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85592:	61d3      	str	r3, [r2, #28]
}
   85594:	bf00      	nop
   85596:	46bd      	mov	sp, r7
   85598:	bc80      	pop	{r7}
   8559a:	4770      	bx	lr
   8559c:	400e0400 	.word	0x400e0400

000855a0 <pmc_is_locked_upll>:
 *
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_upll(void)
{
   855a0:	b480      	push	{r7}
   855a2:	af00      	add	r7, sp, #0
	return (PMC->PMC_SR & PMC_SR_LOCKU);
   855a4:	4b03      	ldr	r3, [pc, #12]	; (855b4 <pmc_is_locked_upll+0x14>)
   855a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   855a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
}
   855ac:	4618      	mov	r0, r3
   855ae:	46bd      	mov	sp, r7
   855b0:	bc80      	pop	{r7}
   855b2:	4770      	bx	lr
   855b4:	400e0400 	.word	0x400e0400

000855b8 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   855b8:	b480      	push	{r7}
   855ba:	b083      	sub	sp, #12
   855bc:	af00      	add	r7, sp, #0
   855be:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   855c0:	687b      	ldr	r3, [r7, #4]
   855c2:	2b1d      	cmp	r3, #29
   855c4:	d901      	bls.n	855ca <pmc_enable_periph_clk+0x12>
		return 1;
   855c6:	2301      	movs	r3, #1
   855c8:	e015      	b.n	855f6 <pmc_enable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   855ca:	687b      	ldr	r3, [r7, #4]
   855cc:	2b1f      	cmp	r3, #31
   855ce:	d811      	bhi.n	855f4 <pmc_enable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   855d0:	4b0b      	ldr	r3, [pc, #44]	; (85600 <pmc_enable_periph_clk+0x48>)
   855d2:	699a      	ldr	r2, [r3, #24]
   855d4:	2101      	movs	r1, #1
   855d6:	687b      	ldr	r3, [r7, #4]
   855d8:	fa01 f303 	lsl.w	r3, r1, r3
   855dc:	401a      	ands	r2, r3
   855de:	2101      	movs	r1, #1
   855e0:	687b      	ldr	r3, [r7, #4]
   855e2:	fa01 f303 	lsl.w	r3, r1, r3
   855e6:	429a      	cmp	r2, r3
   855e8:	d004      	beq.n	855f4 <pmc_enable_periph_clk+0x3c>
			PMC->PMC_PCER0 = 1 << ul_id;
   855ea:	2201      	movs	r2, #1
   855ec:	687b      	ldr	r3, [r7, #4]
   855ee:	409a      	lsls	r2, r3
   855f0:	4b03      	ldr	r3, [pc, #12]	; (85600 <pmc_enable_periph_clk+0x48>)
   855f2:	611a      	str	r2, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   855f4:	2300      	movs	r3, #0
}
   855f6:	4618      	mov	r0, r3
   855f8:	370c      	adds	r7, #12
   855fa:	46bd      	mov	sp, r7
   855fc:	bc80      	pop	{r7}
   855fe:	4770      	bx	lr
   85600:	400e0400 	.word	0x400e0400

00085604 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   85604:	b480      	push	{r7}
   85606:	b083      	sub	sp, #12
   85608:	af00      	add	r7, sp, #0
   8560a:	6078      	str	r0, [r7, #4]
	if (ul_id > MAX_PERIPH_ID) {
   8560c:	687b      	ldr	r3, [r7, #4]
   8560e:	2b1d      	cmp	r3, #29
   85610:	d901      	bls.n	85616 <pmc_disable_periph_clk+0x12>
		return 1;
   85612:	2301      	movs	r3, #1
   85614:	e015      	b.n	85642 <pmc_disable_periph_clk+0x3e>
	}

	if (ul_id < 32) {
   85616:	687b      	ldr	r3, [r7, #4]
   85618:	2b1f      	cmp	r3, #31
   8561a:	d811      	bhi.n	85640 <pmc_disable_periph_clk+0x3c>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
   8561c:	4b0b      	ldr	r3, [pc, #44]	; (8564c <pmc_disable_periph_clk+0x48>)
   8561e:	699a      	ldr	r2, [r3, #24]
   85620:	2101      	movs	r1, #1
   85622:	687b      	ldr	r3, [r7, #4]
   85624:	fa01 f303 	lsl.w	r3, r1, r3
   85628:	401a      	ands	r2, r3
   8562a:	2101      	movs	r1, #1
   8562c:	687b      	ldr	r3, [r7, #4]
   8562e:	fa01 f303 	lsl.w	r3, r1, r3
   85632:	429a      	cmp	r2, r3
   85634:	d104      	bne.n	85640 <pmc_disable_periph_clk+0x3c>
			PMC->PMC_PCDR0 = 1 << ul_id;
   85636:	2201      	movs	r2, #1
   85638:	687b      	ldr	r3, [r7, #4]
   8563a:	409a      	lsls	r2, r3
   8563c:	4b03      	ldr	r3, [pc, #12]	; (8564c <pmc_disable_periph_clk+0x48>)
   8563e:	615a      	str	r2, [r3, #20]
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
			PMC->PMC_PCDR1 = 1 << ul_id;
		}
#endif
	}
	return 0;
   85640:	2300      	movs	r3, #0
}
   85642:	4618      	mov	r0, r3
   85644:	370c      	adds	r7, #12
   85646:	46bd      	mov	sp, r7
   85648:	bc80      	pop	{r7}
   8564a:	4770      	bx	lr
   8564c:	400e0400 	.word	0x400e0400

00085650 <pmc_enable_pck>:
 * \brief Enable the specified programmable clock.
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
   85650:	b480      	push	{r7}
   85652:	b083      	sub	sp, #12
   85654:	af00      	add	r7, sp, #0
   85656:	6078      	str	r0, [r7, #4]
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   85658:	4a05      	ldr	r2, [pc, #20]	; (85670 <pmc_enable_pck+0x20>)
   8565a:	f44f 7180 	mov.w	r1, #256	; 0x100
   8565e:	687b      	ldr	r3, [r7, #4]
   85660:	fa01 f303 	lsl.w	r3, r1, r3
   85664:	6013      	str	r3, [r2, #0]
}
   85666:	bf00      	nop
   85668:	370c      	adds	r7, #12
   8566a:	46bd      	mov	sp, r7
   8566c:	bc80      	pop	{r7}
   8566e:	4770      	bx	lr
   85670:	400e0400 	.word	0x400e0400

00085674 <pmc_set_fast_startup_input>:
 *        (event generation).
 *
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
   85674:	b480      	push	{r7}
   85676:	b083      	sub	sp, #12
   85678:	af00      	add	r7, sp, #0
   8567a:	6078      	str	r0, [r7, #4]
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   8567c:	687b      	ldr	r3, [r7, #4]
   8567e:	f3c3 0312 	ubfx	r3, r3, #0, #19
   85682:	607b      	str	r3, [r7, #4]
	PMC->PMC_FSMR |= ul_inputs;
   85684:	4b05      	ldr	r3, [pc, #20]	; (8569c <pmc_set_fast_startup_input+0x28>)
   85686:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   85688:	4904      	ldr	r1, [pc, #16]	; (8569c <pmc_set_fast_startup_input+0x28>)
   8568a:	687b      	ldr	r3, [r7, #4]
   8568c:	4313      	orrs	r3, r2
   8568e:	670b      	str	r3, [r1, #112]	; 0x70
}
   85690:	bf00      	nop
   85692:	370c      	adds	r7, #12
   85694:	46bd      	mov	sp, r7
   85696:	bc80      	pop	{r7}
   85698:	4770      	bx	lr
   8569a:	bf00      	nop
   8569c:	400e0400 	.word	0x400e0400

000856a0 <pmc_enable_waitmode>:
/**
 * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
 * (LPM bit = 1)
 */
void pmc_enable_waitmode(void)
{
   856a0:	b480      	push	{r7}
   856a2:	b083      	sub	sp, #12
   856a4:	af00      	add	r7, sp, #0
	uint32_t i;

	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
   856a6:	4b13      	ldr	r3, [pc, #76]	; (856f4 <pmc_enable_waitmode+0x54>)
   856a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   856aa:	4a12      	ldr	r2, [pc, #72]	; (856f4 <pmc_enable_waitmode+0x54>)
   856ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   856b0:	6713      	str	r3, [r2, #112]	; 0x70
	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
   856b2:	4b11      	ldr	r3, [pc, #68]	; (856f8 <pmc_enable_waitmode+0x58>)
   856b4:	691b      	ldr	r3, [r3, #16]
   856b6:	4a10      	ldr	r2, [pc, #64]	; (856f8 <pmc_enable_waitmode+0x58>)
   856b8:	f023 0304 	bic.w	r3, r3, #4
   856bc:	6113      	str	r3, [r2, #16]
  __ASM volatile ("wfe");
   856be:	bf20      	wfe
}
   856c0:	bf00      	nop
	__WFE();

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
   856c2:	2300      	movs	r3, #0
   856c4:	607b      	str	r3, [r7, #4]
   856c6:	e004      	b.n	856d2 <pmc_enable_waitmode+0x32>
  __ASM volatile ("nop");
   856c8:	bf00      	nop
}
   856ca:	bf00      	nop
   856cc:	687b      	ldr	r3, [r7, #4]
   856ce:	3301      	adds	r3, #1
   856d0:	607b      	str	r3, [r7, #4]
   856d2:	687b      	ldr	r3, [r7, #4]
   856d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   856d8:	d3f6      	bcc.n	856c8 <pmc_enable_waitmode+0x28>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
   856da:	bf00      	nop
   856dc:	4b05      	ldr	r3, [pc, #20]	; (856f4 <pmc_enable_waitmode+0x54>)
   856de:	6a1b      	ldr	r3, [r3, #32]
   856e0:	f003 0308 	and.w	r3, r3, #8
   856e4:	2b00      	cmp	r3, #0
   856e6:	d0f9      	beq.n	856dc <pmc_enable_waitmode+0x3c>

}
   856e8:	bf00      	nop
   856ea:	bf00      	nop
   856ec:	370c      	adds	r7, #12
   856ee:	46bd      	mov	sp, r7
   856f0:	bc80      	pop	{r7}
   856f2:	4770      	bx	lr
   856f4:	400e0400 	.word	0x400e0400
   856f8:	e000ed00 	.word	0xe000ed00

000856fc <udi_vendor_enable>:
/**
 * \name Internal routines
 */
//@{
bool udi_vendor_enable(void)
{
   856fc:	b580      	push	{r7, lr}
   856fe:	af00      	add	r7, sp, #0
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   85700:	4b0b      	ldr	r3, [pc, #44]	; (85730 <udi_vendor_enable+0x34>)
   85702:	4798      	blx	r3
   85704:	4603      	mov	r3, r0
   85706:	78da      	ldrb	r2, [r3, #3]
   85708:	4b0a      	ldr	r3, [pc, #40]	; (85734 <udi_vendor_enable+0x38>)
   8570a:	701a      	strb	r2, [r3, #0]
	if (0 == udi_vendor_alternate_setting) {
   8570c:	4b09      	ldr	r3, [pc, #36]	; (85734 <udi_vendor_enable+0x38>)
   8570e:	781b      	ldrb	r3, [r3, #0]
   85710:	2b00      	cmp	r3, #0
   85712:	d109      	bne.n	85728 <udi_vendor_enable+0x2c>
		// Call application callback
		// to notify that interface is enabled
		if (!UDI_VENDOR_ENABLE_EXT()) {
   85714:	4b08      	ldr	r3, [pc, #32]	; (85738 <udi_vendor_enable+0x3c>)
   85716:	4798      	blx	r3
   85718:	4603      	mov	r3, r0
   8571a:	f083 0301 	eor.w	r3, r3, #1
   8571e:	b2db      	uxtb	r3, r3
   85720:	2b00      	cmp	r3, #0
   85722:	d001      	beq.n	85728 <udi_vendor_enable+0x2c>
			return false;
   85724:	2300      	movs	r3, #0
   85726:	e000      	b.n	8572a <udi_vendor_enable+0x2e>
		}
	}
	return true;
   85728:	2301      	movs	r3, #1
}
   8572a:	4618      	mov	r0, r3
   8572c:	bd80      	pop	{r7, pc}
   8572e:	bf00      	nop
   85730:	00081ba1 	.word	0x00081ba1
   85734:	20001438 	.word	0x20001438
   85738:	0008112d 	.word	0x0008112d

0008573c <udi_vendor_disable>:


void udi_vendor_disable(void)
{
   8573c:	b580      	push	{r7, lr}
   8573e:	af00      	add	r7, sp, #0
	if (0 == udi_vendor_alternate_setting) {
   85740:	4b03      	ldr	r3, [pc, #12]	; (85750 <udi_vendor_disable+0x14>)
   85742:	781b      	ldrb	r3, [r3, #0]
   85744:	2b00      	cmp	r3, #0
   85746:	d101      	bne.n	8574c <udi_vendor_disable+0x10>
		UDI_VENDOR_DISABLE_EXT();
   85748:	4b02      	ldr	r3, [pc, #8]	; (85754 <udi_vendor_disable+0x18>)
   8574a:	4798      	blx	r3
	}
}
   8574c:	bf00      	nop
   8574e:	bd80      	pop	{r7, pc}
   85750:	20001438 	.word	0x20001438
   85754:	00081165 	.word	0x00081165

00085758 <udi_vendor_setup>:

bool udi_vendor_setup(void)
{
   85758:	b580      	push	{r7, lr}
   8575a:	af00      	add	r7, sp, #0
	if (Udd_setup_is_in()) {
   8575c:	4b10      	ldr	r3, [pc, #64]	; (857a0 <udi_vendor_setup+0x48>)
   8575e:	781b      	ldrb	r3, [r3, #0]
   85760:	b25b      	sxtb	r3, r3
   85762:	2b00      	cmp	r3, #0
   85764:	da09      	bge.n	8577a <udi_vendor_setup+0x22>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   85766:	4b0e      	ldr	r3, [pc, #56]	; (857a0 <udi_vendor_setup+0x48>)
   85768:	781b      	ldrb	r3, [r3, #0]
   8576a:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8576e:	2b40      	cmp	r3, #64	; 0x40
   85770:	d103      	bne.n	8577a <udi_vendor_setup+0x22>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   85772:	4b0c      	ldr	r3, [pc, #48]	; (857a4 <udi_vendor_setup+0x4c>)
   85774:	4798      	blx	r3
   85776:	4603      	mov	r3, r0
   85778:	e00f      	b.n	8579a <udi_vendor_setup+0x42>
		}
	}
	if (Udd_setup_is_out()) {
   8577a:	4b09      	ldr	r3, [pc, #36]	; (857a0 <udi_vendor_setup+0x48>)
   8577c:	781b      	ldrb	r3, [r3, #0]
   8577e:	b25b      	sxtb	r3, r3
   85780:	2b00      	cmp	r3, #0
   85782:	db09      	blt.n	85798 <udi_vendor_setup+0x40>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   85784:	4b06      	ldr	r3, [pc, #24]	; (857a0 <udi_vendor_setup+0x48>)
   85786:	781b      	ldrb	r3, [r3, #0]
   85788:	f003 0360 	and.w	r3, r3, #96	; 0x60
   8578c:	2b40      	cmp	r3, #64	; 0x40
   8578e:	d103      	bne.n	85798 <udi_vendor_setup+0x40>
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   85790:	4b05      	ldr	r3, [pc, #20]	; (857a8 <udi_vendor_setup+0x50>)
   85792:	4798      	blx	r3
   85794:	4603      	mov	r3, r0
   85796:	e000      	b.n	8579a <udi_vendor_setup+0x42>
		}
	}
	return false; // Not supported request
   85798:	2300      	movs	r3, #0
}
   8579a:	4618      	mov	r0, r3
   8579c:	bd80      	pop	{r7, pc}
   8579e:	bf00      	nop
   857a0:	200013dc 	.word	0x200013dc
   857a4:	000811e5 	.word	0x000811e5
   857a8:	0008117d 	.word	0x0008117d

000857ac <udi_vendor_getsetting>:

uint8_t udi_vendor_getsetting(void)
{
   857ac:	b480      	push	{r7}
   857ae:	af00      	add	r7, sp, #0
	return udi_vendor_alternate_setting;
   857b0:	4b02      	ldr	r3, [pc, #8]	; (857bc <udi_vendor_getsetting+0x10>)
   857b2:	781b      	ldrb	r3, [r3, #0]
}
   857b4:	4618      	mov	r0, r3
   857b6:	46bd      	mov	sp, r7
   857b8:	bc80      	pop	{r7}
   857ba:	4770      	bx	lr
   857bc:	20001438 	.word	0x20001438

000857c0 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   857c0:	b590      	push	{r4, r7, lr}
   857c2:	b087      	sub	sp, #28
   857c4:	af02      	add	r7, sp, #8
   857c6:	60f8      	str	r0, [r7, #12]
   857c8:	60b9      	str	r1, [r7, #8]
   857ca:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   857cc:	687b      	ldr	r3, [r7, #4]
   857ce:	9300      	str	r3, [sp, #0]
   857d0:	68bb      	ldr	r3, [r7, #8]
   857d2:	68fa      	ldr	r2, [r7, #12]
   857d4:	2100      	movs	r1, #0
   857d6:	2081      	movs	r0, #129	; 0x81
   857d8:	4c03      	ldr	r4, [pc, #12]	; (857e8 <udi_vendor_bulk_in_run+0x28>)
   857da:	47a0      	blx	r4
   857dc:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   857de:	4618      	mov	r0, r3
   857e0:	3714      	adds	r7, #20
   857e2:	46bd      	mov	sp, r7
   857e4:	bd90      	pop	{r4, r7, pc}
   857e6:	bf00      	nop
   857e8:	00083d31 	.word	0x00083d31

000857ec <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   857ec:	b590      	push	{r4, r7, lr}
   857ee:	b087      	sub	sp, #28
   857f0:	af02      	add	r7, sp, #8
   857f2:	60f8      	str	r0, [r7, #12]
   857f4:	60b9      	str	r1, [r7, #8]
   857f6:	607a      	str	r2, [r7, #4]
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   857f8:	687b      	ldr	r3, [r7, #4]
   857fa:	9300      	str	r3, [sp, #0]
   857fc:	68bb      	ldr	r3, [r7, #8]
   857fe:	68fa      	ldr	r2, [r7, #12]
   85800:	2100      	movs	r1, #0
   85802:	2002      	movs	r0, #2
   85804:	4c03      	ldr	r4, [pc, #12]	; (85814 <udi_vendor_bulk_out_run+0x28>)
   85806:	47a0      	blx	r4
   85808:	4603      	mov	r3, r0
			false,
			buf,
			buf_size,
			callback);
}
   8580a:	4618      	mov	r0, r3
   8580c:	3714      	adds	r7, #20
   8580e:	46bd      	mov	sp, r7
   85810:	bd90      	pop	{r4, r7, pc}
   85812:	bf00      	nop
   85814:	00083d31 	.word	0x00083d31

00085818 <cpu_irq_save>:
{
   85818:	b480      	push	{r7}
   8581a:	b083      	sub	sp, #12
   8581c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   8581e:	f3ef 8310 	mrs	r3, PRIMASK
   85822:	603b      	str	r3, [r7, #0]
  return(result);
   85824:	683b      	ldr	r3, [r7, #0]
	irqflags_t flags = cpu_irq_is_enabled();
   85826:	2b00      	cmp	r3, #0
   85828:	bf0c      	ite	eq
   8582a:	2301      	moveq	r3, #1
   8582c:	2300      	movne	r3, #0
   8582e:	b2db      	uxtb	r3, r3
   85830:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsid i");
   85832:	b672      	cpsid	i
}
   85834:	bf00      	nop
  __ASM volatile ("dmb");
   85836:	f3bf 8f5f 	dmb	sy
}
   8583a:	bf00      	nop
	cpu_irq_disable();
   8583c:	4b04      	ldr	r3, [pc, #16]	; (85850 <cpu_irq_save+0x38>)
   8583e:	2200      	movs	r2, #0
   85840:	701a      	strb	r2, [r3, #0]
	return flags;
   85842:	687b      	ldr	r3, [r7, #4]
}
   85844:	4618      	mov	r0, r3
   85846:	370c      	adds	r7, #12
   85848:	46bd      	mov	sp, r7
   8584a:	bc80      	pop	{r7}
   8584c:	4770      	bx	lr
   8584e:	bf00      	nop
   85850:	200003e0 	.word	0x200003e0

00085854 <cpu_irq_is_enabled_flags>:
{
   85854:	b480      	push	{r7}
   85856:	b083      	sub	sp, #12
   85858:	af00      	add	r7, sp, #0
   8585a:	6078      	str	r0, [r7, #4]
	return (flags);
   8585c:	687b      	ldr	r3, [r7, #4]
   8585e:	2b00      	cmp	r3, #0
   85860:	bf14      	ite	ne
   85862:	2301      	movne	r3, #1
   85864:	2300      	moveq	r3, #0
   85866:	b2db      	uxtb	r3, r3
}
   85868:	4618      	mov	r0, r3
   8586a:	370c      	adds	r7, #12
   8586c:	46bd      	mov	sp, r7
   8586e:	bc80      	pop	{r7}
   85870:	4770      	bx	lr
   85872:	0000      	movs	r0, r0

00085874 <cpu_irq_restore>:
{
   85874:	b580      	push	{r7, lr}
   85876:	b082      	sub	sp, #8
   85878:	af00      	add	r7, sp, #0
   8587a:	6078      	str	r0, [r7, #4]
	if (cpu_irq_is_enabled_flags(flags))
   8587c:	6878      	ldr	r0, [r7, #4]
   8587e:	4b08      	ldr	r3, [pc, #32]	; (858a0 <cpu_irq_restore+0x2c>)
   85880:	4798      	blx	r3
   85882:	4603      	mov	r3, r0
   85884:	2b00      	cmp	r3, #0
   85886:	d007      	beq.n	85898 <cpu_irq_restore+0x24>
		cpu_irq_enable();
   85888:	4b06      	ldr	r3, [pc, #24]	; (858a4 <cpu_irq_restore+0x30>)
   8588a:	2201      	movs	r2, #1
   8588c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   8588e:	f3bf 8f5f 	dmb	sy
}
   85892:	bf00      	nop
  __ASM volatile ("cpsie i");
   85894:	b662      	cpsie	i
}
   85896:	bf00      	nop
}
   85898:	bf00      	nop
   8589a:	3708      	adds	r7, #8
   8589c:	46bd      	mov	sp, r7
   8589e:	bd80      	pop	{r7, pc}
   858a0:	00085855 	.word	0x00085855
   858a4:	200003e0 	.word	0x200003e0

000858a8 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   858a8:	b580      	push	{r7, lr}
   858aa:	b086      	sub	sp, #24
   858ac:	af00      	add	r7, sp, #0
   858ae:	60f8      	str	r0, [r7, #12]
   858b0:	60b9      	str	r1, [r7, #8]
   858b2:	607a      	str	r2, [r7, #4]
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   858b4:	68bb      	ldr	r3, [r7, #8]
   858b6:	2b0e      	cmp	r3, #14
   858b8:	d002      	beq.n	858c0 <efc_perform_command+0x18>
   858ba:	68bb      	ldr	r3, [r7, #8]
   858bc:	2b0f      	cmp	r3, #15
   858be:	d102      	bne.n	858c6 <efc_perform_command+0x1e>
		return EFC_RC_NOT_SUPPORT;
   858c0:	f04f 33ff 	mov.w	r3, #4294967295
   858c4:	e016      	b.n	858f4 <efc_perform_command+0x4c>
	}

	flags = cpu_irq_save();
   858c6:	4b0d      	ldr	r3, [pc, #52]	; (858fc <efc_perform_command+0x54>)
   858c8:	4798      	blx	r3
   858ca:	6178      	str	r0, [r7, #20]
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   858cc:	687b      	ldr	r3, [r7, #4]
   858ce:	021b      	lsls	r3, r3, #8
   858d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   858d4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
			EEFC_FCR_FCMD(ul_command));
   858d8:	68ba      	ldr	r2, [r7, #8]
   858da:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   858dc:	4313      	orrs	r3, r2
	result = efc_perform_fcr(p_efc,
   858de:	f043 43b4 	orr.w	r3, r3, #1509949440	; 0x5a000000
   858e2:	4619      	mov	r1, r3
   858e4:	68f8      	ldr	r0, [r7, #12]
   858e6:	4b06      	ldr	r3, [pc, #24]	; (85900 <efc_perform_command+0x58>)
   858e8:	4798      	blx	r3
   858ea:	6138      	str	r0, [r7, #16]
	cpu_irq_restore(flags);
   858ec:	6978      	ldr	r0, [r7, #20]
   858ee:	4b05      	ldr	r3, [pc, #20]	; (85904 <efc_perform_command+0x5c>)
   858f0:	4798      	blx	r3
	return result;
   858f2:	693b      	ldr	r3, [r7, #16]
}
   858f4:	4618      	mov	r0, r3
   858f6:	3718      	adds	r7, #24
   858f8:	46bd      	mov	sp, r7
   858fa:	bd80      	pop	{r7, pc}
   858fc:	00085819 	.word	0x00085819
   85900:	200000bd 	.word	0x200000bd
   85904:	00085875 	.word	0x00085875

00085908 <pio_pull_up>:
 * \param ul_pull_up_enable Indicates if the pin(s) internal pull-up shall be
 * configured.
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
   85908:	b480      	push	{r7}
   8590a:	b085      	sub	sp, #20
   8590c:	af00      	add	r7, sp, #0
   8590e:	60f8      	str	r0, [r7, #12]
   85910:	60b9      	str	r1, [r7, #8]
   85912:	607a      	str	r2, [r7, #4]
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   85914:	687b      	ldr	r3, [r7, #4]
   85916:	2b00      	cmp	r3, #0
   85918:	d003      	beq.n	85922 <pio_pull_up+0x1a>
		p_pio->PIO_PUER = ul_mask;
   8591a:	68fb      	ldr	r3, [r7, #12]
   8591c:	68ba      	ldr	r2, [r7, #8]
   8591e:	665a      	str	r2, [r3, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
	}
}
   85920:	e002      	b.n	85928 <pio_pull_up+0x20>
		p_pio->PIO_PUDR = ul_mask;
   85922:	68fb      	ldr	r3, [r7, #12]
   85924:	68ba      	ldr	r2, [r7, #8]
   85926:	661a      	str	r2, [r3, #96]	; 0x60
}
   85928:	bf00      	nop
   8592a:	3714      	adds	r7, #20
   8592c:	46bd      	mov	sp, r7
   8592e:	bc80      	pop	{r7}
   85930:	4770      	bx	lr

00085932 <pio_set_peripheral>:
 * \param ul_type PIO type.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set_peripheral(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
   85932:	b480      	push	{r7}
   85934:	b087      	sub	sp, #28
   85936:	af00      	add	r7, sp, #0
   85938:	60f8      	str	r0, [r7, #12]
   8593a:	60b9      	str	r1, [r7, #8]
   8593c:	607a      	str	r2, [r7, #4]
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8593e:	68fb      	ldr	r3, [r7, #12]
   85940:	687a      	ldr	r2, [r7, #4]
   85942:	645a      	str	r2, [r3, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   85944:	68bb      	ldr	r3, [r7, #8]
   85946:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   8594a:	d03c      	beq.n	859c6 <pio_set_peripheral+0x94>
   8594c:	68bb      	ldr	r3, [r7, #8]
   8594e:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85952:	d834      	bhi.n	859be <pio_set_peripheral+0x8c>
   85954:	68bb      	ldr	r3, [r7, #8]
   85956:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   8595a:	d034      	beq.n	859c6 <pio_set_peripheral+0x94>
   8595c:	68bb      	ldr	r3, [r7, #8]
   8595e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85962:	d82c      	bhi.n	859be <pio_set_peripheral+0x8c>
   85964:	68bb      	ldr	r3, [r7, #8]
   85966:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   8596a:	d02c      	beq.n	859c6 <pio_set_peripheral+0x94>
   8596c:	68bb      	ldr	r3, [r7, #8]
   8596e:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85972:	d824      	bhi.n	859be <pio_set_peripheral+0x8c>
   85974:	68bb      	ldr	r3, [r7, #8]
   85976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   8597a:	d017      	beq.n	859ac <pio_set_peripheral+0x7a>
   8597c:	68bb      	ldr	r3, [r7, #8]
   8597e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85982:	d81c      	bhi.n	859be <pio_set_peripheral+0x8c>
   85984:	68bb      	ldr	r3, [r7, #8]
   85986:	2b00      	cmp	r3, #0
   85988:	d01d      	beq.n	859c6 <pio_set_peripheral+0x94>
   8598a:	68bb      	ldr	r3, [r7, #8]
   8598c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85990:	d115      	bne.n	859be <pio_set_peripheral+0x8c>
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   85992:	68fb      	ldr	r3, [r7, #12]
   85994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85996:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   85998:	68fb      	ldr	r3, [r7, #12]
   8599a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8599c:	687b      	ldr	r3, [r7, #4]
   8599e:	43d9      	mvns	r1, r3
   859a0:	697b      	ldr	r3, [r7, #20]
   859a2:	400b      	ands	r3, r1
   859a4:	401a      	ands	r2, r3
   859a6:	68fb      	ldr	r3, [r7, #12]
   859a8:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   859aa:	e008      	b.n	859be <pio_set_peripheral+0x8c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   859ac:	68fb      	ldr	r3, [r7, #12]
   859ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   859b0:	617b      	str	r3, [r7, #20]
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   859b2:	687a      	ldr	r2, [r7, #4]
   859b4:	697b      	ldr	r3, [r7, #20]
   859b6:	431a      	orrs	r2, r3
   859b8:	68fb      	ldr	r3, [r7, #12]
   859ba:	671a      	str	r2, [r3, #112]	; 0x70
		break;
   859bc:	bf00      	nop
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   859be:	68fb      	ldr	r3, [r7, #12]
   859c0:	687a      	ldr	r2, [r7, #4]
   859c2:	605a      	str	r2, [r3, #4]
   859c4:	e000      	b.n	859c8 <pio_set_peripheral+0x96>
		return;
   859c6:	bf00      	nop
}
   859c8:	371c      	adds	r7, #28
   859ca:	46bd      	mov	sp, r7
   859cc:	bc80      	pop	{r7}
   859ce:	4770      	bx	lr

000859d0 <pio_set_input>:
 * \param ul_mask Bitmask indicating which pin(s) to configure as input(s).
 * \param ul_attribute PIO attribute(s).
 */
void pio_set_input(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attribute)
{
   859d0:	b580      	push	{r7, lr}
   859d2:	b084      	sub	sp, #16
   859d4:	af00      	add	r7, sp, #0
   859d6:	60f8      	str	r0, [r7, #12]
   859d8:	60b9      	str	r1, [r7, #8]
   859da:	607a      	str	r2, [r7, #4]
	pio_disable_interrupt(p_pio, ul_mask);
   859dc:	68b9      	ldr	r1, [r7, #8]
   859de:	68f8      	ldr	r0, [r7, #12]
   859e0:	4b19      	ldr	r3, [pc, #100]	; (85a48 <pio_set_input+0x78>)
   859e2:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);
   859e4:	687b      	ldr	r3, [r7, #4]
   859e6:	f003 0301 	and.w	r3, r3, #1
   859ea:	461a      	mov	r2, r3
   859ec:	68b9      	ldr	r1, [r7, #8]
   859ee:	68f8      	ldr	r0, [r7, #12]
   859f0:	4b16      	ldr	r3, [pc, #88]	; (85a4c <pio_set_input+0x7c>)
   859f2:	4798      	blx	r3

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   859f4:	687b      	ldr	r3, [r7, #4]
   859f6:	f003 030a 	and.w	r3, r3, #10
   859fa:	2b00      	cmp	r3, #0
   859fc:	d003      	beq.n	85a06 <pio_set_input+0x36>
		p_pio->PIO_IFER = ul_mask;
   859fe:	68fb      	ldr	r3, [r7, #12]
   85a00:	68ba      	ldr	r2, [r7, #8]
   85a02:	621a      	str	r2, [r3, #32]
   85a04:	e002      	b.n	85a0c <pio_set_input+0x3c>
	} else {
		p_pio->PIO_IFDR = ul_mask;
   85a06:	68fb      	ldr	r3, [r7, #12]
   85a08:	68ba      	ldr	r2, [r7, #8]
   85a0a:	625a      	str	r2, [r3, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   85a0c:	687b      	ldr	r3, [r7, #4]
   85a0e:	f003 0302 	and.w	r3, r3, #2
   85a12:	2b00      	cmp	r3, #0
   85a14:	d004      	beq.n	85a20 <pio_set_input+0x50>
		p_pio->PIO_SCIFSR = ul_mask;
   85a16:	68fb      	ldr	r3, [r7, #12]
   85a18:	68ba      	ldr	r2, [r7, #8]
   85a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   85a1e:	e008      	b.n	85a32 <pio_set_input+0x62>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   85a20:	687b      	ldr	r3, [r7, #4]
   85a22:	f003 0308 	and.w	r3, r3, #8
   85a26:	2b00      	cmp	r3, #0
   85a28:	d003      	beq.n	85a32 <pio_set_input+0x62>
			p_pio->PIO_DIFSR = ul_mask;
   85a2a:	68fb      	ldr	r3, [r7, #12]
   85a2c:	68ba      	ldr	r2, [r7, #8]
   85a2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   85a32:	68fb      	ldr	r3, [r7, #12]
   85a34:	68ba      	ldr	r2, [r7, #8]
   85a36:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   85a38:	68fb      	ldr	r3, [r7, #12]
   85a3a:	68ba      	ldr	r2, [r7, #8]
   85a3c:	601a      	str	r2, [r3, #0]
}
   85a3e:	bf00      	nop
   85a40:	3710      	adds	r7, #16
   85a42:	46bd      	mov	sp, r7
   85a44:	bd80      	pop	{r7, pc}
   85a46:	bf00      	nop
   85a48:	00085ad1 	.word	0x00085ad1
   85a4c:	00085909 	.word	0x00085909

00085a50 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   85a50:	b580      	push	{r7, lr}
   85a52:	b084      	sub	sp, #16
   85a54:	af00      	add	r7, sp, #0
   85a56:	60f8      	str	r0, [r7, #12]
   85a58:	60b9      	str	r1, [r7, #8]
   85a5a:	607a      	str	r2, [r7, #4]
   85a5c:	603b      	str	r3, [r7, #0]
	pio_disable_interrupt(p_pio, ul_mask);
   85a5e:	68b9      	ldr	r1, [r7, #8]
   85a60:	68f8      	ldr	r0, [r7, #12]
   85a62:	4b12      	ldr	r3, [pc, #72]	; (85aac <pio_set_output+0x5c>)
   85a64:	4798      	blx	r3
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);
   85a66:	69ba      	ldr	r2, [r7, #24]
   85a68:	68b9      	ldr	r1, [r7, #8]
   85a6a:	68f8      	ldr	r0, [r7, #12]
   85a6c:	4b10      	ldr	r3, [pc, #64]	; (85ab0 <pio_set_output+0x60>)
   85a6e:	4798      	blx	r3

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   85a70:	683b      	ldr	r3, [r7, #0]
   85a72:	2b00      	cmp	r3, #0
   85a74:	d003      	beq.n	85a7e <pio_set_output+0x2e>
		p_pio->PIO_MDER = ul_mask;
   85a76:	68fb      	ldr	r3, [r7, #12]
   85a78:	68ba      	ldr	r2, [r7, #8]
   85a7a:	651a      	str	r2, [r3, #80]	; 0x50
   85a7c:	e002      	b.n	85a84 <pio_set_output+0x34>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   85a7e:	68fb      	ldr	r3, [r7, #12]
   85a80:	68ba      	ldr	r2, [r7, #8]
   85a82:	655a      	str	r2, [r3, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   85a84:	687b      	ldr	r3, [r7, #4]
   85a86:	2b00      	cmp	r3, #0
   85a88:	d003      	beq.n	85a92 <pio_set_output+0x42>
		p_pio->PIO_SODR = ul_mask;
   85a8a:	68fb      	ldr	r3, [r7, #12]
   85a8c:	68ba      	ldr	r2, [r7, #8]
   85a8e:	631a      	str	r2, [r3, #48]	; 0x30
   85a90:	e002      	b.n	85a98 <pio_set_output+0x48>
	} else {
		p_pio->PIO_CODR = ul_mask;
   85a92:	68fb      	ldr	r3, [r7, #12]
   85a94:	68ba      	ldr	r2, [r7, #8]
   85a96:	635a      	str	r2, [r3, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   85a98:	68fb      	ldr	r3, [r7, #12]
   85a9a:	68ba      	ldr	r2, [r7, #8]
   85a9c:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   85a9e:	68fb      	ldr	r3, [r7, #12]
   85aa0:	68ba      	ldr	r2, [r7, #8]
   85aa2:	601a      	str	r2, [r3, #0]
}
   85aa4:	bf00      	nop
   85aa6:	3710      	adds	r7, #16
   85aa8:	46bd      	mov	sp, r7
   85aaa:	bd80      	pop	{r7, pc}
   85aac:	00085ad1 	.word	0x00085ad1
   85ab0:	00085909 	.word	0x00085909

00085ab4 <pio_enable_output_write>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_enable_output_write(Pio *p_pio, const uint32_t ul_mask)
{
   85ab4:	b480      	push	{r7}
   85ab6:	b083      	sub	sp, #12
   85ab8:	af00      	add	r7, sp, #0
   85aba:	6078      	str	r0, [r7, #4]
   85abc:	6039      	str	r1, [r7, #0]
	p_pio->PIO_OWER = ul_mask;
   85abe:	687b      	ldr	r3, [r7, #4]
   85ac0:	683a      	ldr	r2, [r7, #0]
   85ac2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
   85ac6:	bf00      	nop
   85ac8:	370c      	adds	r7, #12
   85aca:	46bd      	mov	sp, r7
   85acc:	bc80      	pop	{r7}
   85ace:	4770      	bx	lr

00085ad0 <pio_disable_interrupt>:
 *
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
   85ad0:	b480      	push	{r7}
   85ad2:	b083      	sub	sp, #12
   85ad4:	af00      	add	r7, sp, #0
   85ad6:	6078      	str	r0, [r7, #4]
   85ad8:	6039      	str	r1, [r7, #0]
	p_pio->PIO_IDR = ul_mask;
   85ada:	687b      	ldr	r3, [r7, #4]
   85adc:	683a      	ldr	r2, [r7, #0]
   85ade:	645a      	str	r2, [r3, #68]	; 0x44
}
   85ae0:	bf00      	nop
   85ae2:	370c      	adds	r7, #12
   85ae4:	46bd      	mov	sp, r7
   85ae6:	bc80      	pop	{r7}
   85ae8:	4770      	bx	lr

00085aea <pio_get_interrupt_status>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
   85aea:	b480      	push	{r7}
   85aec:	b083      	sub	sp, #12
   85aee:	af00      	add	r7, sp, #0
   85af0:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_ISR;
   85af2:	687b      	ldr	r3, [r7, #4]
   85af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
   85af6:	4618      	mov	r0, r3
   85af8:	370c      	adds	r7, #12
   85afa:	46bd      	mov	sp, r7
   85afc:	bc80      	pop	{r7}
   85afe:	4770      	bx	lr

00085b00 <pio_get_interrupt_mask>:
 * \param p_pio Pointer to a PIO instance.
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
   85b00:	b480      	push	{r7}
   85b02:	b083      	sub	sp, #12
   85b04:	af00      	add	r7, sp, #0
   85b06:	6078      	str	r0, [r7, #4]
	return p_pio->PIO_IMR;
   85b08:	687b      	ldr	r3, [r7, #4]
   85b0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
   85b0c:	4618      	mov	r0, r3
   85b0e:	370c      	adds	r7, #12
   85b10:	46bd      	mov	sp, r7
   85b12:	bc80      	pop	{r7}
   85b14:	4770      	bx	lr
   85b16:	0000      	movs	r0, r0

00085b18 <pio_get_pin_value>:
 *       level.
 * \note If pin is input: PIOx must be clocked to sample the signal.
 *       See PMC driver.
 */
uint32_t pio_get_pin_value(uint32_t ul_pin)
{
   85b18:	b580      	push	{r7, lr}
   85b1a:	b084      	sub	sp, #16
   85b1c:	af00      	add	r7, sp, #0
   85b1e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85b20:	6878      	ldr	r0, [r7, #4]
   85b22:	4b08      	ldr	r3, [pc, #32]	; (85b44 <pio_get_pin_value+0x2c>)
   85b24:	4798      	blx	r3
   85b26:	60f8      	str	r0, [r7, #12]

	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   85b28:	68fb      	ldr	r3, [r7, #12]
   85b2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   85b2c:	687b      	ldr	r3, [r7, #4]
   85b2e:	f003 031f 	and.w	r3, r3, #31
   85b32:	fa22 f303 	lsr.w	r3, r2, r3
   85b36:	f003 0301 	and.w	r3, r3, #1
}
   85b3a:	4618      	mov	r0, r3
   85b3c:	3710      	adds	r7, #16
   85b3e:	46bd      	mov	sp, r7
   85b40:	bd80      	pop	{r7, pc}
   85b42:	bf00      	nop
   85b44:	00085db5 	.word	0x00085db5

00085b48 <pio_set_pin_high>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called beforehand.
 */
void pio_set_pin_high(uint32_t ul_pin)
{
   85b48:	b580      	push	{r7, lr}
   85b4a:	b084      	sub	sp, #16
   85b4c:	af00      	add	r7, sp, #0
   85b4e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85b50:	6878      	ldr	r0, [r7, #4]
   85b52:	4b08      	ldr	r3, [pc, #32]	; (85b74 <pio_set_pin_high+0x2c>)
   85b54:	4798      	blx	r3
   85b56:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 1. */
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   85b58:	687b      	ldr	r3, [r7, #4]
   85b5a:	f003 031f 	and.w	r3, r3, #31
   85b5e:	2201      	movs	r2, #1
   85b60:	fa02 f303 	lsl.w	r3, r2, r3
   85b64:	461a      	mov	r2, r3
   85b66:	68fb      	ldr	r3, [r7, #12]
   85b68:	631a      	str	r2, [r3, #48]	; 0x30
}
   85b6a:	bf00      	nop
   85b6c:	3710      	adds	r7, #16
   85b6e:	46bd      	mov	sp, r7
   85b70:	bd80      	pop	{r7, pc}
   85b72:	bf00      	nop
   85b74:	00085db5 	.word	0x00085db5

00085b78 <pio_set_pin_low>:
 * \param ul_pin The pin index.
 *
 * \note The function \ref pio_configure_pin must be called before.
 */
void pio_set_pin_low(uint32_t ul_pin)
{
   85b78:	b580      	push	{r7, lr}
   85b7a:	b084      	sub	sp, #16
   85b7c:	af00      	add	r7, sp, #0
   85b7e:	6078      	str	r0, [r7, #4]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85b80:	6878      	ldr	r0, [r7, #4]
   85b82:	4b08      	ldr	r3, [pc, #32]	; (85ba4 <pio_set_pin_low+0x2c>)
   85b84:	4798      	blx	r3
   85b86:	60f8      	str	r0, [r7, #12]

	/* Value to be driven on the I/O line: 0. */
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   85b88:	687b      	ldr	r3, [r7, #4]
   85b8a:	f003 031f 	and.w	r3, r3, #31
   85b8e:	2201      	movs	r2, #1
   85b90:	fa02 f303 	lsl.w	r3, r2, r3
   85b94:	461a      	mov	r2, r3
   85b96:	68fb      	ldr	r3, [r7, #12]
   85b98:	635a      	str	r2, [r3, #52]	; 0x34
}
   85b9a:	bf00      	nop
   85b9c:	3710      	adds	r7, #16
   85b9e:	46bd      	mov	sp, r7
   85ba0:	bd80      	pop	{r7, pc}
   85ba2:	bf00      	nop
   85ba4:	00085db5 	.word	0x00085db5

00085ba8 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   85ba8:	b590      	push	{r4, r7, lr}
   85baa:	b087      	sub	sp, #28
   85bac:	af02      	add	r7, sp, #8
   85bae:	6078      	str	r0, [r7, #4]
   85bb0:	6039      	str	r1, [r7, #0]
	Pio *p_pio = pio_get_pin_group(ul_pin);
   85bb2:	6878      	ldr	r0, [r7, #4]
   85bb4:	4b43      	ldr	r3, [pc, #268]	; (85cc4 <pio_configure_pin+0x11c>)
   85bb6:	4798      	blx	r3
   85bb8:	60f8      	str	r0, [r7, #12]

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   85bba:	683b      	ldr	r3, [r7, #0]
   85bbc:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   85bc0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85bc4:	d057      	beq.n	85c76 <pio_configure_pin+0xce>
   85bc6:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85bca:	d873      	bhi.n	85cb4 <pio_configure_pin+0x10c>
   85bcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85bd0:	d051      	beq.n	85c76 <pio_configure_pin+0xce>
   85bd2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85bd6:	d86d      	bhi.n	85cb4 <pio_configure_pin+0x10c>
   85bd8:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85bdc:	d03f      	beq.n	85c5e <pio_configure_pin+0xb6>
   85bde:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85be2:	d867      	bhi.n	85cb4 <pio_configure_pin+0x10c>
   85be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85be8:	d003      	beq.n	85bf2 <pio_configure_pin+0x4a>
   85bea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85bee:	d01b      	beq.n	85c28 <pio_configure_pin+0x80>
   85bf0:	e060      	b.n	85cb4 <pio_configure_pin+0x10c>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   85bf2:	687b      	ldr	r3, [r7, #4]
   85bf4:	f003 031f 	and.w	r3, r3, #31
   85bf8:	2201      	movs	r2, #1
   85bfa:	fa02 f303 	lsl.w	r3, r2, r3
   85bfe:	461a      	mov	r2, r3
   85c00:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85c04:	68f8      	ldr	r0, [r7, #12]
   85c06:	4b30      	ldr	r3, [pc, #192]	; (85cc8 <pio_configure_pin+0x120>)
   85c08:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   85c0a:	687b      	ldr	r3, [r7, #4]
   85c0c:	f003 031f 	and.w	r3, r3, #31
   85c10:	2201      	movs	r2, #1
   85c12:	fa02 f303 	lsl.w	r3, r2, r3
   85c16:	4619      	mov	r1, r3
   85c18:	683b      	ldr	r3, [r7, #0]
   85c1a:	f003 0301 	and.w	r3, r3, #1
   85c1e:	461a      	mov	r2, r3
   85c20:	68f8      	ldr	r0, [r7, #12]
   85c22:	4b2a      	ldr	r3, [pc, #168]	; (85ccc <pio_configure_pin+0x124>)
   85c24:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   85c26:	e047      	b.n	85cb8 <pio_configure_pin+0x110>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   85c28:	687b      	ldr	r3, [r7, #4]
   85c2a:	f003 031f 	and.w	r3, r3, #31
   85c2e:	2201      	movs	r2, #1
   85c30:	fa02 f303 	lsl.w	r3, r2, r3
   85c34:	461a      	mov	r2, r3
   85c36:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85c3a:	68f8      	ldr	r0, [r7, #12]
   85c3c:	4b22      	ldr	r3, [pc, #136]	; (85cc8 <pio_configure_pin+0x120>)
   85c3e:	4798      	blx	r3
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
   85c40:	687b      	ldr	r3, [r7, #4]
   85c42:	f003 031f 	and.w	r3, r3, #31
   85c46:	2201      	movs	r2, #1
   85c48:	fa02 f303 	lsl.w	r3, r2, r3
   85c4c:	4619      	mov	r1, r3
   85c4e:	683b      	ldr	r3, [r7, #0]
   85c50:	f003 0301 	and.w	r3, r3, #1
   85c54:	461a      	mov	r2, r3
   85c56:	68f8      	ldr	r0, [r7, #12]
   85c58:	4b1c      	ldr	r3, [pc, #112]	; (85ccc <pio_configure_pin+0x124>)
   85c5a:	4798      	blx	r3
				(ul_flags & PIO_PULLUP));
		break;
   85c5c:	e02c      	b.n	85cb8 <pio_configure_pin+0x110>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   85c5e:	687b      	ldr	r3, [r7, #4]
   85c60:	f003 031f 	and.w	r3, r3, #31
   85c64:	2201      	movs	r2, #1
   85c66:	fa02 f303 	lsl.w	r3, r2, r3
   85c6a:	683a      	ldr	r2, [r7, #0]
   85c6c:	4619      	mov	r1, r3
   85c6e:	68f8      	ldr	r0, [r7, #12]
   85c70:	4b17      	ldr	r3, [pc, #92]	; (85cd0 <pio_configure_pin+0x128>)
   85c72:	4798      	blx	r3
		break;
   85c74:	e020      	b.n	85cb8 <pio_configure_pin+0x110>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85c76:	687b      	ldr	r3, [r7, #4]
   85c78:	f003 031f 	and.w	r3, r3, #31
   85c7c:	2201      	movs	r2, #1
   85c7e:	fa02 f303 	lsl.w	r3, r2, r3
   85c82:	4619      	mov	r1, r3
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85c84:	683b      	ldr	r3, [r7, #0]
   85c86:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85c8a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85c8e:	bf0c      	ite	eq
   85c90:	2301      	moveq	r3, #1
   85c92:	2300      	movne	r3, #0
   85c94:	b2db      	uxtb	r3, r3
   85c96:	4618      	mov	r0, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   85c98:	683b      	ldr	r3, [r7, #0]
   85c9a:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   85c9c:	f003 0201 	and.w	r2, r3, #1
   85ca0:	683b      	ldr	r3, [r7, #0]
   85ca2:	f003 0301 	and.w	r3, r3, #1
   85ca6:	9300      	str	r3, [sp, #0]
   85ca8:	4613      	mov	r3, r2
   85caa:	4602      	mov	r2, r0
   85cac:	68f8      	ldr	r0, [r7, #12]
   85cae:	4c09      	ldr	r4, [pc, #36]	; (85cd4 <pio_configure_pin+0x12c>)
   85cb0:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   85cb2:	e001      	b.n	85cb8 <pio_configure_pin+0x110>

	default:
		return 0;
   85cb4:	2300      	movs	r3, #0
   85cb6:	e000      	b.n	85cba <pio_configure_pin+0x112>
	}

	return 1;
   85cb8:	2301      	movs	r3, #1
}
   85cba:	4618      	mov	r0, r3
   85cbc:	3714      	adds	r7, #20
   85cbe:	46bd      	mov	sp, r7
   85cc0:	bd90      	pop	{r4, r7, pc}
   85cc2:	bf00      	nop
   85cc4:	00085db5 	.word	0x00085db5
   85cc8:	00085933 	.word	0x00085933
   85ccc:	00085909 	.word	0x00085909
   85cd0:	000859d1 	.word	0x000859d1
   85cd4:	00085a51 	.word	0x00085a51

00085cd8 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   85cd8:	b590      	push	{r4, r7, lr}
   85cda:	b087      	sub	sp, #28
   85cdc:	af02      	add	r7, sp, #8
   85cde:	60f8      	str	r0, [r7, #12]
   85ce0:	60b9      	str	r1, [r7, #8]
   85ce2:	607a      	str	r2, [r7, #4]
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   85ce4:	687b      	ldr	r3, [r7, #4]
   85ce6:	f003 43f0 	and.w	r3, r3, #2013265920	; 0x78000000
   85cea:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85cee:	d039      	beq.n	85d64 <pio_configure_pin_group+0x8c>
   85cf0:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85cf4:	d84f      	bhi.n	85d96 <pio_configure_pin_group+0xbe>
   85cf6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85cfa:	d033      	beq.n	85d64 <pio_configure_pin_group+0x8c>
   85cfc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
   85d00:	d849      	bhi.n	85d96 <pio_configure_pin_group+0xbe>
   85d02:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85d06:	d027      	beq.n	85d58 <pio_configure_pin_group+0x80>
   85d08:	f1b3 5f20 	cmp.w	r3, #671088640	; 0x28000000
   85d0c:	d843      	bhi.n	85d96 <pio_configure_pin_group+0xbe>
   85d0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
   85d12:	d003      	beq.n	85d1c <pio_configure_pin_group+0x44>
   85d14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
   85d18:	d00f      	beq.n	85d3a <pio_configure_pin_group+0x62>
   85d1a:	e03c      	b.n	85d96 <pio_configure_pin_group+0xbe>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   85d1c:	68ba      	ldr	r2, [r7, #8]
   85d1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   85d22:	68f8      	ldr	r0, [r7, #12]
   85d24:	4b1f      	ldr	r3, [pc, #124]	; (85da4 <pio_configure_pin_group+0xcc>)
   85d26:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   85d28:	687b      	ldr	r3, [r7, #4]
   85d2a:	f003 0301 	and.w	r3, r3, #1
   85d2e:	461a      	mov	r2, r3
   85d30:	68b9      	ldr	r1, [r7, #8]
   85d32:	68f8      	ldr	r0, [r7, #12]
   85d34:	4b1c      	ldr	r3, [pc, #112]	; (85da8 <pio_configure_pin_group+0xd0>)
   85d36:	4798      	blx	r3
		break;
   85d38:	e02f      	b.n	85d9a <pio_configure_pin_group+0xc2>
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   85d3a:	68ba      	ldr	r2, [r7, #8]
   85d3c:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   85d40:	68f8      	ldr	r0, [r7, #12]
   85d42:	4b18      	ldr	r3, [pc, #96]	; (85da4 <pio_configure_pin_group+0xcc>)
   85d44:	4798      	blx	r3
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
   85d46:	687b      	ldr	r3, [r7, #4]
   85d48:	f003 0301 	and.w	r3, r3, #1
   85d4c:	461a      	mov	r2, r3
   85d4e:	68b9      	ldr	r1, [r7, #8]
   85d50:	68f8      	ldr	r0, [r7, #12]
   85d52:	4b15      	ldr	r3, [pc, #84]	; (85da8 <pio_configure_pin_group+0xd0>)
   85d54:	4798      	blx	r3
		break;
   85d56:	e020      	b.n	85d9a <pio_configure_pin_group+0xc2>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   85d58:	687a      	ldr	r2, [r7, #4]
   85d5a:	68b9      	ldr	r1, [r7, #8]
   85d5c:	68f8      	ldr	r0, [r7, #12]
   85d5e:	4b13      	ldr	r3, [pc, #76]	; (85dac <pio_configure_pin_group+0xd4>)
   85d60:	4798      	blx	r3
		break;
   85d62:	e01a      	b.n	85d9a <pio_configure_pin_group+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   85d64:	687b      	ldr	r3, [r7, #4]
   85d66:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   85d6a:	f1b3 5f60 	cmp.w	r3, #939524096	; 0x38000000
   85d6e:	bf0c      	ite	eq
   85d70:	2301      	moveq	r3, #1
   85d72:	2300      	movne	r3, #0
   85d74:	b2db      	uxtb	r3, r3
   85d76:	4619      	mov	r1, r3
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
   85d78:	687b      	ldr	r3, [r7, #4]
   85d7a:	089b      	lsrs	r3, r3, #2
		pio_set_output(p_pio, ul_mask,
   85d7c:	f003 0201 	and.w	r2, r3, #1
   85d80:	687b      	ldr	r3, [r7, #4]
   85d82:	f003 0301 	and.w	r3, r3, #1
   85d86:	9300      	str	r3, [sp, #0]
   85d88:	4613      	mov	r3, r2
   85d8a:	460a      	mov	r2, r1
   85d8c:	68b9      	ldr	r1, [r7, #8]
   85d8e:	68f8      	ldr	r0, [r7, #12]
   85d90:	4c07      	ldr	r4, [pc, #28]	; (85db0 <pio_configure_pin_group+0xd8>)
   85d92:	47a0      	blx	r4
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   85d94:	e001      	b.n	85d9a <pio_configure_pin_group+0xc2>

	default:
		return 0;
   85d96:	2300      	movs	r3, #0
   85d98:	e000      	b.n	85d9c <pio_configure_pin_group+0xc4>
	}

	return 1;
   85d9a:	2301      	movs	r3, #1
}
   85d9c:	4618      	mov	r0, r3
   85d9e:	3714      	adds	r7, #20
   85da0:	46bd      	mov	sp, r7
   85da2:	bd90      	pop	{r4, r7, pc}
   85da4:	00085933 	.word	0x00085933
   85da8:	00085909 	.word	0x00085909
   85dac:	000859d1 	.word	0x000859d1
   85db0:	00085a51 	.word	0x00085a51

00085db4 <pio_get_pin_group>:
 * \param ul_pin The pin index.
 *
 * \return Pointer to \ref Pio struct for GPIO port.
 */
Pio *pio_get_pin_group(uint32_t ul_pin)
{
   85db4:	b480      	push	{r7}
   85db6:	b085      	sub	sp, #20
   85db8:	af00      	add	r7, sp, #0
   85dba:	6078      	str	r0, [r7, #4]
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   85dbc:	687b      	ldr	r3, [r7, #4]
   85dbe:	095b      	lsrs	r3, r3, #5
   85dc0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   85dc4:	f203 7306 	addw	r3, r3, #1798	; 0x706
   85dc8:	025b      	lsls	r3, r3, #9
   85dca:	60fb      	str	r3, [r7, #12]
#endif
	return p_pio;
   85dcc:	68fb      	ldr	r3, [r7, #12]
}
   85dce:	4618      	mov	r0, r3
   85dd0:	3714      	adds	r7, #20
   85dd2:	46bd      	mov	sp, r7
   85dd4:	bc80      	pop	{r7}
   85dd6:	4770      	bx	lr

00085dd8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   85dd8:	b480      	push	{r7}
   85dda:	af00      	add	r7, sp, #0
	while (1) {
   85ddc:	e7fe      	b.n	85ddc <Dummy_Handler+0x4>
   85dde:	0000      	movs	r0, r0

00085de0 <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
   85de0:	b5b0      	push	{r4, r5, r7, lr}
   85de2:	b09c      	sub	sp, #112	; 0x70
   85de4:	af00      	add	r7, sp, #0
   85de6:	6078      	str	r0, [r7, #4]
	switch (sleep_mode) {
   85de8:	687b      	ldr	r3, [r7, #4]
   85dea:	2b05      	cmp	r3, #5
   85dec:	f000 81e8 	beq.w	861c0 <pmc_sleep+0x3e0>
   85df0:	687b      	ldr	r3, [r7, #4]
   85df2:	2b05      	cmp	r3, #5
   85df4:	f300 81f5 	bgt.w	861e2 <pmc_sleep+0x402>
   85df8:	687b      	ldr	r3, [r7, #4]
   85dfa:	2b02      	cmp	r3, #2
   85dfc:	dc03      	bgt.n	85e06 <pmc_sleep+0x26>
   85dfe:	687b      	ldr	r3, [r7, #4]
   85e00:	2b00      	cmp	r3, #0
   85e02:	dc06      	bgt.n	85e12 <pmc_sleep+0x32>
		__WFE() ;
#endif
		break;
#endif
	}
}
   85e04:	e1ed      	b.n	861e2 <pmc_sleep+0x402>
   85e06:	687b      	ldr	r3, [r7, #4]
   85e08:	3b03      	subs	r3, #3
	switch (sleep_mode) {
   85e0a:	2b01      	cmp	r3, #1
   85e0c:	f200 81e9 	bhi.w	861e2 <pmc_sleep+0x402>
   85e10:	e01b      	b.n	85e4a <pmc_sleep+0x6a>
		PMC->PMC_FSMR &= (uint32_t)~PMC_FSMR_LPM;
   85e12:	4b88      	ldr	r3, [pc, #544]	; (86034 <pmc_sleep+0x254>)
   85e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   85e16:	4a87      	ldr	r2, [pc, #540]	; (86034 <pmc_sleep+0x254>)
   85e18:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   85e1c:	6713      	str	r3, [r2, #112]	; 0x70
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
   85e1e:	4b86      	ldr	r3, [pc, #536]	; (86038 <pmc_sleep+0x258>)
   85e20:	691b      	ldr	r3, [r3, #16]
   85e22:	4a85      	ldr	r2, [pc, #532]	; (86038 <pmc_sleep+0x258>)
   85e24:	f023 0304 	bic.w	r3, r3, #4
   85e28:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   85e2a:	4b84      	ldr	r3, [pc, #528]	; (8603c <pmc_sleep+0x25c>)
   85e2c:	2201      	movs	r2, #1
   85e2e:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   85e30:	f3bf 8f5f 	dmb	sy
}
   85e34:	bf00      	nop
  __ASM volatile ("cpsie i");
   85e36:	b662      	cpsie	i
}
   85e38:	bf00      	nop
		if (sleep_mode == SAM_PM_SMODE_SLEEP_WFI)
   85e3a:	687b      	ldr	r3, [r7, #4]
   85e3c:	2b02      	cmp	r3, #2
   85e3e:	d101      	bne.n	85e44 <pmc_sleep+0x64>
  __ASM volatile ("wfi");
   85e40:	bf30      	wfi
}
   85e42:	e001      	b.n	85e48 <pmc_sleep+0x68>
  __ASM volatile ("wfe");
   85e44:	bf20      	wfe
}
   85e46:	bf00      	nop
		break;
   85e48:	e1cb      	b.n	861e2 <pmc_sleep+0x402>
  __ASM volatile ("cpsid i");
   85e4a:	b672      	cpsid	i
}
   85e4c:	bf00      	nop
  __ASM volatile ("dmb");
   85e4e:	f3bf 8f5f 	dmb	sy
}
   85e52:	bf00      	nop
		cpu_irq_disable();
   85e54:	4b79      	ldr	r3, [pc, #484]	; (8603c <pmc_sleep+0x25c>)
   85e56:	2200      	movs	r2, #0
   85e58:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
   85e5a:	4b79      	ldr	r3, [pc, #484]	; (86040 <pmc_sleep+0x260>)
   85e5c:	2201      	movs	r2, #1
   85e5e:	701a      	strb	r2, [r3, #0]
		pmc_save_clock_settings(&mor, &pllr0, &pllr1, &mckr, &fmr,
   85e60:	687b      	ldr	r3, [r7, #4]
   85e62:	2b04      	cmp	r3, #4
   85e64:	bf0c      	ite	eq
   85e66:	2301      	moveq	r3, #1
   85e68:	2300      	movne	r3, #0
   85e6a:	b2da      	uxtb	r2, r3
   85e6c:	f107 0320 	add.w	r3, r7, #32
   85e70:	64fb      	str	r3, [r7, #76]	; 0x4c
   85e72:	f107 031c 	add.w	r3, r7, #28
   85e76:	64bb      	str	r3, [r7, #72]	; 0x48
   85e78:	f107 0318 	add.w	r3, r7, #24
   85e7c:	647b      	str	r3, [r7, #68]	; 0x44
   85e7e:	f107 0314 	add.w	r3, r7, #20
   85e82:	643b      	str	r3, [r7, #64]	; 0x40
   85e84:	f107 0310 	add.w	r3, r7, #16
   85e88:	63fb      	str	r3, [r7, #60]	; 0x3c
   85e8a:	f107 030c 	add.w	r3, r7, #12
   85e8e:	63bb      	str	r3, [r7, #56]	; 0x38
   85e90:	4613      	mov	r3, r2
   85e92:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t mor  = PMC->CKGR_MOR;
   85e96:	4b67      	ldr	r3, [pc, #412]	; (86034 <pmc_sleep+0x254>)
   85e98:	6a1b      	ldr	r3, [r3, #32]
   85e9a:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t mckr = PMC->PMC_MCKR;
   85e9c:	4b65      	ldr	r3, [pc, #404]	; (86034 <pmc_sleep+0x254>)
   85e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   85ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t fmr  = EFC0->EEFC_FMR;
   85ea2:	4b68      	ldr	r3, [pc, #416]	; (86044 <pmc_sleep+0x264>)
   85ea4:	681b      	ldr	r3, [r3, #0]
   85ea6:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t fmr1 = EFC1->EEFC_FMR;
   85ea8:	4b67      	ldr	r3, [pc, #412]	; (86048 <pmc_sleep+0x268>)
   85eaa:	681b      	ldr	r3, [r3, #0]
   85eac:	627b      	str	r3, [r7, #36]	; 0x24
	if (p_osc_setting) {
   85eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85eb0:	2b00      	cmp	r3, #0
   85eb2:	d002      	beq.n	85eba <pmc_sleep+0xda>
		*p_osc_setting = mor;
   85eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   85eb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
   85eb8:	601a      	str	r2, [r3, #0]
	if (p_pll0_setting) {
   85eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   85ebc:	2b00      	cmp	r3, #0
   85ebe:	d003      	beq.n	85ec8 <pmc_sleep+0xe8>
		*p_pll0_setting = PMC->CKGR_PLLAR;
   85ec0:	4b5c      	ldr	r3, [pc, #368]	; (86034 <pmc_sleep+0x254>)
   85ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   85ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
   85ec6:	601a      	str	r2, [r3, #0]
	if (p_pll1_setting) {
   85ec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   85eca:	2b00      	cmp	r3, #0
   85ecc:	d003      	beq.n	85ed6 <pmc_sleep+0xf6>
		*p_pll1_setting = PMC->CKGR_UCKR;
   85ece:	4b59      	ldr	r3, [pc, #356]	; (86034 <pmc_sleep+0x254>)
   85ed0:	69da      	ldr	r2, [r3, #28]
   85ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
   85ed4:	601a      	str	r2, [r3, #0]
	if (p_mck_setting) {
   85ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85ed8:	2b00      	cmp	r3, #0
   85eda:	d002      	beq.n	85ee2 <pmc_sleep+0x102>
		*p_mck_setting  = mckr;
   85edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
   85ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
   85ee0:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting) {
   85ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   85ee4:	2b00      	cmp	r3, #0
   85ee6:	d002      	beq.n	85eee <pmc_sleep+0x10e>
		*p_fmr_setting  = fmr;
   85ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
   85eea:	6aba      	ldr	r2, [r7, #40]	; 0x28
   85eec:	601a      	str	r2, [r3, #0]
	if (p_fmr_setting1) {
   85eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   85ef0:	2b00      	cmp	r3, #0
   85ef2:	d002      	beq.n	85efa <pmc_sleep+0x11a>
		*p_fmr_setting1 = fmr1;
   85ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
   85ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
   85ef8:	601a      	str	r2, [r3, #0]
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
   85efa:	4a4e      	ldr	r2, [pc, #312]	; (86034 <pmc_sleep+0x254>)
   85efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
   85efe:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85f02:	f043 0308 	orr.w	r3, r3, #8
   85f06:	6213      	str	r3, [r2, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
   85f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85f0a:	f003 0302 	and.w	r3, r3, #2
   85f0e:	2b00      	cmp	r3, #0
   85f10:	d00f      	beq.n	85f32 <pmc_sleep+0x152>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
   85f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85f14:	f023 0303 	bic.w	r3, r3, #3
   85f18:	f043 0301 	orr.w	r3, r3, #1
   85f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   85f1e:	4a45      	ldr	r2, [pc, #276]	; (86034 <pmc_sleep+0x254>)
   85f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85f22:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85f24:	bf00      	nop
   85f26:	4b43      	ldr	r3, [pc, #268]	; (86034 <pmc_sleep+0x254>)
   85f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85f2a:	f003 0308 	and.w	r3, r3, #8
   85f2e:	2b00      	cmp	r3, #0
   85f30:	d0f9      	beq.n	85f26 <pmc_sleep+0x146>
	if (mckr & PMC_MCKR_PRES_Msk) {
   85f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85f34:	f003 0370 	and.w	r3, r3, #112	; 0x70
   85f38:	2b00      	cmp	r3, #0
   85f3a:	d00d      	beq.n	85f58 <pmc_sleep+0x178>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
   85f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85f3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   85f42:	62fb      	str	r3, [r7, #44]	; 0x2c
		PMC->PMC_MCKR = mckr;
   85f44:	4a3b      	ldr	r2, [pc, #236]	; (86034 <pmc_sleep+0x254>)
   85f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
   85f48:	6313      	str	r3, [r2, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
   85f4a:	bf00      	nop
   85f4c:	4b39      	ldr	r3, [pc, #228]	; (86034 <pmc_sleep+0x254>)
   85f4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85f50:	f003 0308 	and.w	r3, r3, #8
   85f54:	2b00      	cmp	r3, #0
   85f56:	d0f9      	beq.n	85f4c <pmc_sleep+0x16c>
	pmc_disable_pllack();
   85f58:	4b3c      	ldr	r3, [pc, #240]	; (8604c <pmc_sleep+0x26c>)
   85f5a:	4798      	blx	r3
	pmc_disable_upll_clock();
   85f5c:	4b3c      	ldr	r3, [pc, #240]	; (86050 <pmc_sleep+0x270>)
   85f5e:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
   85f60:	bf00      	nop
   85f62:	4b34      	ldr	r3, [pc, #208]	; (86034 <pmc_sleep+0x254>)
   85f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
   85f6a:	2b00      	cmp	r3, #0
   85f6c:	d0f9      	beq.n	85f62 <pmc_sleep+0x182>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
   85f6e:	4b31      	ldr	r3, [pc, #196]	; (86034 <pmc_sleep+0x254>)
   85f70:	6a1b      	ldr	r3, [r3, #32]
   85f72:	f023 739b 	bic.w	r3, r3, #20316160	; 0x1360000
   85f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   85f7a:	4a2e      	ldr	r2, [pc, #184]	; (86034 <pmc_sleep+0x254>)
   85f7c:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85f80:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   85f82:	bf00      	nop
   85f84:	4b2b      	ldr	r3, [pc, #172]	; (86034 <pmc_sleep+0x254>)
   85f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   85f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   85f8c:	2b00      	cmp	r3, #0
   85f8e:	d0f9      	beq.n	85f84 <pmc_sleep+0x1a4>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
   85f90:	4a2c      	ldr	r2, [pc, #176]	; (86044 <pmc_sleep+0x264>)
   85f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
   85f94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   85f98:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr1 & (~EEFC_FMR_FWS_Msk);
   85f9a:	4a2b      	ldr	r2, [pc, #172]	; (86048 <pmc_sleep+0x268>)
   85f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   85f9e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
   85fa2:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
   85fa4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
   85fa8:	2b00      	cmp	r3, #0
   85faa:	d009      	beq.n	85fc0 <pmc_sleep+0x1e0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   85fac:	4b21      	ldr	r3, [pc, #132]	; (86034 <pmc_sleep+0x254>)
   85fae:	6a1b      	ldr	r3, [r3, #32]
   85fb0:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   85fb4:	f023 0301 	bic.w	r3, r3, #1
   85fb8:	4a1e      	ldr	r2, [pc, #120]	; (86034 <pmc_sleep+0x254>)
   85fba:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   85fbe:	6213      	str	r3, [r2, #32]
}
   85fc0:	bf00      	nop
		cpu_irq_enable();
   85fc2:	4b1e      	ldr	r3, [pc, #120]	; (8603c <pmc_sleep+0x25c>)
   85fc4:	2201      	movs	r2, #1
   85fc6:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   85fc8:	f3bf 8f5f 	dmb	sy
}
   85fcc:	bf00      	nop
  __ASM volatile ("cpsie i");
   85fce:	b662      	cpsie	i
}
   85fd0:	bf00      	nop
		pmc_enable_waitmode();
   85fd2:	4b20      	ldr	r3, [pc, #128]	; (86054 <pmc_sleep+0x274>)
   85fd4:	4798      	blx	r3
  __ASM volatile ("cpsid i");
   85fd6:	b672      	cpsid	i
}
   85fd8:	bf00      	nop
  __ASM volatile ("dmb");
   85fda:	f3bf 8f5f 	dmb	sy
}
   85fde:	bf00      	nop
		cpu_irq_disable();
   85fe0:	4b16      	ldr	r3, [pc, #88]	; (8603c <pmc_sleep+0x25c>)
   85fe2:	2200      	movs	r2, #0
   85fe4:	701a      	strb	r2, [r3, #0]
		pmc_restore_clock_setting(mor, pllr0, pllr1, mckr, fmr
   85fe6:	6a3d      	ldr	r5, [r7, #32]
   85fe8:	69fc      	ldr	r4, [r7, #28]
   85fea:	69b8      	ldr	r0, [r7, #24]
   85fec:	6979      	ldr	r1, [r7, #20]
   85fee:	693a      	ldr	r2, [r7, #16]
   85ff0:	68fb      	ldr	r3, [r7, #12]
   85ff2:	66fd      	str	r5, [r7, #108]	; 0x6c
   85ff4:	66bc      	str	r4, [r7, #104]	; 0x68
   85ff6:	6678      	str	r0, [r7, #100]	; 0x64
   85ff8:	6639      	str	r1, [r7, #96]	; 0x60
   85ffa:	65fa      	str	r2, [r7, #92]	; 0x5c
   85ffc:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t pll_sr = 0;
   85ffe:	2300      	movs	r3, #0
   86000:	657b      	str	r3, [r7, #84]	; 0x54
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
   86002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   86004:	f003 0302 	and.w	r3, r3, #2
   86008:	2b00      	cmp	r3, #0
   8600a:	d029      	beq.n	86060 <pmc_sleep+0x280>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8600c:	4b09      	ldr	r3, [pc, #36]	; (86034 <pmc_sleep+0x254>)
   8600e:	6a1b      	ldr	r3, [r3, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   86010:	4a11      	ldr	r2, [pc, #68]	; (86058 <pmc_sleep+0x278>)
   86012:	401a      	ands	r2, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   86014:	4907      	ldr	r1, [pc, #28]	; (86034 <pmc_sleep+0x254>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   86016:	4b11      	ldr	r3, [pc, #68]	; (8605c <pmc_sleep+0x27c>)
   86018:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8601a:	620b      	str	r3, [r1, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8601c:	4b05      	ldr	r3, [pc, #20]	; (86034 <pmc_sleep+0x254>)
   8601e:	6a1b      	ldr	r3, [r3, #32]
				| CKGR_MOR_KEY_PASSWD;
   86020:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   86024:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   86028:	4a02      	ldr	r2, [pc, #8]	; (86034 <pmc_sleep+0x254>)
				| CKGR_MOR_KEY_PASSWD;
   8602a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   8602e:	6213      	str	r3, [r2, #32]
   86030:	e053      	b.n	860da <pmc_sleep+0x2fa>
   86032:	bf00      	nop
   86034:	400e0400 	.word	0x400e0400
   86038:	e000ed00 	.word	0xe000ed00
   8603c:	200003e0 	.word	0x200003e0
   86040:	20001439 	.word	0x20001439
   86044:	400e0800 	.word	0x400e0800
   86048:	400e0a00 	.word	0x400e0a00
   8604c:	00085555 	.word	0x00085555
   86050:	00085585 	.word	0x00085585
   86054:	000856a1 	.word	0x000856a1
   86058:	fec8fffc 	.word	0xfec8fffc
   8605c:	01370002 	.word	0x01370002
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
   86060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
   86062:	f003 0301 	and.w	r3, r3, #1
   86066:	2b00      	cmp	r3, #0
   86068:	d037      	beq.n	860da <pmc_sleep+0x2fa>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
   8606a:	4b60      	ldr	r3, [pc, #384]	; (861ec <pmc_sleep+0x40c>)
   8606c:	6a1b      	ldr	r3, [r3, #32]
   8606e:	f003 0301 	and.w	r3, r3, #1
   86072:	2b00      	cmp	r3, #0
   86074:	d112      	bne.n	8609c <pmc_sleep+0x2bc>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86076:	4b5d      	ldr	r3, [pc, #372]	; (861ec <pmc_sleep+0x40c>)
   86078:	6a1b      	ldr	r3, [r3, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   8607a:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8607e:	f023 0303 	bic.w	r3, r3, #3
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   86082:	4a5a      	ldr	r2, [pc, #360]	; (861ec <pmc_sleep+0x40c>)
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
   86084:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   86088:	f043 0301 	orr.w	r3, r3, #1
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8608c:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8608e:	bf00      	nop
   86090:	4b56      	ldr	r3, [pc, #344]	; (861ec <pmc_sleep+0x40c>)
   86092:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86094:	f003 0301 	and.w	r3, r3, #1
   86098:	2b00      	cmp	r3, #0
   8609a:	d0f9      	beq.n	86090 <pmc_sleep+0x2b0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
   8609c:	4b53      	ldr	r3, [pc, #332]	; (861ec <pmc_sleep+0x40c>)
   8609e:	6a1b      	ldr	r3, [r3, #32]
   860a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   860a4:	2b00      	cmp	r3, #0
   860a6:	d10e      	bne.n	860c6 <pmc_sleep+0x2e6>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   860a8:	4b50      	ldr	r3, [pc, #320]	; (861ec <pmc_sleep+0x40c>)
   860aa:	6a1b      	ldr	r3, [r3, #32]
   860ac:	4a4f      	ldr	r2, [pc, #316]	; (861ec <pmc_sleep+0x40c>)
   860ae:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   860b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   860b6:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
   860b8:	bf00      	nop
   860ba:	4b4c      	ldr	r3, [pc, #304]	; (861ec <pmc_sleep+0x40c>)
   860bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   860be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   860c2:	2b00      	cmp	r3, #0
   860c4:	d0f9      	beq.n	860ba <pmc_sleep+0x2da>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   860c6:	4b49      	ldr	r3, [pc, #292]	; (861ec <pmc_sleep+0x40c>)
   860c8:	6a1b      	ldr	r3, [r3, #32]
					| CKGR_MOR_KEY_PASSWD;
   860ca:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   860ce:	f023 0378 	bic.w	r3, r3, #120	; 0x78
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   860d2:	4a46      	ldr	r2, [pc, #280]	; (861ec <pmc_sleep+0x40c>)
					| CKGR_MOR_KEY_PASSWD;
   860d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
   860d8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
   860da:	6eba      	ldr	r2, [r7, #104]	; 0x68
   860dc:	4b44      	ldr	r3, [pc, #272]	; (861f0 <pmc_sleep+0x410>)
   860de:	4013      	ands	r3, r2
   860e0:	2b00      	cmp	r3, #0
   860e2:	d008      	beq.n	860f6 <pmc_sleep+0x316>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
   860e4:	4a41      	ldr	r2, [pc, #260]	; (861ec <pmc_sleep+0x40c>)
   860e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   860e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   860ec:	6293      	str	r3, [r2, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
   860ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   860f0:	f043 0302 	orr.w	r3, r3, #2
   860f4:	657b      	str	r3, [r7, #84]	; 0x54
	if (pll1_setting & CKGR_UCKR_UPLLEN) {
   860f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   860f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
   860fc:	2b00      	cmp	r3, #0
   860fe:	d006      	beq.n	8610e <pmc_sleep+0x32e>
		PMC->CKGR_UCKR = pll1_setting;
   86100:	4a3a      	ldr	r2, [pc, #232]	; (861ec <pmc_sleep+0x40c>)
   86102:	6e7b      	ldr	r3, [r7, #100]	; 0x64
   86104:	61d3      	str	r3, [r2, #28]
		pll_sr |= PMC_SR_LOCKU;
   86106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   86108:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8610c:	657b      	str	r3, [r7, #84]	; 0x54
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
   8610e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   86110:	f003 0303 	and.w	r3, r3, #3
   86114:	2b02      	cmp	r3, #2
   86116:	d002      	beq.n	8611e <pmc_sleep+0x33e>
   86118:	2b03      	cmp	r3, #3
   8611a:	d008      	beq.n	8612e <pmc_sleep+0x34e>
   8611c:	e00f      	b.n	8613e <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
   8611e:	bf00      	nop
   86120:	4b32      	ldr	r3, [pc, #200]	; (861ec <pmc_sleep+0x40c>)
   86122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86124:	f003 0302 	and.w	r3, r3, #2
   86128:	2b00      	cmp	r3, #0
   8612a:	d0f9      	beq.n	86120 <pmc_sleep+0x340>
		break;
   8612c:	e007      	b.n	8613e <pmc_sleep+0x35e>
		while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8612e:	bf00      	nop
   86130:	4b2e      	ldr	r3, [pc, #184]	; (861ec <pmc_sleep+0x40c>)
   86132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   86134:	f003 0340 	and.w	r3, r3, #64	; 0x40
   86138:	2b00      	cmp	r3, #0
   8613a:	d0f9      	beq.n	86130 <pmc_sleep+0x350>
		break;
   8613c:	bf00      	nop
	mckr = PMC->PMC_MCKR;
   8613e:	4b2b      	ldr	r3, [pc, #172]	; (861ec <pmc_sleep+0x40c>)
   86140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86142:	653b      	str	r3, [r7, #80]	; 0x50
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   86144:	6d3b      	ldr	r3, [r7, #80]	; 0x50
   86146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
   8614a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   8614c:	f003 0370 	and.w	r3, r3, #112	; 0x70
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   86150:	4926      	ldr	r1, [pc, #152]	; (861ec <pmc_sleep+0x40c>)
		| (mck_setting & PMC_MCKR_PRES_Msk);
   86152:	4313      	orrs	r3, r2
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
   86154:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   86156:	bf00      	nop
   86158:	4b24      	ldr	r3, [pc, #144]	; (861ec <pmc_sleep+0x40c>)
   8615a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8615c:	f003 0308 	and.w	r3, r3, #8
   86160:	2b00      	cmp	r3, #0
   86162:	d0f9      	beq.n	86158 <pmc_sleep+0x378>
	EFC0->EEFC_FMR = fmr_setting;
   86164:	4a23      	ldr	r2, [pc, #140]	; (861f4 <pmc_sleep+0x414>)
   86166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
   86168:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = fmr_setting1;
   8616a:	4a23      	ldr	r2, [pc, #140]	; (861f8 <pmc_sleep+0x418>)
   8616c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
   8616e:	6013      	str	r3, [r2, #0]
	PMC->PMC_MCKR = mck_setting;
   86170:	4a1e      	ldr	r2, [pc, #120]	; (861ec <pmc_sleep+0x40c>)
   86172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
   86174:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
   86176:	bf00      	nop
   86178:	4b1c      	ldr	r3, [pc, #112]	; (861ec <pmc_sleep+0x40c>)
   8617a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8617c:	f003 0308 	and.w	r3, r3, #8
   86180:	2b00      	cmp	r3, #0
   86182:	d0f9      	beq.n	86178 <pmc_sleep+0x398>
	while (!(PMC->PMC_SR & pll_sr));
   86184:	bf00      	nop
   86186:	4b19      	ldr	r3, [pc, #100]	; (861ec <pmc_sleep+0x40c>)
   86188:	6e9a      	ldr	r2, [r3, #104]	; 0x68
   8618a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
   8618c:	4013      	ands	r3, r2
   8618e:	2b00      	cmp	r3, #0
   86190:	d0f9      	beq.n	86186 <pmc_sleep+0x3a6>
}
   86192:	bf00      	nop
		b_is_sleep_clock_used = false;
   86194:	4b19      	ldr	r3, [pc, #100]	; (861fc <pmc_sleep+0x41c>)
   86196:	2200      	movs	r2, #0
   86198:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
   8619a:	4b19      	ldr	r3, [pc, #100]	; (86200 <pmc_sleep+0x420>)
   8619c:	681b      	ldr	r3, [r3, #0]
   8619e:	2b00      	cmp	r3, #0
   861a0:	d005      	beq.n	861ae <pmc_sleep+0x3ce>
			callback_clocks_restored();
   861a2:	4b17      	ldr	r3, [pc, #92]	; (86200 <pmc_sleep+0x420>)
   861a4:	681b      	ldr	r3, [r3, #0]
   861a6:	4798      	blx	r3
			callback_clocks_restored = NULL;
   861a8:	4b15      	ldr	r3, [pc, #84]	; (86200 <pmc_sleep+0x420>)
   861aa:	2200      	movs	r2, #0
   861ac:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
   861ae:	4b15      	ldr	r3, [pc, #84]	; (86204 <pmc_sleep+0x424>)
   861b0:	2201      	movs	r2, #1
   861b2:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   861b4:	f3bf 8f5f 	dmb	sy
}
   861b8:	bf00      	nop
  __ASM volatile ("cpsie i");
   861ba:	b662      	cpsie	i
}
   861bc:	bf00      	nop
		break;
   861be:	e010      	b.n	861e2 <pmc_sleep+0x402>
		SCB->SCR |= SCR_SLEEPDEEP;
   861c0:	4b11      	ldr	r3, [pc, #68]	; (86208 <pmc_sleep+0x428>)
   861c2:	691b      	ldr	r3, [r3, #16]
   861c4:	4a10      	ldr	r2, [pc, #64]	; (86208 <pmc_sleep+0x428>)
   861c6:	f043 0304 	orr.w	r3, r3, #4
   861ca:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
   861cc:	4b0d      	ldr	r3, [pc, #52]	; (86204 <pmc_sleep+0x424>)
   861ce:	2201      	movs	r2, #1
   861d0:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   861d2:	f3bf 8f5f 	dmb	sy
}
   861d6:	bf00      	nop
  __ASM volatile ("cpsie i");
   861d8:	b662      	cpsie	i
}
   861da:	bf00      	nop
  __ASM volatile ("wfe");
   861dc:	bf20      	wfe
}
   861de:	bf00      	nop
		break;
   861e0:	bf00      	nop
}
   861e2:	bf00      	nop
   861e4:	3770      	adds	r7, #112	; 0x70
   861e6:	46bd      	mov	sp, r7
   861e8:	bdb0      	pop	{r4, r5, r7, pc}
   861ea:	bf00      	nop
   861ec:	400e0400 	.word	0x400e0400
   861f0:	07ff0000 	.word	0x07ff0000
   861f4:	400e0800 	.word	0x400e0800
   861f8:	400e0a00 	.word	0x400e0a00
   861fc:	20001439 	.word	0x20001439
   86200:	2000143c 	.word	0x2000143c
   86204:	200003e0 	.word	0x200003e0
   86208:	e000ed00 	.word	0xe000ed00

0008620c <pmc_is_wakeup_clocks_restored>:

bool pmc_is_wakeup_clocks_restored(void)
{
   8620c:	b480      	push	{r7}
   8620e:	af00      	add	r7, sp, #0
	return !b_is_sleep_clock_used;
   86210:	4b08      	ldr	r3, [pc, #32]	; (86234 <pmc_is_wakeup_clocks_restored+0x28>)
   86212:	781b      	ldrb	r3, [r3, #0]
   86214:	b2db      	uxtb	r3, r3
   86216:	2b00      	cmp	r3, #0
   86218:	bf14      	ite	ne
   8621a:	2301      	movne	r3, #1
   8621c:	2300      	moveq	r3, #0
   8621e:	b2db      	uxtb	r3, r3
   86220:	f083 0301 	eor.w	r3, r3, #1
   86224:	b2db      	uxtb	r3, r3
   86226:	f003 0301 	and.w	r3, r3, #1
   8622a:	b2db      	uxtb	r3, r3
}
   8622c:	4618      	mov	r0, r3
   8622e:	46bd      	mov	sp, r7
   86230:	bc80      	pop	{r7}
   86232:	4770      	bx	lr
   86234:	20001439 	.word	0x20001439

00086238 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
   86238:	b480      	push	{r7}
   8623a:	b085      	sub	sp, #20
   8623c:	af00      	add	r7, sp, #0
   8623e:	6078      	str	r0, [r7, #4]
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;
   86240:	4b10      	ldr	r3, [pc, #64]	; (86284 <_sbrk+0x4c>)
   86242:	60fb      	str	r3, [r7, #12]

	if (heap == NULL) {
   86244:	4b10      	ldr	r3, [pc, #64]	; (86288 <_sbrk+0x50>)
   86246:	681b      	ldr	r3, [r3, #0]
   86248:	2b00      	cmp	r3, #0
   8624a:	d102      	bne.n	86252 <_sbrk+0x1a>
		heap = (unsigned char *)&_end;
   8624c:	4b0e      	ldr	r3, [pc, #56]	; (86288 <_sbrk+0x50>)
   8624e:	4a0f      	ldr	r2, [pc, #60]	; (8628c <_sbrk+0x54>)
   86250:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   86252:	4b0d      	ldr	r3, [pc, #52]	; (86288 <_sbrk+0x50>)
   86254:	681b      	ldr	r3, [r3, #0]
   86256:	60bb      	str	r3, [r7, #8]

	if (((int)prev_heap + incr) > ramend) {
   86258:	68ba      	ldr	r2, [r7, #8]
   8625a:	687b      	ldr	r3, [r7, #4]
   8625c:	4413      	add	r3, r2
   8625e:	68fa      	ldr	r2, [r7, #12]
   86260:	429a      	cmp	r2, r3
   86262:	da02      	bge.n	8626a <_sbrk+0x32>
		return (caddr_t) -1;	
   86264:	f04f 33ff 	mov.w	r3, #4294967295
   86268:	e006      	b.n	86278 <_sbrk+0x40>
	}

	heap += incr;
   8626a:	4b07      	ldr	r3, [pc, #28]	; (86288 <_sbrk+0x50>)
   8626c:	681a      	ldr	r2, [r3, #0]
   8626e:	687b      	ldr	r3, [r7, #4]
   86270:	4413      	add	r3, r2
   86272:	4a05      	ldr	r2, [pc, #20]	; (86288 <_sbrk+0x50>)
   86274:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
   86276:	68bb      	ldr	r3, [r7, #8]
}
   86278:	4618      	mov	r0, r3
   8627a:	3714      	adds	r7, #20
   8627c:	46bd      	mov	sp, r7
   8627e:	bc80      	pop	{r7}
   86280:	4770      	bx	lr
   86282:	bf00      	nop
   86284:	20083ffc 	.word	0x20083ffc
   86288:	20001440 	.word	0x20001440
   8628c:	20084000 	.word	0x20084000

00086290 <_close>:
{
	return -1;
}

extern int _close(int file)
{
   86290:	b480      	push	{r7}
   86292:	b083      	sub	sp, #12
   86294:	af00      	add	r7, sp, #0
   86296:	6078      	str	r0, [r7, #4]
	return -1;
   86298:	f04f 33ff 	mov.w	r3, #4294967295
}
   8629c:	4618      	mov	r0, r3
   8629e:	370c      	adds	r7, #12
   862a0:	46bd      	mov	sp, r7
   862a2:	bc80      	pop	{r7}
   862a4:	4770      	bx	lr

000862a6 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
   862a6:	b480      	push	{r7}
   862a8:	b083      	sub	sp, #12
   862aa:	af00      	add	r7, sp, #0
   862ac:	6078      	str	r0, [r7, #4]
   862ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
   862b0:	683b      	ldr	r3, [r7, #0]
   862b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   862b6:	605a      	str	r2, [r3, #4]

	return 0;
   862b8:	2300      	movs	r3, #0
}
   862ba:	4618      	mov	r0, r3
   862bc:	370c      	adds	r7, #12
   862be:	46bd      	mov	sp, r7
   862c0:	bc80      	pop	{r7}
   862c2:	4770      	bx	lr

000862c4 <_isatty>:

extern int _isatty(int file)
{
   862c4:	b480      	push	{r7}
   862c6:	b083      	sub	sp, #12
   862c8:	af00      	add	r7, sp, #0
   862ca:	6078      	str	r0, [r7, #4]
	return 1;
   862cc:	2301      	movs	r3, #1
}
   862ce:	4618      	mov	r0, r3
   862d0:	370c      	adds	r7, #12
   862d2:	46bd      	mov	sp, r7
   862d4:	bc80      	pop	{r7}
   862d6:	4770      	bx	lr

000862d8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
   862d8:	b480      	push	{r7}
   862da:	b085      	sub	sp, #20
   862dc:	af00      	add	r7, sp, #0
   862de:	60f8      	str	r0, [r7, #12]
   862e0:	60b9      	str	r1, [r7, #8]
   862e2:	607a      	str	r2, [r7, #4]
	return 0;
   862e4:	2300      	movs	r3, #0
}
   862e6:	4618      	mov	r0, r3
   862e8:	3714      	adds	r7, #20
   862ea:	46bd      	mov	sp, r7
   862ec:	bc80      	pop	{r7}
   862ee:	4770      	bx	lr

000862f0 <_exit>:

extern void _exit(int status)
{
   862f0:	b580      	push	{r7, lr}
   862f2:	b082      	sub	sp, #8
   862f4:	af00      	add	r7, sp, #0
   862f6:	6078      	str	r0, [r7, #4]
	printf("Exiting with status %d.\n", status);
   862f8:	6879      	ldr	r1, [r7, #4]
   862fa:	4802      	ldr	r0, [pc, #8]	; (86304 <_exit+0x14>)
   862fc:	4b02      	ldr	r3, [pc, #8]	; (86308 <_exit+0x18>)
   862fe:	4798      	blx	r3

	for (;;);
   86300:	e7fe      	b.n	86300 <_exit+0x10>
   86302:	bf00      	nop
   86304:	0008d4b0 	.word	0x0008d4b0
   86308:	00086735 	.word	0x00086735

0008630c <_kill>:
}

extern void _kill(int pid, int sig)
{
   8630c:	b480      	push	{r7}
   8630e:	b083      	sub	sp, #12
   86310:	af00      	add	r7, sp, #0
   86312:	6078      	str	r0, [r7, #4]
   86314:	6039      	str	r1, [r7, #0]
	return;
   86316:	bf00      	nop
}
   86318:	370c      	adds	r7, #12
   8631a:	46bd      	mov	sp, r7
   8631c:	bc80      	pop	{r7}
   8631e:	4770      	bx	lr

00086320 <_getpid>:

extern int _getpid(void)
{
   86320:	b480      	push	{r7}
   86322:	af00      	add	r7, sp, #0
	return -1;
   86324:	f04f 33ff 	mov.w	r3, #4294967295
}
   86328:	4618      	mov	r0, r3
   8632a:	46bd      	mov	sp, r7
   8632c:	bc80      	pop	{r7}
   8632e:	4770      	bx	lr

00086330 <sysclk_enable_peripheral_clock>:
{
   86330:	b580      	push	{r7, lr}
   86332:	b082      	sub	sp, #8
   86334:	af00      	add	r7, sp, #0
   86336:	6078      	str	r0, [r7, #4]
	pmc_enable_periph_clk(ul_id);
   86338:	6878      	ldr	r0, [r7, #4]
   8633a:	4b03      	ldr	r3, [pc, #12]	; (86348 <sysclk_enable_peripheral_clock+0x18>)
   8633c:	4798      	blx	r3
}
   8633e:	bf00      	nop
   86340:	3708      	adds	r7, #8
   86342:	46bd      	mov	sp, r7
   86344:	bd80      	pop	{r7, pc}
   86346:	bf00      	nop
   86348:	000855b9 	.word	0x000855b9

0008634c <ioport_init>:
{
   8634c:	b580      	push	{r7, lr}
   8634e:	af00      	add	r7, sp, #0
	sysclk_enable_peripheral_clock(ID_PIOA);
   86350:	200a      	movs	r0, #10
   86352:	4b04      	ldr	r3, [pc, #16]	; (86364 <ioport_init+0x18>)
   86354:	4798      	blx	r3
	sysclk_enable_peripheral_clock(ID_PIOB);
   86356:	200b      	movs	r0, #11
   86358:	4b02      	ldr	r3, [pc, #8]	; (86364 <ioport_init+0x18>)
   8635a:	4798      	blx	r3
}
   8635c:	bf00      	nop
}
   8635e:	bf00      	nop
   86360:	bd80      	pop	{r7, pc}
   86362:	bf00      	nop
   86364:	00086331 	.word	0x00086331

00086368 <iopins_normal>:
	
	/* */
}

void iopins_normal(void)
{
   86368:	b580      	push	{r7, lr}
   8636a:	af00      	add	r7, sp, #0
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8636c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   86370:	201d      	movs	r0, #29
   86372:	4b0d      	ldr	r3, [pc, #52]	; (863a8 <iopins_normal+0x40>)
   86374:	4798      	blx	r3
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   86376:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8637a:	201f      	movs	r0, #31
   8637c:	4b0a      	ldr	r3, [pc, #40]	; (863a8 <iopins_normal+0x40>)
   8637e:	4798      	blx	r3
	//gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
	
	/* Configure MOSFET for turning on-off system */
	gpio_configure_pin(PIN_PWRON_GPIO, PIN_PWRON_FLAGS);
   86380:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   86384:	2018      	movs	r0, #24
   86386:	4b08      	ldr	r3, [pc, #32]	; (863a8 <iopins_normal+0x40>)
   86388:	4798      	blx	r3
	//board_sram_pwron();

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8638a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   8638e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
   86392:	4806      	ldr	r0, [pc, #24]	; (863ac <iopins_normal+0x44>)
   86394:	4b06      	ldr	r3, [pc, #24]	; (863b0 <iopins_normal+0x48>)
   86396:	4798      	blx	r3
#ifdef CONF_BOARD_PCK0
	gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
#endif

#ifdef CONF_BOARD_PCK1
gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
   86398:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8639c:	2038      	movs	r0, #56	; 0x38
   8639e:	4b02      	ldr	r3, [pc, #8]	; (863a8 <iopins_normal+0x40>)
   863a0:	4798      	blx	r3
#if defined(CONF_BOARD_USB_PORT)
#  if defined(CONF_BOARD_USB_VBUS_DETECT)
	gpio_configure_pin(USB_VBUS_PIN, USB_VBUS_FLAGS);
#  endif
#endif	
}
   863a2:	bf00      	nop
   863a4:	bd80      	pop	{r7, pc}
   863a6:	bf00      	nop
   863a8:	00085ba9 	.word	0x00085ba9
   863ac:	400e0c00 	.word	0x400e0c00
   863b0:	00085cd9 	.word	0x00085cd9

000863b4 <board_init>:

void board_init(void)
{
   863b4:	b580      	push	{r7, lr}
   863b6:	af00      	add	r7, sp, #0
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   863b8:	4b04      	ldr	r3, [pc, #16]	; (863cc <board_init+0x18>)
   863ba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   863be:	605a      	str	r2, [r3, #4]

	/* GPIO has been deprecated, the old code just keeps it for compatibility.
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
   863c0:	4b03      	ldr	r3, [pc, #12]	; (863d0 <board_init+0x1c>)
   863c2:	4798      	blx	r3

	iopins_normal();
   863c4:	4b03      	ldr	r3, [pc, #12]	; (863d4 <board_init+0x20>)
   863c6:	4798      	blx	r3

}
   863c8:	bf00      	nop
   863ca:	bd80      	pop	{r7, pc}
   863cc:	400e1250 	.word	0x400e1250
   863d0:	0008634d 	.word	0x0008634d
   863d4:	00086369 	.word	0x00086369

000863d8 <cpu_irq_enter_critical>:
 */
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
   863d8:	b480      	push	{r7}
   863da:	b083      	sub	sp, #12
   863dc:	af00      	add	r7, sp, #0
	if (cpu_irq_critical_section_counter == 0) {
   863de:	4b11      	ldr	r3, [pc, #68]	; (86424 <cpu_irq_enter_critical+0x4c>)
   863e0:	681b      	ldr	r3, [r3, #0]
   863e2:	2b00      	cmp	r3, #0
   863e4:	d114      	bne.n	86410 <cpu_irq_enter_critical+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   863e6:	f3ef 8310 	mrs	r3, PRIMASK
   863ea:	607b      	str	r3, [r7, #4]
  return(result);
   863ec:	687b      	ldr	r3, [r7, #4]
		if (cpu_irq_is_enabled()) {
   863ee:	2b00      	cmp	r3, #0
   863f0:	d10b      	bne.n	8640a <cpu_irq_enter_critical+0x32>
  __ASM volatile ("cpsid i");
   863f2:	b672      	cpsid	i
}
   863f4:	bf00      	nop
  __ASM volatile ("dmb");
   863f6:	f3bf 8f5f 	dmb	sy
}
   863fa:	bf00      	nop
			cpu_irq_disable();
   863fc:	4b0a      	ldr	r3, [pc, #40]	; (86428 <cpu_irq_enter_critical+0x50>)
   863fe:	2200      	movs	r2, #0
   86400:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
   86402:	4b0a      	ldr	r3, [pc, #40]	; (8642c <cpu_irq_enter_critical+0x54>)
   86404:	2201      	movs	r2, #1
   86406:	701a      	strb	r2, [r3, #0]
   86408:	e002      	b.n	86410 <cpu_irq_enter_critical+0x38>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   8640a:	4b08      	ldr	r3, [pc, #32]	; (8642c <cpu_irq_enter_critical+0x54>)
   8640c:	2200      	movs	r2, #0
   8640e:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   86410:	4b04      	ldr	r3, [pc, #16]	; (86424 <cpu_irq_enter_critical+0x4c>)
   86412:	681b      	ldr	r3, [r3, #0]
   86414:	3301      	adds	r3, #1
   86416:	4a03      	ldr	r2, [pc, #12]	; (86424 <cpu_irq_enter_critical+0x4c>)
   86418:	6013      	str	r3, [r2, #0]
}
   8641a:	bf00      	nop
   8641c:	370c      	adds	r7, #12
   8641e:	46bd      	mov	sp, r7
   86420:	bc80      	pop	{r7}
   86422:	4770      	bx	lr
   86424:	20001444 	.word	0x20001444
   86428:	200003e0 	.word	0x200003e0
   8642c:	20001448 	.word	0x20001448

00086430 <cpu_irq_leave_critical>:

void cpu_irq_leave_critical(void)
{
   86430:	b480      	push	{r7}
   86432:	af00      	add	r7, sp, #0
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   86434:	4b0c      	ldr	r3, [pc, #48]	; (86468 <cpu_irq_leave_critical+0x38>)
   86436:	681b      	ldr	r3, [r3, #0]
   86438:	3b01      	subs	r3, #1
   8643a:	4a0b      	ldr	r2, [pc, #44]	; (86468 <cpu_irq_leave_critical+0x38>)
   8643c:	6013      	str	r3, [r2, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8643e:	4b0a      	ldr	r3, [pc, #40]	; (86468 <cpu_irq_leave_critical+0x38>)
   86440:	681b      	ldr	r3, [r3, #0]
   86442:	2b00      	cmp	r3, #0
   86444:	d10c      	bne.n	86460 <cpu_irq_leave_critical+0x30>
   86446:	4b09      	ldr	r3, [pc, #36]	; (8646c <cpu_irq_leave_critical+0x3c>)
   86448:	781b      	ldrb	r3, [r3, #0]
   8644a:	b2db      	uxtb	r3, r3
   8644c:	2b00      	cmp	r3, #0
   8644e:	d007      	beq.n	86460 <cpu_irq_leave_critical+0x30>
		cpu_irq_enable();
   86450:	4b07      	ldr	r3, [pc, #28]	; (86470 <cpu_irq_leave_critical+0x40>)
   86452:	2201      	movs	r2, #1
   86454:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
   86456:	f3bf 8f5f 	dmb	sy
}
   8645a:	bf00      	nop
  __ASM volatile ("cpsie i");
   8645c:	b662      	cpsie	i
}
   8645e:	bf00      	nop
	}
}
   86460:	bf00      	nop
   86462:	46bd      	mov	sp, r7
   86464:	bc80      	pop	{r7}
   86466:	4770      	bx	lr
   86468:	20001444 	.word	0x20001444
   8646c:	20001448 	.word	0x20001448
   86470:	200003e0 	.word	0x200003e0

00086474 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   86474:	b580      	push	{r7, lr}
   86476:	b086      	sub	sp, #24
   86478:	af00      	add	r7, sp, #0
   8647a:	60f8      	str	r0, [r7, #12]
   8647c:	60b9      	str	r1, [r7, #8]
   8647e:	607a      	str	r2, [r7, #4]
	int nChars = 0;
   86480:	2300      	movs	r3, #0
   86482:	617b      	str	r3, [r7, #20]

	if (file != 0) {
   86484:	68fb      	ldr	r3, [r7, #12]
   86486:	2b00      	cmp	r3, #0
   86488:	d012      	beq.n	864b0 <_read+0x3c>
		return -1;
   8648a:	f04f 33ff 	mov.w	r3, #4294967295
   8648e:	e013      	b.n	864b8 <_read+0x44>
	}

	for (; len > 0; --len) {
		ptr_get(stdio_base, ptr);
   86490:	4b0b      	ldr	r3, [pc, #44]	; (864c0 <_read+0x4c>)
   86492:	681b      	ldr	r3, [r3, #0]
   86494:	4a0b      	ldr	r2, [pc, #44]	; (864c4 <_read+0x50>)
   86496:	6812      	ldr	r2, [r2, #0]
   86498:	68b9      	ldr	r1, [r7, #8]
   8649a:	4610      	mov	r0, r2
   8649c:	4798      	blx	r3
		ptr++;
   8649e:	68bb      	ldr	r3, [r7, #8]
   864a0:	3301      	adds	r3, #1
   864a2:	60bb      	str	r3, [r7, #8]
		nChars++;
   864a4:	697b      	ldr	r3, [r7, #20]
   864a6:	3301      	adds	r3, #1
   864a8:	617b      	str	r3, [r7, #20]
	for (; len > 0; --len) {
   864aa:	687b      	ldr	r3, [r7, #4]
   864ac:	3b01      	subs	r3, #1
   864ae:	607b      	str	r3, [r7, #4]
   864b0:	687b      	ldr	r3, [r7, #4]
   864b2:	2b00      	cmp	r3, #0
   864b4:	dcec      	bgt.n	86490 <_read+0x1c>
	}
	return nChars;
   864b6:	697b      	ldr	r3, [r7, #20]
}
   864b8:	4618      	mov	r0, r3
   864ba:	3718      	adds	r7, #24
   864bc:	46bd      	mov	sp, r7
   864be:	bd80      	pop	{r7, pc}
   864c0:	2000144c 	.word	0x2000144c
   864c4:	20001430 	.word	0x20001430

000864c8 <SystemCoreClockUpdate>:

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
}

void SystemCoreClockUpdate(void)
{
   864c8:	b480      	push	{r7}
   864ca:	af00      	add	r7, sp, #0
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   864cc:	4b58      	ldr	r3, [pc, #352]	; (86630 <SystemCoreClockUpdate+0x168>)
   864ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   864d0:	f003 0303 	and.w	r3, r3, #3
   864d4:	2b03      	cmp	r3, #3
   864d6:	f200 808c 	bhi.w	865f2 <SystemCoreClockUpdate+0x12a>
   864da:	2b02      	cmp	r3, #2
   864dc:	d23f      	bcs.n	8655e <SystemCoreClockUpdate+0x96>
   864de:	2b00      	cmp	r3, #0
   864e0:	d002      	beq.n	864e8 <SystemCoreClockUpdate+0x20>
   864e2:	2b01      	cmp	r3, #1
   864e4:	d010      	beq.n	86508 <SystemCoreClockUpdate+0x40>
   864e6:	e084      	b.n	865f2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   864e8:	4b52      	ldr	r3, [pc, #328]	; (86634 <SystemCoreClockUpdate+0x16c>)
   864ea:	695b      	ldr	r3, [r3, #20]
   864ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
   864f0:	2b00      	cmp	r3, #0
   864f2:	d004      	beq.n	864fe <SystemCoreClockUpdate+0x36>
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   864f4:	4b50      	ldr	r3, [pc, #320]	; (86638 <SystemCoreClockUpdate+0x170>)
   864f6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   864fa:	601a      	str	r2, [r3, #0]
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
		}
		break;
   864fc:	e079      	b.n	865f2 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   864fe:	4b4e      	ldr	r3, [pc, #312]	; (86638 <SystemCoreClockUpdate+0x170>)
   86500:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
   86504:	601a      	str	r2, [r3, #0]
		break;
   86506:	e074      	b.n	865f2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   86508:	4b49      	ldr	r3, [pc, #292]	; (86630 <SystemCoreClockUpdate+0x168>)
   8650a:	6a1b      	ldr	r3, [r3, #32]
   8650c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   86510:	2b00      	cmp	r3, #0
   86512:	d003      	beq.n	8651c <SystemCoreClockUpdate+0x54>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   86514:	4b48      	ldr	r3, [pc, #288]	; (86638 <SystemCoreClockUpdate+0x170>)
   86516:	4a49      	ldr	r2, [pc, #292]	; (8663c <SystemCoreClockUpdate+0x174>)
   86518:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		break;
   8651a:	e06a      	b.n	865f2 <SystemCoreClockUpdate+0x12a>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8651c:	4b46      	ldr	r3, [pc, #280]	; (86638 <SystemCoreClockUpdate+0x170>)
   8651e:	4a48      	ldr	r2, [pc, #288]	; (86640 <SystemCoreClockUpdate+0x178>)
   86520:	601a      	str	r2, [r3, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86522:	4b43      	ldr	r3, [pc, #268]	; (86630 <SystemCoreClockUpdate+0x168>)
   86524:	6a1b      	ldr	r3, [r3, #32]
   86526:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8652a:	2b20      	cmp	r3, #32
   8652c:	d00b      	beq.n	86546 <SystemCoreClockUpdate+0x7e>
   8652e:	2b20      	cmp	r3, #32
   86530:	d811      	bhi.n	86556 <SystemCoreClockUpdate+0x8e>
   86532:	2b00      	cmp	r3, #0
   86534:	d011      	beq.n	8655a <SystemCoreClockUpdate+0x92>
   86536:	2b10      	cmp	r3, #16
   86538:	d10d      	bne.n	86556 <SystemCoreClockUpdate+0x8e>
				SystemCoreClock *= 2U;
   8653a:	4b3f      	ldr	r3, [pc, #252]	; (86638 <SystemCoreClockUpdate+0x170>)
   8653c:	681b      	ldr	r3, [r3, #0]
   8653e:	005b      	lsls	r3, r3, #1
   86540:	4a3d      	ldr	r2, [pc, #244]	; (86638 <SystemCoreClockUpdate+0x170>)
   86542:	6013      	str	r3, [r2, #0]
				break;
   86544:	e00a      	b.n	8655c <SystemCoreClockUpdate+0x94>
				SystemCoreClock *= 3U;
   86546:	4b3c      	ldr	r3, [pc, #240]	; (86638 <SystemCoreClockUpdate+0x170>)
   86548:	681a      	ldr	r2, [r3, #0]
   8654a:	4613      	mov	r3, r2
   8654c:	005b      	lsls	r3, r3, #1
   8654e:	4413      	add	r3, r2
   86550:	4a39      	ldr	r2, [pc, #228]	; (86638 <SystemCoreClockUpdate+0x170>)
   86552:	6013      	str	r3, [r2, #0]
				break;
   86554:	e002      	b.n	8655c <SystemCoreClockUpdate+0x94>
				break;
   86556:	bf00      	nop
   86558:	e04b      	b.n	865f2 <SystemCoreClockUpdate+0x12a>
				break;
   8655a:	bf00      	nop
		break;
   8655c:	e049      	b.n	865f2 <SystemCoreClockUpdate+0x12a>
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8655e:	4b34      	ldr	r3, [pc, #208]	; (86630 <SystemCoreClockUpdate+0x168>)
   86560:	6a1b      	ldr	r3, [r3, #32]
   86562:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
   86566:	2b00      	cmp	r3, #0
   86568:	d003      	beq.n	86572 <SystemCoreClockUpdate+0xaa>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8656a:	4b33      	ldr	r3, [pc, #204]	; (86638 <SystemCoreClockUpdate+0x170>)
   8656c:	4a33      	ldr	r2, [pc, #204]	; (8663c <SystemCoreClockUpdate+0x174>)
   8656e:	601a      	str	r2, [r3, #0]
   86570:	e01f      	b.n	865b2 <SystemCoreClockUpdate+0xea>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   86572:	4b31      	ldr	r3, [pc, #196]	; (86638 <SystemCoreClockUpdate+0x170>)
   86574:	4a32      	ldr	r2, [pc, #200]	; (86640 <SystemCoreClockUpdate+0x178>)
   86576:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   86578:	4b2d      	ldr	r3, [pc, #180]	; (86630 <SystemCoreClockUpdate+0x168>)
   8657a:	6a1b      	ldr	r3, [r3, #32]
   8657c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   86580:	2b20      	cmp	r3, #32
   86582:	d00b      	beq.n	8659c <SystemCoreClockUpdate+0xd4>
   86584:	2b20      	cmp	r3, #32
   86586:	d811      	bhi.n	865ac <SystemCoreClockUpdate+0xe4>
   86588:	2b00      	cmp	r3, #0
   8658a:	d011      	beq.n	865b0 <SystemCoreClockUpdate+0xe8>
   8658c:	2b10      	cmp	r3, #16
   8658e:	d10d      	bne.n	865ac <SystemCoreClockUpdate+0xe4>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   86590:	4b29      	ldr	r3, [pc, #164]	; (86638 <SystemCoreClockUpdate+0x170>)
   86592:	681b      	ldr	r3, [r3, #0]
   86594:	005b      	lsls	r3, r3, #1
   86596:	4a28      	ldr	r2, [pc, #160]	; (86638 <SystemCoreClockUpdate+0x170>)
   86598:	6013      	str	r3, [r2, #0]
				break;
   8659a:	e00a      	b.n	865b2 <SystemCoreClockUpdate+0xea>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8659c:	4b26      	ldr	r3, [pc, #152]	; (86638 <SystemCoreClockUpdate+0x170>)
   8659e:	681a      	ldr	r2, [r3, #0]
   865a0:	4613      	mov	r3, r2
   865a2:	005b      	lsls	r3, r3, #1
   865a4:	4413      	add	r3, r2
   865a6:	4a24      	ldr	r2, [pc, #144]	; (86638 <SystemCoreClockUpdate+0x170>)
   865a8:	6013      	str	r3, [r2, #0]
				break;
   865aa:	e002      	b.n	865b2 <SystemCoreClockUpdate+0xea>
			default:
				break;
   865ac:	bf00      	nop
   865ae:	e000      	b.n	865b2 <SystemCoreClockUpdate+0xea>
				break;
   865b0:	bf00      	nop
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   865b2:	4b1f      	ldr	r3, [pc, #124]	; (86630 <SystemCoreClockUpdate+0x168>)
   865b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   865b6:	f003 0303 	and.w	r3, r3, #3
   865ba:	2b02      	cmp	r3, #2
   865bc:	d115      	bne.n	865ea <SystemCoreClockUpdate+0x122>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   865be:	4b1c      	ldr	r3, [pc, #112]	; (86630 <SystemCoreClockUpdate+0x168>)
   865c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   865c2:	0c1b      	lsrs	r3, r3, #16
   865c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
				                          CKGR_PLLAR_MULA_Pos) + 1U);
   865c8:	3301      	adds	r3, #1
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   865ca:	4a1b      	ldr	r2, [pc, #108]	; (86638 <SystemCoreClockUpdate+0x170>)
   865cc:	6812      	ldr	r2, [r2, #0]
   865ce:	fb02 f303 	mul.w	r3, r2, r3
   865d2:	4a19      	ldr	r2, [pc, #100]	; (86638 <SystemCoreClockUpdate+0x170>)
   865d4:	6013      	str	r3, [r2, #0]
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >>
   865d6:	4b16      	ldr	r3, [pc, #88]	; (86630 <SystemCoreClockUpdate+0x168>)
   865d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   865da:	b2db      	uxtb	r3, r3
   865dc:	4a16      	ldr	r2, [pc, #88]	; (86638 <SystemCoreClockUpdate+0x170>)
   865de:	6812      	ldr	r2, [r2, #0]
   865e0:	fbb2 f3f3 	udiv	r3, r2, r3
   865e4:	4a14      	ldr	r2, [pc, #80]	; (86638 <SystemCoreClockUpdate+0x170>)
   865e6:	6013      	str	r3, [r2, #0]
				                           CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
   865e8:	e002      	b.n	865f0 <SystemCoreClockUpdate+0x128>
			SystemCoreClock = SYS_UTMIPLL / 2U;
   865ea:	4b13      	ldr	r3, [pc, #76]	; (86638 <SystemCoreClockUpdate+0x170>)
   865ec:	4a15      	ldr	r2, [pc, #84]	; (86644 <SystemCoreClockUpdate+0x17c>)
   865ee:	601a      	str	r2, [r3, #0]
		break;
   865f0:	bf00      	nop
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   865f2:	4b0f      	ldr	r3, [pc, #60]	; (86630 <SystemCoreClockUpdate+0x168>)
   865f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   865f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
   865fa:	2b70      	cmp	r3, #112	; 0x70
   865fc:	d108      	bne.n	86610 <SystemCoreClockUpdate+0x148>
		SystemCoreClock /= 3U;
   865fe:	4b0e      	ldr	r3, [pc, #56]	; (86638 <SystemCoreClockUpdate+0x170>)
   86600:	681b      	ldr	r3, [r3, #0]
   86602:	4a11      	ldr	r2, [pc, #68]	; (86648 <SystemCoreClockUpdate+0x180>)
   86604:	fba2 2303 	umull	r2, r3, r2, r3
   86608:	085b      	lsrs	r3, r3, #1
   8660a:	4a0b      	ldr	r2, [pc, #44]	; (86638 <SystemCoreClockUpdate+0x170>)
   8660c:	6013      	str	r3, [r2, #0]
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
			                           PMC_MCKR_PRES_Pos);
	}
}
   8660e:	e00a      	b.n	86626 <SystemCoreClockUpdate+0x15e>
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   86610:	4b07      	ldr	r3, [pc, #28]	; (86630 <SystemCoreClockUpdate+0x168>)
   86612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   86614:	091b      	lsrs	r3, r3, #4
   86616:	f003 0307 	and.w	r3, r3, #7
   8661a:	4a07      	ldr	r2, [pc, #28]	; (86638 <SystemCoreClockUpdate+0x170>)
   8661c:	6812      	ldr	r2, [r2, #0]
   8661e:	fa22 f303 	lsr.w	r3, r2, r3
   86622:	4a05      	ldr	r2, [pc, #20]	; (86638 <SystemCoreClockUpdate+0x170>)
   86624:	6013      	str	r3, [r2, #0]
}
   86626:	bf00      	nop
   86628:	46bd      	mov	sp, r7
   8662a:	bc80      	pop	{r7}
   8662c:	4770      	bx	lr
   8662e:	bf00      	nop
   86630:	400e0400 	.word	0x400e0400
   86634:	400e1210 	.word	0x400e1210
   86638:	20000470 	.word	0x20000470
   8663c:	00b71b00 	.word	0x00b71b00
   86640:	003d0900 	.word	0x003d0900
   86644:	0e4e1c00 	.word	0x0e4e1c00
   86648:	aaaaaaab 	.word	0xaaaaaaab

0008664c <ui_powerdown>:
	LED_Off(LED1_GPIO);
	//LED_Off(LED2_GPIO);
}

void ui_powerdown(void)
{
   8664c:	b580      	push	{r7, lr}
   8664e:	af00      	add	r7, sp, #0
	LED_Off(LED0_GPIO);
   86650:	201d      	movs	r0, #29
   86652:	4b03      	ldr	r3, [pc, #12]	; (86660 <ui_powerdown+0x14>)
   86654:	4798      	blx	r3
	LED_Off(LED1_GPIO);
   86656:	201f      	movs	r0, #31
   86658:	4b01      	ldr	r3, [pc, #4]	; (86660 <ui_powerdown+0x14>)
   8665a:	4798      	blx	r3
	//LED_Off(LED2_GPIO);
	
	// Power off FPGA
	//board_sram_pwroff();
		
}
   8665c:	bf00      	nop
   8665e:	bd80      	pop	{r7, pc}
   86660:	00084d35 	.word	0x00084d35

00086664 <ui_wakeup>:

void ui_wakeup(void)
{
   86664:	b580      	push	{r7, lr}
   86666:	af00      	add	r7, sp, #0
	LED_On(LED0_GPIO);
   86668:	201d      	movs	r0, #29
   8666a:	4b02      	ldr	r3, [pc, #8]	; (86674 <ui_wakeup+0x10>)
   8666c:	4798      	blx	r3
	//board_sram_pwron();
}
   8666e:	bf00      	nop
   86670:	bd80      	pop	{r7, pc}
   86672:	bf00      	nop
   86674:	00084d91 	.word	0x00084d91

00086678 <ui_process>:

void ui_process(uint16_t framenumber)
{
   86678:	b580      	push	{r7, lr}
   8667a:	b082      	sub	sp, #8
   8667c:	af00      	add	r7, sp, #0
   8667e:	4603      	mov	r3, r0
   86680:	80fb      	strh	r3, [r7, #6]
	if ((framenumber % 1000) == 0) {
   86682:	88fb      	ldrh	r3, [r7, #6]
   86684:	4a16      	ldr	r2, [pc, #88]	; (866e0 <ui_process+0x68>)
   86686:	fba2 1203 	umull	r1, r2, r2, r3
   8668a:	0992      	lsrs	r2, r2, #6
   8668c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   86690:	fb01 f202 	mul.w	r2, r1, r2
   86694:	1a9b      	subs	r3, r3, r2
   86696:	b29b      	uxth	r3, r3
   86698:	2b00      	cmp	r3, #0
   8669a:	d102      	bne.n	866a2 <ui_process+0x2a>
		LED_On(LED0_GPIO);
   8669c:	201d      	movs	r0, #29
   8669e:	4b11      	ldr	r3, [pc, #68]	; (866e4 <ui_process+0x6c>)
   866a0:	4798      	blx	r3
	}
	if ((framenumber % 1000) == 500) {
   866a2:	88fb      	ldrh	r3, [r7, #6]
   866a4:	4a0e      	ldr	r2, [pc, #56]	; (866e0 <ui_process+0x68>)
   866a6:	fba2 1203 	umull	r1, r2, r2, r3
   866aa:	0992      	lsrs	r2, r2, #6
   866ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   866b0:	fb01 f202 	mul.w	r2, r1, r2
   866b4:	1a9b      	subs	r3, r3, r2
   866b6:	b29b      	uxth	r3, r3
   866b8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   866bc:	d102      	bne.n	866c4 <ui_process+0x4c>
		LED_Off(LED0_GPIO);
   866be:	201d      	movs	r0, #29
   866c0:	4b09      	ldr	r3, [pc, #36]	; (866e8 <ui_process+0x70>)
   866c2:	4798      	blx	r3
	}
	
	if ((framenumber % 512) == 0) {
   866c4:	88fb      	ldrh	r3, [r7, #6]
   866c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   866ca:	b29b      	uxth	r3, r3
   866cc:	2b00      	cmp	r3, #0
   866ce:	d102      	bne.n	866d6 <ui_process+0x5e>
		LED_Off(LED1_GPIO);
   866d0:	201f      	movs	r0, #31
   866d2:	4b05      	ldr	r3, [pc, #20]	; (866e8 <ui_process+0x70>)
   866d4:	4798      	blx	r3
		//LED_Off(LED2_GPIO);
	}
}
   866d6:	bf00      	nop
   866d8:	3708      	adds	r7, #8
   866da:	46bd      	mov	sp, r7
   866dc:	bd80      	pop	{r7, pc}
   866de:	bf00      	nop
   866e0:	10624dd3 	.word	0x10624dd3
   866e4:	00084d91 	.word	0x00084d91
   866e8:	00084d35 	.word	0x00084d35

000866ec <__libc_init_array>:
   866ec:	b570      	push	{r4, r5, r6, lr}
   866ee:	4e0d      	ldr	r6, [pc, #52]	; (86724 <__libc_init_array+0x38>)
   866f0:	4d0d      	ldr	r5, [pc, #52]	; (86728 <__libc_init_array+0x3c>)
   866f2:	1b76      	subs	r6, r6, r5
   866f4:	10b6      	asrs	r6, r6, #2
   866f6:	d006      	beq.n	86706 <__libc_init_array+0x1a>
   866f8:	2400      	movs	r4, #0
   866fa:	f855 3b04 	ldr.w	r3, [r5], #4
   866fe:	3401      	adds	r4, #1
   86700:	4798      	blx	r3
   86702:	42a6      	cmp	r6, r4
   86704:	d1f9      	bne.n	866fa <__libc_init_array+0xe>
   86706:	4e09      	ldr	r6, [pc, #36]	; (8672c <__libc_init_array+0x40>)
   86708:	4d09      	ldr	r5, [pc, #36]	; (86730 <__libc_init_array+0x44>)
   8670a:	f007 f8dd 	bl	8d8c8 <_init>
   8670e:	1b76      	subs	r6, r6, r5
   86710:	10b6      	asrs	r6, r6, #2
   86712:	d006      	beq.n	86722 <__libc_init_array+0x36>
   86714:	2400      	movs	r4, #0
   86716:	f855 3b04 	ldr.w	r3, [r5], #4
   8671a:	3401      	adds	r4, #1
   8671c:	4798      	blx	r3
   8671e:	42a6      	cmp	r6, r4
   86720:	d1f9      	bne.n	86716 <__libc_init_array+0x2a>
   86722:	bd70      	pop	{r4, r5, r6, pc}
   86724:	0008d8d4 	.word	0x0008d8d4
   86728:	0008d8d4 	.word	0x0008d8d4
   8672c:	0008d8dc 	.word	0x0008d8dc
   86730:	0008d8d4 	.word	0x0008d8d4

00086734 <iprintf>:
   86734:	b40f      	push	{r0, r1, r2, r3}
   86736:	b500      	push	{lr}
   86738:	4a07      	ldr	r2, [pc, #28]	; (86758 <iprintf+0x24>)
   8673a:	b083      	sub	sp, #12
   8673c:	ab04      	add	r3, sp, #16
   8673e:	6810      	ldr	r0, [r2, #0]
   86740:	f853 2b04 	ldr.w	r2, [r3], #4
   86744:	6881      	ldr	r1, [r0, #8]
   86746:	9301      	str	r3, [sp, #4]
   86748:	f001 fee2 	bl	88510 <_vfiprintf_r>
   8674c:	b003      	add	sp, #12
   8674e:	f85d eb04 	ldr.w	lr, [sp], #4
   86752:	b004      	add	sp, #16
   86754:	4770      	bx	lr
   86756:	bf00      	nop
   86758:	20000474 	.word	0x20000474

0008675c <memcpy>:
   8675c:	4684      	mov	ip, r0
   8675e:	ea41 0300 	orr.w	r3, r1, r0
   86762:	f013 0303 	ands.w	r3, r3, #3
   86766:	d149      	bne.n	867fc <memcpy+0xa0>
   86768:	3a40      	subs	r2, #64	; 0x40
   8676a:	d323      	bcc.n	867b4 <memcpy+0x58>
   8676c:	680b      	ldr	r3, [r1, #0]
   8676e:	6003      	str	r3, [r0, #0]
   86770:	684b      	ldr	r3, [r1, #4]
   86772:	6043      	str	r3, [r0, #4]
   86774:	688b      	ldr	r3, [r1, #8]
   86776:	6083      	str	r3, [r0, #8]
   86778:	68cb      	ldr	r3, [r1, #12]
   8677a:	60c3      	str	r3, [r0, #12]
   8677c:	690b      	ldr	r3, [r1, #16]
   8677e:	6103      	str	r3, [r0, #16]
   86780:	694b      	ldr	r3, [r1, #20]
   86782:	6143      	str	r3, [r0, #20]
   86784:	698b      	ldr	r3, [r1, #24]
   86786:	6183      	str	r3, [r0, #24]
   86788:	69cb      	ldr	r3, [r1, #28]
   8678a:	61c3      	str	r3, [r0, #28]
   8678c:	6a0b      	ldr	r3, [r1, #32]
   8678e:	6203      	str	r3, [r0, #32]
   86790:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86792:	6243      	str	r3, [r0, #36]	; 0x24
   86794:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86796:	6283      	str	r3, [r0, #40]	; 0x28
   86798:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   8679a:	62c3      	str	r3, [r0, #44]	; 0x2c
   8679c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8679e:	6303      	str	r3, [r0, #48]	; 0x30
   867a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   867a2:	6343      	str	r3, [r0, #52]	; 0x34
   867a4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   867a6:	6383      	str	r3, [r0, #56]	; 0x38
   867a8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   867aa:	63c3      	str	r3, [r0, #60]	; 0x3c
   867ac:	3040      	adds	r0, #64	; 0x40
   867ae:	3140      	adds	r1, #64	; 0x40
   867b0:	3a40      	subs	r2, #64	; 0x40
   867b2:	d2db      	bcs.n	8676c <memcpy+0x10>
   867b4:	3230      	adds	r2, #48	; 0x30
   867b6:	d30b      	bcc.n	867d0 <memcpy+0x74>
   867b8:	680b      	ldr	r3, [r1, #0]
   867ba:	6003      	str	r3, [r0, #0]
   867bc:	684b      	ldr	r3, [r1, #4]
   867be:	6043      	str	r3, [r0, #4]
   867c0:	688b      	ldr	r3, [r1, #8]
   867c2:	6083      	str	r3, [r0, #8]
   867c4:	68cb      	ldr	r3, [r1, #12]
   867c6:	60c3      	str	r3, [r0, #12]
   867c8:	3010      	adds	r0, #16
   867ca:	3110      	adds	r1, #16
   867cc:	3a10      	subs	r2, #16
   867ce:	d2f3      	bcs.n	867b8 <memcpy+0x5c>
   867d0:	320c      	adds	r2, #12
   867d2:	d305      	bcc.n	867e0 <memcpy+0x84>
   867d4:	f851 3b04 	ldr.w	r3, [r1], #4
   867d8:	f840 3b04 	str.w	r3, [r0], #4
   867dc:	3a04      	subs	r2, #4
   867de:	d2f9      	bcs.n	867d4 <memcpy+0x78>
   867e0:	3204      	adds	r2, #4
   867e2:	d008      	beq.n	867f6 <memcpy+0x9a>
   867e4:	07d2      	lsls	r2, r2, #31
   867e6:	bf1c      	itt	ne
   867e8:	f811 3b01 	ldrbne.w	r3, [r1], #1
   867ec:	f800 3b01 	strbne.w	r3, [r0], #1
   867f0:	d301      	bcc.n	867f6 <memcpy+0x9a>
   867f2:	880b      	ldrh	r3, [r1, #0]
   867f4:	8003      	strh	r3, [r0, #0]
   867f6:	4660      	mov	r0, ip
   867f8:	4770      	bx	lr
   867fa:	bf00      	nop
   867fc:	2a08      	cmp	r2, #8
   867fe:	d313      	bcc.n	86828 <memcpy+0xcc>
   86800:	078b      	lsls	r3, r1, #30
   86802:	d0b1      	beq.n	86768 <memcpy+0xc>
   86804:	f010 0303 	ands.w	r3, r0, #3
   86808:	d0ae      	beq.n	86768 <memcpy+0xc>
   8680a:	f1c3 0304 	rsb	r3, r3, #4
   8680e:	1ad2      	subs	r2, r2, r3
   86810:	07db      	lsls	r3, r3, #31
   86812:	bf1c      	itt	ne
   86814:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86818:	f800 3b01 	strbne.w	r3, [r0], #1
   8681c:	d3a4      	bcc.n	86768 <memcpy+0xc>
   8681e:	f831 3b02 	ldrh.w	r3, [r1], #2
   86822:	f820 3b02 	strh.w	r3, [r0], #2
   86826:	e79f      	b.n	86768 <memcpy+0xc>
   86828:	3a04      	subs	r2, #4
   8682a:	d3d9      	bcc.n	867e0 <memcpy+0x84>
   8682c:	3a01      	subs	r2, #1
   8682e:	f811 3b01 	ldrb.w	r3, [r1], #1
   86832:	f800 3b01 	strb.w	r3, [r0], #1
   86836:	d2f9      	bcs.n	8682c <memcpy+0xd0>
   86838:	780b      	ldrb	r3, [r1, #0]
   8683a:	7003      	strb	r3, [r0, #0]
   8683c:	784b      	ldrb	r3, [r1, #1]
   8683e:	7043      	strb	r3, [r0, #1]
   86840:	788b      	ldrb	r3, [r1, #2]
   86842:	7083      	strb	r3, [r0, #2]
   86844:	4660      	mov	r0, ip
   86846:	4770      	bx	lr

00086848 <memset>:
   86848:	0783      	lsls	r3, r0, #30
   8684a:	b530      	push	{r4, r5, lr}
   8684c:	d048      	beq.n	868e0 <memset+0x98>
   8684e:	1e54      	subs	r4, r2, #1
   86850:	2a00      	cmp	r2, #0
   86852:	d03f      	beq.n	868d4 <memset+0x8c>
   86854:	4603      	mov	r3, r0
   86856:	b2ca      	uxtb	r2, r1
   86858:	e001      	b.n	8685e <memset+0x16>
   8685a:	3c01      	subs	r4, #1
   8685c:	d33a      	bcc.n	868d4 <memset+0x8c>
   8685e:	f803 2b01 	strb.w	r2, [r3], #1
   86862:	079d      	lsls	r5, r3, #30
   86864:	d1f9      	bne.n	8685a <memset+0x12>
   86866:	2c03      	cmp	r4, #3
   86868:	d92d      	bls.n	868c6 <memset+0x7e>
   8686a:	b2cd      	uxtb	r5, r1
   8686c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86870:	2c0f      	cmp	r4, #15
   86872:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86876:	d936      	bls.n	868e6 <memset+0x9e>
   86878:	f1a4 0210 	sub.w	r2, r4, #16
   8687c:	f022 0c0f 	bic.w	ip, r2, #15
   86880:	f103 0e20 	add.w	lr, r3, #32
   86884:	44e6      	add	lr, ip
   86886:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   8688a:	f103 0210 	add.w	r2, r3, #16
   8688e:	e942 5504 	strd	r5, r5, [r2, #-16]
   86892:	e942 5502 	strd	r5, r5, [r2, #-8]
   86896:	3210      	adds	r2, #16
   86898:	4572      	cmp	r2, lr
   8689a:	d1f8      	bne.n	8688e <memset+0x46>
   8689c:	f10c 0201 	add.w	r2, ip, #1
   868a0:	f014 0f0c 	tst.w	r4, #12
   868a4:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   868a8:	f004 0c0f 	and.w	ip, r4, #15
   868ac:	d013      	beq.n	868d6 <memset+0x8e>
   868ae:	f1ac 0304 	sub.w	r3, ip, #4
   868b2:	f023 0303 	bic.w	r3, r3, #3
   868b6:	3304      	adds	r3, #4
   868b8:	4413      	add	r3, r2
   868ba:	f842 5b04 	str.w	r5, [r2], #4
   868be:	4293      	cmp	r3, r2
   868c0:	d1fb      	bne.n	868ba <memset+0x72>
   868c2:	f00c 0403 	and.w	r4, ip, #3
   868c6:	b12c      	cbz	r4, 868d4 <memset+0x8c>
   868c8:	b2ca      	uxtb	r2, r1
   868ca:	441c      	add	r4, r3
   868cc:	f803 2b01 	strb.w	r2, [r3], #1
   868d0:	429c      	cmp	r4, r3
   868d2:	d1fb      	bne.n	868cc <memset+0x84>
   868d4:	bd30      	pop	{r4, r5, pc}
   868d6:	4664      	mov	r4, ip
   868d8:	4613      	mov	r3, r2
   868da:	2c00      	cmp	r4, #0
   868dc:	d1f4      	bne.n	868c8 <memset+0x80>
   868de:	e7f9      	b.n	868d4 <memset+0x8c>
   868e0:	4603      	mov	r3, r0
   868e2:	4614      	mov	r4, r2
   868e4:	e7bf      	b.n	86866 <memset+0x1e>
   868e6:	461a      	mov	r2, r3
   868e8:	46a4      	mov	ip, r4
   868ea:	e7e0      	b.n	868ae <memset+0x66>

000868ec <sprintf>:
   868ec:	b40e      	push	{r1, r2, r3}
   868ee:	b530      	push	{r4, r5, lr}
   868f0:	4604      	mov	r4, r0
   868f2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   868f6:	b09c      	sub	sp, #112	; 0x70
   868f8:	4a0b      	ldr	r2, [pc, #44]	; (86928 <sprintf+0x3c>)
   868fa:	ab1f      	add	r3, sp, #124	; 0x7c
   868fc:	490b      	ldr	r1, [pc, #44]	; (8692c <sprintf+0x40>)
   868fe:	9205      	str	r2, [sp, #20]
   86900:	f853 2b04 	ldr.w	r2, [r3], #4
   86904:	6808      	ldr	r0, [r1, #0]
   86906:	a902      	add	r1, sp, #8
   86908:	e9cd 3401 	strd	r3, r4, [sp, #4]
   8690c:	9507      	str	r5, [sp, #28]
   8690e:	9504      	str	r5, [sp, #16]
   86910:	9406      	str	r4, [sp, #24]
   86912:	f000 f86f 	bl	869f4 <_svfprintf_r>
   86916:	2200      	movs	r2, #0
   86918:	9b02      	ldr	r3, [sp, #8]
   8691a:	701a      	strb	r2, [r3, #0]
   8691c:	b01c      	add	sp, #112	; 0x70
   8691e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86922:	b003      	add	sp, #12
   86924:	4770      	bx	lr
   86926:	bf00      	nop
   86928:	ffff0208 	.word	0xffff0208
   8692c:	20000474 	.word	0x20000474

00086930 <strlen>:
   86930:	f020 0103 	bic.w	r1, r0, #3
   86934:	f010 0003 	ands.w	r0, r0, #3
   86938:	f1c0 0000 	rsb	r0, r0, #0
   8693c:	f851 3b04 	ldr.w	r3, [r1], #4
   86940:	f100 0c04 	add.w	ip, r0, #4
   86944:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86948:	f06f 0200 	mvn.w	r2, #0
   8694c:	bf1c      	itt	ne
   8694e:	fa22 f20c 	lsrne.w	r2, r2, ip
   86952:	4313      	orrne	r3, r2
   86954:	f04f 0c01 	mov.w	ip, #1
   86958:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8695c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   86960:	eba3 020c 	sub.w	r2, r3, ip
   86964:	ea22 0203 	bic.w	r2, r2, r3
   86968:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8696c:	bf04      	itt	eq
   8696e:	f851 3b04 	ldreq.w	r3, [r1], #4
   86972:	3004      	addeq	r0, #4
   86974:	d0f4      	beq.n	86960 <strlen+0x30>
   86976:	f1c2 0100 	rsb	r1, r2, #0
   8697a:	ea02 0201 	and.w	r2, r2, r1
   8697e:	fab2 f282 	clz	r2, r2
   86982:	f1c2 021f 	rsb	r2, r2, #31
   86986:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8698a:	4770      	bx	lr

0008698c <strncpy>:
   8698c:	b530      	push	{r4, r5, lr}
   8698e:	ea40 0401 	orr.w	r4, r0, r1
   86992:	07a3      	lsls	r3, r4, #30
   86994:	d122      	bne.n	869dc <strncpy+0x50>
   86996:	2a03      	cmp	r2, #3
   86998:	d920      	bls.n	869dc <strncpy+0x50>
   8699a:	460b      	mov	r3, r1
   8699c:	4684      	mov	ip, r0
   8699e:	4619      	mov	r1, r3
   869a0:	f853 5b04 	ldr.w	r5, [r3], #4
   869a4:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   869a8:	ea24 0405 	bic.w	r4, r4, r5
   869ac:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   869b0:	d115      	bne.n	869de <strncpy+0x52>
   869b2:	3a04      	subs	r2, #4
   869b4:	2a03      	cmp	r2, #3
   869b6:	4619      	mov	r1, r3
   869b8:	f84c 5b04 	str.w	r5, [ip], #4
   869bc:	d8ef      	bhi.n	8699e <strncpy+0x12>
   869be:	f101 3eff 	add.w	lr, r1, #4294967295
   869c2:	b152      	cbz	r2, 869da <strncpy+0x4e>
   869c4:	4663      	mov	r3, ip
   869c6:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   869ca:	1e54      	subs	r4, r2, #1
   869cc:	f803 1b01 	strb.w	r1, [r3], #1
   869d0:	b141      	cbz	r1, 869e4 <strncpy+0x58>
   869d2:	4622      	mov	r2, r4
   869d4:	469c      	mov	ip, r3
   869d6:	2a00      	cmp	r2, #0
   869d8:	d1f4      	bne.n	869c4 <strncpy+0x38>
   869da:	bd30      	pop	{r4, r5, pc}
   869dc:	4684      	mov	ip, r0
   869de:	f101 3eff 	add.w	lr, r1, #4294967295
   869e2:	e7ee      	b.n	869c2 <strncpy+0x36>
   869e4:	4462      	add	r2, ip
   869e6:	2c00      	cmp	r4, #0
   869e8:	d0f7      	beq.n	869da <strncpy+0x4e>
   869ea:	f803 1b01 	strb.w	r1, [r3], #1
   869ee:	4293      	cmp	r3, r2
   869f0:	d1fb      	bne.n	869ea <strncpy+0x5e>
   869f2:	bd30      	pop	{r4, r5, pc}

000869f4 <_svfprintf_r>:
   869f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   869f8:	b0d5      	sub	sp, #340	; 0x154
   869fa:	460c      	mov	r4, r1
   869fc:	910c      	str	r1, [sp, #48]	; 0x30
   869fe:	4691      	mov	r9, r2
   86a00:	930e      	str	r3, [sp, #56]	; 0x38
   86a02:	900a      	str	r0, [sp, #40]	; 0x28
   86a04:	f004 f9ee 	bl	8ade4 <_localeconv_r>
   86a08:	6803      	ldr	r3, [r0, #0]
   86a0a:	4618      	mov	r0, r3
   86a0c:	9317      	str	r3, [sp, #92]	; 0x5c
   86a0e:	f7ff ff8f 	bl	86930 <strlen>
   86a12:	89a3      	ldrh	r3, [r4, #12]
   86a14:	9016      	str	r0, [sp, #88]	; 0x58
   86a16:	0619      	lsls	r1, r3, #24
   86a18:	d503      	bpl.n	86a22 <_svfprintf_r+0x2e>
   86a1a:	6923      	ldr	r3, [r4, #16]
   86a1c:	2b00      	cmp	r3, #0
   86a1e:	f000 878f 	beq.w	87940 <_svfprintf_r+0xf4c>
   86a22:	2400      	movs	r4, #0
   86a24:	ab2b      	add	r3, sp, #172	; 0xac
   86a26:	4622      	mov	r2, r4
   86a28:	4698      	mov	r8, r3
   86a2a:	464d      	mov	r5, r9
   86a2c:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   86a30:	9328      	str	r3, [sp, #160]	; 0xa0
   86a32:	9412      	str	r4, [sp, #72]	; 0x48
   86a34:	2300      	movs	r3, #0
   86a36:	2400      	movs	r4, #0
   86a38:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   86a3c:	782b      	ldrb	r3, [r5, #0]
   86a3e:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   86a42:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   86a46:	9218      	str	r2, [sp, #96]	; 0x60
   86a48:	9208      	str	r2, [sp, #32]
   86a4a:	2b00      	cmp	r3, #0
   86a4c:	f000 81ce 	beq.w	86dec <_svfprintf_r+0x3f8>
   86a50:	46aa      	mov	sl, r5
   86a52:	e004      	b.n	86a5e <_svfprintf_r+0x6a>
   86a54:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   86a58:	2b00      	cmp	r3, #0
   86a5a:	f000 8109 	beq.w	86c70 <_svfprintf_r+0x27c>
   86a5e:	2b25      	cmp	r3, #37	; 0x25
   86a60:	d1f8      	bne.n	86a54 <_svfprintf_r+0x60>
   86a62:	ebba 0605 	subs.w	r6, sl, r5
   86a66:	f040 8107 	bne.w	86c78 <_svfprintf_r+0x284>
   86a6a:	f89a 3000 	ldrb.w	r3, [sl]
   86a6e:	2b00      	cmp	r3, #0
   86a70:	f000 81bc 	beq.w	86dec <_svfprintf_r+0x3f8>
   86a74:	2300      	movs	r3, #0
   86a76:	f04f 32ff 	mov.w	r2, #4294967295
   86a7a:	f04f 092b 	mov.w	r9, #43	; 0x2b
   86a7e:	2420      	movs	r4, #32
   86a80:	461f      	mov	r7, r3
   86a82:	f89a 6001 	ldrb.w	r6, [sl, #1]
   86a86:	9207      	str	r2, [sp, #28]
   86a88:	f10a 0a01 	add.w	sl, sl, #1
   86a8c:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86a90:	9309      	str	r3, [sp, #36]	; 0x24
   86a92:	f10a 0a01 	add.w	sl, sl, #1
   86a96:	f1a6 0320 	sub.w	r3, r6, #32
   86a9a:	2b5a      	cmp	r3, #90	; 0x5a
   86a9c:	f200 8120 	bhi.w	86ce0 <_svfprintf_r+0x2ec>
   86aa0:	e8df f013 	tbh	[pc, r3, lsl #1]
   86aa4:	011e02ca 	.word	0x011e02ca
   86aa8:	02c5011e 	.word	0x02c5011e
   86aac:	011e011e 	.word	0x011e011e
   86ab0:	02a3011e 	.word	0x02a3011e
   86ab4:	011e011e 	.word	0x011e011e
   86ab8:	02f3006a 	.word	0x02f3006a
   86abc:	0247011e 	.word	0x0247011e
   86ac0:	011e02d9 	.word	0x011e02d9
   86ac4:	005b02d4 	.word	0x005b02d4
   86ac8:	005b005b 	.word	0x005b005b
   86acc:	005b005b 	.word	0x005b005b
   86ad0:	005b005b 	.word	0x005b005b
   86ad4:	005b005b 	.word	0x005b005b
   86ad8:	011e011e 	.word	0x011e011e
   86adc:	011e011e 	.word	0x011e011e
   86ae0:	011e011e 	.word	0x011e011e
   86ae4:	01b0011e 	.word	0x01b0011e
   86ae8:	020b011e 	.word	0x020b011e
   86aec:	01b0007a 	.word	0x01b0007a
   86af0:	01b001b0 	.word	0x01b001b0
   86af4:	011e011e 	.word	0x011e011e
   86af8:	011e011e 	.word	0x011e011e
   86afc:	011e029e 	.word	0x011e029e
   86b00:	00b6011e 	.word	0x00b6011e
   86b04:	011e011e 	.word	0x011e011e
   86b08:	0219011e 	.word	0x0219011e
   86b0c:	024c011e 	.word	0x024c011e
   86b10:	011e011e 	.word	0x011e011e
   86b14:	011e073f 	.word	0x011e073f
   86b18:	011e011e 	.word	0x011e011e
   86b1c:	011e011e 	.word	0x011e011e
   86b20:	011e011e 	.word	0x011e011e
   86b24:	01b0011e 	.word	0x01b0011e
   86b28:	020b011e 	.word	0x020b011e
   86b2c:	01b0007c 	.word	0x01b0007c
   86b30:	01b001b0 	.word	0x01b001b0
   86b34:	007c0291 	.word	0x007c0291
   86b38:	011e0075 	.word	0x011e0075
   86b3c:	011e0284 	.word	0x011e0284
   86b40:	00b80270 	.word	0x00b80270
   86b44:	0075025e 	.word	0x0075025e
   86b48:	0219011e 	.word	0x0219011e
   86b4c:	071c0072 	.word	0x071c0072
   86b50:	011e011e 	.word	0x011e011e
   86b54:	011e071f 	.word	0x011e071f
   86b58:	0072      	.short	0x0072
   86b5a:	2200      	movs	r2, #0
   86b5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86b60:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86b64:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86b68:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86b6c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86b70:	2b09      	cmp	r3, #9
   86b72:	d9f5      	bls.n	86b60 <_svfprintf_r+0x16c>
   86b74:	9209      	str	r2, [sp, #36]	; 0x24
   86b76:	e78e      	b.n	86a96 <_svfprintf_r+0xa2>
   86b78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86b7a:	f853 2b04 	ldr.w	r2, [r3], #4
   86b7e:	2a00      	cmp	r2, #0
   86b80:	9209      	str	r2, [sp, #36]	; 0x24
   86b82:	930e      	str	r3, [sp, #56]	; 0x38
   86b84:	f2c0 81d2 	blt.w	86f2c <_svfprintf_r+0x538>
   86b88:	f89a 6000 	ldrb.w	r6, [sl]
   86b8c:	e781      	b.n	86a92 <_svfprintf_r+0x9e>
   86b8e:	f89a 6000 	ldrb.w	r6, [sl]
   86b92:	f047 0720 	orr.w	r7, r7, #32
   86b96:	e77c      	b.n	86a92 <_svfprintf_r+0x9e>
   86b98:	f047 0710 	orr.w	r7, r7, #16
   86b9c:	06ba      	lsls	r2, r7, #26
   86b9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ba0:	f140 817d 	bpl.w	86e9e <_svfprintf_r+0x4aa>
   86ba4:	3307      	adds	r3, #7
   86ba6:	f023 0307 	bic.w	r3, r3, #7
   86baa:	461a      	mov	r2, r3
   86bac:	685b      	ldr	r3, [r3, #4]
   86bae:	f852 4b08 	ldr.w	r4, [r2], #8
   86bb2:	4699      	mov	r9, r3
   86bb4:	920e      	str	r2, [sp, #56]	; 0x38
   86bb6:	2b00      	cmp	r3, #0
   86bb8:	f2c0 857f 	blt.w	876ba <_svfprintf_r+0xcc6>
   86bbc:	9b07      	ldr	r3, [sp, #28]
   86bbe:	3301      	adds	r3, #1
   86bc0:	f001 8039 	beq.w	87c36 <_svfprintf_r+0x1242>
   86bc4:	ea54 0309 	orrs.w	r3, r4, r9
   86bc8:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   86bcc:	f000 8505 	beq.w	875da <_svfprintf_r+0xbe6>
   86bd0:	2c0a      	cmp	r4, #10
   86bd2:	f179 0300 	sbcs.w	r3, r9, #0
   86bd6:	f080 8793 	bcs.w	87b00 <_svfprintf_r+0x110c>
   86bda:	2301      	movs	r3, #1
   86bdc:	465f      	mov	r7, fp
   86bde:	3430      	adds	r4, #48	; 0x30
   86be0:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   86be4:	930b      	str	r3, [sp, #44]	; 0x2c
   86be6:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   86bea:	9a07      	ldr	r2, [sp, #28]
   86bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   86bee:	2300      	movs	r3, #0
   86bf0:	428a      	cmp	r2, r1
   86bf2:	bfb8      	it	lt
   86bf4:	460a      	movlt	r2, r1
   86bf6:	9206      	str	r2, [sp, #24]
   86bf8:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86bfc:	930d      	str	r3, [sp, #52]	; 0x34
   86bfe:	930f      	str	r3, [sp, #60]	; 0x3c
   86c00:	9313      	str	r3, [sp, #76]	; 0x4c
   86c02:	9310      	str	r3, [sp, #64]	; 0x40
   86c04:	2a00      	cmp	r2, #0
   86c06:	d07c      	beq.n	86d02 <_svfprintf_r+0x30e>
   86c08:	9b06      	ldr	r3, [sp, #24]
   86c0a:	3301      	adds	r3, #1
   86c0c:	9306      	str	r3, [sp, #24]
   86c0e:	e078      	b.n	86d02 <_svfprintf_r+0x30e>
   86c10:	f047 0710 	orr.w	r7, r7, #16
   86c14:	f017 0920 	ands.w	r9, r7, #32
   86c18:	f000 8132 	beq.w	86e80 <_svfprintf_r+0x48c>
   86c1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c1e:	3307      	adds	r3, #7
   86c20:	f023 0307 	bic.w	r3, r3, #7
   86c24:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86c28:	f853 4b08 	ldr.w	r4, [r3], #8
   86c2c:	930e      	str	r3, [sp, #56]	; 0x38
   86c2e:	2300      	movs	r3, #0
   86c30:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86c34:	2200      	movs	r2, #0
   86c36:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86c3a:	9a07      	ldr	r2, [sp, #28]
   86c3c:	1c51      	adds	r1, r2, #1
   86c3e:	f000 822a 	beq.w	87096 <_svfprintf_r+0x6a2>
   86c42:	ea54 0109 	orrs.w	r1, r4, r9
   86c46:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   86c4a:	f040 8223 	bne.w	87094 <_svfprintf_r+0x6a0>
   86c4e:	2a00      	cmp	r2, #0
   86c50:	f041 802b 	bne.w	87caa <_svfprintf_r+0x12b6>
   86c54:	2b00      	cmp	r3, #0
   86c56:	f040 84c5 	bne.w	875e4 <_svfprintf_r+0xbf0>
   86c5a:	f01b 0301 	ands.w	r3, fp, #1
   86c5e:	930b      	str	r3, [sp, #44]	; 0x2c
   86c60:	f000 8554 	beq.w	8770c <_svfprintf_r+0xd18>
   86c64:	2330      	movs	r3, #48	; 0x30
   86c66:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   86c6a:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   86c6e:	e7bc      	b.n	86bea <_svfprintf_r+0x1f6>
   86c70:	ebba 0605 	subs.w	r6, sl, r5
   86c74:	f000 80ba 	beq.w	86dec <_svfprintf_r+0x3f8>
   86c78:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   86c7a:	e9c8 5600 	strd	r5, r6, [r8]
   86c7e:	4433      	add	r3, r6
   86c80:	932a      	str	r3, [sp, #168]	; 0xa8
   86c82:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86c84:	3301      	adds	r3, #1
   86c86:	2b07      	cmp	r3, #7
   86c88:	9329      	str	r3, [sp, #164]	; 0xa4
   86c8a:	dc05      	bgt.n	86c98 <_svfprintf_r+0x2a4>
   86c8c:	f108 0808 	add.w	r8, r8, #8
   86c90:	9b08      	ldr	r3, [sp, #32]
   86c92:	4433      	add	r3, r6
   86c94:	9308      	str	r3, [sp, #32]
   86c96:	e6e8      	b.n	86a6a <_svfprintf_r+0x76>
   86c98:	990c      	ldr	r1, [sp, #48]	; 0x30
   86c9a:	980a      	ldr	r0, [sp, #40]	; 0x28
   86c9c:	aa28      	add	r2, sp, #160	; 0xa0
   86c9e:	f005 fad1 	bl	8c244 <__ssprint_r>
   86ca2:	b980      	cbnz	r0, 86cc6 <_svfprintf_r+0x2d2>
   86ca4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ca8:	e7f2      	b.n	86c90 <_svfprintf_r+0x29c>
   86caa:	990c      	ldr	r1, [sp, #48]	; 0x30
   86cac:	980a      	ldr	r0, [sp, #40]	; 0x28
   86cae:	aa28      	add	r2, sp, #160	; 0xa0
   86cb0:	f005 fac8 	bl	8c244 <__ssprint_r>
   86cb4:	2800      	cmp	r0, #0
   86cb6:	f000 808a 	beq.w	86dce <_svfprintf_r+0x3da>
   86cba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86cbc:	b11b      	cbz	r3, 86cc6 <_svfprintf_r+0x2d2>
   86cbe:	990d      	ldr	r1, [sp, #52]	; 0x34
   86cc0:	980a      	ldr	r0, [sp, #40]	; 0x28
   86cc2:	f003 fded 	bl	8a8a0 <_free_r>
   86cc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86cc8:	899b      	ldrh	r3, [r3, #12]
   86cca:	f013 0f40 	tst.w	r3, #64	; 0x40
   86cce:	9b08      	ldr	r3, [sp, #32]
   86cd0:	bf18      	it	ne
   86cd2:	f04f 33ff 	movne.w	r3, #4294967295
   86cd6:	9308      	str	r3, [sp, #32]
   86cd8:	9808      	ldr	r0, [sp, #32]
   86cda:	b055      	add	sp, #340	; 0x154
   86cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ce0:	2e00      	cmp	r6, #0
   86ce2:	f000 8083 	beq.w	86dec <_svfprintf_r+0x3f8>
   86ce6:	2301      	movs	r3, #1
   86ce8:	2200      	movs	r2, #0
   86cea:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   86cee:	9306      	str	r3, [sp, #24]
   86cf0:	ad3b      	add	r5, sp, #236	; 0xec
   86cf2:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86cf6:	930b      	str	r3, [sp, #44]	; 0x2c
   86cf8:	920d      	str	r2, [sp, #52]	; 0x34
   86cfa:	9207      	str	r2, [sp, #28]
   86cfc:	920f      	str	r2, [sp, #60]	; 0x3c
   86cfe:	9213      	str	r2, [sp, #76]	; 0x4c
   86d00:	9210      	str	r2, [sp, #64]	; 0x40
   86d02:	f017 0302 	ands.w	r3, r7, #2
   86d06:	d002      	beq.n	86d0e <_svfprintf_r+0x31a>
   86d08:	9906      	ldr	r1, [sp, #24]
   86d0a:	3102      	adds	r1, #2
   86d0c:	9106      	str	r1, [sp, #24]
   86d0e:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   86d12:	d107      	bne.n	86d24 <_svfprintf_r+0x330>
   86d14:	9909      	ldr	r1, [sp, #36]	; 0x24
   86d16:	9806      	ldr	r0, [sp, #24]
   86d18:	eba1 0900 	sub.w	r9, r1, r0
   86d1c:	f1b9 0f00 	cmp.w	r9, #0
   86d20:	f300 8336 	bgt.w	87390 <_svfprintf_r+0x99c>
   86d24:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86d26:	b182      	cbz	r2, 86d4a <_svfprintf_r+0x356>
   86d28:	2201      	movs	r2, #1
   86d2a:	f8c8 2004 	str.w	r2, [r8, #4]
   86d2e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86d30:	3401      	adds	r4, #1
   86d32:	3201      	adds	r2, #1
   86d34:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   86d38:	2a07      	cmp	r2, #7
   86d3a:	942a      	str	r4, [sp, #168]	; 0xa8
   86d3c:	9229      	str	r2, [sp, #164]	; 0xa4
   86d3e:	f8c8 1000 	str.w	r1, [r8]
   86d42:	f300 8369 	bgt.w	87418 <_svfprintf_r+0xa24>
   86d46:	f108 0808 	add.w	r8, r8, #8
   86d4a:	b17b      	cbz	r3, 86d6c <_svfprintf_r+0x378>
   86d4c:	2302      	movs	r3, #2
   86d4e:	f8c8 3004 	str.w	r3, [r8, #4]
   86d52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86d54:	3402      	adds	r4, #2
   86d56:	3301      	adds	r3, #1
   86d58:	aa21      	add	r2, sp, #132	; 0x84
   86d5a:	2b07      	cmp	r3, #7
   86d5c:	942a      	str	r4, [sp, #168]	; 0xa8
   86d5e:	9329      	str	r3, [sp, #164]	; 0xa4
   86d60:	f8c8 2000 	str.w	r2, [r8]
   86d64:	f300 836c 	bgt.w	87440 <_svfprintf_r+0xa4c>
   86d68:	f108 0808 	add.w	r8, r8, #8
   86d6c:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   86d70:	f000 822e 	beq.w	871d0 <_svfprintf_r+0x7dc>
   86d74:	9b07      	ldr	r3, [sp, #28]
   86d76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86d78:	eba3 0b02 	sub.w	fp, r3, r2
   86d7c:	f1bb 0f00 	cmp.w	fp, #0
   86d80:	f300 8271 	bgt.w	87266 <_svfprintf_r+0x872>
   86d84:	05fb      	lsls	r3, r7, #23
   86d86:	f100 81c5 	bmi.w	87114 <_svfprintf_r+0x720>
   86d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86d8c:	f8c8 5000 	str.w	r5, [r8]
   86d90:	441c      	add	r4, r3
   86d92:	f8c8 3004 	str.w	r3, [r8, #4]
   86d96:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86d98:	942a      	str	r4, [sp, #168]	; 0xa8
   86d9a:	3301      	adds	r3, #1
   86d9c:	2b07      	cmp	r3, #7
   86d9e:	9329      	str	r3, [sp, #164]	; 0xa4
   86da0:	f300 82ea 	bgt.w	87378 <_svfprintf_r+0x984>
   86da4:	f108 0808 	add.w	r8, r8, #8
   86da8:	077b      	lsls	r3, r7, #29
   86daa:	d505      	bpl.n	86db8 <_svfprintf_r+0x3c4>
   86dac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86dae:	9a06      	ldr	r2, [sp, #24]
   86db0:	1a9d      	subs	r5, r3, r2
   86db2:	2d00      	cmp	r5, #0
   86db4:	f300 8350 	bgt.w	87458 <_svfprintf_r+0xa64>
   86db8:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   86dbc:	9906      	ldr	r1, [sp, #24]
   86dbe:	428a      	cmp	r2, r1
   86dc0:	bfac      	ite	ge
   86dc2:	189b      	addge	r3, r3, r2
   86dc4:	185b      	addlt	r3, r3, r1
   86dc6:	9308      	str	r3, [sp, #32]
   86dc8:	2c00      	cmp	r4, #0
   86dca:	f47f af6e 	bne.w	86caa <_svfprintf_r+0x2b6>
   86dce:	2300      	movs	r3, #0
   86dd0:	9329      	str	r3, [sp, #164]	; 0xa4
   86dd2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86dd4:	b11b      	cbz	r3, 86dde <_svfprintf_r+0x3ea>
   86dd6:	990d      	ldr	r1, [sp, #52]	; 0x34
   86dd8:	980a      	ldr	r0, [sp, #40]	; 0x28
   86dda:	f003 fd61 	bl	8a8a0 <_free_r>
   86dde:	4655      	mov	r5, sl
   86de0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86de4:	782b      	ldrb	r3, [r5, #0]
   86de6:	2b00      	cmp	r3, #0
   86de8:	f47f ae32 	bne.w	86a50 <_svfprintf_r+0x5c>
   86dec:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   86dee:	2b00      	cmp	r3, #0
   86df0:	f43f af69 	beq.w	86cc6 <_svfprintf_r+0x2d2>
   86df4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86df6:	980a      	ldr	r0, [sp, #40]	; 0x28
   86df8:	4621      	mov	r1, r4
   86dfa:	aa28      	add	r2, sp, #160	; 0xa0
   86dfc:	f005 fa22 	bl	8c244 <__ssprint_r>
   86e00:	89a3      	ldrh	r3, [r4, #12]
   86e02:	e762      	b.n	86cca <_svfprintf_r+0x2d6>
   86e04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86e06:	3307      	adds	r3, #7
   86e08:	f023 0207 	bic.w	r2, r3, #7
   86e0c:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   86e10:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   86e14:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86e18:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86e1c:	4699      	mov	r9, r3
   86e1e:	4618      	mov	r0, r3
   86e20:	920e      	str	r2, [sp, #56]	; 0x38
   86e22:	4621      	mov	r1, r4
   86e24:	f04f 32ff 	mov.w	r2, #4294967295
   86e28:	4bb6      	ldr	r3, [pc, #728]	; (87104 <_svfprintf_r+0x710>)
   86e2a:	f006 f94b 	bl	8d0c4 <__aeabi_dcmpun>
   86e2e:	2800      	cmp	r0, #0
   86e30:	f040 8496 	bne.w	87760 <_svfprintf_r+0xd6c>
   86e34:	4648      	mov	r0, r9
   86e36:	4621      	mov	r1, r4
   86e38:	f04f 32ff 	mov.w	r2, #4294967295
   86e3c:	4bb1      	ldr	r3, [pc, #708]	; (87104 <_svfprintf_r+0x710>)
   86e3e:	f006 f923 	bl	8d088 <__aeabi_dcmple>
   86e42:	2800      	cmp	r0, #0
   86e44:	f040 848c 	bne.w	87760 <_svfprintf_r+0xd6c>
   86e48:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86e4c:	2200      	movs	r2, #0
   86e4e:	2300      	movs	r3, #0
   86e50:	f006 f910 	bl	8d074 <__aeabi_dcmplt>
   86e54:	2800      	cmp	r0, #0
   86e56:	f040 87a6 	bne.w	87da6 <_svfprintf_r+0x13b2>
   86e5a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86e5e:	2100      	movs	r1, #0
   86e60:	2003      	movs	r0, #3
   86e62:	4da9      	ldr	r5, [pc, #676]	; (87108 <_svfprintf_r+0x714>)
   86e64:	4ba9      	ldr	r3, [pc, #676]	; (8710c <_svfprintf_r+0x718>)
   86e66:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   86e6a:	910d      	str	r1, [sp, #52]	; 0x34
   86e6c:	9006      	str	r0, [sp, #24]
   86e6e:	2e47      	cmp	r6, #71	; 0x47
   86e70:	bfc8      	it	gt
   86e72:	461d      	movgt	r5, r3
   86e74:	9107      	str	r1, [sp, #28]
   86e76:	900b      	str	r0, [sp, #44]	; 0x2c
   86e78:	910f      	str	r1, [sp, #60]	; 0x3c
   86e7a:	9113      	str	r1, [sp, #76]	; 0x4c
   86e7c:	9110      	str	r1, [sp, #64]	; 0x40
   86e7e:	e6c1      	b.n	86c04 <_svfprintf_r+0x210>
   86e80:	f017 0310 	ands.w	r3, r7, #16
   86e84:	f040 8462 	bne.w	8774c <_svfprintf_r+0xd58>
   86e88:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   86e8c:	f000 877b 	beq.w	87d86 <_svfprintf_r+0x1392>
   86e90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86e92:	4699      	mov	r9, r3
   86e94:	f852 4b04 	ldr.w	r4, [r2], #4
   86e98:	920e      	str	r2, [sp, #56]	; 0x38
   86e9a:	b2a4      	uxth	r4, r4
   86e9c:	e6c7      	b.n	86c2e <_svfprintf_r+0x23a>
   86e9e:	f853 4b04 	ldr.w	r4, [r3], #4
   86ea2:	930e      	str	r3, [sp, #56]	; 0x38
   86ea4:	06fb      	lsls	r3, r7, #27
   86ea6:	f100 8441 	bmi.w	8772c <_svfprintf_r+0xd38>
   86eaa:	067d      	lsls	r5, r7, #25
   86eac:	f140 843b 	bpl.w	87726 <_svfprintf_r+0xd32>
   86eb0:	f344 39c0 	sbfx	r9, r4, #15, #1
   86eb4:	464b      	mov	r3, r9
   86eb6:	b224      	sxth	r4, r4
   86eb8:	e67d      	b.n	86bb6 <_svfprintf_r+0x1c2>
   86eba:	2001      	movs	r0, #1
   86ebc:	2200      	movs	r2, #0
   86ebe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ec0:	9006      	str	r0, [sp, #24]
   86ec2:	f853 1b04 	ldr.w	r1, [r3], #4
   86ec6:	ad3b      	add	r5, sp, #236	; 0xec
   86ec8:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86ecc:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   86ed0:	930e      	str	r3, [sp, #56]	; 0x38
   86ed2:	900b      	str	r0, [sp, #44]	; 0x2c
   86ed4:	e710      	b.n	86cf8 <_svfprintf_r+0x304>
   86ed6:	f04f 0900 	mov.w	r9, #0
   86eda:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   86edc:	9b07      	ldr	r3, [sp, #28]
   86ede:	f854 5b04 	ldr.w	r5, [r4], #4
   86ee2:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   86ee6:	2d00      	cmp	r5, #0
   86ee8:	f000 86ee 	beq.w	87cc8 <_svfprintf_r+0x12d4>
   86eec:	1c5a      	adds	r2, r3, #1
   86eee:	f000 8560 	beq.w	879b2 <_svfprintf_r+0xfbe>
   86ef2:	461a      	mov	r2, r3
   86ef4:	4649      	mov	r1, r9
   86ef6:	4628      	mov	r0, r5
   86ef8:	f004 fab2 	bl	8b460 <memchr>
   86efc:	900d      	str	r0, [sp, #52]	; 0x34
   86efe:	2800      	cmp	r0, #0
   86f00:	f001 809e 	beq.w	88040 <_svfprintf_r+0x164c>
   86f04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86f06:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86f0a:	1b5b      	subs	r3, r3, r5
   86f0c:	930b      	str	r3, [sp, #44]	; 0x2c
   86f0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   86f12:	f8cd 901c 	str.w	r9, [sp, #28]
   86f16:	940e      	str	r4, [sp, #56]	; 0x38
   86f18:	9306      	str	r3, [sp, #24]
   86f1a:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   86f1e:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   86f22:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86f26:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86f2a:	e66b      	b.n	86c04 <_svfprintf_r+0x210>
   86f2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86f2e:	425b      	negs	r3, r3
   86f30:	9309      	str	r3, [sp, #36]	; 0x24
   86f32:	f89a 6000 	ldrb.w	r6, [sl]
   86f36:	f047 0704 	orr.w	r7, r7, #4
   86f3a:	e5aa      	b.n	86a92 <_svfprintf_r+0x9e>
   86f3c:	f047 0b10 	orr.w	fp, r7, #16
   86f40:	f01b 0920 	ands.w	r9, fp, #32
   86f44:	f000 83aa 	beq.w	8769c <_svfprintf_r+0xca8>
   86f48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f4a:	3307      	adds	r3, #7
   86f4c:	f023 0307 	bic.w	r3, r3, #7
   86f50:	461a      	mov	r2, r3
   86f52:	f852 4b08 	ldr.w	r4, [r2], #8
   86f56:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86f5a:	920e      	str	r2, [sp, #56]	; 0x38
   86f5c:	2301      	movs	r3, #1
   86f5e:	e669      	b.n	86c34 <_svfprintf_r+0x240>
   86f60:	2230      	movs	r2, #48	; 0x30
   86f62:	2678      	movs	r6, #120	; 0x78
   86f64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f66:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86f6a:	f853 4b04 	ldr.w	r4, [r3], #4
   86f6e:	4a68      	ldr	r2, [pc, #416]	; (87110 <_svfprintf_r+0x71c>)
   86f70:	930e      	str	r3, [sp, #56]	; 0x38
   86f72:	f04f 0900 	mov.w	r9, #0
   86f76:	2302      	movs	r3, #2
   86f78:	f047 0b02 	orr.w	fp, r7, #2
   86f7c:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   86f80:	9218      	str	r2, [sp, #96]	; 0x60
   86f82:	e657      	b.n	86c34 <_svfprintf_r+0x240>
   86f84:	06bd      	lsls	r5, r7, #26
   86f86:	f100 83d6 	bmi.w	87736 <_svfprintf_r+0xd42>
   86f8a:	06fc      	lsls	r4, r7, #27
   86f8c:	f100 8693 	bmi.w	87cb6 <_svfprintf_r+0x12c2>
   86f90:	0678      	lsls	r0, r7, #25
   86f92:	f100 875d 	bmi.w	87e50 <_svfprintf_r+0x145c>
   86f96:	05b9      	lsls	r1, r7, #22
   86f98:	f140 868d 	bpl.w	87cb6 <_svfprintf_r+0x12c2>
   86f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86f9e:	9908      	ldr	r1, [sp, #32]
   86fa0:	f853 2b04 	ldr.w	r2, [r3], #4
   86fa4:	4655      	mov	r5, sl
   86fa6:	7011      	strb	r1, [r2, #0]
   86fa8:	930e      	str	r3, [sp, #56]	; 0x38
   86faa:	e71b      	b.n	86de4 <_svfprintf_r+0x3f0>
   86fac:	f89a 6000 	ldrb.w	r6, [sl]
   86fb0:	2e6c      	cmp	r6, #108	; 0x6c
   86fb2:	bf03      	ittte	eq
   86fb4:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   86fb8:	f047 0720 	orreq.w	r7, r7, #32
   86fbc:	f10a 0a01 	addeq.w	sl, sl, #1
   86fc0:	f047 0710 	orrne.w	r7, r7, #16
   86fc4:	e565      	b.n	86a92 <_svfprintf_r+0x9e>
   86fc6:	f89a 6000 	ldrb.w	r6, [sl]
   86fca:	2e68      	cmp	r6, #104	; 0x68
   86fcc:	bf03      	ittte	eq
   86fce:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   86fd2:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   86fd6:	f10a 0a01 	addeq.w	sl, sl, #1
   86fda:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   86fde:	e558      	b.n	86a92 <_svfprintf_r+0x9e>
   86fe0:	f89a 6000 	ldrb.w	r6, [sl]
   86fe4:	f047 0708 	orr.w	r7, r7, #8
   86fe8:	e553      	b.n	86a92 <_svfprintf_r+0x9e>
   86fea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   86fec:	4630      	mov	r0, r6
   86fee:	f003 fef9 	bl	8ade4 <_localeconv_r>
   86ff2:	6843      	ldr	r3, [r0, #4]
   86ff4:	4618      	mov	r0, r3
   86ff6:	931b      	str	r3, [sp, #108]	; 0x6c
   86ff8:	f7ff fc9a 	bl	86930 <strlen>
   86ffc:	4603      	mov	r3, r0
   86ffe:	4630      	mov	r0, r6
   87000:	931c      	str	r3, [sp, #112]	; 0x70
   87002:	461e      	mov	r6, r3
   87004:	f003 feee 	bl	8ade4 <_localeconv_r>
   87008:	6883      	ldr	r3, [r0, #8]
   8700a:	9319      	str	r3, [sp, #100]	; 0x64
   8700c:	2e00      	cmp	r6, #0
   8700e:	f43f adbb 	beq.w	86b88 <_svfprintf_r+0x194>
   87012:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87014:	2b00      	cmp	r3, #0
   87016:	f43f adb7 	beq.w	86b88 <_svfprintf_r+0x194>
   8701a:	9b19      	ldr	r3, [sp, #100]	; 0x64
   8701c:	781b      	ldrb	r3, [r3, #0]
   8701e:	2b00      	cmp	r3, #0
   87020:	f43f adb2 	beq.w	86b88 <_svfprintf_r+0x194>
   87024:	f89a 6000 	ldrb.w	r6, [sl]
   87028:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   8702c:	e531      	b.n	86a92 <_svfprintf_r+0x9e>
   8702e:	f89a 6000 	ldrb.w	r6, [sl]
   87032:	f047 0701 	orr.w	r7, r7, #1
   87036:	e52c      	b.n	86a92 <_svfprintf_r+0x9e>
   87038:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   8703c:	2b00      	cmp	r3, #0
   8703e:	f47f ada3 	bne.w	86b88 <_svfprintf_r+0x194>
   87042:	f89a 6000 	ldrb.w	r6, [sl]
   87046:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   8704a:	e522      	b.n	86a92 <_svfprintf_r+0x9e>
   8704c:	f89a 6000 	ldrb.w	r6, [sl]
   87050:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   87054:	e51d      	b.n	86a92 <_svfprintf_r+0x9e>
   87056:	4652      	mov	r2, sl
   87058:	f812 6b01 	ldrb.w	r6, [r2], #1
   8705c:	2e2a      	cmp	r6, #42	; 0x2a
   8705e:	f001 81eb 	beq.w	88438 <_svfprintf_r+0x1a44>
   87062:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87066:	2b09      	cmp	r3, #9
   87068:	4692      	mov	sl, r2
   8706a:	bf98      	it	ls
   8706c:	2200      	movls	r2, #0
   8706e:	f201 8003 	bhi.w	88078 <_svfprintf_r+0x1684>
   87072:	f81a 6b01 	ldrb.w	r6, [sl], #1
   87076:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8707a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8707e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87082:	2b09      	cmp	r3, #9
   87084:	d9f5      	bls.n	87072 <_svfprintf_r+0x67e>
   87086:	9207      	str	r2, [sp, #28]
   87088:	e505      	b.n	86a96 <_svfprintf_r+0xa2>
   8708a:	f89a 6000 	ldrb.w	r6, [sl]
   8708e:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   87092:	e4fe      	b.n	86a92 <_svfprintf_r+0x9e>
   87094:	46bb      	mov	fp, r7
   87096:	2b01      	cmp	r3, #1
   87098:	f43f ad9a 	beq.w	86bd0 <_svfprintf_r+0x1dc>
   8709c:	2b02      	cmp	r3, #2
   8709e:	ad54      	add	r5, sp, #336	; 0x150
   870a0:	d112      	bne.n	870c8 <_svfprintf_r+0x6d4>
   870a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   870a4:	f004 030f 	and.w	r3, r4, #15
   870a8:	5cd3      	ldrb	r3, [r2, r3]
   870aa:	0924      	lsrs	r4, r4, #4
   870ac:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   870b0:	ea4f 1919 	mov.w	r9, r9, lsr #4
   870b4:	f805 3d01 	strb.w	r3, [r5, #-1]!
   870b8:	ea54 0309 	orrs.w	r3, r4, r9
   870bc:	d1f2      	bne.n	870a4 <_svfprintf_r+0x6b0>
   870be:	ab54      	add	r3, sp, #336	; 0x150
   870c0:	1b5b      	subs	r3, r3, r5
   870c2:	465f      	mov	r7, fp
   870c4:	930b      	str	r3, [sp, #44]	; 0x2c
   870c6:	e590      	b.n	86bea <_svfprintf_r+0x1f6>
   870c8:	f004 0307 	and.w	r3, r4, #7
   870cc:	08e4      	lsrs	r4, r4, #3
   870ce:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   870d2:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   870d6:	3330      	adds	r3, #48	; 0x30
   870d8:	ea54 0109 	orrs.w	r1, r4, r9
   870dc:	462a      	mov	r2, r5
   870de:	f805 3d01 	strb.w	r3, [r5, #-1]!
   870e2:	d1f1      	bne.n	870c8 <_svfprintf_r+0x6d4>
   870e4:	f01b 0f01 	tst.w	fp, #1
   870e8:	d0e9      	beq.n	870be <_svfprintf_r+0x6ca>
   870ea:	2b30      	cmp	r3, #48	; 0x30
   870ec:	d0e7      	beq.n	870be <_svfprintf_r+0x6ca>
   870ee:	2330      	movs	r3, #48	; 0x30
   870f0:	3a02      	subs	r2, #2
   870f2:	f805 3c01 	strb.w	r3, [r5, #-1]
   870f6:	ab54      	add	r3, sp, #336	; 0x150
   870f8:	1a9b      	subs	r3, r3, r2
   870fa:	465f      	mov	r7, fp
   870fc:	4615      	mov	r5, r2
   870fe:	930b      	str	r3, [sp, #44]	; 0x2c
   87100:	e573      	b.n	86bea <_svfprintf_r+0x1f6>
   87102:	bf00      	nop
   87104:	7fefffff 	.word	0x7fefffff
   87108:	0008d4d0 	.word	0x0008d4d0
   8710c:	0008d4d4 	.word	0x0008d4d4
   87110:	0008d4e0 	.word	0x0008d4e0
   87114:	2e65      	cmp	r6, #101	; 0x65
   87116:	f340 80e9 	ble.w	872ec <_svfprintf_r+0x8f8>
   8711a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8711e:	2200      	movs	r2, #0
   87120:	2300      	movs	r3, #0
   87122:	f005 ff9d 	bl	8d060 <__aeabi_dcmpeq>
   87126:	2800      	cmp	r0, #0
   87128:	f000 81d2 	beq.w	874d0 <_svfprintf_r+0xadc>
   8712c:	2301      	movs	r3, #1
   8712e:	f8c8 3004 	str.w	r3, [r8, #4]
   87132:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87134:	4abf      	ldr	r2, [pc, #764]	; (87434 <_svfprintf_r+0xa40>)
   87136:	3301      	adds	r3, #1
   87138:	3401      	adds	r4, #1
   8713a:	2b07      	cmp	r3, #7
   8713c:	942a      	str	r4, [sp, #168]	; 0xa8
   8713e:	9329      	str	r3, [sp, #164]	; 0xa4
   87140:	f8c8 2000 	str.w	r2, [r8]
   87144:	f300 857a 	bgt.w	87c3c <_svfprintf_r+0x1248>
   87148:	f108 0808 	add.w	r8, r8, #8
   8714c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8714e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87150:	4293      	cmp	r3, r2
   87152:	f280 82d7 	bge.w	87704 <_svfprintf_r+0xd10>
   87156:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87158:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8715a:	441c      	add	r4, r3
   8715c:	e9c8 2300 	strd	r2, r3, [r8]
   87160:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87162:	942a      	str	r4, [sp, #168]	; 0xa8
   87164:	3301      	adds	r3, #1
   87166:	2b07      	cmp	r3, #7
   87168:	9329      	str	r3, [sp, #164]	; 0xa4
   8716a:	f300 83dd 	bgt.w	87928 <_svfprintf_r+0xf34>
   8716e:	f108 0808 	add.w	r8, r8, #8
   87172:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87174:	1e5d      	subs	r5, r3, #1
   87176:	2d00      	cmp	r5, #0
   87178:	f77f ae16 	ble.w	86da8 <_svfprintf_r+0x3b4>
   8717c:	2d10      	cmp	r5, #16
   8717e:	f341 8141 	ble.w	88404 <_svfprintf_r+0x1a10>
   87182:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 87438 <_svfprintf_r+0xa44>
   87186:	4622      	mov	r2, r4
   87188:	4649      	mov	r1, r9
   8718a:	2610      	movs	r6, #16
   8718c:	46b9      	mov	r9, r7
   8718e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87190:	460f      	mov	r7, r1
   87192:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   87196:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87198:	e005      	b.n	871a6 <_svfprintf_r+0x7b2>
   8719a:	f108 0808 	add.w	r8, r8, #8
   8719e:	3d10      	subs	r5, #16
   871a0:	2d10      	cmp	r5, #16
   871a2:	f340 8558 	ble.w	87c56 <_svfprintf_r+0x1262>
   871a6:	3301      	adds	r3, #1
   871a8:	3210      	adds	r2, #16
   871aa:	2b07      	cmp	r3, #7
   871ac:	e9c8 7600 	strd	r7, r6, [r8]
   871b0:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   871b4:	ddf1      	ble.n	8719a <_svfprintf_r+0x7a6>
   871b6:	4621      	mov	r1, r4
   871b8:	4658      	mov	r0, fp
   871ba:	aa28      	add	r2, sp, #160	; 0xa0
   871bc:	f005 f842 	bl	8c244 <__ssprint_r>
   871c0:	2800      	cmp	r0, #0
   871c2:	f47f ad7a 	bne.w	86cba <_svfprintf_r+0x2c6>
   871c6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   871ca:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   871ce:	e7e6      	b.n	8719e <_svfprintf_r+0x7aa>
   871d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   871d2:	9a06      	ldr	r2, [sp, #24]
   871d4:	eba3 0b02 	sub.w	fp, r3, r2
   871d8:	f1bb 0f00 	cmp.w	fp, #0
   871dc:	f77f adca 	ble.w	86d74 <_svfprintf_r+0x380>
   871e0:	f1bb 0f10 	cmp.w	fp, #16
   871e4:	f341 8005 	ble.w	881f2 <_svfprintf_r+0x17fe>
   871e8:	f8df 924c 	ldr.w	r9, [pc, #588]	; 87438 <_svfprintf_r+0xa44>
   871ec:	4641      	mov	r1, r8
   871ee:	4620      	mov	r0, r4
   871f0:	46a8      	mov	r8, r5
   871f2:	464c      	mov	r4, r9
   871f4:	2310      	movs	r3, #16
   871f6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   871f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   871fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   871fe:	e006      	b.n	8720e <_svfprintf_r+0x81a>
   87200:	f1ab 0b10 	sub.w	fp, fp, #16
   87204:	f1bb 0f10 	cmp.w	fp, #16
   87208:	f101 0108 	add.w	r1, r1, #8
   8720c:	dd19      	ble.n	87242 <_svfprintf_r+0x84e>
   8720e:	3201      	adds	r2, #1
   87210:	3010      	adds	r0, #16
   87212:	2a07      	cmp	r2, #7
   87214:	e9c1 4300 	strd	r4, r3, [r1]
   87218:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   8721c:	ddf0      	ble.n	87200 <_svfprintf_r+0x80c>
   8721e:	4629      	mov	r1, r5
   87220:	4648      	mov	r0, r9
   87222:	aa28      	add	r2, sp, #160	; 0xa0
   87224:	f005 f80e 	bl	8c244 <__ssprint_r>
   87228:	2800      	cmp	r0, #0
   8722a:	f47f ad46 	bne.w	86cba <_svfprintf_r+0x2c6>
   8722e:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   87232:	f1ab 0b10 	sub.w	fp, fp, #16
   87236:	f1bb 0f10 	cmp.w	fp, #16
   8723a:	f04f 0310 	mov.w	r3, #16
   8723e:	a92b      	add	r1, sp, #172	; 0xac
   87240:	dce5      	bgt.n	8720e <_svfprintf_r+0x81a>
   87242:	4645      	mov	r5, r8
   87244:	46a1      	mov	r9, r4
   87246:	4688      	mov	r8, r1
   87248:	4604      	mov	r4, r0
   8724a:	3201      	adds	r2, #1
   8724c:	445c      	add	r4, fp
   8724e:	2a07      	cmp	r2, #7
   87250:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   87254:	f8c8 9000 	str.w	r9, [r8]
   87258:	f8c8 b004 	str.w	fp, [r8, #4]
   8725c:	f300 8518 	bgt.w	87c90 <_svfprintf_r+0x129c>
   87260:	f108 0808 	add.w	r8, r8, #8
   87264:	e586      	b.n	86d74 <_svfprintf_r+0x380>
   87266:	f1bb 0f10 	cmp.w	fp, #16
   8726a:	f340 8597 	ble.w	87d9c <_svfprintf_r+0x13a8>
   8726e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 87438 <_svfprintf_r+0xa44>
   87272:	4641      	mov	r1, r8
   87274:	4620      	mov	r0, r4
   87276:	46a8      	mov	r8, r5
   87278:	464c      	mov	r4, r9
   8727a:	2310      	movs	r3, #16
   8727c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8727e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87280:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87284:	e006      	b.n	87294 <_svfprintf_r+0x8a0>
   87286:	f1ab 0b10 	sub.w	fp, fp, #16
   8728a:	f1bb 0f10 	cmp.w	fp, #16
   8728e:	f101 0108 	add.w	r1, r1, #8
   87292:	dd19      	ble.n	872c8 <_svfprintf_r+0x8d4>
   87294:	3201      	adds	r2, #1
   87296:	3010      	adds	r0, #16
   87298:	2a07      	cmp	r2, #7
   8729a:	e9c1 4300 	strd	r4, r3, [r1]
   8729e:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   872a2:	ddf0      	ble.n	87286 <_svfprintf_r+0x892>
   872a4:	4629      	mov	r1, r5
   872a6:	4648      	mov	r0, r9
   872a8:	aa28      	add	r2, sp, #160	; 0xa0
   872aa:	f004 ffcb 	bl	8c244 <__ssprint_r>
   872ae:	2800      	cmp	r0, #0
   872b0:	f47f ad03 	bne.w	86cba <_svfprintf_r+0x2c6>
   872b4:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   872b8:	f1ab 0b10 	sub.w	fp, fp, #16
   872bc:	f1bb 0f10 	cmp.w	fp, #16
   872c0:	f04f 0310 	mov.w	r3, #16
   872c4:	a92b      	add	r1, sp, #172	; 0xac
   872c6:	dce5      	bgt.n	87294 <_svfprintf_r+0x8a0>
   872c8:	4645      	mov	r5, r8
   872ca:	46a1      	mov	r9, r4
   872cc:	4688      	mov	r8, r1
   872ce:	4604      	mov	r4, r0
   872d0:	3201      	adds	r2, #1
   872d2:	445c      	add	r4, fp
   872d4:	2a07      	cmp	r2, #7
   872d6:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   872da:	f8c8 9000 	str.w	r9, [r8]
   872de:	f8c8 b004 	str.w	fp, [r8, #4]
   872e2:	f300 81ce 	bgt.w	87682 <_svfprintf_r+0xc8e>
   872e6:	f108 0808 	add.w	r8, r8, #8
   872ea:	e54b      	b.n	86d84 <_svfprintf_r+0x390>
   872ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
   872ee:	2b01      	cmp	r3, #1
   872f0:	f340 817e 	ble.w	875f0 <_svfprintf_r+0xbfc>
   872f4:	2301      	movs	r3, #1
   872f6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   872f8:	3401      	adds	r4, #1
   872fa:	441e      	add	r6, r3
   872fc:	2e07      	cmp	r6, #7
   872fe:	f8c8 5000 	str.w	r5, [r8]
   87302:	942a      	str	r4, [sp, #168]	; 0xa8
   87304:	f8c8 3004 	str.w	r3, [r8, #4]
   87308:	9629      	str	r6, [sp, #164]	; 0xa4
   8730a:	f300 81e1 	bgt.w	876d0 <_svfprintf_r+0xcdc>
   8730e:	f108 0808 	add.w	r8, r8, #8
   87312:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87314:	3601      	adds	r6, #1
   87316:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   87318:	441c      	add	r4, r3
   8731a:	2e07      	cmp	r6, #7
   8731c:	e9c8 2300 	strd	r2, r3, [r8]
   87320:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87324:	f300 81e1 	bgt.w	876ea <_svfprintf_r+0xcf6>
   87328:	f108 0808 	add.w	r8, r8, #8
   8732c:	2200      	movs	r2, #0
   8732e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87332:	2300      	movs	r3, #0
   87334:	f005 fe94 	bl	8d060 <__aeabi_dcmpeq>
   87338:	2800      	cmp	r0, #0
   8733a:	f040 8176 	bne.w	8762a <_svfprintf_r+0xc36>
   8733e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87340:	3601      	adds	r6, #1
   87342:	3b01      	subs	r3, #1
   87344:	3501      	adds	r5, #1
   87346:	441c      	add	r4, r3
   87348:	2e07      	cmp	r6, #7
   8734a:	f8c8 5000 	str.w	r5, [r8]
   8734e:	9629      	str	r6, [sp, #164]	; 0xa4
   87350:	f8c8 3004 	str.w	r3, [r8, #4]
   87354:	942a      	str	r4, [sp, #168]	; 0xa8
   87356:	f300 815b 	bgt.w	87610 <_svfprintf_r+0xc1c>
   8735a:	f108 0808 	add.w	r8, r8, #8
   8735e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87360:	3601      	adds	r6, #1
   87362:	441c      	add	r4, r3
   87364:	f8c8 3004 	str.w	r3, [r8, #4]
   87368:	2e07      	cmp	r6, #7
   8736a:	ab24      	add	r3, sp, #144	; 0x90
   8736c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87370:	f8c8 3000 	str.w	r3, [r8]
   87374:	f77f ad16 	ble.w	86da4 <_svfprintf_r+0x3b0>
   87378:	990c      	ldr	r1, [sp, #48]	; 0x30
   8737a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8737c:	aa28      	add	r2, sp, #160	; 0xa0
   8737e:	f004 ff61 	bl	8c244 <__ssprint_r>
   87382:	2800      	cmp	r0, #0
   87384:	f47f ac99 	bne.w	86cba <_svfprintf_r+0x2c6>
   87388:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8738a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8738e:	e50b      	b.n	86da8 <_svfprintf_r+0x3b4>
   87390:	f1b9 0f10 	cmp.w	r9, #16
   87394:	f340 8650 	ble.w	88038 <_svfprintf_r+0x1644>
   87398:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   8739c:	4640      	mov	r0, r8
   8739e:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   873a2:	46b8      	mov	r8, r7
   873a4:	2410      	movs	r4, #16
   873a6:	464f      	mov	r7, r9
   873a8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   873aa:	46a9      	mov	r9, r5
   873ac:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   873ae:	e004      	b.n	873ba <_svfprintf_r+0x9c6>
   873b0:	3f10      	subs	r7, #16
   873b2:	2f10      	cmp	r7, #16
   873b4:	f100 0008 	add.w	r0, r0, #8
   873b8:	dd16      	ble.n	873e8 <_svfprintf_r+0x9f4>
   873ba:	3201      	adds	r2, #1
   873bc:	4b1f      	ldr	r3, [pc, #124]	; (8743c <_svfprintf_r+0xa48>)
   873be:	3110      	adds	r1, #16
   873c0:	2a07      	cmp	r2, #7
   873c2:	e9c0 3400 	strd	r3, r4, [r0]
   873c6:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   873ca:	ddf1      	ble.n	873b0 <_svfprintf_r+0x9bc>
   873cc:	4631      	mov	r1, r6
   873ce:	4628      	mov	r0, r5
   873d0:	aa28      	add	r2, sp, #160	; 0xa0
   873d2:	f004 ff37 	bl	8c244 <__ssprint_r>
   873d6:	2800      	cmp	r0, #0
   873d8:	f47f ac6f 	bne.w	86cba <_svfprintf_r+0x2c6>
   873dc:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   873e0:	3f10      	subs	r7, #16
   873e2:	2f10      	cmp	r7, #16
   873e4:	a82b      	add	r0, sp, #172	; 0xac
   873e6:	dce8      	bgt.n	873ba <_svfprintf_r+0x9c6>
   873e8:	464d      	mov	r5, r9
   873ea:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   873ee:	46b9      	mov	r9, r7
   873f0:	4647      	mov	r7, r8
   873f2:	4680      	mov	r8, r0
   873f4:	eb09 0401 	add.w	r4, r9, r1
   873f8:	3201      	adds	r2, #1
   873fa:	4910      	ldr	r1, [pc, #64]	; (8743c <_svfprintf_r+0xa48>)
   873fc:	2a07      	cmp	r2, #7
   873fe:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   87402:	f8c8 9004 	str.w	r9, [r8, #4]
   87406:	f8c8 1000 	str.w	r1, [r8]
   8740a:	f300 83c3 	bgt.w	87b94 <_svfprintf_r+0x11a0>
   8740e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87412:	f108 0808 	add.w	r8, r8, #8
   87416:	e486      	b.n	86d26 <_svfprintf_r+0x332>
   87418:	990c      	ldr	r1, [sp, #48]	; 0x30
   8741a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8741c:	aa28      	add	r2, sp, #160	; 0xa0
   8741e:	931d      	str	r3, [sp, #116]	; 0x74
   87420:	f004 ff10 	bl	8c244 <__ssprint_r>
   87424:	2800      	cmp	r0, #0
   87426:	f47f ac48 	bne.w	86cba <_svfprintf_r+0x2c6>
   8742a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8742c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8742e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87432:	e48a      	b.n	86d4a <_svfprintf_r+0x356>
   87434:	0008d510 	.word	0x0008d510
   87438:	0008d524 	.word	0x0008d524
   8743c:	0008d514 	.word	0x0008d514
   87440:	990c      	ldr	r1, [sp, #48]	; 0x30
   87442:	980a      	ldr	r0, [sp, #40]	; 0x28
   87444:	aa28      	add	r2, sp, #160	; 0xa0
   87446:	f004 fefd 	bl	8c244 <__ssprint_r>
   8744a:	2800      	cmp	r0, #0
   8744c:	f47f ac35 	bne.w	86cba <_svfprintf_r+0x2c6>
   87450:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87452:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87456:	e489      	b.n	86d6c <_svfprintf_r+0x378>
   87458:	2d10      	cmp	r5, #16
   8745a:	f340 86c4 	ble.w	881e6 <_svfprintf_r+0x17f2>
   8745e:	2610      	movs	r6, #16
   87460:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87462:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   87464:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   87468:	e004      	b.n	87474 <_svfprintf_r+0xa80>
   8746a:	3d10      	subs	r5, #16
   8746c:	2d10      	cmp	r5, #16
   8746e:	f108 0808 	add.w	r8, r8, #8
   87472:	dd17      	ble.n	874a4 <_svfprintf_r+0xab0>
   87474:	3301      	adds	r3, #1
   87476:	4ab8      	ldr	r2, [pc, #736]	; (87758 <_svfprintf_r+0xd64>)
   87478:	3410      	adds	r4, #16
   8747a:	2b07      	cmp	r3, #7
   8747c:	e9c8 2600 	strd	r2, r6, [r8]
   87480:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87484:	ddf1      	ble.n	8746a <_svfprintf_r+0xa76>
   87486:	4649      	mov	r1, r9
   87488:	4638      	mov	r0, r7
   8748a:	aa28      	add	r2, sp, #160	; 0xa0
   8748c:	f004 feda 	bl	8c244 <__ssprint_r>
   87490:	2800      	cmp	r0, #0
   87492:	f47f ac12 	bne.w	86cba <_svfprintf_r+0x2c6>
   87496:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   8749a:	3d10      	subs	r5, #16
   8749c:	2d10      	cmp	r5, #16
   8749e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   874a2:	dce7      	bgt.n	87474 <_svfprintf_r+0xa80>
   874a4:	3301      	adds	r3, #1
   874a6:	4aac      	ldr	r2, [pc, #688]	; (87758 <_svfprintf_r+0xd64>)
   874a8:	442c      	add	r4, r5
   874aa:	2b07      	cmp	r3, #7
   874ac:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   874b0:	f8c8 5004 	str.w	r5, [r8, #4]
   874b4:	f8c8 2000 	str.w	r2, [r8]
   874b8:	f77f ac7e 	ble.w	86db8 <_svfprintf_r+0x3c4>
   874bc:	990c      	ldr	r1, [sp, #48]	; 0x30
   874be:	980a      	ldr	r0, [sp, #40]	; 0x28
   874c0:	aa28      	add	r2, sp, #160	; 0xa0
   874c2:	f004 febf 	bl	8c244 <__ssprint_r>
   874c6:	2800      	cmp	r0, #0
   874c8:	f47f abf7 	bne.w	86cba <_svfprintf_r+0x2c6>
   874cc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   874ce:	e473      	b.n	86db8 <_svfprintf_r+0x3c4>
   874d0:	9922      	ldr	r1, [sp, #136]	; 0x88
   874d2:	2900      	cmp	r1, #0
   874d4:	f340 836f 	ble.w	87bb6 <_svfprintf_r+0x11c2>
   874d8:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   874dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   874de:	4599      	cmp	r9, r3
   874e0:	bfa8      	it	ge
   874e2:	4699      	movge	r9, r3
   874e4:	f1b9 0f00 	cmp.w	r9, #0
   874e8:	dd0b      	ble.n	87502 <_svfprintf_r+0xb0e>
   874ea:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   874ec:	444c      	add	r4, r9
   874ee:	3301      	adds	r3, #1
   874f0:	2b07      	cmp	r3, #7
   874f2:	e9c8 5900 	strd	r5, r9, [r8]
   874f6:	942a      	str	r4, [sp, #168]	; 0xa8
   874f8:	9329      	str	r3, [sp, #164]	; 0xa4
   874fa:	f300 851d 	bgt.w	87f38 <_svfprintf_r+0x1544>
   874fe:	f108 0808 	add.w	r8, r8, #8
   87502:	9e10      	ldr	r6, [sp, #64]	; 0x40
   87504:	f1b9 0f00 	cmp.w	r9, #0
   87508:	bfa8      	it	ge
   8750a:	eba6 0609 	subge.w	r6, r6, r9
   8750e:	2e00      	cmp	r6, #0
   87510:	f300 8225 	bgt.w	8795e <_svfprintf_r+0xf6a>
   87514:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   87518:	0578      	lsls	r0, r7, #21
   8751a:	44ab      	add	fp, r5
   8751c:	f100 825f 	bmi.w	879de <_svfprintf_r+0xfea>
   87520:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87522:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87524:	4293      	cmp	r3, r2
   87526:	db02      	blt.n	8752e <_svfprintf_r+0xb3a>
   87528:	07f9      	lsls	r1, r7, #31
   8752a:	f140 8476 	bpl.w	87e1a <_svfprintf_r+0x1426>
   8752e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87530:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87532:	4414      	add	r4, r2
   87534:	e9c8 1200 	strd	r1, r2, [r8]
   87538:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8753a:	942a      	str	r4, [sp, #168]	; 0xa8
   8753c:	3201      	adds	r2, #1
   8753e:	2a07      	cmp	r2, #7
   87540:	9229      	str	r2, [sp, #164]	; 0xa4
   87542:	f300 8513 	bgt.w	87f6c <_svfprintf_r+0x1578>
   87546:	f108 0808 	add.w	r8, r8, #8
   8754a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8754c:	18ae      	adds	r6, r5, r2
   8754e:	eba6 060b 	sub.w	r6, r6, fp
   87552:	1ad5      	subs	r5, r2, r3
   87554:	42ae      	cmp	r6, r5
   87556:	bfa8      	it	ge
   87558:	462e      	movge	r6, r5
   8755a:	2e00      	cmp	r6, #0
   8755c:	dd0d      	ble.n	8757a <_svfprintf_r+0xb86>
   8755e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87560:	4434      	add	r4, r6
   87562:	3301      	adds	r3, #1
   87564:	2b07      	cmp	r3, #7
   87566:	f8c8 b000 	str.w	fp, [r8]
   8756a:	f8c8 6004 	str.w	r6, [r8, #4]
   8756e:	942a      	str	r4, [sp, #168]	; 0xa8
   87570:	9329      	str	r3, [sp, #164]	; 0xa4
   87572:	f300 8571 	bgt.w	88058 <_svfprintf_r+0x1664>
   87576:	f108 0808 	add.w	r8, r8, #8
   8757a:	2e00      	cmp	r6, #0
   8757c:	bfa8      	it	ge
   8757e:	1bad      	subge	r5, r5, r6
   87580:	2d00      	cmp	r5, #0
   87582:	f77f ac11 	ble.w	86da8 <_svfprintf_r+0x3b4>
   87586:	2d10      	cmp	r5, #16
   87588:	f340 873c 	ble.w	88404 <_svfprintf_r+0x1a10>
   8758c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8775c <_svfprintf_r+0xd68>
   87590:	4622      	mov	r2, r4
   87592:	4649      	mov	r1, r9
   87594:	2610      	movs	r6, #16
   87596:	46b9      	mov	r9, r7
   87598:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8759a:	460f      	mov	r7, r1
   8759c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   875a0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   875a2:	e005      	b.n	875b0 <_svfprintf_r+0xbbc>
   875a4:	f108 0808 	add.w	r8, r8, #8
   875a8:	3d10      	subs	r5, #16
   875aa:	2d10      	cmp	r5, #16
   875ac:	f340 8353 	ble.w	87c56 <_svfprintf_r+0x1262>
   875b0:	3301      	adds	r3, #1
   875b2:	3210      	adds	r2, #16
   875b4:	2b07      	cmp	r3, #7
   875b6:	e9c8 7600 	strd	r7, r6, [r8]
   875ba:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   875be:	ddf1      	ble.n	875a4 <_svfprintf_r+0xbb0>
   875c0:	4621      	mov	r1, r4
   875c2:	4658      	mov	r0, fp
   875c4:	aa28      	add	r2, sp, #160	; 0xa0
   875c6:	f004 fe3d 	bl	8c244 <__ssprint_r>
   875ca:	2800      	cmp	r0, #0
   875cc:	f47f ab75 	bne.w	86cba <_svfprintf_r+0x2c6>
   875d0:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   875d4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   875d8:	e7e6      	b.n	875a8 <_svfprintf_r+0xbb4>
   875da:	9b07      	ldr	r3, [sp, #28]
   875dc:	2b00      	cmp	r3, #0
   875de:	f47f aafc 	bne.w	86bda <_svfprintf_r+0x1e6>
   875e2:	465f      	mov	r7, fp
   875e4:	2300      	movs	r3, #0
   875e6:	ad54      	add	r5, sp, #336	; 0x150
   875e8:	9307      	str	r3, [sp, #28]
   875ea:	930b      	str	r3, [sp, #44]	; 0x2c
   875ec:	f7ff bafd 	b.w	86bea <_svfprintf_r+0x1f6>
   875f0:	07fa      	lsls	r2, r7, #31
   875f2:	f53f ae7f 	bmi.w	872f4 <_svfprintf_r+0x900>
   875f6:	2301      	movs	r3, #1
   875f8:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   875fa:	3401      	adds	r4, #1
   875fc:	441e      	add	r6, r3
   875fe:	2e07      	cmp	r6, #7
   87600:	f8c8 5000 	str.w	r5, [r8]
   87604:	942a      	str	r4, [sp, #168]	; 0xa8
   87606:	f8c8 3004 	str.w	r3, [r8, #4]
   8760a:	9629      	str	r6, [sp, #164]	; 0xa4
   8760c:	f77f aea5 	ble.w	8735a <_svfprintf_r+0x966>
   87610:	990c      	ldr	r1, [sp, #48]	; 0x30
   87612:	980a      	ldr	r0, [sp, #40]	; 0x28
   87614:	aa28      	add	r2, sp, #160	; 0xa0
   87616:	f004 fe15 	bl	8c244 <__ssprint_r>
   8761a:	2800      	cmp	r0, #0
   8761c:	f47f ab4d 	bne.w	86cba <_svfprintf_r+0x2c6>
   87620:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   87624:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87628:	e699      	b.n	8735e <_svfprintf_r+0x96a>
   8762a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8762c:	1e5d      	subs	r5, r3, #1
   8762e:	2d00      	cmp	r5, #0
   87630:	f77f ae95 	ble.w	8735e <_svfprintf_r+0x96a>
   87634:	2d10      	cmp	r5, #16
   87636:	f340 86df 	ble.w	883f8 <_svfprintf_r+0x1a04>
   8763a:	4622      	mov	r2, r4
   8763c:	9707      	str	r7, [sp, #28]
   8763e:	f04f 0b10 	mov.w	fp, #16
   87642:	f8df 9118 	ldr.w	r9, [pc, #280]	; 8775c <_svfprintf_r+0xd68>
   87646:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87648:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8764a:	e005      	b.n	87658 <_svfprintf_r+0xc64>
   8764c:	f108 0808 	add.w	r8, r8, #8
   87650:	3d10      	subs	r5, #16
   87652:	2d10      	cmp	r5, #16
   87654:	f340 837f 	ble.w	87d56 <_svfprintf_r+0x1362>
   87658:	3601      	adds	r6, #1
   8765a:	3210      	adds	r2, #16
   8765c:	2e07      	cmp	r6, #7
   8765e:	e9c8 9b00 	strd	r9, fp, [r8]
   87662:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   87666:	ddf1      	ble.n	8764c <_svfprintf_r+0xc58>
   87668:	4639      	mov	r1, r7
   8766a:	4620      	mov	r0, r4
   8766c:	aa28      	add	r2, sp, #160	; 0xa0
   8766e:	f004 fde9 	bl	8c244 <__ssprint_r>
   87672:	2800      	cmp	r0, #0
   87674:	f47f ab21 	bne.w	86cba <_svfprintf_r+0x2c6>
   87678:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   8767c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87680:	e7e6      	b.n	87650 <_svfprintf_r+0xc5c>
   87682:	990c      	ldr	r1, [sp, #48]	; 0x30
   87684:	980a      	ldr	r0, [sp, #40]	; 0x28
   87686:	aa28      	add	r2, sp, #160	; 0xa0
   87688:	f004 fddc 	bl	8c244 <__ssprint_r>
   8768c:	2800      	cmp	r0, #0
   8768e:	f47f ab14 	bne.w	86cba <_svfprintf_r+0x2c6>
   87692:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87694:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87698:	f7ff bb74 	b.w	86d84 <_svfprintf_r+0x390>
   8769c:	f01b 0310 	ands.w	r3, fp, #16
   876a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   876a2:	d13a      	bne.n	8771a <_svfprintf_r+0xd26>
   876a4:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   876a8:	d033      	beq.n	87712 <_svfprintf_r+0xd1e>
   876aa:	f852 4b04 	ldr.w	r4, [r2], #4
   876ae:	4699      	mov	r9, r3
   876b0:	920e      	str	r2, [sp, #56]	; 0x38
   876b2:	2301      	movs	r3, #1
   876b4:	b2a4      	uxth	r4, r4
   876b6:	f7ff babd 	b.w	86c34 <_svfprintf_r+0x240>
   876ba:	232d      	movs	r3, #45	; 0x2d
   876bc:	4264      	negs	r4, r4
   876be:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   876c2:	46bb      	mov	fp, r7
   876c4:	f04f 0301 	mov.w	r3, #1
   876c8:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   876cc:	f7ff bab5 	b.w	86c3a <_svfprintf_r+0x246>
   876d0:	990c      	ldr	r1, [sp, #48]	; 0x30
   876d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   876d4:	aa28      	add	r2, sp, #160	; 0xa0
   876d6:	f004 fdb5 	bl	8c244 <__ssprint_r>
   876da:	2800      	cmp	r0, #0
   876dc:	f47f aaed 	bne.w	86cba <_svfprintf_r+0x2c6>
   876e0:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   876e4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   876e8:	e613      	b.n	87312 <_svfprintf_r+0x91e>
   876ea:	990c      	ldr	r1, [sp, #48]	; 0x30
   876ec:	980a      	ldr	r0, [sp, #40]	; 0x28
   876ee:	aa28      	add	r2, sp, #160	; 0xa0
   876f0:	f004 fda8 	bl	8c244 <__ssprint_r>
   876f4:	2800      	cmp	r0, #0
   876f6:	f47f aae0 	bne.w	86cba <_svfprintf_r+0x2c6>
   876fa:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   876fe:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87702:	e613      	b.n	8732c <_svfprintf_r+0x938>
   87704:	07fd      	lsls	r5, r7, #31
   87706:	f57f ab4f 	bpl.w	86da8 <_svfprintf_r+0x3b4>
   8770a:	e524      	b.n	87156 <_svfprintf_r+0x762>
   8770c:	ad54      	add	r5, sp, #336	; 0x150
   8770e:	f7ff ba6c 	b.w	86bea <_svfprintf_r+0x1f6>
   87712:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   87716:	f040 838a 	bne.w	87e2e <_svfprintf_r+0x143a>
   8771a:	f852 4b04 	ldr.w	r4, [r2], #4
   8771e:	2301      	movs	r3, #1
   87720:	920e      	str	r2, [sp, #56]	; 0x38
   87722:	f7ff ba87 	b.w	86c34 <_svfprintf_r+0x240>
   87726:	05b8      	lsls	r0, r7, #22
   87728:	f100 839b 	bmi.w	87e62 <_svfprintf_r+0x146e>
   8772c:	ea4f 79e4 	mov.w	r9, r4, asr #31
   87730:	464b      	mov	r3, r9
   87732:	f7ff ba40 	b.w	86bb6 <_svfprintf_r+0x1c2>
   87736:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87738:	9808      	ldr	r0, [sp, #32]
   8773a:	f853 1b04 	ldr.w	r1, [r3], #4
   8773e:	17c2      	asrs	r2, r0, #31
   87740:	4655      	mov	r5, sl
   87742:	e9c1 0200 	strd	r0, r2, [r1]
   87746:	930e      	str	r3, [sp, #56]	; 0x38
   87748:	f7ff bb4c 	b.w	86de4 <_svfprintf_r+0x3f0>
   8774c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8774e:	f853 4b04 	ldr.w	r4, [r3], #4
   87752:	930e      	str	r3, [sp, #56]	; 0x38
   87754:	f7ff ba6b 	b.w	86c2e <_svfprintf_r+0x23a>
   87758:	0008d514 	.word	0x0008d514
   8775c:	0008d524 	.word	0x0008d524
   87760:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87764:	4602      	mov	r2, r0
   87766:	460b      	mov	r3, r1
   87768:	f005 fcac 	bl	8d0c4 <__aeabi_dcmpun>
   8776c:	2800      	cmp	r0, #0
   8776e:	f040 85e9 	bne.w	88344 <_svfprintf_r+0x1950>
   87772:	2e61      	cmp	r6, #97	; 0x61
   87774:	f000 857d 	beq.w	88272 <_svfprintf_r+0x187e>
   87778:	2e41      	cmp	r6, #65	; 0x41
   8777a:	f000 848b 	beq.w	88094 <_svfprintf_r+0x16a0>
   8777e:	9b07      	ldr	r3, [sp, #28]
   87780:	3301      	adds	r3, #1
   87782:	f000 838f 	beq.w	87ea4 <_svfprintf_r+0x14b0>
   87786:	f026 0320 	bic.w	r3, r6, #32
   8778a:	2b47      	cmp	r3, #71	; 0x47
   8778c:	9306      	str	r3, [sp, #24]
   8778e:	f000 858f 	beq.w	882b0 <_svfprintf_r+0x18bc>
   87792:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87796:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   8779a:	930f      	str	r3, [sp, #60]	; 0x3c
   8779c:	4613      	mov	r3, r2
   8779e:	2b00      	cmp	r3, #0
   877a0:	f2c0 85b0 	blt.w	88304 <_svfprintf_r+0x1910>
   877a4:	930b      	str	r3, [sp, #44]	; 0x2c
   877a6:	2300      	movs	r3, #0
   877a8:	468b      	mov	fp, r1
   877aa:	931d      	str	r3, [sp, #116]	; 0x74
   877ac:	930d      	str	r3, [sp, #52]	; 0x34
   877ae:	9b06      	ldr	r3, [sp, #24]
   877b0:	2b46      	cmp	r3, #70	; 0x46
   877b2:	f000 83e9 	beq.w	87f88 <_svfprintf_r+0x1594>
   877b6:	2b45      	cmp	r3, #69	; 0x45
   877b8:	f000 8546 	beq.w	88248 <_svfprintf_r+0x1854>
   877bc:	9907      	ldr	r1, [sp, #28]
   877be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   877c0:	9101      	str	r1, [sp, #4]
   877c2:	2102      	movs	r1, #2
   877c4:	9100      	str	r1, [sp, #0]
   877c6:	a926      	add	r1, sp, #152	; 0x98
   877c8:	9104      	str	r1, [sp, #16]
   877ca:	a923      	add	r1, sp, #140	; 0x8c
   877cc:	9103      	str	r1, [sp, #12]
   877ce:	a922      	add	r1, sp, #136	; 0x88
   877d0:	465a      	mov	r2, fp
   877d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   877d4:	9102      	str	r1, [sp, #8]
   877d6:	f001 febb 	bl	89550 <_dtoa_r>
   877da:	9b06      	ldr	r3, [sp, #24]
   877dc:	4605      	mov	r5, r0
   877de:	2b47      	cmp	r3, #71	; 0x47
   877e0:	f040 863a 	bne.w	88458 <_svfprintf_r+0x1a64>
   877e4:	f017 0f01 	tst.w	r7, #1
   877e8:	46b9      	mov	r9, r7
   877ea:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   877ec:	f040 84fe 	bne.w	881ec <_svfprintf_r+0x17f8>
   877f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   877f2:	1b5b      	subs	r3, r3, r5
   877f4:	9312      	str	r3, [sp, #72]	; 0x48
   877f6:	9b06      	ldr	r3, [sp, #24]
   877f8:	2b47      	cmp	r3, #71	; 0x47
   877fa:	f000 836e 	beq.w	87eda <_svfprintf_r+0x14e6>
   877fe:	9b06      	ldr	r3, [sp, #24]
   87800:	2b46      	cmp	r3, #70	; 0x46
   87802:	f000 83f0 	beq.w	87fe6 <_svfprintf_r+0x15f2>
   87806:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87808:	9310      	str	r3, [sp, #64]	; 0x40
   8780a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8780c:	9a06      	ldr	r2, [sp, #24]
   8780e:	3b01      	subs	r3, #1
   87810:	2a41      	cmp	r2, #65	; 0x41
   87812:	9322      	str	r3, [sp, #136]	; 0x88
   87814:	f000 85bb 	beq.w	8838e <_svfprintf_r+0x199a>
   87818:	2100      	movs	r1, #0
   8781a:	b2f2      	uxtb	r2, r6
   8781c:	2b00      	cmp	r3, #0
   8781e:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   87822:	bfb6      	itet	lt
   87824:	222d      	movlt	r2, #45	; 0x2d
   87826:	222b      	movge	r2, #43	; 0x2b
   87828:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   8782a:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   8782e:	bfb8      	it	lt
   87830:	f1c3 0301 	rsblt	r3, r3, #1
   87834:	2b09      	cmp	r3, #9
   87836:	f340 859b 	ble.w	88370 <_svfprintf_r+0x197c>
   8783a:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   8783e:	4662      	mov	r2, ip
   87840:	4fb6      	ldr	r7, [pc, #728]	; (87b1c <_svfprintf_r+0x1128>)
   87842:	461c      	mov	r4, r3
   87844:	4610      	mov	r0, r2
   87846:	fb87 1203 	smull	r1, r2, r7, r3
   8784a:	17d9      	asrs	r1, r3, #31
   8784c:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   87850:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   87854:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   87858:	3230      	adds	r2, #48	; 0x30
   8785a:	2c63      	cmp	r4, #99	; 0x63
   8785c:	f800 2c01 	strb.w	r2, [r0, #-1]
   87860:	460b      	mov	r3, r1
   87862:	f100 32ff 	add.w	r2, r0, #4294967295
   87866:	dcec      	bgt.n	87842 <_svfprintf_r+0xe4e>
   87868:	3330      	adds	r3, #48	; 0x30
   8786a:	1e81      	subs	r1, r0, #2
   8786c:	b2db      	uxtb	r3, r3
   8786e:	458c      	cmp	ip, r1
   87870:	f802 3c01 	strb.w	r3, [r2, #-1]
   87874:	f240 85f9 	bls.w	8846a <_svfprintf_r+0x1a76>
   87878:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   8787c:	e001      	b.n	87882 <_svfprintf_r+0xe8e>
   8787e:	f812 3b01 	ldrb.w	r3, [r2], #1
   87882:	4594      	cmp	ip, r2
   87884:	f801 3b01 	strb.w	r3, [r1], #1
   87888:	d1f9      	bne.n	8787e <_svfprintf_r+0xe8a>
   8788a:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   8788e:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   87892:	1a1b      	subs	r3, r3, r0
   87894:	4413      	add	r3, r2
   87896:	aa24      	add	r2, sp, #144	; 0x90
   87898:	1a9b      	subs	r3, r3, r2
   8789a:	931a      	str	r3, [sp, #104]	; 0x68
   8789c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8789e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   878a0:	2b01      	cmp	r3, #1
   878a2:	441a      	add	r2, r3
   878a4:	920b      	str	r2, [sp, #44]	; 0x2c
   878a6:	f340 8581 	ble.w	883ac <_svfprintf_r+0x19b8>
   878aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   878ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
   878ae:	4413      	add	r3, r2
   878b0:	930b      	str	r3, [sp, #44]	; 0x2c
   878b2:	2300      	movs	r3, #0
   878b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   878b6:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   878ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   878be:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   878c2:	930f      	str	r3, [sp, #60]	; 0x3c
   878c4:	9206      	str	r2, [sp, #24]
   878c6:	9313      	str	r3, [sp, #76]	; 0x4c
   878c8:	9310      	str	r3, [sp, #64]	; 0x40
   878ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   878cc:	2b00      	cmp	r3, #0
   878ce:	f040 832c 	bne.w	87f2a <_svfprintf_r+0x1536>
   878d2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   878d6:	9307      	str	r3, [sp, #28]
   878d8:	f7ff b994 	b.w	86c04 <_svfprintf_r+0x210>
   878dc:	46bb      	mov	fp, r7
   878de:	f7ff bb2f 	b.w	86f40 <_svfprintf_r+0x54c>
   878e2:	4b8f      	ldr	r3, [pc, #572]	; (87b20 <_svfprintf_r+0x112c>)
   878e4:	9318      	str	r3, [sp, #96]	; 0x60
   878e6:	f017 0920 	ands.w	r9, r7, #32
   878ea:	f000 80f5 	beq.w	87ad8 <_svfprintf_r+0x10e4>
   878ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   878f0:	3307      	adds	r3, #7
   878f2:	f023 0307 	bic.w	r3, r3, #7
   878f6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   878fa:	f853 4b08 	ldr.w	r4, [r3], #8
   878fe:	930e      	str	r3, [sp, #56]	; 0x38
   87900:	07f8      	lsls	r0, r7, #31
   87902:	d509      	bpl.n	87918 <_svfprintf_r+0xf24>
   87904:	ea54 0309 	orrs.w	r3, r4, r9
   87908:	d006      	beq.n	87918 <_svfprintf_r+0xf24>
   8790a:	2330      	movs	r3, #48	; 0x30
   8790c:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   87910:	f047 0702 	orr.w	r7, r7, #2
   87914:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87918:	2302      	movs	r3, #2
   8791a:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   8791e:	f7ff b989 	b.w	86c34 <_svfprintf_r+0x240>
   87922:	4b80      	ldr	r3, [pc, #512]	; (87b24 <_svfprintf_r+0x1130>)
   87924:	9318      	str	r3, [sp, #96]	; 0x60
   87926:	e7de      	b.n	878e6 <_svfprintf_r+0xef2>
   87928:	990c      	ldr	r1, [sp, #48]	; 0x30
   8792a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8792c:	aa28      	add	r2, sp, #160	; 0xa0
   8792e:	f004 fc89 	bl	8c244 <__ssprint_r>
   87932:	2800      	cmp	r0, #0
   87934:	f47f a9c1 	bne.w	86cba <_svfprintf_r+0x2c6>
   87938:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8793a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8793e:	e418      	b.n	87172 <_svfprintf_r+0x77e>
   87940:	2140      	movs	r1, #64	; 0x40
   87942:	980a      	ldr	r0, [sp, #40]	; 0x28
   87944:	f003 faca 	bl	8aedc <_malloc_r>
   87948:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8794a:	6018      	str	r0, [r3, #0]
   8794c:	6118      	str	r0, [r3, #16]
   8794e:	2800      	cmp	r0, #0
   87950:	f000 8597 	beq.w	88482 <_svfprintf_r+0x1a8e>
   87954:	2340      	movs	r3, #64	; 0x40
   87956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87958:	6153      	str	r3, [r2, #20]
   8795a:	f7ff b862 	b.w	86a22 <_svfprintf_r+0x2e>
   8795e:	2e10      	cmp	r6, #16
   87960:	f340 8576 	ble.w	88450 <_svfprintf_r+0x1a5c>
   87964:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 87b28 <_svfprintf_r+0x1134>
   87968:	4642      	mov	r2, r8
   8796a:	4648      	mov	r0, r9
   8796c:	4621      	mov	r1, r4
   8796e:	46a8      	mov	r8, r5
   87970:	46b9      	mov	r9, r7
   87972:	f04f 0b10 	mov.w	fp, #16
   87976:	4607      	mov	r7, r0
   87978:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8797a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8797c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8797e:	e004      	b.n	8798a <_svfprintf_r+0xf96>
   87980:	3208      	adds	r2, #8
   87982:	3e10      	subs	r6, #16
   87984:	2e10      	cmp	r6, #16
   87986:	f340 8213 	ble.w	87db0 <_svfprintf_r+0x13bc>
   8798a:	3301      	adds	r3, #1
   8798c:	3110      	adds	r1, #16
   8798e:	2b07      	cmp	r3, #7
   87990:	e9c2 7b00 	strd	r7, fp, [r2]
   87994:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   87998:	ddf2      	ble.n	87980 <_svfprintf_r+0xf8c>
   8799a:	4629      	mov	r1, r5
   8799c:	4620      	mov	r0, r4
   8799e:	aa28      	add	r2, sp, #160	; 0xa0
   879a0:	f004 fc50 	bl	8c244 <__ssprint_r>
   879a4:	2800      	cmp	r0, #0
   879a6:	f47f a988 	bne.w	86cba <_svfprintf_r+0x2c6>
   879aa:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   879ae:	aa2b      	add	r2, sp, #172	; 0xac
   879b0:	e7e7      	b.n	87982 <_svfprintf_r+0xf8e>
   879b2:	4628      	mov	r0, r5
   879b4:	f8cd 901c 	str.w	r9, [sp, #28]
   879b8:	940e      	str	r4, [sp, #56]	; 0x38
   879ba:	f7fe ffb9 	bl	86930 <strlen>
   879be:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   879c2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   879c6:	900b      	str	r0, [sp, #44]	; 0x2c
   879c8:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   879cc:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   879d0:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   879d4:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   879d8:	9306      	str	r3, [sp, #24]
   879da:	f7ff b913 	b.w	86c04 <_svfprintf_r+0x210>
   879de:	9b12      	ldr	r3, [sp, #72]	; 0x48
   879e0:	4642      	mov	r2, r8
   879e2:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   879e6:	18eb      	adds	r3, r5, r3
   879e8:	465e      	mov	r6, fp
   879ea:	9307      	str	r3, [sp, #28]
   879ec:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   879f0:	9710      	str	r7, [sp, #64]	; 0x40
   879f2:	4621      	mov	r1, r4
   879f4:	9f19      	ldr	r7, [sp, #100]	; 0x64
   879f6:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   879fa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   879fe:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87a02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a04:	9513      	str	r5, [sp, #76]	; 0x4c
   87a06:	f1b8 0f00 	cmp.w	r8, #0
   87a0a:	d02e      	beq.n	87a6a <_svfprintf_r+0x1076>
   87a0c:	bb83      	cbnz	r3, 87a70 <_svfprintf_r+0x107c>
   87a0e:	3f01      	subs	r7, #1
   87a10:	f108 38ff 	add.w	r8, r8, #4294967295
   87a14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   87a16:	4449      	add	r1, r9
   87a18:	e9c2 3900 	strd	r3, r9, [r2]
   87a1c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87a1e:	912a      	str	r1, [sp, #168]	; 0xa8
   87a20:	3301      	adds	r3, #1
   87a22:	2b07      	cmp	r3, #7
   87a24:	9329      	str	r3, [sp, #164]	; 0xa4
   87a26:	dc60      	bgt.n	87aea <_svfprintf_r+0x10f6>
   87a28:	3208      	adds	r2, #8
   87a2a:	9b07      	ldr	r3, [sp, #28]
   87a2c:	7838      	ldrb	r0, [r7, #0]
   87a2e:	1b9b      	subs	r3, r3, r6
   87a30:	4283      	cmp	r3, r0
   87a32:	bfa8      	it	ge
   87a34:	4603      	movge	r3, r0
   87a36:	2b00      	cmp	r3, #0
   87a38:	461c      	mov	r4, r3
   87a3a:	dd0b      	ble.n	87a54 <_svfprintf_r+0x1060>
   87a3c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   87a3e:	4419      	add	r1, r3
   87a40:	3001      	adds	r0, #1
   87a42:	2807      	cmp	r0, #7
   87a44:	e9c2 6300 	strd	r6, r3, [r2]
   87a48:	912a      	str	r1, [sp, #168]	; 0xa8
   87a4a:	9029      	str	r0, [sp, #164]	; 0xa4
   87a4c:	f300 8114 	bgt.w	87c78 <_svfprintf_r+0x1284>
   87a50:	7838      	ldrb	r0, [r7, #0]
   87a52:	3208      	adds	r2, #8
   87a54:	2c00      	cmp	r4, #0
   87a56:	bfb4      	ite	lt
   87a58:	4605      	movlt	r5, r0
   87a5a:	1b05      	subge	r5, r0, r4
   87a5c:	2d00      	cmp	r5, #0
   87a5e:	dc0b      	bgt.n	87a78 <_svfprintf_r+0x1084>
   87a60:	4406      	add	r6, r0
   87a62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a64:	f1b8 0f00 	cmp.w	r8, #0
   87a68:	d1d0      	bne.n	87a0c <_svfprintf_r+0x1018>
   87a6a:	2b00      	cmp	r3, #0
   87a6c:	f000 8226 	beq.w	87ebc <_svfprintf_r+0x14c8>
   87a70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87a72:	3b01      	subs	r3, #1
   87a74:	930f      	str	r3, [sp, #60]	; 0x3c
   87a76:	e7cd      	b.n	87a14 <_svfprintf_r+0x1020>
   87a78:	2d10      	cmp	r5, #16
   87a7a:	f340 849d 	ble.w	883b8 <_svfprintf_r+0x19c4>
   87a7e:	2410      	movs	r4, #16
   87a80:	9829      	ldr	r0, [sp, #164]	; 0xa4
   87a82:	e004      	b.n	87a8e <_svfprintf_r+0x109a>
   87a84:	3d10      	subs	r5, #16
   87a86:	2d10      	cmp	r5, #16
   87a88:	f102 0208 	add.w	r2, r2, #8
   87a8c:	dd16      	ble.n	87abc <_svfprintf_r+0x10c8>
   87a8e:	3001      	adds	r0, #1
   87a90:	4b25      	ldr	r3, [pc, #148]	; (87b28 <_svfprintf_r+0x1134>)
   87a92:	3110      	adds	r1, #16
   87a94:	2807      	cmp	r0, #7
   87a96:	e9c2 3400 	strd	r3, r4, [r2]
   87a9a:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   87a9e:	ddf1      	ble.n	87a84 <_svfprintf_r+0x1090>
   87aa0:	4659      	mov	r1, fp
   87aa2:	4650      	mov	r0, sl
   87aa4:	aa28      	add	r2, sp, #160	; 0xa0
   87aa6:	f004 fbcd 	bl	8c244 <__ssprint_r>
   87aaa:	2800      	cmp	r0, #0
   87aac:	f47f a905 	bne.w	86cba <_svfprintf_r+0x2c6>
   87ab0:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   87ab4:	3d10      	subs	r5, #16
   87ab6:	2d10      	cmp	r5, #16
   87ab8:	aa2b      	add	r2, sp, #172	; 0xac
   87aba:	dce8      	bgt.n	87a8e <_svfprintf_r+0x109a>
   87abc:	3001      	adds	r0, #1
   87abe:	4b1a      	ldr	r3, [pc, #104]	; (87b28 <_svfprintf_r+0x1134>)
   87ac0:	4429      	add	r1, r5
   87ac2:	2807      	cmp	r0, #7
   87ac4:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   87ac8:	6055      	str	r5, [r2, #4]
   87aca:	6013      	str	r3, [r2, #0]
   87acc:	f300 8241 	bgt.w	87f52 <_svfprintf_r+0x155e>
   87ad0:	7838      	ldrb	r0, [r7, #0]
   87ad2:	3208      	adds	r2, #8
   87ad4:	4406      	add	r6, r0
   87ad6:	e7c4      	b.n	87a62 <_svfprintf_r+0x106e>
   87ad8:	f017 0310 	ands.w	r3, r7, #16
   87adc:	f000 80a0 	beq.w	87c20 <_svfprintf_r+0x122c>
   87ae0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ae2:	f853 4b04 	ldr.w	r4, [r3], #4
   87ae6:	930e      	str	r3, [sp, #56]	; 0x38
   87ae8:	e70a      	b.n	87900 <_svfprintf_r+0xf0c>
   87aea:	4659      	mov	r1, fp
   87aec:	4650      	mov	r0, sl
   87aee:	aa28      	add	r2, sp, #160	; 0xa0
   87af0:	f004 fba8 	bl	8c244 <__ssprint_r>
   87af4:	2800      	cmp	r0, #0
   87af6:	f47f a8e0 	bne.w	86cba <_svfprintf_r+0x2c6>
   87afa:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87afc:	aa2b      	add	r2, sp, #172	; 0xac
   87afe:	e794      	b.n	87a2a <_svfprintf_r+0x1036>
   87b00:	2300      	movs	r3, #0
   87b02:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   87b06:	9606      	str	r6, [sp, #24]
   87b08:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   87b0c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   87b10:	4692      	mov	sl, r2
   87b12:	461e      	mov	r6, r3
   87b14:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   87b18:	af54      	add	r7, sp, #336	; 0x150
   87b1a:	e014      	b.n	87b46 <_svfprintf_r+0x1152>
   87b1c:	66666667 	.word	0x66666667
   87b20:	0008d4e0 	.word	0x0008d4e0
   87b24:	0008d4f4 	.word	0x0008d4f4
   87b28:	0008d524 	.word	0x0008d524
   87b2c:	2300      	movs	r3, #0
   87b2e:	4620      	mov	r0, r4
   87b30:	4649      	mov	r1, r9
   87b32:	220a      	movs	r2, #10
   87b34:	f005 fb04 	bl	8d140 <__aeabi_uldivmod>
   87b38:	2c0a      	cmp	r4, #10
   87b3a:	f179 0300 	sbcs.w	r3, r9, #0
   87b3e:	d31b      	bcc.n	87b78 <_svfprintf_r+0x1184>
   87b40:	4604      	mov	r4, r0
   87b42:	4689      	mov	r9, r1
   87b44:	462f      	mov	r7, r5
   87b46:	4620      	mov	r0, r4
   87b48:	220a      	movs	r2, #10
   87b4a:	2300      	movs	r3, #0
   87b4c:	4649      	mov	r1, r9
   87b4e:	f005 faf7 	bl	8d140 <__aeabi_uldivmod>
   87b52:	3230      	adds	r2, #48	; 0x30
   87b54:	1e7d      	subs	r5, r7, #1
   87b56:	3601      	adds	r6, #1
   87b58:	f807 2c01 	strb.w	r2, [r7, #-1]
   87b5c:	f1ba 0f00 	cmp.w	sl, #0
   87b60:	d0e4      	beq.n	87b2c <_svfprintf_r+0x1138>
   87b62:	f898 3000 	ldrb.w	r3, [r8]
   87b66:	429e      	cmp	r6, r3
   87b68:	d1e0      	bne.n	87b2c <_svfprintf_r+0x1138>
   87b6a:	2eff      	cmp	r6, #255	; 0xff
   87b6c:	d0de      	beq.n	87b2c <_svfprintf_r+0x1138>
   87b6e:	2c0a      	cmp	r4, #10
   87b70:	f179 0300 	sbcs.w	r3, r9, #0
   87b74:	f080 8130 	bcs.w	87dd8 <_svfprintf_r+0x13e4>
   87b78:	ab54      	add	r3, sp, #336	; 0x150
   87b7a:	1b5b      	subs	r3, r3, r5
   87b7c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   87b80:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   87b84:	9612      	str	r6, [sp, #72]	; 0x48
   87b86:	465f      	mov	r7, fp
   87b88:	9e06      	ldr	r6, [sp, #24]
   87b8a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   87b8e:	930b      	str	r3, [sp, #44]	; 0x2c
   87b90:	f7ff b82b 	b.w	86bea <_svfprintf_r+0x1f6>
   87b94:	990c      	ldr	r1, [sp, #48]	; 0x30
   87b96:	980a      	ldr	r0, [sp, #40]	; 0x28
   87b98:	aa28      	add	r2, sp, #160	; 0xa0
   87b9a:	931d      	str	r3, [sp, #116]	; 0x74
   87b9c:	f004 fb52 	bl	8c244 <__ssprint_r>
   87ba0:	2800      	cmp	r0, #0
   87ba2:	f47f a88a 	bne.w	86cba <_svfprintf_r+0x2c6>
   87ba6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87baa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87bac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87bae:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87bb2:	f7ff b8b8 	b.w	86d26 <_svfprintf_r+0x332>
   87bb6:	2301      	movs	r3, #1
   87bb8:	f8c8 3004 	str.w	r3, [r8, #4]
   87bbc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87bbe:	4abc      	ldr	r2, [pc, #752]	; (87eb0 <_svfprintf_r+0x14bc>)
   87bc0:	3301      	adds	r3, #1
   87bc2:	3401      	adds	r4, #1
   87bc4:	2b07      	cmp	r3, #7
   87bc6:	942a      	str	r4, [sp, #168]	; 0xa8
   87bc8:	9329      	str	r3, [sp, #164]	; 0xa4
   87bca:	f8c8 2000 	str.w	r2, [r8]
   87bce:	f300 8117 	bgt.w	87e00 <_svfprintf_r+0x140c>
   87bd2:	f108 0808 	add.w	r8, r8, #8
   87bd6:	2900      	cmp	r1, #0
   87bd8:	f040 8086 	bne.w	87ce8 <_svfprintf_r+0x12f4>
   87bdc:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87bde:	f007 0301 	and.w	r3, r7, #1
   87be2:	4313      	orrs	r3, r2
   87be4:	f43f a8e0 	beq.w	86da8 <_svfprintf_r+0x3b4>
   87be8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87bea:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87bec:	191a      	adds	r2, r3, r4
   87bee:	e9c8 1300 	strd	r1, r3, [r8]
   87bf2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87bf4:	922a      	str	r2, [sp, #168]	; 0xa8
   87bf6:	3301      	adds	r3, #1
   87bf8:	2b07      	cmp	r3, #7
   87bfa:	9329      	str	r3, [sp, #164]	; 0xa4
   87bfc:	f300 8137 	bgt.w	87e6e <_svfprintf_r+0x147a>
   87c00:	f108 0808 	add.w	r8, r8, #8
   87c04:	9912      	ldr	r1, [sp, #72]	; 0x48
   87c06:	3301      	adds	r3, #1
   87c08:	188c      	adds	r4, r1, r2
   87c0a:	2b07      	cmp	r3, #7
   87c0c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87c10:	f8c8 5000 	str.w	r5, [r8]
   87c14:	f8c8 1004 	str.w	r1, [r8, #4]
   87c18:	f77f a8c4 	ble.w	86da4 <_svfprintf_r+0x3b0>
   87c1c:	f7ff bbac 	b.w	87378 <_svfprintf_r+0x984>
   87c20:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   87c24:	f000 80a5 	beq.w	87d72 <_svfprintf_r+0x137e>
   87c28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87c2a:	4699      	mov	r9, r3
   87c2c:	f852 4b04 	ldr.w	r4, [r2], #4
   87c30:	920e      	str	r2, [sp, #56]	; 0x38
   87c32:	b2a4      	uxth	r4, r4
   87c34:	e664      	b.n	87900 <_svfprintf_r+0xf0c>
   87c36:	46bb      	mov	fp, r7
   87c38:	f7fe bfca 	b.w	86bd0 <_svfprintf_r+0x1dc>
   87c3c:	990c      	ldr	r1, [sp, #48]	; 0x30
   87c3e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87c40:	aa28      	add	r2, sp, #160	; 0xa0
   87c42:	f004 faff 	bl	8c244 <__ssprint_r>
   87c46:	2800      	cmp	r0, #0
   87c48:	f47f a837 	bne.w	86cba <_svfprintf_r+0x2c6>
   87c4c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87c4e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87c52:	f7ff ba7b 	b.w	8714c <_svfprintf_r+0x758>
   87c56:	4614      	mov	r4, r2
   87c58:	463a      	mov	r2, r7
   87c5a:	464f      	mov	r7, r9
   87c5c:	4691      	mov	r9, r2
   87c5e:	3301      	adds	r3, #1
   87c60:	442c      	add	r4, r5
   87c62:	2b07      	cmp	r3, #7
   87c64:	f8c8 9000 	str.w	r9, [r8]
   87c68:	f8c8 5004 	str.w	r5, [r8, #4]
   87c6c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87c70:	f77f a898 	ble.w	86da4 <_svfprintf_r+0x3b0>
   87c74:	f7ff bb80 	b.w	87378 <_svfprintf_r+0x984>
   87c78:	4659      	mov	r1, fp
   87c7a:	4650      	mov	r0, sl
   87c7c:	aa28      	add	r2, sp, #160	; 0xa0
   87c7e:	f004 fae1 	bl	8c244 <__ssprint_r>
   87c82:	2800      	cmp	r0, #0
   87c84:	f47f a819 	bne.w	86cba <_svfprintf_r+0x2c6>
   87c88:	7838      	ldrb	r0, [r7, #0]
   87c8a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87c8c:	aa2b      	add	r2, sp, #172	; 0xac
   87c8e:	e6e1      	b.n	87a54 <_svfprintf_r+0x1060>
   87c90:	990c      	ldr	r1, [sp, #48]	; 0x30
   87c92:	980a      	ldr	r0, [sp, #40]	; 0x28
   87c94:	aa28      	add	r2, sp, #160	; 0xa0
   87c96:	f004 fad5 	bl	8c244 <__ssprint_r>
   87c9a:	2800      	cmp	r0, #0
   87c9c:	f47f a80d 	bne.w	86cba <_svfprintf_r+0x2c6>
   87ca0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87ca2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87ca6:	f7ff b865 	b.w	86d74 <_svfprintf_r+0x380>
   87caa:	2b01      	cmp	r3, #1
   87cac:	46bb      	mov	fp, r7
   87cae:	f47f a9f5 	bne.w	8709c <_svfprintf_r+0x6a8>
   87cb2:	f7fe bf92 	b.w	86bda <_svfprintf_r+0x1e6>
   87cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87cb8:	9908      	ldr	r1, [sp, #32]
   87cba:	f853 2b04 	ldr.w	r2, [r3], #4
   87cbe:	4655      	mov	r5, sl
   87cc0:	6011      	str	r1, [r2, #0]
   87cc2:	930e      	str	r3, [sp, #56]	; 0x38
   87cc4:	f7ff b88e 	b.w	86de4 <_svfprintf_r+0x3f0>
   87cc8:	2b06      	cmp	r3, #6
   87cca:	4629      	mov	r1, r5
   87ccc:	bf28      	it	cs
   87cce:	2306      	movcs	r3, #6
   87cd0:	462a      	mov	r2, r5
   87cd2:	9507      	str	r5, [sp, #28]
   87cd4:	950d      	str	r5, [sp, #52]	; 0x34
   87cd6:	9306      	str	r3, [sp, #24]
   87cd8:	4d76      	ldr	r5, [pc, #472]	; (87eb4 <_svfprintf_r+0x14c0>)
   87cda:	940e      	str	r4, [sp, #56]	; 0x38
   87cdc:	930b      	str	r3, [sp, #44]	; 0x2c
   87cde:	910f      	str	r1, [sp, #60]	; 0x3c
   87ce0:	9113      	str	r1, [sp, #76]	; 0x4c
   87ce2:	9110      	str	r1, [sp, #64]	; 0x40
   87ce4:	f7fe bf8e 	b.w	86c04 <_svfprintf_r+0x210>
   87ce8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87cea:	9817      	ldr	r0, [sp, #92]	; 0x5c
   87cec:	191a      	adds	r2, r3, r4
   87cee:	e9c8 0300 	strd	r0, r3, [r8]
   87cf2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87cf4:	922a      	str	r2, [sp, #168]	; 0xa8
   87cf6:	3301      	adds	r3, #1
   87cf8:	2b07      	cmp	r3, #7
   87cfa:	9329      	str	r3, [sp, #164]	; 0xa4
   87cfc:	f300 80b7 	bgt.w	87e6e <_svfprintf_r+0x147a>
   87d00:	f108 0808 	add.w	r8, r8, #8
   87d04:	2900      	cmp	r1, #0
   87d06:	f6bf af7d 	bge.w	87c04 <_svfprintf_r+0x1210>
   87d0a:	424e      	negs	r6, r1
   87d0c:	3110      	adds	r1, #16
   87d0e:	f280 83a9 	bge.w	88464 <_svfprintf_r+0x1a70>
   87d12:	4641      	mov	r1, r8
   87d14:	2410      	movs	r4, #16
   87d16:	46a8      	mov	r8, r5
   87d18:	f8df 919c 	ldr.w	r9, [pc, #412]	; 87eb8 <_svfprintf_r+0x14c4>
   87d1c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   87d20:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87d22:	e004      	b.n	87d2e <_svfprintf_r+0x133a>
   87d24:	3108      	adds	r1, #8
   87d26:	3e10      	subs	r6, #16
   87d28:	2e10      	cmp	r6, #16
   87d2a:	f340 82a7 	ble.w	8827c <_svfprintf_r+0x1888>
   87d2e:	3301      	adds	r3, #1
   87d30:	3210      	adds	r2, #16
   87d32:	2b07      	cmp	r3, #7
   87d34:	e9c1 9400 	strd	r9, r4, [r1]
   87d38:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87d3c:	ddf2      	ble.n	87d24 <_svfprintf_r+0x1330>
   87d3e:	4629      	mov	r1, r5
   87d40:	4658      	mov	r0, fp
   87d42:	aa28      	add	r2, sp, #160	; 0xa0
   87d44:	f004 fa7e 	bl	8c244 <__ssprint_r>
   87d48:	2800      	cmp	r0, #0
   87d4a:	f47e afb6 	bne.w	86cba <_svfprintf_r+0x2c6>
   87d4e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87d52:	a92b      	add	r1, sp, #172	; 0xac
   87d54:	e7e7      	b.n	87d26 <_svfprintf_r+0x1332>
   87d56:	4614      	mov	r4, r2
   87d58:	9f07      	ldr	r7, [sp, #28]
   87d5a:	3601      	adds	r6, #1
   87d5c:	442c      	add	r4, r5
   87d5e:	2e07      	cmp	r6, #7
   87d60:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87d64:	f8c8 9000 	str.w	r9, [r8]
   87d68:	f8c8 5004 	str.w	r5, [r8, #4]
   87d6c:	f77f aaf5 	ble.w	8735a <_svfprintf_r+0x966>
   87d70:	e44e      	b.n	87610 <_svfprintf_r+0xc1c>
   87d72:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87d76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d78:	d066      	beq.n	87e48 <_svfprintf_r+0x1454>
   87d7a:	f853 4b04 	ldr.w	r4, [r3], #4
   87d7e:	4691      	mov	r9, r2
   87d80:	930e      	str	r3, [sp, #56]	; 0x38
   87d82:	b2e4      	uxtb	r4, r4
   87d84:	e5bc      	b.n	87900 <_svfprintf_r+0xf0c>
   87d86:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87d8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d8c:	d057      	beq.n	87e3e <_svfprintf_r+0x144a>
   87d8e:	f853 4b04 	ldr.w	r4, [r3], #4
   87d92:	4691      	mov	r9, r2
   87d94:	930e      	str	r3, [sp, #56]	; 0x38
   87d96:	b2e4      	uxtb	r4, r4
   87d98:	f7fe bf49 	b.w	86c2e <_svfprintf_r+0x23a>
   87d9c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87d9e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 87eb8 <_svfprintf_r+0x14c4>
   87da2:	f7ff ba95 	b.w	872d0 <_svfprintf_r+0x8dc>
   87da6:	222d      	movs	r2, #45	; 0x2d
   87da8:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   87dac:	f7ff b857 	b.w	86e5e <_svfprintf_r+0x46a>
   87db0:	4645      	mov	r5, r8
   87db2:	4690      	mov	r8, r2
   87db4:	463a      	mov	r2, r7
   87db6:	460c      	mov	r4, r1
   87db8:	464f      	mov	r7, r9
   87dba:	4691      	mov	r9, r2
   87dbc:	3301      	adds	r3, #1
   87dbe:	4434      	add	r4, r6
   87dc0:	2b07      	cmp	r3, #7
   87dc2:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87dc6:	f8c8 9000 	str.w	r9, [r8]
   87dca:	f8c8 6004 	str.w	r6, [r8, #4]
   87dce:	dc5c      	bgt.n	87e8a <_svfprintf_r+0x1496>
   87dd0:	f108 0808 	add.w	r8, r8, #8
   87dd4:	f7ff bb9e 	b.w	87514 <_svfprintf_r+0xb20>
   87dd8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   87dda:	991b      	ldr	r1, [sp, #108]	; 0x6c
   87ddc:	1aed      	subs	r5, r5, r3
   87dde:	461a      	mov	r2, r3
   87de0:	4628      	mov	r0, r5
   87de2:	f7fe fdd3 	bl	8698c <strncpy>
   87de6:	f898 3001 	ldrb.w	r3, [r8, #1]
   87dea:	b10b      	cbz	r3, 87df0 <_svfprintf_r+0x13fc>
   87dec:	f108 0801 	add.w	r8, r8, #1
   87df0:	4620      	mov	r0, r4
   87df2:	4649      	mov	r1, r9
   87df4:	220a      	movs	r2, #10
   87df6:	2300      	movs	r3, #0
   87df8:	2600      	movs	r6, #0
   87dfa:	f005 f9a1 	bl	8d140 <__aeabi_uldivmod>
   87dfe:	e69f      	b.n	87b40 <_svfprintf_r+0x114c>
   87e00:	990c      	ldr	r1, [sp, #48]	; 0x30
   87e02:	980a      	ldr	r0, [sp, #40]	; 0x28
   87e04:	aa28      	add	r2, sp, #160	; 0xa0
   87e06:	f004 fa1d 	bl	8c244 <__ssprint_r>
   87e0a:	2800      	cmp	r0, #0
   87e0c:	f47e af55 	bne.w	86cba <_svfprintf_r+0x2c6>
   87e10:	9922      	ldr	r1, [sp, #136]	; 0x88
   87e12:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87e14:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87e18:	e6dd      	b.n	87bd6 <_svfprintf_r+0x11e2>
   87e1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87e1c:	18ae      	adds	r6, r5, r2
   87e1e:	eba6 060b 	sub.w	r6, r6, fp
   87e22:	1ad5      	subs	r5, r2, r3
   87e24:	42ae      	cmp	r6, r5
   87e26:	bfa8      	it	ge
   87e28:	462e      	movge	r6, r5
   87e2a:	f7ff bba6 	b.w	8757a <_svfprintf_r+0xb86>
   87e2e:	f852 4b04 	ldr.w	r4, [r2], #4
   87e32:	4689      	mov	r9, r1
   87e34:	2301      	movs	r3, #1
   87e36:	920e      	str	r2, [sp, #56]	; 0x38
   87e38:	b2e4      	uxtb	r4, r4
   87e3a:	f7fe befb 	b.w	86c34 <_svfprintf_r+0x240>
   87e3e:	f853 4b04 	ldr.w	r4, [r3], #4
   87e42:	930e      	str	r3, [sp, #56]	; 0x38
   87e44:	f7fe bef3 	b.w	86c2e <_svfprintf_r+0x23a>
   87e48:	f853 4b04 	ldr.w	r4, [r3], #4
   87e4c:	930e      	str	r3, [sp, #56]	; 0x38
   87e4e:	e557      	b.n	87900 <_svfprintf_r+0xf0c>
   87e50:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87e52:	9908      	ldr	r1, [sp, #32]
   87e54:	f853 2b04 	ldr.w	r2, [r3], #4
   87e58:	4655      	mov	r5, sl
   87e5a:	8011      	strh	r1, [r2, #0]
   87e5c:	930e      	str	r3, [sp, #56]	; 0x38
   87e5e:	f7fe bfc1 	b.w	86de4 <_svfprintf_r+0x3f0>
   87e62:	f344 19c0 	sbfx	r9, r4, #7, #1
   87e66:	464b      	mov	r3, r9
   87e68:	b264      	sxtb	r4, r4
   87e6a:	f7fe bea4 	b.w	86bb6 <_svfprintf_r+0x1c2>
   87e6e:	990c      	ldr	r1, [sp, #48]	; 0x30
   87e70:	980a      	ldr	r0, [sp, #40]	; 0x28
   87e72:	aa28      	add	r2, sp, #160	; 0xa0
   87e74:	f004 f9e6 	bl	8c244 <__ssprint_r>
   87e78:	2800      	cmp	r0, #0
   87e7a:	f47e af1e 	bne.w	86cba <_svfprintf_r+0x2c6>
   87e7e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87e82:	9922      	ldr	r1, [sp, #136]	; 0x88
   87e84:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87e88:	e73c      	b.n	87d04 <_svfprintf_r+0x1310>
   87e8a:	990c      	ldr	r1, [sp, #48]	; 0x30
   87e8c:	980a      	ldr	r0, [sp, #40]	; 0x28
   87e8e:	aa28      	add	r2, sp, #160	; 0xa0
   87e90:	f004 f9d8 	bl	8c244 <__ssprint_r>
   87e94:	2800      	cmp	r0, #0
   87e96:	f47e af10 	bne.w	86cba <_svfprintf_r+0x2c6>
   87e9a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87e9c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87ea0:	f7ff bb38 	b.w	87514 <_svfprintf_r+0xb20>
   87ea4:	2306      	movs	r3, #6
   87ea6:	9307      	str	r3, [sp, #28]
   87ea8:	f026 0320 	bic.w	r3, r6, #32
   87eac:	9306      	str	r3, [sp, #24]
   87eae:	e470      	b.n	87792 <_svfprintf_r+0xd9e>
   87eb0:	0008d510 	.word	0x0008d510
   87eb4:	0008d508 	.word	0x0008d508
   87eb8:	0008d524 	.word	0x0008d524
   87ebc:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   87ec0:	18eb      	adds	r3, r5, r3
   87ec2:	429e      	cmp	r6, r3
   87ec4:	46b3      	mov	fp, r6
   87ec6:	9719      	str	r7, [sp, #100]	; 0x64
   87ec8:	4690      	mov	r8, r2
   87eca:	460c      	mov	r4, r1
   87ecc:	bf28      	it	cs
   87ece:	469b      	movcs	fp, r3
   87ed0:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   87ed4:	9f10      	ldr	r7, [sp, #64]	; 0x40
   87ed6:	f7ff bb23 	b.w	87520 <_svfprintf_r+0xb2c>
   87eda:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87edc:	1cda      	adds	r2, r3, #3
   87ede:	9310      	str	r3, [sp, #64]	; 0x40
   87ee0:	db02      	blt.n	87ee8 <_svfprintf_r+0x14f4>
   87ee2:	9a07      	ldr	r2, [sp, #28]
   87ee4:	4293      	cmp	r3, r2
   87ee6:	dd04      	ble.n	87ef2 <_svfprintf_r+0x14fe>
   87ee8:	3e02      	subs	r6, #2
   87eea:	f026 0320 	bic.w	r3, r6, #32
   87eee:	9306      	str	r3, [sp, #24]
   87ef0:	e48b      	b.n	8780a <_svfprintf_r+0xe16>
   87ef2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87ef4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87ef6:	4293      	cmp	r3, r2
   87ef8:	f2c0 80c2 	blt.w	88080 <_svfprintf_r+0x168c>
   87efc:	f019 0f01 	tst.w	r9, #1
   87f00:	f000 821d 	beq.w	8833e <_svfprintf_r+0x194a>
   87f04:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87f06:	4413      	add	r3, r2
   87f08:	930b      	str	r3, [sp, #44]	; 0x2c
   87f0a:	f419 6f80 	tst.w	r9, #1024	; 0x400
   87f0e:	f000 8214 	beq.w	8833a <_svfprintf_r+0x1946>
   87f12:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87f14:	2667      	movs	r6, #103	; 0x67
   87f16:	2b00      	cmp	r3, #0
   87f18:	dc76      	bgt.n	88008 <_svfprintf_r+0x1614>
   87f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87f1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87f20:	9306      	str	r3, [sp, #24]
   87f22:	2300      	movs	r3, #0
   87f24:	930f      	str	r3, [sp, #60]	; 0x3c
   87f26:	9313      	str	r3, [sp, #76]	; 0x4c
   87f28:	e4cf      	b.n	878ca <_svfprintf_r+0xed6>
   87f2a:	222d      	movs	r2, #45	; 0x2d
   87f2c:	2300      	movs	r3, #0
   87f2e:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   87f32:	9307      	str	r3, [sp, #28]
   87f34:	f7fe be68 	b.w	86c08 <_svfprintf_r+0x214>
   87f38:	990c      	ldr	r1, [sp, #48]	; 0x30
   87f3a:	980a      	ldr	r0, [sp, #40]	; 0x28
   87f3c:	aa28      	add	r2, sp, #160	; 0xa0
   87f3e:	f004 f981 	bl	8c244 <__ssprint_r>
   87f42:	2800      	cmp	r0, #0
   87f44:	f47e aeb9 	bne.w	86cba <_svfprintf_r+0x2c6>
   87f48:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87f4a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87f4e:	f7ff bad8 	b.w	87502 <_svfprintf_r+0xb0e>
   87f52:	4659      	mov	r1, fp
   87f54:	4650      	mov	r0, sl
   87f56:	aa28      	add	r2, sp, #160	; 0xa0
   87f58:	f004 f974 	bl	8c244 <__ssprint_r>
   87f5c:	2800      	cmp	r0, #0
   87f5e:	f47e aeac 	bne.w	86cba <_svfprintf_r+0x2c6>
   87f62:	7838      	ldrb	r0, [r7, #0]
   87f64:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87f66:	aa2b      	add	r2, sp, #172	; 0xac
   87f68:	4406      	add	r6, r0
   87f6a:	e57a      	b.n	87a62 <_svfprintf_r+0x106e>
   87f6c:	990c      	ldr	r1, [sp, #48]	; 0x30
   87f6e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87f70:	aa28      	add	r2, sp, #160	; 0xa0
   87f72:	f004 f967 	bl	8c244 <__ssprint_r>
   87f76:	2800      	cmp	r0, #0
   87f78:	f47e ae9f 	bne.w	86cba <_svfprintf_r+0x2c6>
   87f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87f7e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87f80:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87f84:	f7ff bae1 	b.w	8754a <_svfprintf_r+0xb56>
   87f88:	9907      	ldr	r1, [sp, #28]
   87f8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87f8c:	9101      	str	r1, [sp, #4]
   87f8e:	2103      	movs	r1, #3
   87f90:	9100      	str	r1, [sp, #0]
   87f92:	a926      	add	r1, sp, #152	; 0x98
   87f94:	9104      	str	r1, [sp, #16]
   87f96:	a923      	add	r1, sp, #140	; 0x8c
   87f98:	9103      	str	r1, [sp, #12]
   87f9a:	a922      	add	r1, sp, #136	; 0x88
   87f9c:	465a      	mov	r2, fp
   87f9e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87fa0:	9102      	str	r1, [sp, #8]
   87fa2:	f001 fad5 	bl	89550 <_dtoa_r>
   87fa6:	7803      	ldrb	r3, [r0, #0]
   87fa8:	4605      	mov	r5, r0
   87faa:	2b30      	cmp	r3, #48	; 0x30
   87fac:	f000 8216 	beq.w	883dc <_svfprintf_r+0x19e8>
   87fb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87fb2:	9a07      	ldr	r2, [sp, #28]
   87fb4:	46b9      	mov	r9, r7
   87fb6:	4413      	add	r3, r2
   87fb8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87fba:	18ec      	adds	r4, r5, r3
   87fbc:	4658      	mov	r0, fp
   87fbe:	2200      	movs	r2, #0
   87fc0:	2300      	movs	r3, #0
   87fc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87fc4:	f005 f84c 	bl	8d060 <__aeabi_dcmpeq>
   87fc8:	b108      	cbz	r0, 87fce <_svfprintf_r+0x15da>
   87fca:	4623      	mov	r3, r4
   87fcc:	e411      	b.n	877f2 <_svfprintf_r+0xdfe>
   87fce:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87fd0:	42a3      	cmp	r3, r4
   87fd2:	f4bf ac0e 	bcs.w	877f2 <_svfprintf_r+0xdfe>
   87fd6:	2130      	movs	r1, #48	; 0x30
   87fd8:	1c5a      	adds	r2, r3, #1
   87fda:	9226      	str	r2, [sp, #152]	; 0x98
   87fdc:	7019      	strb	r1, [r3, #0]
   87fde:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87fe0:	429c      	cmp	r4, r3
   87fe2:	d8f9      	bhi.n	87fd8 <_svfprintf_r+0x15e4>
   87fe4:	e405      	b.n	877f2 <_svfprintf_r+0xdfe>
   87fe6:	9a22      	ldr	r2, [sp, #136]	; 0x88
   87fe8:	2a00      	cmp	r2, #0
   87fea:	9210      	str	r2, [sp, #64]	; 0x40
   87fec:	f340 820e 	ble.w	8840c <_svfprintf_r+0x1a18>
   87ff0:	9907      	ldr	r1, [sp, #28]
   87ff2:	f009 0301 	and.w	r3, r9, #1
   87ff6:	430b      	orrs	r3, r1
   87ff8:	f040 817e 	bne.w	882f8 <_svfprintf_r+0x1904>
   87ffc:	2666      	movs	r6, #102	; 0x66
   87ffe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88000:	930b      	str	r3, [sp, #44]	; 0x2c
   88002:	f419 6f80 	tst.w	r9, #1024	; 0x400
   88006:	d088      	beq.n	87f1a <_svfprintf_r+0x1526>
   88008:	9919      	ldr	r1, [sp, #100]	; 0x64
   8800a:	780b      	ldrb	r3, [r1, #0]
   8800c:	2bff      	cmp	r3, #255	; 0xff
   8800e:	f000 8225 	beq.w	8845c <_svfprintf_r+0x1a68>
   88012:	2400      	movs	r4, #0
   88014:	9a10      	ldr	r2, [sp, #64]	; 0x40
   88016:	4620      	mov	r0, r4
   88018:	e004      	b.n	88024 <_svfprintf_r+0x1630>
   8801a:	3001      	adds	r0, #1
   8801c:	3101      	adds	r1, #1
   8801e:	2bff      	cmp	r3, #255	; 0xff
   88020:	f000 8159 	beq.w	882d6 <_svfprintf_r+0x18e2>
   88024:	4293      	cmp	r3, r2
   88026:	f280 8156 	bge.w	882d6 <_svfprintf_r+0x18e2>
   8802a:	1ad2      	subs	r2, r2, r3
   8802c:	784b      	ldrb	r3, [r1, #1]
   8802e:	2b00      	cmp	r3, #0
   88030:	d1f3      	bne.n	8801a <_svfprintf_r+0x1626>
   88032:	780b      	ldrb	r3, [r1, #0]
   88034:	3401      	adds	r4, #1
   88036:	e7f2      	b.n	8801e <_svfprintf_r+0x162a>
   88038:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   8803c:	f7ff b9da 	b.w	873f4 <_svfprintf_r+0xa00>
   88040:	9b07      	ldr	r3, [sp, #28]
   88042:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   88046:	940e      	str	r4, [sp, #56]	; 0x38
   88048:	9306      	str	r3, [sp, #24]
   8804a:	930b      	str	r3, [sp, #44]	; 0x2c
   8804c:	9007      	str	r0, [sp, #28]
   8804e:	900f      	str	r0, [sp, #60]	; 0x3c
   88050:	9013      	str	r0, [sp, #76]	; 0x4c
   88052:	9010      	str	r0, [sp, #64]	; 0x40
   88054:	f7fe bdd6 	b.w	86c04 <_svfprintf_r+0x210>
   88058:	990c      	ldr	r1, [sp, #48]	; 0x30
   8805a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8805c:	aa28      	add	r2, sp, #160	; 0xa0
   8805e:	f004 f8f1 	bl	8c244 <__ssprint_r>
   88062:	2800      	cmp	r0, #0
   88064:	f47e ae29 	bne.w	86cba <_svfprintf_r+0x2c6>
   88068:	9d22      	ldr	r5, [sp, #136]	; 0x88
   8806a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8806c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8806e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88072:	1b5d      	subs	r5, r3, r5
   88074:	f7ff ba81 	b.w	8757a <_svfprintf_r+0xb86>
   88078:	2300      	movs	r3, #0
   8807a:	9307      	str	r3, [sp, #28]
   8807c:	f7fe bd0b 	b.w	86a96 <_svfprintf_r+0xa2>
   88080:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88082:	9a16      	ldr	r2, [sp, #88]	; 0x58
   88084:	189a      	adds	r2, r3, r2
   88086:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88088:	920b      	str	r2, [sp, #44]	; 0x2c
   8808a:	2b00      	cmp	r3, #0
   8808c:	f340 8185 	ble.w	8839a <_svfprintf_r+0x19a6>
   88090:	2667      	movs	r6, #103	; 0x67
   88092:	e7b6      	b.n	88002 <_svfprintf_r+0x160e>
   88094:	2330      	movs	r3, #48	; 0x30
   88096:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8809a:	2358      	movs	r3, #88	; 0x58
   8809c:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   880a0:	9b07      	ldr	r3, [sp, #28]
   880a2:	f047 0402 	orr.w	r4, r7, #2
   880a6:	2b63      	cmp	r3, #99	; 0x63
   880a8:	f300 80c4 	bgt.w	88234 <_svfprintf_r+0x1840>
   880ac:	2300      	movs	r3, #0
   880ae:	ad3b      	add	r5, sp, #236	; 0xec
   880b0:	930d      	str	r3, [sp, #52]	; 0x34
   880b2:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   880b6:	930f      	str	r3, [sp, #60]	; 0x3c
   880b8:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   880bc:	4613      	mov	r3, r2
   880be:	2b00      	cmp	r3, #0
   880c0:	4627      	mov	r7, r4
   880c2:	f2c0 8084 	blt.w	881ce <_svfprintf_r+0x17da>
   880c6:	930b      	str	r3, [sp, #44]	; 0x2c
   880c8:	2300      	movs	r3, #0
   880ca:	468b      	mov	fp, r1
   880cc:	931d      	str	r3, [sp, #116]	; 0x74
   880ce:	f026 0320 	bic.w	r3, r6, #32
   880d2:	9306      	str	r3, [sp, #24]
   880d4:	2e61      	cmp	r6, #97	; 0x61
   880d6:	f000 8118 	beq.w	8830a <_svfprintf_r+0x1916>
   880da:	2e41      	cmp	r6, #65	; 0x41
   880dc:	f47f ab67 	bne.w	877ae <_svfprintf_r+0xdba>
   880e0:	aa22      	add	r2, sp, #136	; 0x88
   880e2:	4658      	mov	r0, fp
   880e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   880e6:	f004 f81d 	bl	8c124 <frexp>
   880ea:	2200      	movs	r2, #0
   880ec:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   880f0:	f004 fd4e 	bl	8cb90 <__aeabi_dmul>
   880f4:	4602      	mov	r2, r0
   880f6:	460b      	mov	r3, r1
   880f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   880fc:	2200      	movs	r2, #0
   880fe:	2300      	movs	r3, #0
   88100:	f004 ffae 	bl	8d060 <__aeabi_dcmpeq>
   88104:	b108      	cbz	r0, 8810a <_svfprintf_r+0x1716>
   88106:	2301      	movs	r3, #1
   88108:	9322      	str	r3, [sp, #136]	; 0x88
   8810a:	4bad      	ldr	r3, [pc, #692]	; (883c0 <_svfprintf_r+0x19cc>)
   8810c:	930b      	str	r3, [sp, #44]	; 0x2c
   8810e:	9b07      	ldr	r3, [sp, #28]
   88110:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   88114:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   88118:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   8811c:	46ab      	mov	fp, r5
   8811e:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   88122:	f103 39ff 	add.w	r9, r3, #4294967295
   88126:	9510      	str	r5, [sp, #64]	; 0x40
   88128:	e006      	b.n	88138 <_svfprintf_r+0x1744>
   8812a:	2200      	movs	r2, #0
   8812c:	2300      	movs	r3, #0
   8812e:	f109 39ff 	add.w	r9, r9, #4294967295
   88132:	f004 ff95 	bl	8d060 <__aeabi_dcmpeq>
   88136:	b9e8      	cbnz	r0, 88174 <_svfprintf_r+0x1780>
   88138:	2200      	movs	r2, #0
   8813a:	4ba2      	ldr	r3, [pc, #648]	; (883c4 <_svfprintf_r+0x19d0>)
   8813c:	4630      	mov	r0, r6
   8813e:	4639      	mov	r1, r7
   88140:	f004 fd26 	bl	8cb90 <__aeabi_dmul>
   88144:	460f      	mov	r7, r1
   88146:	4606      	mov	r6, r0
   88148:	f004 ffd2 	bl	8d0f0 <__aeabi_d2iz>
   8814c:	4604      	mov	r4, r0
   8814e:	f004 fcb5 	bl	8cabc <__aeabi_i2d>
   88152:	460b      	mov	r3, r1
   88154:	4602      	mov	r2, r0
   88156:	4639      	mov	r1, r7
   88158:	4630      	mov	r0, r6
   8815a:	f004 fb61 	bl	8c820 <__aeabi_dsub>
   8815e:	f81a 3004 	ldrb.w	r3, [sl, r4]
   88162:	f1b9 3fff 	cmp.w	r9, #4294967295
   88166:	46d8      	mov	r8, fp
   88168:	464d      	mov	r5, r9
   8816a:	4606      	mov	r6, r0
   8816c:	460f      	mov	r7, r1
   8816e:	f80b 3b01 	strb.w	r3, [fp], #1
   88172:	d1da      	bne.n	8812a <_svfprintf_r+0x1736>
   88174:	4630      	mov	r0, r6
   88176:	4639      	mov	r1, r7
   88178:	2200      	movs	r2, #0
   8817a:	4b93      	ldr	r3, [pc, #588]	; (883c8 <_svfprintf_r+0x19d4>)
   8817c:	46a9      	mov	r9, r5
   8817e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   88182:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88184:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   88188:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8818c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   88190:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88192:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   88194:	f004 ff8c 	bl	8d0b0 <__aeabi_dcmpgt>
   88198:	bb80      	cbnz	r0, 881fc <_svfprintf_r+0x1808>
   8819a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8819e:	2200      	movs	r2, #0
   881a0:	4b89      	ldr	r3, [pc, #548]	; (883c8 <_svfprintf_r+0x19d4>)
   881a2:	f004 ff5d 	bl	8d060 <__aeabi_dcmpeq>
   881a6:	b108      	cbz	r0, 881ac <_svfprintf_r+0x17b8>
   881a8:	07e1      	lsls	r1, r4, #31
   881aa:	d427      	bmi.n	881fc <_svfprintf_r+0x1808>
   881ac:	464b      	mov	r3, r9
   881ae:	2b00      	cmp	r3, #0
   881b0:	db06      	blt.n	881c0 <_svfprintf_r+0x17cc>
   881b2:	2230      	movs	r2, #48	; 0x30
   881b4:	3301      	adds	r3, #1
   881b6:	445b      	add	r3, fp
   881b8:	f80b 2b01 	strb.w	r2, [fp], #1
   881bc:	455b      	cmp	r3, fp
   881be:	d1fb      	bne.n	881b8 <_svfprintf_r+0x17c4>
   881c0:	ebab 0305 	sub.w	r3, fp, r5
   881c4:	46b9      	mov	r9, r7
   881c6:	9312      	str	r3, [sp, #72]	; 0x48
   881c8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   881ca:	f7ff bb14 	b.w	877f6 <_svfprintf_r+0xe02>
   881ce:	f026 0320 	bic.w	r3, r6, #32
   881d2:	9306      	str	r3, [sp, #24]
   881d4:	222d      	movs	r2, #45	; 0x2d
   881d6:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   881da:	469b      	mov	fp, r3
   881dc:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   881e0:	921d      	str	r2, [sp, #116]	; 0x74
   881e2:	930b      	str	r3, [sp, #44]	; 0x2c
   881e4:	e776      	b.n	880d4 <_svfprintf_r+0x16e0>
   881e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   881e8:	f7ff b95c 	b.w	874a4 <_svfprintf_r+0xab0>
   881ec:	9b07      	ldr	r3, [sp, #28]
   881ee:	18ec      	adds	r4, r5, r3
   881f0:	e6e4      	b.n	87fbc <_svfprintf_r+0x15c8>
   881f2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   881f4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 883cc <_svfprintf_r+0x19d8>
   881f8:	f7ff b827 	b.w	8724a <_svfprintf_r+0x856>
   881fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   881fe:	9326      	str	r3, [sp, #152]	; 0x98
   88200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88202:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   88206:	7bd9      	ldrb	r1, [r3, #15]
   88208:	465b      	mov	r3, fp
   8820a:	428a      	cmp	r2, r1
   8820c:	d109      	bne.n	88222 <_svfprintf_r+0x182e>
   8820e:	2030      	movs	r0, #48	; 0x30
   88210:	f803 0c01 	strb.w	r0, [r3, #-1]
   88214:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88216:	1e5a      	subs	r2, r3, #1
   88218:	9226      	str	r2, [sp, #152]	; 0x98
   8821a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   8821e:	4291      	cmp	r1, r2
   88220:	d0f6      	beq.n	88210 <_svfprintf_r+0x181c>
   88222:	2a39      	cmp	r2, #57	; 0x39
   88224:	bf0b      	itete	eq
   88226:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   88228:	3201      	addne	r2, #1
   8822a:	7a92      	ldrbeq	r2, [r2, #10]
   8822c:	b2d2      	uxtbne	r2, r2
   8822e:	f803 2c01 	strb.w	r2, [r3, #-1]
   88232:	e7c5      	b.n	881c0 <_svfprintf_r+0x17cc>
   88234:	980a      	ldr	r0, [sp, #40]	; 0x28
   88236:	1c59      	adds	r1, r3, #1
   88238:	f002 fe50 	bl	8aedc <_malloc_r>
   8823c:	4605      	mov	r5, r0
   8823e:	2800      	cmp	r0, #0
   88240:	f000 8117 	beq.w	88472 <_svfprintf_r+0x1a7e>
   88244:	900d      	str	r0, [sp, #52]	; 0x34
   88246:	e734      	b.n	880b2 <_svfprintf_r+0x16be>
   88248:	2102      	movs	r1, #2
   8824a:	9100      	str	r1, [sp, #0]
   8824c:	9907      	ldr	r1, [sp, #28]
   8824e:	465a      	mov	r2, fp
   88250:	1c4c      	adds	r4, r1, #1
   88252:	a926      	add	r1, sp, #152	; 0x98
   88254:	9104      	str	r1, [sp, #16]
   88256:	a923      	add	r1, sp, #140	; 0x8c
   88258:	9103      	str	r1, [sp, #12]
   8825a:	a922      	add	r1, sp, #136	; 0x88
   8825c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8825e:	980a      	ldr	r0, [sp, #40]	; 0x28
   88260:	9401      	str	r4, [sp, #4]
   88262:	9102      	str	r1, [sp, #8]
   88264:	f001 f974 	bl	89550 <_dtoa_r>
   88268:	4605      	mov	r5, r0
   8826a:	46b9      	mov	r9, r7
   8826c:	442c      	add	r4, r5
   8826e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   88270:	e6a4      	b.n	87fbc <_svfprintf_r+0x15c8>
   88272:	2330      	movs	r3, #48	; 0x30
   88274:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   88278:	2378      	movs	r3, #120	; 0x78
   8827a:	e70f      	b.n	8809c <_svfprintf_r+0x16a8>
   8827c:	4645      	mov	r5, r8
   8827e:	4688      	mov	r8, r1
   88280:	3301      	adds	r3, #1
   88282:	4432      	add	r2, r6
   88284:	2b07      	cmp	r3, #7
   88286:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   8828a:	f8c8 9000 	str.w	r9, [r8]
   8828e:	f8c8 6004 	str.w	r6, [r8, #4]
   88292:	f77f acb5 	ble.w	87c00 <_svfprintf_r+0x120c>
   88296:	990c      	ldr	r1, [sp, #48]	; 0x30
   88298:	980a      	ldr	r0, [sp, #40]	; 0x28
   8829a:	aa28      	add	r2, sp, #160	; 0xa0
   8829c:	f003 ffd2 	bl	8c244 <__ssprint_r>
   882a0:	2800      	cmp	r0, #0
   882a2:	f47e ad0a 	bne.w	86cba <_svfprintf_r+0x2c6>
   882a6:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   882aa:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   882ae:	e4a9      	b.n	87c04 <_svfprintf_r+0x1210>
   882b0:	9b07      	ldr	r3, [sp, #28]
   882b2:	2b00      	cmp	r3, #0
   882b4:	bf08      	it	eq
   882b6:	2301      	moveq	r3, #1
   882b8:	9307      	str	r3, [sp, #28]
   882ba:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   882be:	930f      	str	r3, [sp, #60]	; 0x3c
   882c0:	9b15      	ldr	r3, [sp, #84]	; 0x54
   882c2:	2b00      	cmp	r3, #0
   882c4:	f2c0 80b6 	blt.w	88434 <_svfprintf_r+0x1a40>
   882c8:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   882cc:	900d      	str	r0, [sp, #52]	; 0x34
   882ce:	930b      	str	r3, [sp, #44]	; 0x2c
   882d0:	901d      	str	r0, [sp, #116]	; 0x74
   882d2:	f7ff ba73 	b.w	877bc <_svfprintf_r+0xdc8>
   882d6:	9119      	str	r1, [sp, #100]	; 0x64
   882d8:	9210      	str	r2, [sp, #64]	; 0x40
   882da:	9013      	str	r0, [sp, #76]	; 0x4c
   882dc:	940f      	str	r4, [sp, #60]	; 0x3c
   882de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   882e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   882e2:	991c      	ldr	r1, [sp, #112]	; 0x70
   882e4:	4413      	add	r3, r2
   882e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   882e8:	fb01 2303 	mla	r3, r1, r3, r2
   882ec:	930b      	str	r3, [sp, #44]	; 0x2c
   882ee:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   882f2:	9306      	str	r3, [sp, #24]
   882f4:	f7ff bae9 	b.w	878ca <_svfprintf_r+0xed6>
   882f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   882fa:	2666      	movs	r6, #102	; 0x66
   882fc:	18d3      	adds	r3, r2, r3
   882fe:	4419      	add	r1, r3
   88300:	910b      	str	r1, [sp, #44]	; 0x2c
   88302:	e67e      	b.n	88002 <_svfprintf_r+0x160e>
   88304:	2300      	movs	r3, #0
   88306:	930d      	str	r3, [sp, #52]	; 0x34
   88308:	e764      	b.n	881d4 <_svfprintf_r+0x17e0>
   8830a:	aa22      	add	r2, sp, #136	; 0x88
   8830c:	4658      	mov	r0, fp
   8830e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88310:	f003 ff08 	bl	8c124 <frexp>
   88314:	2200      	movs	r2, #0
   88316:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   8831a:	f004 fc39 	bl	8cb90 <__aeabi_dmul>
   8831e:	4602      	mov	r2, r0
   88320:	460b      	mov	r3, r1
   88322:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   88326:	2200      	movs	r2, #0
   88328:	2300      	movs	r3, #0
   8832a:	f004 fe99 	bl	8d060 <__aeabi_dcmpeq>
   8832e:	b108      	cbz	r0, 88334 <_svfprintf_r+0x1940>
   88330:	2301      	movs	r3, #1
   88332:	9322      	str	r3, [sp, #136]	; 0x88
   88334:	4b26      	ldr	r3, [pc, #152]	; (883d0 <_svfprintf_r+0x19dc>)
   88336:	930b      	str	r3, [sp, #44]	; 0x2c
   88338:	e6e9      	b.n	8810e <_svfprintf_r+0x171a>
   8833a:	2667      	movs	r6, #103	; 0x67
   8833c:	e5ed      	b.n	87f1a <_svfprintf_r+0x1526>
   8833e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88340:	930b      	str	r3, [sp, #44]	; 0x2c
   88342:	e5e2      	b.n	87f0a <_svfprintf_r+0x1516>
   88344:	9b15      	ldr	r3, [sp, #84]	; 0x54
   88346:	2003      	movs	r0, #3
   88348:	2b00      	cmp	r3, #0
   8834a:	bfb8      	it	lt
   8834c:	222d      	movlt	r2, #45	; 0x2d
   8834e:	f04f 0300 	mov.w	r3, #0
   88352:	bfa8      	it	ge
   88354:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   88358:	4619      	mov	r1, r3
   8835a:	930d      	str	r3, [sp, #52]	; 0x34
   8835c:	4d1d      	ldr	r5, [pc, #116]	; (883d4 <_svfprintf_r+0x19e0>)
   8835e:	4b1e      	ldr	r3, [pc, #120]	; (883d8 <_svfprintf_r+0x19e4>)
   88360:	bfb8      	it	lt
   88362:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   88366:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8836a:	9006      	str	r0, [sp, #24]
   8836c:	f7fe bd7f 	b.w	86e6e <_svfprintf_r+0x47a>
   88370:	2900      	cmp	r1, #0
   88372:	d144      	bne.n	883fe <_svfprintf_r+0x1a0a>
   88374:	2230      	movs	r2, #48	; 0x30
   88376:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   8837a:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   8837e:	3330      	adds	r3, #48	; 0x30
   88380:	f802 3b01 	strb.w	r3, [r2], #1
   88384:	ab24      	add	r3, sp, #144	; 0x90
   88386:	1ad3      	subs	r3, r2, r3
   88388:	931a      	str	r3, [sp, #104]	; 0x68
   8838a:	f7ff ba87 	b.w	8789c <_svfprintf_r+0xea8>
   8838e:	f106 020f 	add.w	r2, r6, #15
   88392:	2101      	movs	r1, #1
   88394:	b2d2      	uxtb	r2, r2
   88396:	f7ff ba41 	b.w	8781c <_svfprintf_r+0xe28>
   8839a:	f1c3 0301 	rsb	r3, r3, #1
   8839e:	441a      	add	r2, r3
   883a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   883a4:	2667      	movs	r6, #103	; 0x67
   883a6:	920b      	str	r2, [sp, #44]	; 0x2c
   883a8:	9306      	str	r3, [sp, #24]
   883aa:	e5ba      	b.n	87f22 <_svfprintf_r+0x152e>
   883ac:	f019 0f01 	tst.w	r9, #1
   883b0:	f43f aa7f 	beq.w	878b2 <_svfprintf_r+0xebe>
   883b4:	f7ff ba79 	b.w	878aa <_svfprintf_r+0xeb6>
   883b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
   883ba:	f7ff bb7f 	b.w	87abc <_svfprintf_r+0x10c8>
   883be:	bf00      	nop
   883c0:	0008d4f4 	.word	0x0008d4f4
   883c4:	40300000 	.word	0x40300000
   883c8:	3fe00000 	.word	0x3fe00000
   883cc:	0008d524 	.word	0x0008d524
   883d0:	0008d4e0 	.word	0x0008d4e0
   883d4:	0008d4d8 	.word	0x0008d4d8
   883d8:	0008d4dc 	.word	0x0008d4dc
   883dc:	4658      	mov	r0, fp
   883de:	2200      	movs	r2, #0
   883e0:	2300      	movs	r3, #0
   883e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   883e4:	f004 fe3c 	bl	8d060 <__aeabi_dcmpeq>
   883e8:	2800      	cmp	r0, #0
   883ea:	f47f ade1 	bne.w	87fb0 <_svfprintf_r+0x15bc>
   883ee:	9b07      	ldr	r3, [sp, #28]
   883f0:	f1c3 0301 	rsb	r3, r3, #1
   883f4:	9322      	str	r3, [sp, #136]	; 0x88
   883f6:	e5dc      	b.n	87fb2 <_svfprintf_r+0x15be>
   883f8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 88494 <_svfprintf_r+0x1aa0>
   883fc:	e4ad      	b.n	87d5a <_svfprintf_r+0x1366>
   883fe:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   88402:	e7bc      	b.n	8837e <_svfprintf_r+0x198a>
   88404:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   88406:	f8df 908c 	ldr.w	r9, [pc, #140]	; 88494 <_svfprintf_r+0x1aa0>
   8840a:	e428      	b.n	87c5e <_svfprintf_r+0x126a>
   8840c:	9a07      	ldr	r2, [sp, #28]
   8840e:	f009 0901 	and.w	r9, r9, #1
   88412:	ea59 0302 	orrs.w	r3, r9, r2
   88416:	d104      	bne.n	88422 <_svfprintf_r+0x1a2e>
   88418:	2301      	movs	r3, #1
   8841a:	2666      	movs	r6, #102	; 0x66
   8841c:	9306      	str	r3, [sp, #24]
   8841e:	930b      	str	r3, [sp, #44]	; 0x2c
   88420:	e57f      	b.n	87f22 <_svfprintf_r+0x152e>
   88422:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88424:	2666      	movs	r6, #102	; 0x66
   88426:	3301      	adds	r3, #1
   88428:	441a      	add	r2, r3
   8842a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8842e:	920b      	str	r2, [sp, #44]	; 0x2c
   88430:	9306      	str	r3, [sp, #24]
   88432:	e576      	b.n	87f22 <_svfprintf_r+0x152e>
   88434:	900d      	str	r0, [sp, #52]	; 0x34
   88436:	e6cd      	b.n	881d4 <_svfprintf_r+0x17e0>
   88438:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8843a:	f89a 6001 	ldrb.w	r6, [sl, #1]
   8843e:	4692      	mov	sl, r2
   88440:	f853 2b04 	ldr.w	r2, [r3], #4
   88444:	930e      	str	r3, [sp, #56]	; 0x38
   88446:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   8844a:	9307      	str	r3, [sp, #28]
   8844c:	f7fe bb21 	b.w	86a92 <_svfprintf_r+0x9e>
   88450:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   88452:	f8df 9040 	ldr.w	r9, [pc, #64]	; 88494 <_svfprintf_r+0x1aa0>
   88456:	e4b1      	b.n	87dbc <_svfprintf_r+0x13c8>
   88458:	9c07      	ldr	r4, [sp, #28]
   8845a:	e706      	b.n	8826a <_svfprintf_r+0x1876>
   8845c:	2300      	movs	r3, #0
   8845e:	930f      	str	r3, [sp, #60]	; 0x3c
   88460:	9313      	str	r3, [sp, #76]	; 0x4c
   88462:	e73c      	b.n	882de <_svfprintf_r+0x18ea>
   88464:	f8df 902c 	ldr.w	r9, [pc, #44]	; 88494 <_svfprintf_r+0x1aa0>
   88468:	e70a      	b.n	88280 <_svfprintf_r+0x188c>
   8846a:	2302      	movs	r3, #2
   8846c:	931a      	str	r3, [sp, #104]	; 0x68
   8846e:	f7ff ba15 	b.w	8789c <_svfprintf_r+0xea8>
   88472:	990c      	ldr	r1, [sp, #48]	; 0x30
   88474:	898b      	ldrh	r3, [r1, #12]
   88476:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   8847a:	4613      	mov	r3, r2
   8847c:	818a      	strh	r2, [r1, #12]
   8847e:	f7fe bc24 	b.w	86cca <_svfprintf_r+0x2d6>
   88482:	f04f 32ff 	mov.w	r2, #4294967295
   88486:	230c      	movs	r3, #12
   88488:	9208      	str	r2, [sp, #32]
   8848a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   8848c:	6013      	str	r3, [r2, #0]
   8848e:	f7fe bc23 	b.w	86cd8 <_svfprintf_r+0x2e4>
   88492:	bf00      	nop
   88494:	0008d524 	.word	0x0008d524

00088498 <__sprint_r.part.0>:
   88498:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8849c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8849e:	4690      	mov	r8, r2
   884a0:	049c      	lsls	r4, r3, #18
   884a2:	d52d      	bpl.n	88500 <__sprint_r.part.0+0x68>
   884a4:	6893      	ldr	r3, [r2, #8]
   884a6:	6812      	ldr	r2, [r2, #0]
   884a8:	b343      	cbz	r3, 884fc <__sprint_r.part.0+0x64>
   884aa:	468b      	mov	fp, r1
   884ac:	4606      	mov	r6, r0
   884ae:	f102 0908 	add.w	r9, r2, #8
   884b2:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   884b6:	ea5f 079a 	movs.w	r7, sl, lsr #2
   884ba:	d015      	beq.n	884e8 <__sprint_r.part.0+0x50>
   884bc:	2400      	movs	r4, #0
   884be:	3d04      	subs	r5, #4
   884c0:	e001      	b.n	884c6 <__sprint_r.part.0+0x2e>
   884c2:	42a7      	cmp	r7, r4
   884c4:	d00e      	beq.n	884e4 <__sprint_r.part.0+0x4c>
   884c6:	465a      	mov	r2, fp
   884c8:	4630      	mov	r0, r6
   884ca:	f855 1f04 	ldr.w	r1, [r5, #4]!
   884ce:	f002 f963 	bl	8a798 <_fputwc_r>
   884d2:	1c43      	adds	r3, r0, #1
   884d4:	f104 0401 	add.w	r4, r4, #1
   884d8:	d1f3      	bne.n	884c2 <__sprint_r.part.0+0x2a>
   884da:	2300      	movs	r3, #0
   884dc:	e9c8 3301 	strd	r3, r3, [r8, #4]
   884e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   884e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   884e8:	f02a 0a03 	bic.w	sl, sl, #3
   884ec:	eba3 030a 	sub.w	r3, r3, sl
   884f0:	f8c8 3008 	str.w	r3, [r8, #8]
   884f4:	f109 0908 	add.w	r9, r9, #8
   884f8:	2b00      	cmp	r3, #0
   884fa:	d1da      	bne.n	884b2 <__sprint_r.part.0+0x1a>
   884fc:	2000      	movs	r0, #0
   884fe:	e7ec      	b.n	884da <__sprint_r.part.0+0x42>
   88500:	f002 face 	bl	8aaa0 <__sfvwrite_r>
   88504:	2300      	movs	r3, #0
   88506:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8850a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8850e:	bf00      	nop

00088510 <_vfiprintf_r>:
   88510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88514:	b0bd      	sub	sp, #244	; 0xf4
   88516:	461c      	mov	r4, r3
   88518:	4617      	mov	r7, r2
   8851a:	e9cd 3005 	strd	r3, r0, [sp, #20]
   8851e:	9102      	str	r1, [sp, #8]
   88520:	b118      	cbz	r0, 8852a <_vfiprintf_r+0x1a>
   88522:	6b83      	ldr	r3, [r0, #56]	; 0x38
   88524:	2b00      	cmp	r3, #0
   88526:	f000 8277 	beq.w	88a18 <_vfiprintf_r+0x508>
   8852a:	9a02      	ldr	r2, [sp, #8]
   8852c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8852e:	07de      	lsls	r6, r3, #31
   88530:	f140 8184 	bpl.w	8883c <_vfiprintf_r+0x32c>
   88534:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   88538:	b28a      	uxth	r2, r1
   8853a:	0490      	lsls	r0, r2, #18
   8853c:	d408      	bmi.n	88550 <_vfiprintf_r+0x40>
   8853e:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   88542:	9902      	ldr	r1, [sp, #8]
   88544:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88546:	818a      	strh	r2, [r1, #12]
   88548:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8854c:	b292      	uxth	r2, r2
   8854e:	664b      	str	r3, [r1, #100]	; 0x64
   88550:	0711      	lsls	r1, r2, #28
   88552:	f140 80ec 	bpl.w	8872e <_vfiprintf_r+0x21e>
   88556:	9b02      	ldr	r3, [sp, #8]
   88558:	691b      	ldr	r3, [r3, #16]
   8855a:	2b00      	cmp	r3, #0
   8855c:	f000 80e7 	beq.w	8872e <_vfiprintf_r+0x21e>
   88560:	f002 031a 	and.w	r3, r2, #26
   88564:	2b0a      	cmp	r3, #10
   88566:	f000 80f0 	beq.w	8874a <_vfiprintf_r+0x23a>
   8856a:	ab13      	add	r3, sp, #76	; 0x4c
   8856c:	9310      	str	r3, [sp, #64]	; 0x40
   8856e:	2300      	movs	r3, #0
   88570:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   88574:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   88578:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   8857c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88580:	9304      	str	r3, [sp, #16]
   88582:	783b      	ldrb	r3, [r7, #0]
   88584:	2b00      	cmp	r3, #0
   88586:	f000 8146 	beq.w	88816 <_vfiprintf_r+0x306>
   8858a:	463c      	mov	r4, r7
   8858c:	e004      	b.n	88598 <_vfiprintf_r+0x88>
   8858e:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   88592:	2b00      	cmp	r3, #0
   88594:	f000 8121 	beq.w	887da <_vfiprintf_r+0x2ca>
   88598:	2b25      	cmp	r3, #37	; 0x25
   8859a:	d1f8      	bne.n	8858e <_vfiprintf_r+0x7e>
   8859c:	1be5      	subs	r5, r4, r7
   8859e:	f040 811e 	bne.w	887de <_vfiprintf_r+0x2ce>
   885a2:	7823      	ldrb	r3, [r4, #0]
   885a4:	2b00      	cmp	r3, #0
   885a6:	f000 8136 	beq.w	88816 <_vfiprintf_r+0x306>
   885aa:	f04f 0300 	mov.w	r3, #0
   885ae:	2500      	movs	r5, #0
   885b0:	f04f 3bff 	mov.w	fp, #4294967295
   885b4:	f04f 082b 	mov.w	r8, #43	; 0x2b
   885b8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   885bc:	7863      	ldrb	r3, [r4, #1]
   885be:	9503      	str	r5, [sp, #12]
   885c0:	1c67      	adds	r7, r4, #1
   885c2:	3701      	adds	r7, #1
   885c4:	f1a3 0220 	sub.w	r2, r3, #32
   885c8:	2a5a      	cmp	r2, #90	; 0x5a
   885ca:	f200 8146 	bhi.w	8885a <_vfiprintf_r+0x34a>
   885ce:	e8df f012 	tbh	[pc, r2, lsl #1]
   885d2:	02a1      	.short	0x02a1
   885d4:	01440144 	.word	0x01440144
   885d8:	0144029d 	.word	0x0144029d
   885dc:	01440144 	.word	0x01440144
   885e0:	0144027c 	.word	0x0144027c
   885e4:	006a0144 	.word	0x006a0144
   885e8:	01440253 	.word	0x01440253
   885ec:	02af0229 	.word	0x02af0229
   885f0:	02ab0144 	.word	0x02ab0144
   885f4:	005b005b 	.word	0x005b005b
   885f8:	005b005b 	.word	0x005b005b
   885fc:	005b005b 	.word	0x005b005b
   88600:	005b005b 	.word	0x005b005b
   88604:	0144005b 	.word	0x0144005b
   88608:	01440144 	.word	0x01440144
   8860c:	01440144 	.word	0x01440144
   88610:	01440144 	.word	0x01440144
   88614:	01440144 	.word	0x01440144
   88618:	00780213 	.word	0x00780213
   8861c:	01440144 	.word	0x01440144
   88620:	01440144 	.word	0x01440144
   88624:	01440144 	.word	0x01440144
   88628:	01440144 	.word	0x01440144
   8862c:	01440144 	.word	0x01440144
   88630:	014400d1 	.word	0x014400d1
   88634:	01440144 	.word	0x01440144
   88638:	014401f7 	.word	0x014401f7
   8863c:	01440241 	.word	0x01440241
   88640:	05210144 	.word	0x05210144
   88644:	01440144 	.word	0x01440144
   88648:	01440144 	.word	0x01440144
   8864c:	01440144 	.word	0x01440144
   88650:	01440144 	.word	0x01440144
   88654:	01440144 	.word	0x01440144
   88658:	007a0213 	.word	0x007a0213
   8865c:	01440144 	.word	0x01440144
   88660:	02370144 	.word	0x02370144
   88664:	0074007a 	.word	0x0074007a
   88668:	022d0144 	.word	0x022d0144
   8866c:	02690144 	.word	0x02690144
   88670:	025700d3 	.word	0x025700d3
   88674:	01440074 	.word	0x01440074
   88678:	007201f7 	.word	0x007201f7
   8867c:	01440541 	.word	0x01440541
   88680:	05430144 	.word	0x05430144
   88684:	00720144 	.word	0x00720144
   88688:	2100      	movs	r1, #0
   8868a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8868e:	f817 3b01 	ldrb.w	r3, [r7], #1
   88692:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   88696:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8869a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8869e:	2a09      	cmp	r2, #9
   886a0:	d9f5      	bls.n	8868e <_vfiprintf_r+0x17e>
   886a2:	9103      	str	r1, [sp, #12]
   886a4:	e78e      	b.n	885c4 <_vfiprintf_r+0xb4>
   886a6:	9b05      	ldr	r3, [sp, #20]
   886a8:	f853 2b04 	ldr.w	r2, [r3], #4
   886ac:	2a00      	cmp	r2, #0
   886ae:	9203      	str	r2, [sp, #12]
   886b0:	9305      	str	r3, [sp, #20]
   886b2:	f2c0 81b4 	blt.w	88a1e <_vfiprintf_r+0x50e>
   886b6:	783b      	ldrb	r3, [r7, #0]
   886b8:	e783      	b.n	885c2 <_vfiprintf_r+0xb2>
   886ba:	783b      	ldrb	r3, [r7, #0]
   886bc:	f045 0520 	orr.w	r5, r5, #32
   886c0:	e77f      	b.n	885c2 <_vfiprintf_r+0xb2>
   886c2:	f045 0510 	orr.w	r5, r5, #16
   886c6:	06ac      	lsls	r4, r5, #26
   886c8:	9e05      	ldr	r6, [sp, #20]
   886ca:	f140 816b 	bpl.w	889a4 <_vfiprintf_r+0x494>
   886ce:	3607      	adds	r6, #7
   886d0:	f026 0607 	bic.w	r6, r6, #7
   886d4:	4632      	mov	r2, r6
   886d6:	6873      	ldr	r3, [r6, #4]
   886d8:	f852 6b08 	ldr.w	r6, [r2], #8
   886dc:	4698      	mov	r8, r3
   886de:	9205      	str	r2, [sp, #20]
   886e0:	2b00      	cmp	r3, #0
   886e2:	f2c0 8449 	blt.w	88f78 <_vfiprintf_r+0xa68>
   886e6:	f1bb 3fff 	cmp.w	fp, #4294967295
   886ea:	f000 8531 	beq.w	89150 <_vfiprintf_r+0xc40>
   886ee:	ea56 0308 	orrs.w	r3, r6, r8
   886f2:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   886f6:	f000 8425 	beq.w	88f44 <_vfiprintf_r+0xa34>
   886fa:	2e0a      	cmp	r6, #10
   886fc:	f178 0300 	sbcs.w	r3, r8, #0
   88700:	f080 84e1 	bcs.w	890c6 <_vfiprintf_r+0xbb6>
   88704:	2301      	movs	r3, #1
   88706:	4655      	mov	r5, sl
   88708:	3630      	adds	r6, #48	; 0x30
   8870a:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   8870e:	9301      	str	r3, [sp, #4]
   88710:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   88714:	f8dd 8004 	ldr.w	r8, [sp, #4]
   88718:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8871c:	45d8      	cmp	r8, fp
   8871e:	bfb8      	it	lt
   88720:	46d8      	movlt	r8, fp
   88722:	2b00      	cmp	r3, #0
   88724:	f000 80a8 	beq.w	88878 <_vfiprintf_r+0x368>
   88728:	f108 0801 	add.w	r8, r8, #1
   8872c:	e0a4      	b.n	88878 <_vfiprintf_r+0x368>
   8872e:	9d02      	ldr	r5, [sp, #8]
   88730:	9806      	ldr	r0, [sp, #24]
   88732:	4629      	mov	r1, r5
   88734:	f000 fdfa 	bl	8932c <__swsetup_r>
   88738:	2800      	cmp	r0, #0
   8873a:	f040 8594 	bne.w	89266 <_vfiprintf_r+0xd56>
   8873e:	89aa      	ldrh	r2, [r5, #12]
   88740:	f002 031a 	and.w	r3, r2, #26
   88744:	2b0a      	cmp	r3, #10
   88746:	f47f af10 	bne.w	8856a <_vfiprintf_r+0x5a>
   8874a:	9902      	ldr	r1, [sp, #8]
   8874c:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   88750:	2b00      	cmp	r3, #0
   88752:	f6ff af0a 	blt.w	8856a <_vfiprintf_r+0x5a>
   88756:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   88758:	07de      	lsls	r6, r3, #31
   8875a:	d402      	bmi.n	88762 <_vfiprintf_r+0x252>
   8875c:	0595      	lsls	r5, r2, #22
   8875e:	f140 8562 	bpl.w	89226 <_vfiprintf_r+0xd16>
   88762:	4623      	mov	r3, r4
   88764:	463a      	mov	r2, r7
   88766:	9902      	ldr	r1, [sp, #8]
   88768:	9806      	ldr	r0, [sp, #24]
   8876a:	b03d      	add	sp, #244	; 0xf4
   8876c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88770:	f000 bd9a 	b.w	892a8 <__sbprintf>
   88774:	f045 0510 	orr.w	r5, r5, #16
   88778:	f015 0820 	ands.w	r8, r5, #32
   8877c:	f000 8103 	beq.w	88986 <_vfiprintf_r+0x476>
   88780:	9e05      	ldr	r6, [sp, #20]
   88782:	3607      	adds	r6, #7
   88784:	f026 0607 	bic.w	r6, r6, #7
   88788:	4633      	mov	r3, r6
   8878a:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8878e:	f853 6b08 	ldr.w	r6, [r3], #8
   88792:	9305      	str	r3, [sp, #20]
   88794:	2300      	movs	r3, #0
   88796:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8879a:	f04f 0200 	mov.w	r2, #0
   8879e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   887a2:	f1bb 3fff 	cmp.w	fp, #4294967295
   887a6:	f000 81dd 	beq.w	88b64 <_vfiprintf_r+0x654>
   887aa:	ea56 0208 	orrs.w	r2, r6, r8
   887ae:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   887b2:	f040 81d6 	bne.w	88b62 <_vfiprintf_r+0x652>
   887b6:	f1bb 0f00 	cmp.w	fp, #0
   887ba:	f040 84cc 	bne.w	89156 <_vfiprintf_r+0xc46>
   887be:	2b00      	cmp	r3, #0
   887c0:	f040 83c5 	bne.w	88f4e <_vfiprintf_r+0xa3e>
   887c4:	f01a 0301 	ands.w	r3, sl, #1
   887c8:	9301      	str	r3, [sp, #4]
   887ca:	f000 83ec 	beq.w	88fa6 <_vfiprintf_r+0xa96>
   887ce:	2330      	movs	r3, #48	; 0x30
   887d0:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   887d4:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   887d8:	e79c      	b.n	88714 <_vfiprintf_r+0x204>
   887da:	1be5      	subs	r5, r4, r7
   887dc:	d01b      	beq.n	88816 <_vfiprintf_r+0x306>
   887de:	9b11      	ldr	r3, [sp, #68]	; 0x44
   887e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   887e2:	3301      	adds	r3, #1
   887e4:	442a      	add	r2, r5
   887e6:	2b07      	cmp	r3, #7
   887e8:	e9c9 7500 	strd	r7, r5, [r9]
   887ec:	9212      	str	r2, [sp, #72]	; 0x48
   887ee:	9311      	str	r3, [sp, #68]	; 0x44
   887f0:	dc05      	bgt.n	887fe <_vfiprintf_r+0x2ee>
   887f2:	f109 0908 	add.w	r9, r9, #8
   887f6:	9b04      	ldr	r3, [sp, #16]
   887f8:	442b      	add	r3, r5
   887fa:	9304      	str	r3, [sp, #16]
   887fc:	e6d1      	b.n	885a2 <_vfiprintf_r+0x92>
   887fe:	2a00      	cmp	r2, #0
   88800:	f000 839c 	beq.w	88f3c <_vfiprintf_r+0xa2c>
   88804:	9902      	ldr	r1, [sp, #8]
   88806:	9806      	ldr	r0, [sp, #24]
   88808:	aa10      	add	r2, sp, #64	; 0x40
   8880a:	f7ff fe45 	bl	88498 <__sprint_r.part.0>
   8880e:	b940      	cbnz	r0, 88822 <_vfiprintf_r+0x312>
   88810:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88814:	e7ef      	b.n	887f6 <_vfiprintf_r+0x2e6>
   88816:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88818:	2b00      	cmp	r3, #0
   8881a:	f040 8515 	bne.w	89248 <_vfiprintf_r+0xd38>
   8881e:	2300      	movs	r3, #0
   88820:	9311      	str	r3, [sp, #68]	; 0x44
   88822:	9a02      	ldr	r2, [sp, #8]
   88824:	6e53      	ldr	r3, [r2, #100]	; 0x64
   88826:	07d9      	lsls	r1, r3, #31
   88828:	f140 80a2 	bpl.w	88970 <_vfiprintf_r+0x460>
   8882c:	8993      	ldrh	r3, [r2, #12]
   8882e:	065b      	lsls	r3, r3, #25
   88830:	f100 8525 	bmi.w	8927e <_vfiprintf_r+0xd6e>
   88834:	9804      	ldr	r0, [sp, #16]
   88836:	b03d      	add	sp, #244	; 0xf4
   88838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8883c:	9b02      	ldr	r3, [sp, #8]
   8883e:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   88842:	058d      	lsls	r5, r1, #22
   88844:	b28a      	uxth	r2, r1
   88846:	f53f ae78 	bmi.w	8853a <_vfiprintf_r+0x2a>
   8884a:	461d      	mov	r5, r3
   8884c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8884e:	f002 fad1 	bl	8adf4 <__retarget_lock_acquire_recursive>
   88852:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   88856:	b28a      	uxth	r2, r1
   88858:	e66f      	b.n	8853a <_vfiprintf_r+0x2a>
   8885a:	2b00      	cmp	r3, #0
   8885c:	d0db      	beq.n	88816 <_vfiprintf_r+0x306>
   8885e:	f04f 0801 	mov.w	r8, #1
   88862:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88866:	f04f 0300 	mov.w	r3, #0
   8886a:	ac23      	add	r4, sp, #140	; 0x8c
   8886c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   88870:	f8cd 8004 	str.w	r8, [sp, #4]
   88874:	f04f 0b00 	mov.w	fp, #0
   88878:	f015 0302 	ands.w	r3, r5, #2
   8887c:	9307      	str	r3, [sp, #28]
   8887e:	bf18      	it	ne
   88880:	f108 0802 	addne.w	r8, r8, #2
   88884:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   88888:	9308      	str	r3, [sp, #32]
   8888a:	d105      	bne.n	88898 <_vfiprintf_r+0x388>
   8888c:	9b03      	ldr	r3, [sp, #12]
   8888e:	eba3 0608 	sub.w	r6, r3, r8
   88892:	2e00      	cmp	r6, #0
   88894:	f300 828a 	bgt.w	88dac <_vfiprintf_r+0x89c>
   88898:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8889c:	1c48      	adds	r0, r1, #1
   8889e:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   888a2:	b176      	cbz	r6, 888c2 <_vfiprintf_r+0x3b2>
   888a4:	2101      	movs	r1, #1
   888a6:	3201      	adds	r2, #1
   888a8:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   888ac:	2807      	cmp	r0, #7
   888ae:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   888b2:	e9c9 6100 	strd	r6, r1, [r9]
   888b6:	f300 8258 	bgt.w	88d6a <_vfiprintf_r+0x85a>
   888ba:	4601      	mov	r1, r0
   888bc:	f109 0908 	add.w	r9, r9, #8
   888c0:	3001      	adds	r0, #1
   888c2:	9b07      	ldr	r3, [sp, #28]
   888c4:	b1d3      	cbz	r3, 888fc <_vfiprintf_r+0x3ec>
   888c6:	2302      	movs	r3, #2
   888c8:	3202      	adds	r2, #2
   888ca:	f8c9 3004 	str.w	r3, [r9, #4]
   888ce:	2807      	cmp	r0, #7
   888d0:	ab0f      	add	r3, sp, #60	; 0x3c
   888d2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   888d6:	f8c9 3000 	str.w	r3, [r9]
   888da:	f340 8262 	ble.w	88da2 <_vfiprintf_r+0x892>
   888de:	2a00      	cmp	r2, #0
   888e0:	f000 8327 	beq.w	88f32 <_vfiprintf_r+0xa22>
   888e4:	9902      	ldr	r1, [sp, #8]
   888e6:	9806      	ldr	r0, [sp, #24]
   888e8:	aa10      	add	r2, sp, #64	; 0x40
   888ea:	f7ff fdd5 	bl	88498 <__sprint_r.part.0>
   888ee:	2800      	cmp	r0, #0
   888f0:	d197      	bne.n	88822 <_vfiprintf_r+0x312>
   888f2:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   888f6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   888fa:	1c48      	adds	r0, r1, #1
   888fc:	9b08      	ldr	r3, [sp, #32]
   888fe:	2b80      	cmp	r3, #128	; 0x80
   88900:	f000 8171 	beq.w	88be6 <_vfiprintf_r+0x6d6>
   88904:	9b01      	ldr	r3, [sp, #4]
   88906:	ebab 0603 	sub.w	r6, fp, r3
   8890a:	2e00      	cmp	r6, #0
   8890c:	f300 81cf 	bgt.w	88cae <_vfiprintf_r+0x79e>
   88910:	9b01      	ldr	r3, [sp, #4]
   88912:	2807      	cmp	r0, #7
   88914:	441a      	add	r2, r3
   88916:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8891a:	f8c9 4000 	str.w	r4, [r9]
   8891e:	f8c9 3004 	str.w	r3, [r9, #4]
   88922:	f340 815d 	ble.w	88be0 <_vfiprintf_r+0x6d0>
   88926:	2a00      	cmp	r2, #0
   88928:	f000 8293 	beq.w	88e52 <_vfiprintf_r+0x942>
   8892c:	9902      	ldr	r1, [sp, #8]
   8892e:	9806      	ldr	r0, [sp, #24]
   88930:	aa10      	add	r2, sp, #64	; 0x40
   88932:	f7ff fdb1 	bl	88498 <__sprint_r.part.0>
   88936:	2800      	cmp	r0, #0
   88938:	f47f af73 	bne.w	88822 <_vfiprintf_r+0x312>
   8893c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8893e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88942:	0768      	lsls	r0, r5, #29
   88944:	d505      	bpl.n	88952 <_vfiprintf_r+0x442>
   88946:	9b03      	ldr	r3, [sp, #12]
   88948:	eba3 0408 	sub.w	r4, r3, r8
   8894c:	2c00      	cmp	r4, #0
   8894e:	f300 828a 	bgt.w	88e66 <_vfiprintf_r+0x956>
   88952:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   88956:	4541      	cmp	r1, r8
   88958:	bfac      	ite	ge
   8895a:	185b      	addge	r3, r3, r1
   8895c:	4443      	addlt	r3, r8
   8895e:	9304      	str	r3, [sp, #16]
   88960:	2a00      	cmp	r2, #0
   88962:	f040 81f3 	bne.w	88d4c <_vfiprintf_r+0x83c>
   88966:	2300      	movs	r3, #0
   88968:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8896c:	9311      	str	r3, [sp, #68]	; 0x44
   8896e:	e608      	b.n	88582 <_vfiprintf_r+0x72>
   88970:	9b02      	ldr	r3, [sp, #8]
   88972:	899b      	ldrh	r3, [r3, #12]
   88974:	059a      	lsls	r2, r3, #22
   88976:	f53f af5a 	bmi.w	8882e <_vfiprintf_r+0x31e>
   8897a:	9c02      	ldr	r4, [sp, #8]
   8897c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8897e:	f002 fa3b 	bl	8adf8 <__retarget_lock_release_recursive>
   88982:	89a3      	ldrh	r3, [r4, #12]
   88984:	e753      	b.n	8882e <_vfiprintf_r+0x31e>
   88986:	f015 0310 	ands.w	r3, r5, #16
   8898a:	f040 8318 	bne.w	88fbe <_vfiprintf_r+0xaae>
   8898e:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   88992:	f000 8310 	beq.w	88fb6 <_vfiprintf_r+0xaa6>
   88996:	9e05      	ldr	r6, [sp, #20]
   88998:	4698      	mov	r8, r3
   8899a:	f856 3b04 	ldr.w	r3, [r6], #4
   8899e:	9605      	str	r6, [sp, #20]
   889a0:	b29e      	uxth	r6, r3
   889a2:	e6f7      	b.n	88794 <_vfiprintf_r+0x284>
   889a4:	f856 3b04 	ldr.w	r3, [r6], #4
   889a8:	06e8      	lsls	r0, r5, #27
   889aa:	9605      	str	r6, [sp, #20]
   889ac:	f100 8310 	bmi.w	88fd0 <_vfiprintf_r+0xac0>
   889b0:	0669      	lsls	r1, r5, #25
   889b2:	f140 830a 	bpl.w	88fca <_vfiprintf_r+0xaba>
   889b6:	f343 38c0 	sbfx	r8, r3, #15, #1
   889ba:	b21e      	sxth	r6, r3
   889bc:	4643      	mov	r3, r8
   889be:	e68f      	b.n	886e0 <_vfiprintf_r+0x1d0>
   889c0:	f04f 0300 	mov.w	r3, #0
   889c4:	9e05      	ldr	r6, [sp, #20]
   889c6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   889ca:	f856 4b04 	ldr.w	r4, [r6], #4
   889ce:	2c00      	cmp	r4, #0
   889d0:	f000 83cf 	beq.w	89172 <_vfiprintf_r+0xc62>
   889d4:	f1bb 3fff 	cmp.w	fp, #4294967295
   889d8:	f000 8341 	beq.w	8905e <_vfiprintf_r+0xb4e>
   889dc:	465a      	mov	r2, fp
   889de:	2100      	movs	r1, #0
   889e0:	4620      	mov	r0, r4
   889e2:	f002 fd3d 	bl	8b460 <memchr>
   889e6:	2800      	cmp	r0, #0
   889e8:	f000 8422 	beq.w	89230 <_vfiprintf_r+0xd20>
   889ec:	1b03      	subs	r3, r0, r4
   889ee:	f04f 0b00 	mov.w	fp, #0
   889f2:	9605      	str	r6, [sp, #20]
   889f4:	9301      	str	r3, [sp, #4]
   889f6:	e68d      	b.n	88714 <_vfiprintf_r+0x204>
   889f8:	f04f 0300 	mov.w	r3, #0
   889fc:	f04f 0801 	mov.w	r8, #1
   88a00:	9e05      	ldr	r6, [sp, #20]
   88a02:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   88a06:	f856 3b04 	ldr.w	r3, [r6], #4
   88a0a:	ac23      	add	r4, sp, #140	; 0x8c
   88a0c:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   88a10:	9605      	str	r6, [sp, #20]
   88a12:	f8cd 8004 	str.w	r8, [sp, #4]
   88a16:	e72d      	b.n	88874 <_vfiprintf_r+0x364>
   88a18:	f001 fdc6 	bl	8a5a8 <__sinit>
   88a1c:	e585      	b.n	8852a <_vfiprintf_r+0x1a>
   88a1e:	9b03      	ldr	r3, [sp, #12]
   88a20:	425b      	negs	r3, r3
   88a22:	9303      	str	r3, [sp, #12]
   88a24:	783b      	ldrb	r3, [r7, #0]
   88a26:	f045 0504 	orr.w	r5, r5, #4
   88a2a:	e5ca      	b.n	885c2 <_vfiprintf_r+0xb2>
   88a2c:	783b      	ldrb	r3, [r7, #0]
   88a2e:	2b6c      	cmp	r3, #108	; 0x6c
   88a30:	bf03      	ittte	eq
   88a32:	787b      	ldrbeq	r3, [r7, #1]
   88a34:	f045 0520 	orreq.w	r5, r5, #32
   88a38:	3701      	addeq	r7, #1
   88a3a:	f045 0510 	orrne.w	r5, r5, #16
   88a3e:	e5c0      	b.n	885c2 <_vfiprintf_r+0xb2>
   88a40:	783b      	ldrb	r3, [r7, #0]
   88a42:	2b68      	cmp	r3, #104	; 0x68
   88a44:	bf03      	ittte	eq
   88a46:	787b      	ldrbeq	r3, [r7, #1]
   88a48:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   88a4c:	3701      	addeq	r7, #1
   88a4e:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   88a52:	e5b6      	b.n	885c2 <_vfiprintf_r+0xb2>
   88a54:	f045 0a10 	orr.w	sl, r5, #16
   88a58:	f01a 0820 	ands.w	r8, sl, #32
   88a5c:	f000 827e 	beq.w	88f5c <_vfiprintf_r+0xa4c>
   88a60:	9e05      	ldr	r6, [sp, #20]
   88a62:	2301      	movs	r3, #1
   88a64:	3607      	adds	r6, #7
   88a66:	f026 0607 	bic.w	r6, r6, #7
   88a6a:	4632      	mov	r2, r6
   88a6c:	f8d6 8004 	ldr.w	r8, [r6, #4]
   88a70:	f852 6b08 	ldr.w	r6, [r2], #8
   88a74:	9205      	str	r2, [sp, #20]
   88a76:	e690      	b.n	8879a <_vfiprintf_r+0x28a>
   88a78:	783b      	ldrb	r3, [r7, #0]
   88a7a:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   88a7e:	e5a0      	b.n	885c2 <_vfiprintf_r+0xb2>
   88a80:	2230      	movs	r2, #48	; 0x30
   88a82:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   88a86:	2278      	movs	r2, #120	; 0x78
   88a88:	9b05      	ldr	r3, [sp, #20]
   88a8a:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   88a8e:	f853 6b04 	ldr.w	r6, [r3], #4
   88a92:	4abe      	ldr	r2, [pc, #760]	; (88d8c <_vfiprintf_r+0x87c>)
   88a94:	9305      	str	r3, [sp, #20]
   88a96:	f04f 0800 	mov.w	r8, #0
   88a9a:	2302      	movs	r3, #2
   88a9c:	f045 0a02 	orr.w	sl, r5, #2
   88aa0:	9209      	str	r2, [sp, #36]	; 0x24
   88aa2:	e67a      	b.n	8879a <_vfiprintf_r+0x28a>
   88aa4:	06ae      	lsls	r6, r5, #26
   88aa6:	f100 82a4 	bmi.w	88ff2 <_vfiprintf_r+0xae2>
   88aaa:	06ec      	lsls	r4, r5, #27
   88aac:	f100 8359 	bmi.w	89162 <_vfiprintf_r+0xc52>
   88ab0:	0668      	lsls	r0, r5, #25
   88ab2:	f100 83b0 	bmi.w	89216 <_vfiprintf_r+0xd06>
   88ab6:	05a9      	lsls	r1, r5, #22
   88ab8:	f140 8353 	bpl.w	89162 <_vfiprintf_r+0xc52>
   88abc:	9e05      	ldr	r6, [sp, #20]
   88abe:	9a04      	ldr	r2, [sp, #16]
   88ac0:	f856 3b04 	ldr.w	r3, [r6], #4
   88ac4:	701a      	strb	r2, [r3, #0]
   88ac6:	9605      	str	r6, [sp, #20]
   88ac8:	e55b      	b.n	88582 <_vfiprintf_r+0x72>
   88aca:	9c06      	ldr	r4, [sp, #24]
   88acc:	4620      	mov	r0, r4
   88ace:	f002 f989 	bl	8ade4 <_localeconv_r>
   88ad2:	6843      	ldr	r3, [r0, #4]
   88ad4:	4618      	mov	r0, r3
   88ad6:	930b      	str	r3, [sp, #44]	; 0x2c
   88ad8:	f7fd ff2a 	bl	86930 <strlen>
   88adc:	4603      	mov	r3, r0
   88ade:	4620      	mov	r0, r4
   88ae0:	930c      	str	r3, [sp, #48]	; 0x30
   88ae2:	461c      	mov	r4, r3
   88ae4:	f002 f97e 	bl	8ade4 <_localeconv_r>
   88ae8:	6883      	ldr	r3, [r0, #8]
   88aea:	930a      	str	r3, [sp, #40]	; 0x28
   88aec:	2c00      	cmp	r4, #0
   88aee:	f43f ade2 	beq.w	886b6 <_vfiprintf_r+0x1a6>
   88af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88af4:	2b00      	cmp	r3, #0
   88af6:	f43f adde 	beq.w	886b6 <_vfiprintf_r+0x1a6>
   88afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   88afc:	781b      	ldrb	r3, [r3, #0]
   88afe:	2b00      	cmp	r3, #0
   88b00:	f43f add9 	beq.w	886b6 <_vfiprintf_r+0x1a6>
   88b04:	783b      	ldrb	r3, [r7, #0]
   88b06:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   88b0a:	e55a      	b.n	885c2 <_vfiprintf_r+0xb2>
   88b0c:	783b      	ldrb	r3, [r7, #0]
   88b0e:	f045 0501 	orr.w	r5, r5, #1
   88b12:	e556      	b.n	885c2 <_vfiprintf_r+0xb2>
   88b14:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   88b18:	2b00      	cmp	r3, #0
   88b1a:	f47f adcc 	bne.w	886b6 <_vfiprintf_r+0x1a6>
   88b1e:	2320      	movs	r3, #32
   88b20:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   88b24:	783b      	ldrb	r3, [r7, #0]
   88b26:	e54c      	b.n	885c2 <_vfiprintf_r+0xb2>
   88b28:	783b      	ldrb	r3, [r7, #0]
   88b2a:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   88b2e:	e548      	b.n	885c2 <_vfiprintf_r+0xb2>
   88b30:	4639      	mov	r1, r7
   88b32:	f811 3b01 	ldrb.w	r3, [r1], #1
   88b36:	2b2a      	cmp	r3, #42	; 0x2a
   88b38:	f000 83a6 	beq.w	89288 <_vfiprintf_r+0xd78>
   88b3c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88b40:	2a09      	cmp	r2, #9
   88b42:	460f      	mov	r7, r1
   88b44:	f04f 0b00 	mov.w	fp, #0
   88b48:	f63f ad3c 	bhi.w	885c4 <_vfiprintf_r+0xb4>
   88b4c:	f817 3b01 	ldrb.w	r3, [r7], #1
   88b50:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   88b54:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   88b58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   88b5c:	2a09      	cmp	r2, #9
   88b5e:	d9f5      	bls.n	88b4c <_vfiprintf_r+0x63c>
   88b60:	e530      	b.n	885c4 <_vfiprintf_r+0xb4>
   88b62:	46aa      	mov	sl, r5
   88b64:	2b01      	cmp	r3, #1
   88b66:	f43f adc8 	beq.w	886fa <_vfiprintf_r+0x1ea>
   88b6a:	2b02      	cmp	r3, #2
   88b6c:	ac3c      	add	r4, sp, #240	; 0xf0
   88b6e:	d112      	bne.n	88b96 <_vfiprintf_r+0x686>
   88b70:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88b72:	f006 030f 	and.w	r3, r6, #15
   88b76:	5cd3      	ldrb	r3, [r2, r3]
   88b78:	0936      	lsrs	r6, r6, #4
   88b7a:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   88b7e:	ea4f 1818 	mov.w	r8, r8, lsr #4
   88b82:	f804 3d01 	strb.w	r3, [r4, #-1]!
   88b86:	ea56 0308 	orrs.w	r3, r6, r8
   88b8a:	d1f2      	bne.n	88b72 <_vfiprintf_r+0x662>
   88b8c:	ab3c      	add	r3, sp, #240	; 0xf0
   88b8e:	1b1b      	subs	r3, r3, r4
   88b90:	4655      	mov	r5, sl
   88b92:	9301      	str	r3, [sp, #4]
   88b94:	e5be      	b.n	88714 <_vfiprintf_r+0x204>
   88b96:	f006 0307 	and.w	r3, r6, #7
   88b9a:	08f6      	lsrs	r6, r6, #3
   88b9c:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   88ba0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   88ba4:	3330      	adds	r3, #48	; 0x30
   88ba6:	ea56 0108 	orrs.w	r1, r6, r8
   88baa:	4622      	mov	r2, r4
   88bac:	f804 3d01 	strb.w	r3, [r4, #-1]!
   88bb0:	d1f1      	bne.n	88b96 <_vfiprintf_r+0x686>
   88bb2:	f01a 0f01 	tst.w	sl, #1
   88bb6:	d0e9      	beq.n	88b8c <_vfiprintf_r+0x67c>
   88bb8:	2b30      	cmp	r3, #48	; 0x30
   88bba:	d0e7      	beq.n	88b8c <_vfiprintf_r+0x67c>
   88bbc:	2330      	movs	r3, #48	; 0x30
   88bbe:	3a02      	subs	r2, #2
   88bc0:	f804 3c01 	strb.w	r3, [r4, #-1]
   88bc4:	ab3c      	add	r3, sp, #240	; 0xf0
   88bc6:	1a9b      	subs	r3, r3, r2
   88bc8:	4655      	mov	r5, sl
   88bca:	4614      	mov	r4, r2
   88bcc:	9301      	str	r3, [sp, #4]
   88bce:	e5a1      	b.n	88714 <_vfiprintf_r+0x204>
   88bd0:	2301      	movs	r3, #1
   88bd2:	9a01      	ldr	r2, [sp, #4]
   88bd4:	9413      	str	r4, [sp, #76]	; 0x4c
   88bd6:	9311      	str	r3, [sp, #68]	; 0x44
   88bd8:	9214      	str	r2, [sp, #80]	; 0x50
   88bda:	9212      	str	r2, [sp, #72]	; 0x48
   88bdc:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88be0:	f109 0908 	add.w	r9, r9, #8
   88be4:	e6ad      	b.n	88942 <_vfiprintf_r+0x432>
   88be6:	9b03      	ldr	r3, [sp, #12]
   88be8:	eba3 0608 	sub.w	r6, r3, r8
   88bec:	2e00      	cmp	r6, #0
   88bee:	f77f ae89 	ble.w	88904 <_vfiprintf_r+0x3f4>
   88bf2:	2e10      	cmp	r6, #16
   88bf4:	f8df a198 	ldr.w	sl, [pc, #408]	; 88d90 <_vfiprintf_r+0x880>
   88bf8:	dd38      	ble.n	88c6c <_vfiprintf_r+0x75c>
   88bfa:	4653      	mov	r3, sl
   88bfc:	46cc      	mov	ip, r9
   88bfe:	46ba      	mov	sl, r7
   88c00:	46c1      	mov	r9, r8
   88c02:	9407      	str	r4, [sp, #28]
   88c04:	46a8      	mov	r8, r5
   88c06:	461f      	mov	r7, r3
   88c08:	9c06      	ldr	r4, [sp, #24]
   88c0a:	9d02      	ldr	r5, [sp, #8]
   88c0c:	e007      	b.n	88c1e <_vfiprintf_r+0x70e>
   88c0e:	f101 0e02 	add.w	lr, r1, #2
   88c12:	4601      	mov	r1, r0
   88c14:	f10c 0c08 	add.w	ip, ip, #8
   88c18:	3e10      	subs	r6, #16
   88c1a:	2e10      	cmp	r6, #16
   88c1c:	dd1e      	ble.n	88c5c <_vfiprintf_r+0x74c>
   88c1e:	2310      	movs	r3, #16
   88c20:	1c48      	adds	r0, r1, #1
   88c22:	3210      	adds	r2, #16
   88c24:	2807      	cmp	r0, #7
   88c26:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88c2a:	f8cc 7000 	str.w	r7, [ip]
   88c2e:	f8cc 3004 	str.w	r3, [ip, #4]
   88c32:	ddec      	ble.n	88c0e <_vfiprintf_r+0x6fe>
   88c34:	2a00      	cmp	r2, #0
   88c36:	f000 8092 	beq.w	88d5e <_vfiprintf_r+0x84e>
   88c3a:	4629      	mov	r1, r5
   88c3c:	4620      	mov	r0, r4
   88c3e:	aa10      	add	r2, sp, #64	; 0x40
   88c40:	f7ff fc2a 	bl	88498 <__sprint_r.part.0>
   88c44:	2800      	cmp	r0, #0
   88c46:	f47f adec 	bne.w	88822 <_vfiprintf_r+0x312>
   88c4a:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88c4e:	3e10      	subs	r6, #16
   88c50:	2e10      	cmp	r6, #16
   88c52:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88c56:	f101 0e01 	add.w	lr, r1, #1
   88c5a:	dce0      	bgt.n	88c1e <_vfiprintf_r+0x70e>
   88c5c:	463b      	mov	r3, r7
   88c5e:	4645      	mov	r5, r8
   88c60:	4657      	mov	r7, sl
   88c62:	46c8      	mov	r8, r9
   88c64:	4670      	mov	r0, lr
   88c66:	46e1      	mov	r9, ip
   88c68:	469a      	mov	sl, r3
   88c6a:	9c07      	ldr	r4, [sp, #28]
   88c6c:	4432      	add	r2, r6
   88c6e:	2807      	cmp	r0, #7
   88c70:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88c74:	f8c9 a000 	str.w	sl, [r9]
   88c78:	f8c9 6004 	str.w	r6, [r9, #4]
   88c7c:	f340 8196 	ble.w	88fac <_vfiprintf_r+0xa9c>
   88c80:	2a00      	cmp	r2, #0
   88c82:	f000 829a 	beq.w	891ba <_vfiprintf_r+0xcaa>
   88c86:	9902      	ldr	r1, [sp, #8]
   88c88:	9806      	ldr	r0, [sp, #24]
   88c8a:	aa10      	add	r2, sp, #64	; 0x40
   88c8c:	f7ff fc04 	bl	88498 <__sprint_r.part.0>
   88c90:	2800      	cmp	r0, #0
   88c92:	f47f adc6 	bne.w	88822 <_vfiprintf_r+0x312>
   88c96:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88c9a:	9b01      	ldr	r3, [sp, #4]
   88c9c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88ca0:	ebab 0603 	sub.w	r6, fp, r3
   88ca4:	2e00      	cmp	r6, #0
   88ca6:	f101 0001 	add.w	r0, r1, #1
   88caa:	f77f ae31 	ble.w	88910 <_vfiprintf_r+0x400>
   88cae:	2e10      	cmp	r6, #16
   88cb0:	f340 826b 	ble.w	8918a <_vfiprintf_r+0xc7a>
   88cb4:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 88d90 <_vfiprintf_r+0x880>
   88cb8:	46cc      	mov	ip, r9
   88cba:	4653      	mov	r3, sl
   88cbc:	46c1      	mov	r9, r8
   88cbe:	46ba      	mov	sl, r7
   88cc0:	46a8      	mov	r8, r5
   88cc2:	9407      	str	r4, [sp, #28]
   88cc4:	f04f 0b10 	mov.w	fp, #16
   88cc8:	461f      	mov	r7, r3
   88cca:	9c06      	ldr	r4, [sp, #24]
   88ccc:	9d02      	ldr	r5, [sp, #8]
   88cce:	e007      	b.n	88ce0 <_vfiprintf_r+0x7d0>
   88cd0:	f101 0e02 	add.w	lr, r1, #2
   88cd4:	4601      	mov	r1, r0
   88cd6:	f10c 0c08 	add.w	ip, ip, #8
   88cda:	3e10      	subs	r6, #16
   88cdc:	2e10      	cmp	r6, #16
   88cde:	dd19      	ble.n	88d14 <_vfiprintf_r+0x804>
   88ce0:	1c48      	adds	r0, r1, #1
   88ce2:	3210      	adds	r2, #16
   88ce4:	2807      	cmp	r0, #7
   88ce6:	e9cc 7b00 	strd	r7, fp, [ip]
   88cea:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88cee:	ddef      	ble.n	88cd0 <_vfiprintf_r+0x7c0>
   88cf0:	b332      	cbz	r2, 88d40 <_vfiprintf_r+0x830>
   88cf2:	4629      	mov	r1, r5
   88cf4:	4620      	mov	r0, r4
   88cf6:	aa10      	add	r2, sp, #64	; 0x40
   88cf8:	f7ff fbce 	bl	88498 <__sprint_r.part.0>
   88cfc:	2800      	cmp	r0, #0
   88cfe:	f47f ad90 	bne.w	88822 <_vfiprintf_r+0x312>
   88d02:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88d06:	3e10      	subs	r6, #16
   88d08:	2e10      	cmp	r6, #16
   88d0a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88d0e:	f101 0e01 	add.w	lr, r1, #1
   88d12:	dce5      	bgt.n	88ce0 <_vfiprintf_r+0x7d0>
   88d14:	463b      	mov	r3, r7
   88d16:	4645      	mov	r5, r8
   88d18:	4657      	mov	r7, sl
   88d1a:	46c8      	mov	r8, r9
   88d1c:	4670      	mov	r0, lr
   88d1e:	46e1      	mov	r9, ip
   88d20:	469a      	mov	sl, r3
   88d22:	9c07      	ldr	r4, [sp, #28]
   88d24:	4432      	add	r2, r6
   88d26:	2807      	cmp	r0, #7
   88d28:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88d2c:	f8c9 a000 	str.w	sl, [r9]
   88d30:	f8c9 6004 	str.w	r6, [r9, #4]
   88d34:	f300 80e9 	bgt.w	88f0a <_vfiprintf_r+0x9fa>
   88d38:	f109 0908 	add.w	r9, r9, #8
   88d3c:	3001      	adds	r0, #1
   88d3e:	e5e7      	b.n	88910 <_vfiprintf_r+0x400>
   88d40:	f04f 0e01 	mov.w	lr, #1
   88d44:	4611      	mov	r1, r2
   88d46:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88d4a:	e7c6      	b.n	88cda <_vfiprintf_r+0x7ca>
   88d4c:	9902      	ldr	r1, [sp, #8]
   88d4e:	9806      	ldr	r0, [sp, #24]
   88d50:	aa10      	add	r2, sp, #64	; 0x40
   88d52:	f7ff fba1 	bl	88498 <__sprint_r.part.0>
   88d56:	2800      	cmp	r0, #0
   88d58:	f43f ae05 	beq.w	88966 <_vfiprintf_r+0x456>
   88d5c:	e561      	b.n	88822 <_vfiprintf_r+0x312>
   88d5e:	f04f 0e01 	mov.w	lr, #1
   88d62:	4611      	mov	r1, r2
   88d64:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88d68:	e756      	b.n	88c18 <_vfiprintf_r+0x708>
   88d6a:	2a00      	cmp	r2, #0
   88d6c:	f000 80de 	beq.w	88f2c <_vfiprintf_r+0xa1c>
   88d70:	9902      	ldr	r1, [sp, #8]
   88d72:	9806      	ldr	r0, [sp, #24]
   88d74:	aa10      	add	r2, sp, #64	; 0x40
   88d76:	f7ff fb8f 	bl	88498 <__sprint_r.part.0>
   88d7a:	2800      	cmp	r0, #0
   88d7c:	f47f ad51 	bne.w	88822 <_vfiprintf_r+0x312>
   88d80:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88d84:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88d88:	1c48      	adds	r0, r1, #1
   88d8a:	e59a      	b.n	888c2 <_vfiprintf_r+0x3b2>
   88d8c:	0008d4e0 	.word	0x0008d4e0
   88d90:	0008d544 	.word	0x0008d544
   88d94:	2202      	movs	r2, #2
   88d96:	2001      	movs	r0, #1
   88d98:	ab0f      	add	r3, sp, #60	; 0x3c
   88d9a:	9313      	str	r3, [sp, #76]	; 0x4c
   88d9c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88da0:	9214      	str	r2, [sp, #80]	; 0x50
   88da2:	4601      	mov	r1, r0
   88da4:	f109 0908 	add.w	r9, r9, #8
   88da8:	1c48      	adds	r0, r1, #1
   88daa:	e5a7      	b.n	888fc <_vfiprintf_r+0x3ec>
   88dac:	2e10      	cmp	r6, #16
   88dae:	f340 8245 	ble.w	8923c <_vfiprintf_r+0xd2c>
   88db2:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   88db6:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 890a8 <_vfiprintf_r+0xb98>
   88dba:	4619      	mov	r1, r3
   88dbc:	4653      	mov	r3, sl
   88dbe:	46cc      	mov	ip, r9
   88dc0:	46ba      	mov	sl, r7
   88dc2:	46c1      	mov	r9, r8
   88dc4:	940d      	str	r4, [sp, #52]	; 0x34
   88dc6:	46a8      	mov	r8, r5
   88dc8:	461f      	mov	r7, r3
   88dca:	9c06      	ldr	r4, [sp, #24]
   88dcc:	9d02      	ldr	r5, [sp, #8]
   88dce:	e007      	b.n	88de0 <_vfiprintf_r+0x8d0>
   88dd0:	f101 0e02 	add.w	lr, r1, #2
   88dd4:	4601      	mov	r1, r0
   88dd6:	f10c 0c08 	add.w	ip, ip, #8
   88dda:	3e10      	subs	r6, #16
   88ddc:	2e10      	cmp	r6, #16
   88dde:	dd1c      	ble.n	88e1a <_vfiprintf_r+0x90a>
   88de0:	2310      	movs	r3, #16
   88de2:	1c48      	adds	r0, r1, #1
   88de4:	3210      	adds	r2, #16
   88de6:	2807      	cmp	r0, #7
   88de8:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88dec:	f8cc 7000 	str.w	r7, [ip]
   88df0:	f8cc 3004 	str.w	r3, [ip, #4]
   88df4:	ddec      	ble.n	88dd0 <_vfiprintf_r+0x8c0>
   88df6:	b332      	cbz	r2, 88e46 <_vfiprintf_r+0x936>
   88df8:	4629      	mov	r1, r5
   88dfa:	4620      	mov	r0, r4
   88dfc:	aa10      	add	r2, sp, #64	; 0x40
   88dfe:	f7ff fb4b 	bl	88498 <__sprint_r.part.0>
   88e02:	2800      	cmp	r0, #0
   88e04:	f47f ad0d 	bne.w	88822 <_vfiprintf_r+0x312>
   88e08:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88e0c:	3e10      	subs	r6, #16
   88e0e:	2e10      	cmp	r6, #16
   88e10:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88e14:	f101 0e01 	add.w	lr, r1, #1
   88e18:	dce2      	bgt.n	88de0 <_vfiprintf_r+0x8d0>
   88e1a:	463b      	mov	r3, r7
   88e1c:	4645      	mov	r5, r8
   88e1e:	4657      	mov	r7, sl
   88e20:	46c8      	mov	r8, r9
   88e22:	4671      	mov	r1, lr
   88e24:	46e1      	mov	r9, ip
   88e26:	469a      	mov	sl, r3
   88e28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   88e2a:	4432      	add	r2, r6
   88e2c:	2907      	cmp	r1, #7
   88e2e:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   88e32:	f8c9 a000 	str.w	sl, [r9]
   88e36:	f8c9 6004 	str.w	r6, [r9, #4]
   88e3a:	f300 80a7 	bgt.w	88f8c <_vfiprintf_r+0xa7c>
   88e3e:	f109 0908 	add.w	r9, r9, #8
   88e42:	1c48      	adds	r0, r1, #1
   88e44:	e52b      	b.n	8889e <_vfiprintf_r+0x38e>
   88e46:	4611      	mov	r1, r2
   88e48:	f04f 0e01 	mov.w	lr, #1
   88e4c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   88e50:	e7c3      	b.n	88dda <_vfiprintf_r+0x8ca>
   88e52:	076c      	lsls	r4, r5, #29
   88e54:	9211      	str	r2, [sp, #68]	; 0x44
   88e56:	d550      	bpl.n	88efa <_vfiprintf_r+0x9ea>
   88e58:	9b03      	ldr	r3, [sp, #12]
   88e5a:	eba3 0408 	sub.w	r4, r3, r8
   88e5e:	2c00      	cmp	r4, #0
   88e60:	dd4b      	ble.n	88efa <_vfiprintf_r+0x9ea>
   88e62:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88e66:	2c10      	cmp	r4, #16
   88e68:	f340 81f8 	ble.w	8925c <_vfiprintf_r+0xd4c>
   88e6c:	f8df a238 	ldr.w	sl, [pc, #568]	; 890a8 <_vfiprintf_r+0xb98>
   88e70:	2510      	movs	r5, #16
   88e72:	4653      	mov	r3, sl
   88e74:	9911      	ldr	r1, [sp, #68]	; 0x44
   88e76:	46ba      	mov	sl, r7
   88e78:	9e06      	ldr	r6, [sp, #24]
   88e7a:	461f      	mov	r7, r3
   88e7c:	f8dd b008 	ldr.w	fp, [sp, #8]
   88e80:	e006      	b.n	88e90 <_vfiprintf_r+0x980>
   88e82:	1c88      	adds	r0, r1, #2
   88e84:	4619      	mov	r1, r3
   88e86:	f109 0908 	add.w	r9, r9, #8
   88e8a:	3c10      	subs	r4, #16
   88e8c:	2c10      	cmp	r4, #16
   88e8e:	dd19      	ble.n	88ec4 <_vfiprintf_r+0x9b4>
   88e90:	1c4b      	adds	r3, r1, #1
   88e92:	3210      	adds	r2, #16
   88e94:	2b07      	cmp	r3, #7
   88e96:	e9c9 7500 	strd	r7, r5, [r9]
   88e9a:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   88e9e:	ddf0      	ble.n	88e82 <_vfiprintf_r+0x972>
   88ea0:	b332      	cbz	r2, 88ef0 <_vfiprintf_r+0x9e0>
   88ea2:	4659      	mov	r1, fp
   88ea4:	4630      	mov	r0, r6
   88ea6:	aa10      	add	r2, sp, #64	; 0x40
   88ea8:	f7ff faf6 	bl	88498 <__sprint_r.part.0>
   88eac:	2800      	cmp	r0, #0
   88eae:	f47f acb8 	bne.w	88822 <_vfiprintf_r+0x312>
   88eb2:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   88eb6:	3c10      	subs	r4, #16
   88eb8:	2c10      	cmp	r4, #16
   88eba:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88ebe:	f101 0001 	add.w	r0, r1, #1
   88ec2:	dce5      	bgt.n	88e90 <_vfiprintf_r+0x980>
   88ec4:	463b      	mov	r3, r7
   88ec6:	4657      	mov	r7, sl
   88ec8:	469a      	mov	sl, r3
   88eca:	4422      	add	r2, r4
   88ecc:	2807      	cmp	r0, #7
   88ece:	e9c9 a400 	strd	sl, r4, [r9]
   88ed2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   88ed6:	f77f ad3c 	ble.w	88952 <_vfiprintf_r+0x442>
   88eda:	b172      	cbz	r2, 88efa <_vfiprintf_r+0x9ea>
   88edc:	9902      	ldr	r1, [sp, #8]
   88ede:	9806      	ldr	r0, [sp, #24]
   88ee0:	aa10      	add	r2, sp, #64	; 0x40
   88ee2:	f7ff fad9 	bl	88498 <__sprint_r.part.0>
   88ee6:	2800      	cmp	r0, #0
   88ee8:	f47f ac9b 	bne.w	88822 <_vfiprintf_r+0x312>
   88eec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88eee:	e530      	b.n	88952 <_vfiprintf_r+0x442>
   88ef0:	2001      	movs	r0, #1
   88ef2:	4611      	mov	r1, r2
   88ef4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88ef8:	e7c7      	b.n	88e8a <_vfiprintf_r+0x97a>
   88efa:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   88efe:	4542      	cmp	r2, r8
   88f00:	bfac      	ite	ge
   88f02:	189b      	addge	r3, r3, r2
   88f04:	4443      	addlt	r3, r8
   88f06:	9304      	str	r3, [sp, #16]
   88f08:	e52d      	b.n	88966 <_vfiprintf_r+0x456>
   88f0a:	2a00      	cmp	r2, #0
   88f0c:	f43f ae60 	beq.w	88bd0 <_vfiprintf_r+0x6c0>
   88f10:	9902      	ldr	r1, [sp, #8]
   88f12:	9806      	ldr	r0, [sp, #24]
   88f14:	aa10      	add	r2, sp, #64	; 0x40
   88f16:	f7ff fabf 	bl	88498 <__sprint_r.part.0>
   88f1a:	2800      	cmp	r0, #0
   88f1c:	f47f ac81 	bne.w	88822 <_vfiprintf_r+0x312>
   88f20:	9811      	ldr	r0, [sp, #68]	; 0x44
   88f22:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88f24:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88f28:	3001      	adds	r0, #1
   88f2a:	e4f1      	b.n	88910 <_vfiprintf_r+0x400>
   88f2c:	9b07      	ldr	r3, [sp, #28]
   88f2e:	2b00      	cmp	r3, #0
   88f30:	d169      	bne.n	89006 <_vfiprintf_r+0xaf6>
   88f32:	2001      	movs	r0, #1
   88f34:	4611      	mov	r1, r2
   88f36:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88f3a:	e4df      	b.n	888fc <_vfiprintf_r+0x3ec>
   88f3c:	9211      	str	r2, [sp, #68]	; 0x44
   88f3e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88f42:	e458      	b.n	887f6 <_vfiprintf_r+0x2e6>
   88f44:	f1bb 0f00 	cmp.w	fp, #0
   88f48:	f47f abdc 	bne.w	88704 <_vfiprintf_r+0x1f4>
   88f4c:	4655      	mov	r5, sl
   88f4e:	f04f 0b00 	mov.w	fp, #0
   88f52:	ac3c      	add	r4, sp, #240	; 0xf0
   88f54:	f8cd b004 	str.w	fp, [sp, #4]
   88f58:	f7ff bbdc 	b.w	88714 <_vfiprintf_r+0x204>
   88f5c:	f01a 0310 	ands.w	r3, sl, #16
   88f60:	d140      	bne.n	88fe4 <_vfiprintf_r+0xad4>
   88f62:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   88f66:	d039      	beq.n	88fdc <_vfiprintf_r+0xacc>
   88f68:	9e05      	ldr	r6, [sp, #20]
   88f6a:	4698      	mov	r8, r3
   88f6c:	f856 2b04 	ldr.w	r2, [r6], #4
   88f70:	2301      	movs	r3, #1
   88f72:	9605      	str	r6, [sp, #20]
   88f74:	b296      	uxth	r6, r2
   88f76:	e410      	b.n	8879a <_vfiprintf_r+0x28a>
   88f78:	232d      	movs	r3, #45	; 0x2d
   88f7a:	4276      	negs	r6, r6
   88f7c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   88f80:	46aa      	mov	sl, r5
   88f82:	f04f 0301 	mov.w	r3, #1
   88f86:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   88f8a:	e40a      	b.n	887a2 <_vfiprintf_r+0x292>
   88f8c:	2a00      	cmp	r2, #0
   88f8e:	d06f      	beq.n	89070 <_vfiprintf_r+0xb60>
   88f90:	9902      	ldr	r1, [sp, #8]
   88f92:	9806      	ldr	r0, [sp, #24]
   88f94:	aa10      	add	r2, sp, #64	; 0x40
   88f96:	f7ff fa7f 	bl	88498 <__sprint_r.part.0>
   88f9a:	2800      	cmp	r0, #0
   88f9c:	f47f ac41 	bne.w	88822 <_vfiprintf_r+0x312>
   88fa0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   88fa4:	e478      	b.n	88898 <_vfiprintf_r+0x388>
   88fa6:	ac3c      	add	r4, sp, #240	; 0xf0
   88fa8:	f7ff bbb4 	b.w	88714 <_vfiprintf_r+0x204>
   88fac:	4601      	mov	r1, r0
   88fae:	f109 0908 	add.w	r9, r9, #8
   88fb2:	3001      	adds	r0, #1
   88fb4:	e4a6      	b.n	88904 <_vfiprintf_r+0x3f4>
   88fb6:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   88fba:	f040 811d 	bne.w	891f8 <_vfiprintf_r+0xce8>
   88fbe:	9b05      	ldr	r3, [sp, #20]
   88fc0:	f853 6b04 	ldr.w	r6, [r3], #4
   88fc4:	9305      	str	r3, [sp, #20]
   88fc6:	f7ff bbe5 	b.w	88794 <_vfiprintf_r+0x284>
   88fca:	05aa      	lsls	r2, r5, #22
   88fcc:	f100 810e 	bmi.w	891ec <_vfiprintf_r+0xcdc>
   88fd0:	ea4f 78e3 	mov.w	r8, r3, asr #31
   88fd4:	461e      	mov	r6, r3
   88fd6:	4643      	mov	r3, r8
   88fd8:	f7ff bb82 	b.w	886e0 <_vfiprintf_r+0x1d0>
   88fdc:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   88fe0:	f040 80fb 	bne.w	891da <_vfiprintf_r+0xcca>
   88fe4:	9a05      	ldr	r2, [sp, #20]
   88fe6:	2301      	movs	r3, #1
   88fe8:	f852 6b04 	ldr.w	r6, [r2], #4
   88fec:	9205      	str	r2, [sp, #20]
   88fee:	f7ff bbd4 	b.w	8879a <_vfiprintf_r+0x28a>
   88ff2:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   88ff6:	f856 2b04 	ldr.w	r2, [r6], #4
   88ffa:	17cb      	asrs	r3, r1, #31
   88ffc:	e9c2 1300 	strd	r1, r3, [r2]
   89000:	9605      	str	r6, [sp, #20]
   89002:	f7ff babe 	b.w	88582 <_vfiprintf_r+0x72>
   89006:	2202      	movs	r2, #2
   89008:	ab0f      	add	r3, sp, #60	; 0x3c
   8900a:	9313      	str	r3, [sp, #76]	; 0x4c
   8900c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   89010:	9214      	str	r2, [sp, #80]	; 0x50
   89012:	e6c7      	b.n	88da4 <_vfiprintf_r+0x894>
   89014:	4a25      	ldr	r2, [pc, #148]	; (890ac <_vfiprintf_r+0xb9c>)
   89016:	9209      	str	r2, [sp, #36]	; 0x24
   89018:	f015 0820 	ands.w	r8, r5, #32
   8901c:	d036      	beq.n	8908c <_vfiprintf_r+0xb7c>
   8901e:	9e05      	ldr	r6, [sp, #20]
   89020:	3607      	adds	r6, #7
   89022:	f026 0607 	bic.w	r6, r6, #7
   89026:	4632      	mov	r2, r6
   89028:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8902c:	f852 6b08 	ldr.w	r6, [r2], #8
   89030:	9205      	str	r2, [sp, #20]
   89032:	07ea      	lsls	r2, r5, #31
   89034:	d509      	bpl.n	8904a <_vfiprintf_r+0xb3a>
   89036:	ea56 0208 	orrs.w	r2, r6, r8
   8903a:	d006      	beq.n	8904a <_vfiprintf_r+0xb3a>
   8903c:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   89040:	2330      	movs	r3, #48	; 0x30
   89042:	f045 0502 	orr.w	r5, r5, #2
   89046:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   8904a:	2302      	movs	r3, #2
   8904c:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   89050:	f7ff bba3 	b.w	8879a <_vfiprintf_r+0x28a>
   89054:	46aa      	mov	sl, r5
   89056:	e4ff      	b.n	88a58 <_vfiprintf_r+0x548>
   89058:	4a15      	ldr	r2, [pc, #84]	; (890b0 <_vfiprintf_r+0xba0>)
   8905a:	9209      	str	r2, [sp, #36]	; 0x24
   8905c:	e7dc      	b.n	89018 <_vfiprintf_r+0xb08>
   8905e:	4620      	mov	r0, r4
   89060:	9605      	str	r6, [sp, #20]
   89062:	f7fd fc65 	bl	86930 <strlen>
   89066:	f04f 0b00 	mov.w	fp, #0
   8906a:	9001      	str	r0, [sp, #4]
   8906c:	f7ff bb52 	b.w	88714 <_vfiprintf_r+0x204>
   89070:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   89074:	2900      	cmp	r1, #0
   89076:	f000 80a6 	beq.w	891c6 <_vfiprintf_r+0xcb6>
   8907a:	2001      	movs	r0, #1
   8907c:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   89080:	9213      	str	r2, [sp, #76]	; 0x4c
   89082:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   89086:	4602      	mov	r2, r0
   89088:	9014      	str	r0, [sp, #80]	; 0x50
   8908a:	e416      	b.n	888ba <_vfiprintf_r+0x3aa>
   8908c:	f015 0210 	ands.w	r2, r5, #16
   89090:	d114      	bne.n	890bc <_vfiprintf_r+0xbac>
   89092:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   89096:	d00d      	beq.n	890b4 <_vfiprintf_r+0xba4>
   89098:	9e05      	ldr	r6, [sp, #20]
   8909a:	4690      	mov	r8, r2
   8909c:	f856 2b04 	ldr.w	r2, [r6], #4
   890a0:	9605      	str	r6, [sp, #20]
   890a2:	b296      	uxth	r6, r2
   890a4:	e7c5      	b.n	89032 <_vfiprintf_r+0xb22>
   890a6:	bf00      	nop
   890a8:	0008d534 	.word	0x0008d534
   890ac:	0008d4f4 	.word	0x0008d4f4
   890b0:	0008d4e0 	.word	0x0008d4e0
   890b4:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   890b8:	f040 80a6 	bne.w	89208 <_vfiprintf_r+0xcf8>
   890bc:	9a05      	ldr	r2, [sp, #20]
   890be:	f852 6b04 	ldr.w	r6, [r2], #4
   890c2:	9205      	str	r2, [sp, #20]
   890c4:	e7b5      	b.n	89032 <_vfiprintf_r+0xb22>
   890c6:	2300      	movs	r3, #0
   890c8:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   890cc:	f8cd b004 	str.w	fp, [sp, #4]
   890d0:	f8cd a01c 	str.w	sl, [sp, #28]
   890d4:	46bb      	mov	fp, r7
   890d6:	f8cd 9020 	str.w	r9, [sp, #32]
   890da:	469a      	mov	sl, r3
   890dc:	4617      	mov	r7, r2
   890de:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   890e2:	ad3c      	add	r5, sp, #240	; 0xf0
   890e4:	e00c      	b.n	89100 <_vfiprintf_r+0xbf0>
   890e6:	2300      	movs	r3, #0
   890e8:	4630      	mov	r0, r6
   890ea:	4641      	mov	r1, r8
   890ec:	220a      	movs	r2, #10
   890ee:	f004 f827 	bl	8d140 <__aeabi_uldivmod>
   890f2:	2e0a      	cmp	r6, #10
   890f4:	f178 0300 	sbcs.w	r3, r8, #0
   890f8:	d31b      	bcc.n	89132 <_vfiprintf_r+0xc22>
   890fa:	4606      	mov	r6, r0
   890fc:	4688      	mov	r8, r1
   890fe:	4625      	mov	r5, r4
   89100:	4630      	mov	r0, r6
   89102:	4641      	mov	r1, r8
   89104:	220a      	movs	r2, #10
   89106:	2300      	movs	r3, #0
   89108:	f004 f81a 	bl	8d140 <__aeabi_uldivmod>
   8910c:	3230      	adds	r2, #48	; 0x30
   8910e:	1e6c      	subs	r4, r5, #1
   89110:	f10a 0a01 	add.w	sl, sl, #1
   89114:	f805 2c01 	strb.w	r2, [r5, #-1]
   89118:	2f00      	cmp	r7, #0
   8911a:	d0e4      	beq.n	890e6 <_vfiprintf_r+0xbd6>
   8911c:	f899 3000 	ldrb.w	r3, [r9]
   89120:	4553      	cmp	r3, sl
   89122:	d1e0      	bne.n	890e6 <_vfiprintf_r+0xbd6>
   89124:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   89128:	d0dd      	beq.n	890e6 <_vfiprintf_r+0xbd6>
   8912a:	2e0a      	cmp	r6, #10
   8912c:	f178 0300 	sbcs.w	r3, r8, #0
   89130:	d22e      	bcs.n	89190 <_vfiprintf_r+0xc80>
   89132:	f8dd a01c 	ldr.w	sl, [sp, #28]
   89136:	ab3c      	add	r3, sp, #240	; 0xf0
   89138:	1b1b      	subs	r3, r3, r4
   8913a:	465f      	mov	r7, fp
   8913c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   89140:	f8dd b004 	ldr.w	fp, [sp, #4]
   89144:	4655      	mov	r5, sl
   89146:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8914a:	9301      	str	r3, [sp, #4]
   8914c:	f7ff bae2 	b.w	88714 <_vfiprintf_r+0x204>
   89150:	46aa      	mov	sl, r5
   89152:	f7ff bad2 	b.w	886fa <_vfiprintf_r+0x1ea>
   89156:	2b01      	cmp	r3, #1
   89158:	46aa      	mov	sl, r5
   8915a:	f47f ad06 	bne.w	88b6a <_vfiprintf_r+0x65a>
   8915e:	f7ff bad1 	b.w	88704 <_vfiprintf_r+0x1f4>
   89162:	9e05      	ldr	r6, [sp, #20]
   89164:	9a04      	ldr	r2, [sp, #16]
   89166:	f856 3b04 	ldr.w	r3, [r6], #4
   8916a:	601a      	str	r2, [r3, #0]
   8916c:	9605      	str	r6, [sp, #20]
   8916e:	f7ff ba08 	b.w	88582 <_vfiprintf_r+0x72>
   89172:	f1bb 0f06 	cmp.w	fp, #6
   89176:	46d8      	mov	r8, fp
   89178:	bf28      	it	cs
   8917a:	f04f 0806 	movcs.w	r8, #6
   8917e:	4c47      	ldr	r4, [pc, #284]	; (8929c <_vfiprintf_r+0xd8c>)
   89180:	f8cd 8004 	str.w	r8, [sp, #4]
   89184:	9605      	str	r6, [sp, #20]
   89186:	f7ff bb75 	b.w	88874 <_vfiprintf_r+0x364>
   8918a:	f8df a114 	ldr.w	sl, [pc, #276]	; 892a0 <_vfiprintf_r+0xd90>
   8918e:	e5c9      	b.n	88d24 <_vfiprintf_r+0x814>
   89190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89192:	990b      	ldr	r1, [sp, #44]	; 0x2c
   89194:	1ae4      	subs	r4, r4, r3
   89196:	461a      	mov	r2, r3
   89198:	4620      	mov	r0, r4
   8919a:	f7fd fbf7 	bl	8698c <strncpy>
   8919e:	f899 3001 	ldrb.w	r3, [r9, #1]
   891a2:	b10b      	cbz	r3, 891a8 <_vfiprintf_r+0xc98>
   891a4:	f109 0901 	add.w	r9, r9, #1
   891a8:	4630      	mov	r0, r6
   891aa:	4641      	mov	r1, r8
   891ac:	220a      	movs	r2, #10
   891ae:	2300      	movs	r3, #0
   891b0:	f04f 0a00 	mov.w	sl, #0
   891b4:	f003 ffc4 	bl	8d140 <__aeabi_uldivmod>
   891b8:	e79f      	b.n	890fa <_vfiprintf_r+0xbea>
   891ba:	2001      	movs	r0, #1
   891bc:	4611      	mov	r1, r2
   891be:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   891c2:	f7ff bb9f 	b.w	88904 <_vfiprintf_r+0x3f4>
   891c6:	9b07      	ldr	r3, [sp, #28]
   891c8:	2b00      	cmp	r3, #0
   891ca:	f47f ade3 	bne.w	88d94 <_vfiprintf_r+0x884>
   891ce:	4611      	mov	r1, r2
   891d0:	2001      	movs	r0, #1
   891d2:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   891d6:	f7ff bb95 	b.w	88904 <_vfiprintf_r+0x3f4>
   891da:	9e05      	ldr	r6, [sp, #20]
   891dc:	4690      	mov	r8, r2
   891de:	f856 2b04 	ldr.w	r2, [r6], #4
   891e2:	2301      	movs	r3, #1
   891e4:	9605      	str	r6, [sp, #20]
   891e6:	b2d6      	uxtb	r6, r2
   891e8:	f7ff bad7 	b.w	8879a <_vfiprintf_r+0x28a>
   891ec:	f343 18c0 	sbfx	r8, r3, #7, #1
   891f0:	b25e      	sxtb	r6, r3
   891f2:	4643      	mov	r3, r8
   891f4:	f7ff ba74 	b.w	886e0 <_vfiprintf_r+0x1d0>
   891f8:	9e05      	ldr	r6, [sp, #20]
   891fa:	4690      	mov	r8, r2
   891fc:	f856 3b04 	ldr.w	r3, [r6], #4
   89200:	9605      	str	r6, [sp, #20]
   89202:	b2de      	uxtb	r6, r3
   89204:	f7ff bac6 	b.w	88794 <_vfiprintf_r+0x284>
   89208:	9e05      	ldr	r6, [sp, #20]
   8920a:	4688      	mov	r8, r1
   8920c:	f856 2b04 	ldr.w	r2, [r6], #4
   89210:	9605      	str	r6, [sp, #20]
   89212:	b2d6      	uxtb	r6, r2
   89214:	e70d      	b.n	89032 <_vfiprintf_r+0xb22>
   89216:	9e05      	ldr	r6, [sp, #20]
   89218:	9a04      	ldr	r2, [sp, #16]
   8921a:	f856 3b04 	ldr.w	r3, [r6], #4
   8921e:	801a      	strh	r2, [r3, #0]
   89220:	9605      	str	r6, [sp, #20]
   89222:	f7ff b9ae 	b.w	88582 <_vfiprintf_r+0x72>
   89226:	6d88      	ldr	r0, [r1, #88]	; 0x58
   89228:	f001 fde6 	bl	8adf8 <__retarget_lock_release_recursive>
   8922c:	f7ff ba99 	b.w	88762 <_vfiprintf_r+0x252>
   89230:	f8cd b004 	str.w	fp, [sp, #4]
   89234:	9605      	str	r6, [sp, #20]
   89236:	4683      	mov	fp, r0
   89238:	f7ff ba6c 	b.w	88714 <_vfiprintf_r+0x204>
   8923c:	9911      	ldr	r1, [sp, #68]	; 0x44
   8923e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   89240:	f8df a060 	ldr.w	sl, [pc, #96]	; 892a4 <_vfiprintf_r+0xd94>
   89244:	3101      	adds	r1, #1
   89246:	e5f0      	b.n	88e2a <_vfiprintf_r+0x91a>
   89248:	9902      	ldr	r1, [sp, #8]
   8924a:	9806      	ldr	r0, [sp, #24]
   8924c:	aa10      	add	r2, sp, #64	; 0x40
   8924e:	f7ff f923 	bl	88498 <__sprint_r.part.0>
   89252:	2800      	cmp	r0, #0
   89254:	f43f aae3 	beq.w	8881e <_vfiprintf_r+0x30e>
   89258:	f7ff bae3 	b.w	88822 <_vfiprintf_r+0x312>
   8925c:	9811      	ldr	r0, [sp, #68]	; 0x44
   8925e:	f8df a044 	ldr.w	sl, [pc, #68]	; 892a4 <_vfiprintf_r+0xd94>
   89262:	3001      	adds	r0, #1
   89264:	e631      	b.n	88eca <_vfiprintf_r+0x9ba>
   89266:	9b02      	ldr	r3, [sp, #8]
   89268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   8926a:	07db      	lsls	r3, r3, #31
   8926c:	d407      	bmi.n	8927e <_vfiprintf_r+0xd6e>
   8926e:	9b02      	ldr	r3, [sp, #8]
   89270:	899b      	ldrh	r3, [r3, #12]
   89272:	059f      	lsls	r7, r3, #22
   89274:	d403      	bmi.n	8927e <_vfiprintf_r+0xd6e>
   89276:	9b02      	ldr	r3, [sp, #8]
   89278:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8927a:	f001 fdbd 	bl	8adf8 <__retarget_lock_release_recursive>
   8927e:	f04f 33ff 	mov.w	r3, #4294967295
   89282:	9304      	str	r3, [sp, #16]
   89284:	f7ff bad6 	b.w	88834 <_vfiprintf_r+0x324>
   89288:	9a05      	ldr	r2, [sp, #20]
   8928a:	787b      	ldrb	r3, [r7, #1]
   8928c:	460f      	mov	r7, r1
   8928e:	f852 1b04 	ldr.w	r1, [r2], #4
   89292:	9205      	str	r2, [sp, #20]
   89294:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   89298:	f7ff b993 	b.w	885c2 <_vfiprintf_r+0xb2>
   8929c:	0008d508 	.word	0x0008d508
   892a0:	0008d544 	.word	0x0008d544
   892a4:	0008d534 	.word	0x0008d534

000892a8 <__sbprintf>:
   892a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   892aa:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   892ae:	4615      	mov	r5, r2
   892b0:	2400      	movs	r4, #0
   892b2:	4606      	mov	r6, r0
   892b4:	461f      	mov	r7, r3
   892b6:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   892ba:	ab1a      	add	r3, sp, #104	; 0x68
   892bc:	9300      	str	r3, [sp, #0]
   892be:	9304      	str	r3, [sp, #16]
   892c0:	898b      	ldrh	r3, [r1, #12]
   892c2:	a816      	add	r0, sp, #88	; 0x58
   892c4:	f023 0302 	bic.w	r3, r3, #2
   892c8:	f8ad 300c 	strh.w	r3, [sp, #12]
   892cc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   892ce:	9406      	str	r4, [sp, #24]
   892d0:	9319      	str	r3, [sp, #100]	; 0x64
   892d2:	89cb      	ldrh	r3, [r1, #14]
   892d4:	460c      	mov	r4, r1
   892d6:	f8ad 300e 	strh.w	r3, [sp, #14]
   892da:	69cb      	ldr	r3, [r1, #28]
   892dc:	f8cd c008 	str.w	ip, [sp, #8]
   892e0:	9307      	str	r3, [sp, #28]
   892e2:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   892e4:	f8cd c014 	str.w	ip, [sp, #20]
   892e8:	9309      	str	r3, [sp, #36]	; 0x24
   892ea:	f001 fd7f 	bl	8adec <__retarget_lock_init_recursive>
   892ee:	462a      	mov	r2, r5
   892f0:	463b      	mov	r3, r7
   892f2:	4669      	mov	r1, sp
   892f4:	4630      	mov	r0, r6
   892f6:	f7ff f90b 	bl	88510 <_vfiprintf_r>
   892fa:	1e05      	subs	r5, r0, #0
   892fc:	db07      	blt.n	8930e <__sbprintf+0x66>
   892fe:	4669      	mov	r1, sp
   89300:	4630      	mov	r0, r6
   89302:	f001 f91d 	bl	8a540 <_fflush_r>
   89306:	2800      	cmp	r0, #0
   89308:	bf18      	it	ne
   8930a:	f04f 35ff 	movne.w	r5, #4294967295
   8930e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   89312:	065b      	lsls	r3, r3, #25
   89314:	d503      	bpl.n	8931e <__sbprintf+0x76>
   89316:	89a3      	ldrh	r3, [r4, #12]
   89318:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8931c:	81a3      	strh	r3, [r4, #12]
   8931e:	9816      	ldr	r0, [sp, #88]	; 0x58
   89320:	f001 fd66 	bl	8adf0 <__retarget_lock_close_recursive>
   89324:	4628      	mov	r0, r5
   89326:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8932a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008932c <__swsetup_r>:
   8932c:	b538      	push	{r3, r4, r5, lr}
   8932e:	4b33      	ldr	r3, [pc, #204]	; (893fc <__swsetup_r+0xd0>)
   89330:	4605      	mov	r5, r0
   89332:	681b      	ldr	r3, [r3, #0]
   89334:	460c      	mov	r4, r1
   89336:	b10b      	cbz	r3, 8933c <__swsetup_r+0x10>
   89338:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8933a:	b312      	cbz	r2, 89382 <__swsetup_r+0x56>
   8933c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   89340:	0718      	lsls	r0, r3, #28
   89342:	b29a      	uxth	r2, r3
   89344:	d525      	bpl.n	89392 <__swsetup_r+0x66>
   89346:	6921      	ldr	r1, [r4, #16]
   89348:	2900      	cmp	r1, #0
   8934a:	d02d      	beq.n	893a8 <__swsetup_r+0x7c>
   8934c:	f012 0001 	ands.w	r0, r2, #1
   89350:	d007      	beq.n	89362 <__swsetup_r+0x36>
   89352:	2500      	movs	r5, #0
   89354:	6960      	ldr	r0, [r4, #20]
   89356:	60a5      	str	r5, [r4, #8]
   89358:	4240      	negs	r0, r0
   8935a:	61a0      	str	r0, [r4, #24]
   8935c:	b139      	cbz	r1, 8936e <__swsetup_r+0x42>
   8935e:	2000      	movs	r0, #0
   89360:	bd38      	pop	{r3, r4, r5, pc}
   89362:	0795      	lsls	r5, r2, #30
   89364:	bf58      	it	pl
   89366:	6960      	ldrpl	r0, [r4, #20]
   89368:	60a0      	str	r0, [r4, #8]
   8936a:	2900      	cmp	r1, #0
   8936c:	d1f7      	bne.n	8935e <__swsetup_r+0x32>
   8936e:	0612      	lsls	r2, r2, #24
   89370:	bf58      	it	pl
   89372:	4608      	movpl	r0, r1
   89374:	d5f4      	bpl.n	89360 <__swsetup_r+0x34>
   89376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8937a:	f04f 30ff 	mov.w	r0, #4294967295
   8937e:	81a3      	strh	r3, [r4, #12]
   89380:	bd38      	pop	{r3, r4, r5, pc}
   89382:	4618      	mov	r0, r3
   89384:	f001 f910 	bl	8a5a8 <__sinit>
   89388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8938c:	0718      	lsls	r0, r3, #28
   8938e:	b29a      	uxth	r2, r3
   89390:	d4d9      	bmi.n	89346 <__swsetup_r+0x1a>
   89392:	06d1      	lsls	r1, r2, #27
   89394:	d52a      	bpl.n	893ec <__swsetup_r+0xc0>
   89396:	0752      	lsls	r2, r2, #29
   89398:	d414      	bmi.n	893c4 <__swsetup_r+0x98>
   8939a:	6921      	ldr	r1, [r4, #16]
   8939c:	f043 0308 	orr.w	r3, r3, #8
   893a0:	81a3      	strh	r3, [r4, #12]
   893a2:	b29a      	uxth	r2, r3
   893a4:	2900      	cmp	r1, #0
   893a6:	d1d1      	bne.n	8934c <__swsetup_r+0x20>
   893a8:	f402 7020 	and.w	r0, r2, #640	; 0x280
   893ac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   893b0:	d0cc      	beq.n	8934c <__swsetup_r+0x20>
   893b2:	4621      	mov	r1, r4
   893b4:	4628      	mov	r0, r5
   893b6:	f001 fd21 	bl	8adfc <__smakebuf_r>
   893ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   893be:	6921      	ldr	r1, [r4, #16]
   893c0:	b29a      	uxth	r2, r3
   893c2:	e7c3      	b.n	8934c <__swsetup_r+0x20>
   893c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   893c6:	b151      	cbz	r1, 893de <__swsetup_r+0xb2>
   893c8:	f104 0240 	add.w	r2, r4, #64	; 0x40
   893cc:	4291      	cmp	r1, r2
   893ce:	d004      	beq.n	893da <__swsetup_r+0xae>
   893d0:	4628      	mov	r0, r5
   893d2:	f001 fa65 	bl	8a8a0 <_free_r>
   893d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   893da:	2200      	movs	r2, #0
   893dc:	6322      	str	r2, [r4, #48]	; 0x30
   893de:	2200      	movs	r2, #0
   893e0:	6921      	ldr	r1, [r4, #16]
   893e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   893e6:	e9c4 1200 	strd	r1, r2, [r4]
   893ea:	e7d7      	b.n	8939c <__swsetup_r+0x70>
   893ec:	2209      	movs	r2, #9
   893ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   893f2:	602a      	str	r2, [r5, #0]
   893f4:	f04f 30ff 	mov.w	r0, #4294967295
   893f8:	81a3      	strh	r3, [r4, #12]
   893fa:	bd38      	pop	{r3, r4, r5, pc}
   893fc:	20000474 	.word	0x20000474

00089400 <register_fini>:
   89400:	4b02      	ldr	r3, [pc, #8]	; (8940c <register_fini+0xc>)
   89402:	b113      	cbz	r3, 8940a <register_fini+0xa>
   89404:	4802      	ldr	r0, [pc, #8]	; (89410 <register_fini+0x10>)
   89406:	f000 b805 	b.w	89414 <atexit>
   8940a:	4770      	bx	lr
   8940c:	00000000 	.word	0x00000000
   89410:	0008a6cd 	.word	0x0008a6cd

00089414 <atexit>:
   89414:	2300      	movs	r3, #0
   89416:	4601      	mov	r1, r0
   89418:	461a      	mov	r2, r3
   8941a:	4618      	mov	r0, r3
   8941c:	f003 b82a 	b.w	8c474 <__register_exitproc>

00089420 <quorem>:
   89420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89424:	6903      	ldr	r3, [r0, #16]
   89426:	690c      	ldr	r4, [r1, #16]
   89428:	b085      	sub	sp, #20
   8942a:	42a3      	cmp	r3, r4
   8942c:	f2c0 8089 	blt.w	89542 <quorem+0x122>
   89430:	3c01      	subs	r4, #1
   89432:	f101 0514 	add.w	r5, r1, #20
   89436:	00a3      	lsls	r3, r4, #2
   89438:	f100 0814 	add.w	r8, r0, #20
   8943c:	9301      	str	r3, [sp, #4]
   8943e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   89442:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   89446:	3301      	adds	r3, #1
   89448:	468a      	mov	sl, r1
   8944a:	429a      	cmp	r2, r3
   8944c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   89450:	4681      	mov	r9, r0
   89452:	fbb2 f6f3 	udiv	r6, r2, r3
   89456:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   8945a:	9102      	str	r1, [sp, #8]
   8945c:	d33a      	bcc.n	894d4 <quorem+0xb4>
   8945e:	2100      	movs	r1, #0
   89460:	46ae      	mov	lr, r5
   89462:	4640      	mov	r0, r8
   89464:	460a      	mov	r2, r1
   89466:	46a3      	mov	fp, r4
   89468:	9503      	str	r5, [sp, #12]
   8946a:	f85e 5b04 	ldr.w	r5, [lr], #4
   8946e:	6804      	ldr	r4, [r0, #0]
   89470:	b2ab      	uxth	r3, r5
   89472:	fb06 1303 	mla	r3, r6, r3, r1
   89476:	0c2d      	lsrs	r5, r5, #16
   89478:	0c19      	lsrs	r1, r3, #16
   8947a:	fb06 1105 	mla	r1, r6, r5, r1
   8947e:	b29b      	uxth	r3, r3
   89480:	1ad2      	subs	r2, r2, r3
   89482:	fa1f fc84 	uxth.w	ip, r4
   89486:	4494      	add	ip, r2
   89488:	b28a      	uxth	r2, r1
   8948a:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   8948e:	eb02 422c 	add.w	r2, r2, ip, asr #16
   89492:	fa1f fc8c 	uxth.w	ip, ip
   89496:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   8949a:	4577      	cmp	r7, lr
   8949c:	f840 3b04 	str.w	r3, [r0], #4
   894a0:	ea4f 4111 	mov.w	r1, r1, lsr #16
   894a4:	ea4f 4222 	mov.w	r2, r2, asr #16
   894a8:	d2df      	bcs.n	8946a <quorem+0x4a>
   894aa:	9b01      	ldr	r3, [sp, #4]
   894ac:	465c      	mov	r4, fp
   894ae:	f858 3003 	ldr.w	r3, [r8, r3]
   894b2:	9d03      	ldr	r5, [sp, #12]
   894b4:	b973      	cbnz	r3, 894d4 <quorem+0xb4>
   894b6:	9b02      	ldr	r3, [sp, #8]
   894b8:	3b04      	subs	r3, #4
   894ba:	4598      	cmp	r8, r3
   894bc:	d304      	bcc.n	894c8 <quorem+0xa8>
   894be:	e007      	b.n	894d0 <quorem+0xb0>
   894c0:	4598      	cmp	r8, r3
   894c2:	f104 34ff 	add.w	r4, r4, #4294967295
   894c6:	d203      	bcs.n	894d0 <quorem+0xb0>
   894c8:	f853 2904 	ldr.w	r2, [r3], #-4
   894cc:	2a00      	cmp	r2, #0
   894ce:	d0f7      	beq.n	894c0 <quorem+0xa0>
   894d0:	f8c9 4010 	str.w	r4, [r9, #16]
   894d4:	4651      	mov	r1, sl
   894d6:	4648      	mov	r0, r9
   894d8:	f002 fb0e 	bl	8baf8 <__mcmp>
   894dc:	2800      	cmp	r0, #0
   894de:	db2c      	blt.n	8953a <quorem+0x11a>
   894e0:	4640      	mov	r0, r8
   894e2:	2300      	movs	r3, #0
   894e4:	3601      	adds	r6, #1
   894e6:	f855 1b04 	ldr.w	r1, [r5], #4
   894ea:	f8d0 c000 	ldr.w	ip, [r0]
   894ee:	b28a      	uxth	r2, r1
   894f0:	1a9a      	subs	r2, r3, r2
   894f2:	fa1f fe8c 	uxth.w	lr, ip
   894f6:	0c0b      	lsrs	r3, r1, #16
   894f8:	4472      	add	r2, lr
   894fa:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   894fe:	eb03 4322 	add.w	r3, r3, r2, asr #16
   89502:	b292      	uxth	r2, r2
   89504:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   89508:	42af      	cmp	r7, r5
   8950a:	f840 2b04 	str.w	r2, [r0], #4
   8950e:	ea4f 4323 	mov.w	r3, r3, asr #16
   89512:	d2e8      	bcs.n	894e6 <quorem+0xc6>
   89514:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   89518:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   8951c:	b96a      	cbnz	r2, 8953a <quorem+0x11a>
   8951e:	3b04      	subs	r3, #4
   89520:	4598      	cmp	r8, r3
   89522:	d304      	bcc.n	8952e <quorem+0x10e>
   89524:	e007      	b.n	89536 <quorem+0x116>
   89526:	4598      	cmp	r8, r3
   89528:	f104 34ff 	add.w	r4, r4, #4294967295
   8952c:	d203      	bcs.n	89536 <quorem+0x116>
   8952e:	f853 2904 	ldr.w	r2, [r3], #-4
   89532:	2a00      	cmp	r2, #0
   89534:	d0f7      	beq.n	89526 <quorem+0x106>
   89536:	f8c9 4010 	str.w	r4, [r9, #16]
   8953a:	4630      	mov	r0, r6
   8953c:	b005      	add	sp, #20
   8953e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89542:	2000      	movs	r0, #0
   89544:	b005      	add	sp, #20
   89546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8954a:	bf00      	nop
   8954c:	0000      	movs	r0, r0
   8954e:	0000      	movs	r0, r0

00089550 <_dtoa_r>:
   89550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89554:	4690      	mov	r8, r2
   89556:	4699      	mov	r9, r3
   89558:	6c01      	ldr	r1, [r0, #64]	; 0x40
   8955a:	b099      	sub	sp, #100	; 0x64
   8955c:	4604      	mov	r4, r0
   8955e:	e9cd 8904 	strd	r8, r9, [sp, #16]
   89562:	9d25      	ldr	r5, [sp, #148]	; 0x94
   89564:	b141      	cbz	r1, 89578 <_dtoa_r+0x28>
   89566:	2301      	movs	r3, #1
   89568:	6c42      	ldr	r2, [r0, #68]	; 0x44
   8956a:	4093      	lsls	r3, r2
   8956c:	608b      	str	r3, [r1, #8]
   8956e:	604a      	str	r2, [r1, #4]
   89570:	f002 f86c 	bl	8b64c <_Bfree>
   89574:	2300      	movs	r3, #0
   89576:	6423      	str	r3, [r4, #64]	; 0x40
   89578:	f1b9 0a00 	subs.w	sl, r9, #0
   8957c:	bfb4      	ite	lt
   8957e:	2301      	movlt	r3, #1
   89580:	2300      	movge	r3, #0
   89582:	602b      	str	r3, [r5, #0]
   89584:	4b76      	ldr	r3, [pc, #472]	; (89760 <_dtoa_r+0x210>)
   89586:	bfbc      	itt	lt
   89588:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   8958c:	f8cd a014 	strlt.w	sl, [sp, #20]
   89590:	ea33 030a 	bics.w	r3, r3, sl
   89594:	f000 80aa 	beq.w	896ec <_dtoa_r+0x19c>
   89598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   8959c:	4610      	mov	r0, r2
   8959e:	4619      	mov	r1, r3
   895a0:	2200      	movs	r2, #0
   895a2:	2300      	movs	r3, #0
   895a4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   895a8:	f003 fd5a 	bl	8d060 <__aeabi_dcmpeq>
   895ac:	4607      	mov	r7, r0
   895ae:	b170      	cbz	r0, 895ce <_dtoa_r+0x7e>
   895b0:	2301      	movs	r3, #1
   895b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   895b4:	6013      	str	r3, [r2, #0]
   895b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   895b8:	2b00      	cmp	r3, #0
   895ba:	f000 82e6 	beq.w	89b8a <_dtoa_r+0x63a>
   895be:	4869      	ldr	r0, [pc, #420]	; (89764 <_dtoa_r+0x214>)
   895c0:	6018      	str	r0, [r3, #0]
   895c2:	1e43      	subs	r3, r0, #1
   895c4:	9303      	str	r3, [sp, #12]
   895c6:	9803      	ldr	r0, [sp, #12]
   895c8:	b019      	add	sp, #100	; 0x64
   895ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   895ce:	ab16      	add	r3, sp, #88	; 0x58
   895d0:	9301      	str	r3, [sp, #4]
   895d2:	ab17      	add	r3, sp, #92	; 0x5c
   895d4:	9300      	str	r3, [sp, #0]
   895d6:	4620      	mov	r0, r4
   895d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   895dc:	f002 fb52 	bl	8bc84 <__d2b>
   895e0:	ea5f 561a 	movs.w	r6, sl, lsr #20
   895e4:	4605      	mov	r5, r0
   895e6:	f040 8097 	bne.w	89718 <_dtoa_r+0x1c8>
   895ea:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   895ee:	443e      	add	r6, r7
   895f0:	f206 4032 	addw	r0, r6, #1074	; 0x432
   895f4:	2820      	cmp	r0, #32
   895f6:	f340 83b7 	ble.w	89d68 <_dtoa_r+0x818>
   895fa:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   895fe:	fa0a fa00 	lsl.w	sl, sl, r0
   89602:	f206 4012 	addw	r0, r6, #1042	; 0x412
   89606:	fa28 f000 	lsr.w	r0, r8, r0
   8960a:	ea4a 0000 	orr.w	r0, sl, r0
   8960e:	f003 fa45 	bl	8ca9c <__aeabi_ui2d>
   89612:	2301      	movs	r3, #1
   89614:	3e01      	subs	r6, #1
   89616:	930f      	str	r3, [sp, #60]	; 0x3c
   89618:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   8961c:	2200      	movs	r2, #0
   8961e:	4b52      	ldr	r3, [pc, #328]	; (89768 <_dtoa_r+0x218>)
   89620:	f003 f8fe 	bl	8c820 <__aeabi_dsub>
   89624:	a348      	add	r3, pc, #288	; (adr r3, 89748 <_dtoa_r+0x1f8>)
   89626:	e9d3 2300 	ldrd	r2, r3, [r3]
   8962a:	f003 fab1 	bl	8cb90 <__aeabi_dmul>
   8962e:	a348      	add	r3, pc, #288	; (adr r3, 89750 <_dtoa_r+0x200>)
   89630:	e9d3 2300 	ldrd	r2, r3, [r3]
   89634:	f003 f8f6 	bl	8c824 <__adddf3>
   89638:	4680      	mov	r8, r0
   8963a:	4630      	mov	r0, r6
   8963c:	4689      	mov	r9, r1
   8963e:	f003 fa3d 	bl	8cabc <__aeabi_i2d>
   89642:	a345      	add	r3, pc, #276	; (adr r3, 89758 <_dtoa_r+0x208>)
   89644:	e9d3 2300 	ldrd	r2, r3, [r3]
   89648:	f003 faa2 	bl	8cb90 <__aeabi_dmul>
   8964c:	4602      	mov	r2, r0
   8964e:	460b      	mov	r3, r1
   89650:	4640      	mov	r0, r8
   89652:	4649      	mov	r1, r9
   89654:	f003 f8e6 	bl	8c824 <__adddf3>
   89658:	4680      	mov	r8, r0
   8965a:	4689      	mov	r9, r1
   8965c:	f003 fd48 	bl	8d0f0 <__aeabi_d2iz>
   89660:	2200      	movs	r2, #0
   89662:	4683      	mov	fp, r0
   89664:	2300      	movs	r3, #0
   89666:	4640      	mov	r0, r8
   89668:	4649      	mov	r1, r9
   8966a:	f003 fd03 	bl	8d074 <__aeabi_dcmplt>
   8966e:	2800      	cmp	r0, #0
   89670:	f040 827e 	bne.w	89b70 <_dtoa_r+0x620>
   89674:	f1bb 0f16 	cmp.w	fp, #22
   89678:	f200 826d 	bhi.w	89b56 <_dtoa_r+0x606>
   8967c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   89680:	4b3a      	ldr	r3, [pc, #232]	; (8976c <_dtoa_r+0x21c>)
   89682:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   89686:	e9d3 2300 	ldrd	r2, r3, [r3]
   8968a:	f003 fcf3 	bl	8d074 <__aeabi_dcmplt>
   8968e:	2800      	cmp	r0, #0
   89690:	d072      	beq.n	89778 <_dtoa_r+0x228>
   89692:	2300      	movs	r3, #0
   89694:	1bbe      	subs	r6, r7, r6
   89696:	930e      	str	r3, [sp, #56]	; 0x38
   89698:	1e73      	subs	r3, r6, #1
   8969a:	f10b 3bff 	add.w	fp, fp, #4294967295
   8969e:	9306      	str	r3, [sp, #24]
   896a0:	f100 8260 	bmi.w	89b64 <_dtoa_r+0x614>
   896a4:	2300      	movs	r3, #0
   896a6:	9309      	str	r3, [sp, #36]	; 0x24
   896a8:	f1bb 0f00 	cmp.w	fp, #0
   896ac:	da6b      	bge.n	89786 <_dtoa_r+0x236>
   896ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
   896b0:	f8cd b01c 	str.w	fp, [sp, #28]
   896b4:	eba3 030b 	sub.w	r3, r3, fp
   896b8:	9309      	str	r3, [sp, #36]	; 0x24
   896ba:	f1cb 0300 	rsb	r3, fp, #0
   896be:	930d      	str	r3, [sp, #52]	; 0x34
   896c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   896c2:	f04f 0b00 	mov.w	fp, #0
   896c6:	2b09      	cmp	r3, #9
   896c8:	d866      	bhi.n	89798 <_dtoa_r+0x248>
   896ca:	2b05      	cmp	r3, #5
   896cc:	f340 834a 	ble.w	89d64 <_dtoa_r+0x814>
   896d0:	2600      	movs	r6, #0
   896d2:	3b04      	subs	r3, #4
   896d4:	9322      	str	r3, [sp, #136]	; 0x88
   896d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   896d8:	3b02      	subs	r3, #2
   896da:	2b03      	cmp	r3, #3
   896dc:	f200 866c 	bhi.w	8a3b8 <_dtoa_r+0xe68>
   896e0:	e8df f013 	tbh	[pc, r3, lsl #1]
   896e4:	045e0461 	.word	0x045e0461
   896e8:	04380455 	.word	0x04380455
   896ec:	f242 730f 	movw	r3, #9999	; 0x270f
   896f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
   896f2:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   896f6:	6013      	str	r3, [r2, #0]
   896f8:	ea5a 0308 	orrs.w	r3, sl, r8
   896fc:	d11a      	bne.n	89734 <_dtoa_r+0x1e4>
   896fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89700:	2b00      	cmp	r3, #0
   89702:	f000 8668 	beq.w	8a3d6 <_dtoa_r+0xe86>
   89706:	4b1a      	ldr	r3, [pc, #104]	; (89770 <_dtoa_r+0x220>)
   89708:	9303      	str	r3, [sp, #12]
   8970a:	3308      	adds	r3, #8
   8970c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   8970e:	9803      	ldr	r0, [sp, #12]
   89710:	6013      	str	r3, [r2, #0]
   89712:	b019      	add	sp, #100	; 0x64
   89714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89718:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   8971c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89720:	4608      	mov	r0, r1
   89722:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   89726:	970f      	str	r7, [sp, #60]	; 0x3c
   89728:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   8972c:	9f16      	ldr	r7, [sp, #88]	; 0x58
   8972e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   89732:	e773      	b.n	8961c <_dtoa_r+0xcc>
   89734:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89736:	2b00      	cmp	r3, #0
   89738:	f040 83ef 	bne.w	89f1a <_dtoa_r+0x9ca>
   8973c:	4b0d      	ldr	r3, [pc, #52]	; (89774 <_dtoa_r+0x224>)
   8973e:	9303      	str	r3, [sp, #12]
   89740:	e741      	b.n	895c6 <_dtoa_r+0x76>
   89742:	bf00      	nop
   89744:	f3af 8000 	nop.w
   89748:	636f4361 	.word	0x636f4361
   8974c:	3fd287a7 	.word	0x3fd287a7
   89750:	8b60c8b3 	.word	0x8b60c8b3
   89754:	3fc68a28 	.word	0x3fc68a28
   89758:	509f79fb 	.word	0x509f79fb
   8975c:	3fd34413 	.word	0x3fd34413
   89760:	7ff00000 	.word	0x7ff00000
   89764:	0008d511 	.word	0x0008d511
   89768:	3ff80000 	.word	0x3ff80000
   8976c:	0008d6b0 	.word	0x0008d6b0
   89770:	0008d558 	.word	0x0008d558
   89774:	0008d554 	.word	0x0008d554
   89778:	1bbe      	subs	r6, r7, r6
   8977a:	1e73      	subs	r3, r6, #1
   8977c:	9306      	str	r3, [sp, #24]
   8977e:	f100 848a 	bmi.w	8a096 <_dtoa_r+0xb46>
   89782:	900e      	str	r0, [sp, #56]	; 0x38
   89784:	9009      	str	r0, [sp, #36]	; 0x24
   89786:	9b06      	ldr	r3, [sp, #24]
   89788:	445b      	add	r3, fp
   8978a:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   8978e:	2300      	movs	r3, #0
   89790:	930d      	str	r3, [sp, #52]	; 0x34
   89792:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89794:	2b09      	cmp	r3, #9
   89796:	d998      	bls.n	896ca <_dtoa_r+0x17a>
   89798:	2300      	movs	r3, #0
   8979a:	9322      	str	r3, [sp, #136]	; 0x88
   8979c:	f04f 33ff 	mov.w	r3, #4294967295
   897a0:	2601      	movs	r6, #1
   897a2:	9308      	str	r3, [sp, #32]
   897a4:	2300      	movs	r3, #0
   897a6:	960c      	str	r6, [sp, #48]	; 0x30
   897a8:	9323      	str	r3, [sp, #140]	; 0x8c
   897aa:	2100      	movs	r1, #0
   897ac:	9b08      	ldr	r3, [sp, #32]
   897ae:	6461      	str	r1, [r4, #68]	; 0x44
   897b0:	9312      	str	r3, [sp, #72]	; 0x48
   897b2:	4620      	mov	r0, r4
   897b4:	f001 ff24 	bl	8b600 <_Balloc>
   897b8:	9003      	str	r0, [sp, #12]
   897ba:	2800      	cmp	r0, #0
   897bc:	f000 8604 	beq.w	8a3c8 <_dtoa_r+0xe78>
   897c0:	9b03      	ldr	r3, [sp, #12]
   897c2:	6423      	str	r3, [r4, #64]	; 0x40
   897c4:	9b08      	ldr	r3, [sp, #32]
   897c6:	2b0e      	cmp	r3, #14
   897c8:	f200 8114 	bhi.w	899f4 <_dtoa_r+0x4a4>
   897cc:	2e00      	cmp	r6, #0
   897ce:	f000 8111 	beq.w	899f4 <_dtoa_r+0x4a4>
   897d2:	9907      	ldr	r1, [sp, #28]
   897d4:	2900      	cmp	r1, #0
   897d6:	f340 8460 	ble.w	8a09a <_dtoa_r+0xb4a>
   897da:	4baf      	ldr	r3, [pc, #700]	; (89a98 <_dtoa_r+0x548>)
   897dc:	f001 020f 	and.w	r2, r1, #15
   897e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   897e4:	460a      	mov	r2, r1
   897e6:	e9d3 6700 	ldrd	r6, r7, [r3]
   897ea:	ea4f 1821 	mov.w	r8, r1, asr #4
   897ee:	05d1      	lsls	r1, r2, #23
   897f0:	f140 8417 	bpl.w	8a022 <_dtoa_r+0xad2>
   897f4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   897f8:	4ba8      	ldr	r3, [pc, #672]	; (89a9c <_dtoa_r+0x54c>)
   897fa:	f04f 0a03 	mov.w	sl, #3
   897fe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   89802:	f003 faef 	bl	8cde4 <__aeabi_ddiv>
   89806:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8980a:	f008 080f 	and.w	r8, r8, #15
   8980e:	f1b8 0f00 	cmp.w	r8, #0
   89812:	d013      	beq.n	8983c <_dtoa_r+0x2ec>
   89814:	f8df 9284 	ldr.w	r9, [pc, #644]	; 89a9c <_dtoa_r+0x54c>
   89818:	f018 0f01 	tst.w	r8, #1
   8981c:	d009      	beq.n	89832 <_dtoa_r+0x2e2>
   8981e:	e9d9 2300 	ldrd	r2, r3, [r9]
   89822:	4630      	mov	r0, r6
   89824:	4639      	mov	r1, r7
   89826:	f003 f9b3 	bl	8cb90 <__aeabi_dmul>
   8982a:	4606      	mov	r6, r0
   8982c:	460f      	mov	r7, r1
   8982e:	f10a 0a01 	add.w	sl, sl, #1
   89832:	ea5f 0868 	movs.w	r8, r8, asr #1
   89836:	f109 0908 	add.w	r9, r9, #8
   8983a:	d1ed      	bne.n	89818 <_dtoa_r+0x2c8>
   8983c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89840:	4632      	mov	r2, r6
   89842:	463b      	mov	r3, r7
   89844:	f003 face 	bl	8cde4 <__aeabi_ddiv>
   89848:	4680      	mov	r8, r0
   8984a:	4689      	mov	r9, r1
   8984c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8984e:	b143      	cbz	r3, 89862 <_dtoa_r+0x312>
   89850:	2200      	movs	r2, #0
   89852:	4640      	mov	r0, r8
   89854:	4649      	mov	r1, r9
   89856:	4b92      	ldr	r3, [pc, #584]	; (89aa0 <_dtoa_r+0x550>)
   89858:	f003 fc0c 	bl	8d074 <__aeabi_dcmplt>
   8985c:	2800      	cmp	r0, #0
   8985e:	f040 8535 	bne.w	8a2cc <_dtoa_r+0xd7c>
   89862:	4650      	mov	r0, sl
   89864:	f003 f92a 	bl	8cabc <__aeabi_i2d>
   89868:	4642      	mov	r2, r8
   8986a:	464b      	mov	r3, r9
   8986c:	f003 f990 	bl	8cb90 <__aeabi_dmul>
   89870:	4b8c      	ldr	r3, [pc, #560]	; (89aa4 <_dtoa_r+0x554>)
   89872:	2200      	movs	r2, #0
   89874:	f002 ffd6 	bl	8c824 <__adddf3>
   89878:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   8987c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   89880:	9311      	str	r3, [sp, #68]	; 0x44
   89882:	9b08      	ldr	r3, [sp, #32]
   89884:	2b00      	cmp	r3, #0
   89886:	f000 8097 	beq.w	899b8 <_dtoa_r+0x468>
   8988a:	9b07      	ldr	r3, [sp, #28]
   8988c:	9314      	str	r3, [sp, #80]	; 0x50
   8988e:	9b08      	ldr	r3, [sp, #32]
   89890:	9313      	str	r3, [sp, #76]	; 0x4c
   89892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89894:	2b00      	cmp	r3, #0
   89896:	f000 84a9 	beq.w	8a1ec <_dtoa_r+0xc9c>
   8989a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   8989c:	4b7e      	ldr	r3, [pc, #504]	; (89a98 <_dtoa_r+0x548>)
   8989e:	2000      	movs	r0, #0
   898a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   898a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   898a8:	497f      	ldr	r1, [pc, #508]	; (89aa8 <_dtoa_r+0x558>)
   898aa:	f003 fa9b 	bl	8cde4 <__aeabi_ddiv>
   898ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   898b2:	f002 ffb5 	bl	8c820 <__aeabi_dsub>
   898b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   898ba:	4649      	mov	r1, r9
   898bc:	4640      	mov	r0, r8
   898be:	f003 fc17 	bl	8d0f0 <__aeabi_d2iz>
   898c2:	4607      	mov	r7, r0
   898c4:	f003 f8fa 	bl	8cabc <__aeabi_i2d>
   898c8:	4602      	mov	r2, r0
   898ca:	460b      	mov	r3, r1
   898cc:	4640      	mov	r0, r8
   898ce:	4649      	mov	r1, r9
   898d0:	f002 ffa6 	bl	8c820 <__aeabi_dsub>
   898d4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   898d8:	9e03      	ldr	r6, [sp, #12]
   898da:	3730      	adds	r7, #48	; 0x30
   898dc:	f806 7b01 	strb.w	r7, [r6], #1
   898e0:	4680      	mov	r8, r0
   898e2:	4689      	mov	r9, r1
   898e4:	f003 fbc6 	bl	8d074 <__aeabi_dcmplt>
   898e8:	2800      	cmp	r0, #0
   898ea:	f040 852e 	bne.w	8a34a <_dtoa_r+0xdfa>
   898ee:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   898f2:	2700      	movs	r7, #0
   898f4:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   898f8:	9510      	str	r5, [sp, #64]	; 0x40
   898fa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   898fc:	9413      	str	r4, [sp, #76]	; 0x4c
   898fe:	e02a      	b.n	89956 <_dtoa_r+0x406>
   89900:	3701      	adds	r7, #1
   89902:	42af      	cmp	r7, r5
   89904:	f280 852e 	bge.w	8a364 <_dtoa_r+0xe14>
   89908:	4650      	mov	r0, sl
   8990a:	4659      	mov	r1, fp
   8990c:	2200      	movs	r2, #0
   8990e:	4b67      	ldr	r3, [pc, #412]	; (89aac <_dtoa_r+0x55c>)
   89910:	f003 f93e 	bl	8cb90 <__aeabi_dmul>
   89914:	2200      	movs	r2, #0
   89916:	4b65      	ldr	r3, [pc, #404]	; (89aac <_dtoa_r+0x55c>)
   89918:	4682      	mov	sl, r0
   8991a:	468b      	mov	fp, r1
   8991c:	4640      	mov	r0, r8
   8991e:	4649      	mov	r1, r9
   89920:	f003 f936 	bl	8cb90 <__aeabi_dmul>
   89924:	4689      	mov	r9, r1
   89926:	4680      	mov	r8, r0
   89928:	f003 fbe2 	bl	8d0f0 <__aeabi_d2iz>
   8992c:	4604      	mov	r4, r0
   8992e:	f003 f8c5 	bl	8cabc <__aeabi_i2d>
   89932:	4602      	mov	r2, r0
   89934:	460b      	mov	r3, r1
   89936:	4640      	mov	r0, r8
   89938:	4649      	mov	r1, r9
   8993a:	f002 ff71 	bl	8c820 <__aeabi_dsub>
   8993e:	3430      	adds	r4, #48	; 0x30
   89940:	4652      	mov	r2, sl
   89942:	465b      	mov	r3, fp
   89944:	f806 4b01 	strb.w	r4, [r6], #1
   89948:	4680      	mov	r8, r0
   8994a:	4689      	mov	r9, r1
   8994c:	f003 fb92 	bl	8d074 <__aeabi_dcmplt>
   89950:	2800      	cmp	r0, #0
   89952:	f040 84f8 	bne.w	8a346 <_dtoa_r+0xdf6>
   89956:	4642      	mov	r2, r8
   89958:	464b      	mov	r3, r9
   8995a:	2000      	movs	r0, #0
   8995c:	4950      	ldr	r1, [pc, #320]	; (89aa0 <_dtoa_r+0x550>)
   8995e:	f002 ff5f 	bl	8c820 <__aeabi_dsub>
   89962:	4652      	mov	r2, sl
   89964:	465b      	mov	r3, fp
   89966:	f003 fb85 	bl	8d074 <__aeabi_dcmplt>
   8996a:	2800      	cmp	r0, #0
   8996c:	d0c8      	beq.n	89900 <_dtoa_r+0x3b0>
   8996e:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   89972:	9d10      	ldr	r5, [sp, #64]	; 0x40
   89974:	9a03      	ldr	r2, [sp, #12]
   89976:	9307      	str	r3, [sp, #28]
   89978:	e002      	b.n	89980 <_dtoa_r+0x430>
   8997a:	4296      	cmp	r6, r2
   8997c:	f000 84cd 	beq.w	8a31a <_dtoa_r+0xdca>
   89980:	46b2      	mov	sl, r6
   89982:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   89986:	2b39      	cmp	r3, #57	; 0x39
   89988:	d0f7      	beq.n	8997a <_dtoa_r+0x42a>
   8998a:	3301      	adds	r3, #1
   8998c:	b2db      	uxtb	r3, r3
   8998e:	7033      	strb	r3, [r6, #0]
   89990:	9b07      	ldr	r3, [sp, #28]
   89992:	3301      	adds	r3, #1
   89994:	9307      	str	r3, [sp, #28]
   89996:	e1c8      	b.n	89d2a <_dtoa_r+0x7da>
   89998:	4650      	mov	r0, sl
   8999a:	f003 f88f 	bl	8cabc <__aeabi_i2d>
   8999e:	4642      	mov	r2, r8
   899a0:	464b      	mov	r3, r9
   899a2:	f003 f8f5 	bl	8cb90 <__aeabi_dmul>
   899a6:	4b3f      	ldr	r3, [pc, #252]	; (89aa4 <_dtoa_r+0x554>)
   899a8:	2200      	movs	r2, #0
   899aa:	f002 ff3b 	bl	8c824 <__adddf3>
   899ae:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   899b2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   899b6:	9311      	str	r3, [sp, #68]	; 0x44
   899b8:	4640      	mov	r0, r8
   899ba:	4649      	mov	r1, r9
   899bc:	2200      	movs	r2, #0
   899be:	4b3c      	ldr	r3, [pc, #240]	; (89ab0 <_dtoa_r+0x560>)
   899c0:	f002 ff2e 	bl	8c820 <__aeabi_dsub>
   899c4:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   899c8:	464b      	mov	r3, r9
   899ca:	4642      	mov	r2, r8
   899cc:	4606      	mov	r6, r0
   899ce:	460f      	mov	r7, r1
   899d0:	f003 fb6e 	bl	8d0b0 <__aeabi_dcmpgt>
   899d4:	4681      	mov	r9, r0
   899d6:	2800      	cmp	r0, #0
   899d8:	f040 84af 	bne.w	8a33a <_dtoa_r+0xdea>
   899dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   899e0:	4602      	mov	r2, r0
   899e2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   899e6:	4630      	mov	r0, r6
   899e8:	4639      	mov	r1, r7
   899ea:	f003 fb43 	bl	8d074 <__aeabi_dcmplt>
   899ee:	2800      	cmp	r0, #0
   899f0:	f040 8348 	bne.w	8a084 <_dtoa_r+0xb34>
   899f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   899f6:	2b00      	cmp	r3, #0
   899f8:	f2c0 808c 	blt.w	89b14 <_dtoa_r+0x5c4>
   899fc:	9a07      	ldr	r2, [sp, #28]
   899fe:	2a0e      	cmp	r2, #14
   89a00:	f300 8088 	bgt.w	89b14 <_dtoa_r+0x5c4>
   89a04:	4b24      	ldr	r3, [pc, #144]	; (89a98 <_dtoa_r+0x548>)
   89a06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89a0a:	e9d3 ab00 	ldrd	sl, fp, [r3]
   89a0e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   89a10:	2b00      	cmp	r3, #0
   89a12:	da1b      	bge.n	89a4c <_dtoa_r+0x4fc>
   89a14:	9b08      	ldr	r3, [sp, #32]
   89a16:	2b00      	cmp	r3, #0
   89a18:	dc18      	bgt.n	89a4c <_dtoa_r+0x4fc>
   89a1a:	f040 8331 	bne.w	8a080 <_dtoa_r+0xb30>
   89a1e:	2200      	movs	r2, #0
   89a20:	4b23      	ldr	r3, [pc, #140]	; (89ab0 <_dtoa_r+0x560>)
   89a22:	4650      	mov	r0, sl
   89a24:	4659      	mov	r1, fp
   89a26:	f003 f8b3 	bl	8cb90 <__aeabi_dmul>
   89a2a:	4602      	mov	r2, r0
   89a2c:	460b      	mov	r3, r1
   89a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   89a32:	f003 fb29 	bl	8d088 <__aeabi_dcmple>
   89a36:	f8dd 9020 	ldr.w	r9, [sp, #32]
   89a3a:	464e      	mov	r6, r9
   89a3c:	2800      	cmp	r0, #0
   89a3e:	f000 82ca 	beq.w	89fd6 <_dtoa_r+0xa86>
   89a42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   89a44:	f8dd 800c 	ldr.w	r8, [sp, #12]
   89a48:	43df      	mvns	r7, r3
   89a4a:	e2cc      	b.n	89fe6 <_dtoa_r+0xa96>
   89a4c:	4652      	mov	r2, sl
   89a4e:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   89a52:	465b      	mov	r3, fp
   89a54:	4638      	mov	r0, r7
   89a56:	4641      	mov	r1, r8
   89a58:	f003 f9c4 	bl	8cde4 <__aeabi_ddiv>
   89a5c:	f003 fb48 	bl	8d0f0 <__aeabi_d2iz>
   89a60:	4681      	mov	r9, r0
   89a62:	9009      	str	r0, [sp, #36]	; 0x24
   89a64:	f003 f82a 	bl	8cabc <__aeabi_i2d>
   89a68:	4652      	mov	r2, sl
   89a6a:	465b      	mov	r3, fp
   89a6c:	f003 f890 	bl	8cb90 <__aeabi_dmul>
   89a70:	9e03      	ldr	r6, [sp, #12]
   89a72:	460b      	mov	r3, r1
   89a74:	4602      	mov	r2, r0
   89a76:	4641      	mov	r1, r8
   89a78:	4638      	mov	r0, r7
   89a7a:	f002 fed1 	bl	8c820 <__aeabi_dsub>
   89a7e:	f109 0330 	add.w	r3, r9, #48	; 0x30
   89a82:	f806 3b01 	strb.w	r3, [r6], #1
   89a86:	9b08      	ldr	r3, [sp, #32]
   89a88:	2b01      	cmp	r3, #1
   89a8a:	f000 835f 	beq.w	8a14c <_dtoa_r+0xbfc>
   89a8e:	9406      	str	r4, [sp, #24]
   89a90:	2701      	movs	r7, #1
   89a92:	461c      	mov	r4, r3
   89a94:	9504      	str	r5, [sp, #16]
   89a96:	e02a      	b.n	89aee <_dtoa_r+0x59e>
   89a98:	0008d6b0 	.word	0x0008d6b0
   89a9c:	0008d688 	.word	0x0008d688
   89aa0:	3ff00000 	.word	0x3ff00000
   89aa4:	401c0000 	.word	0x401c0000
   89aa8:	3fe00000 	.word	0x3fe00000
   89aac:	40240000 	.word	0x40240000
   89ab0:	40140000 	.word	0x40140000
   89ab4:	4652      	mov	r2, sl
   89ab6:	465b      	mov	r3, fp
   89ab8:	4640      	mov	r0, r8
   89aba:	4649      	mov	r1, r9
   89abc:	f003 f992 	bl	8cde4 <__aeabi_ddiv>
   89ac0:	f003 fb16 	bl	8d0f0 <__aeabi_d2iz>
   89ac4:	4605      	mov	r5, r0
   89ac6:	f002 fff9 	bl	8cabc <__aeabi_i2d>
   89aca:	4652      	mov	r2, sl
   89acc:	465b      	mov	r3, fp
   89ace:	f003 f85f 	bl	8cb90 <__aeabi_dmul>
   89ad2:	3701      	adds	r7, #1
   89ad4:	460b      	mov	r3, r1
   89ad6:	4602      	mov	r2, r0
   89ad8:	4649      	mov	r1, r9
   89ada:	4640      	mov	r0, r8
   89adc:	f002 fea0 	bl	8c820 <__aeabi_dsub>
   89ae0:	f105 0330 	add.w	r3, r5, #48	; 0x30
   89ae4:	42a7      	cmp	r7, r4
   89ae6:	f806 3b01 	strb.w	r3, [r6], #1
   89aea:	f000 832c 	beq.w	8a146 <_dtoa_r+0xbf6>
   89aee:	2200      	movs	r2, #0
   89af0:	4bab      	ldr	r3, [pc, #684]	; (89da0 <_dtoa_r+0x850>)
   89af2:	f003 f84d 	bl	8cb90 <__aeabi_dmul>
   89af6:	2200      	movs	r2, #0
   89af8:	2300      	movs	r3, #0
   89afa:	4680      	mov	r8, r0
   89afc:	4689      	mov	r9, r1
   89afe:	f003 faaf 	bl	8d060 <__aeabi_dcmpeq>
   89b02:	2800      	cmp	r0, #0
   89b04:	d0d6      	beq.n	89ab4 <_dtoa_r+0x564>
   89b06:	9d04      	ldr	r5, [sp, #16]
   89b08:	9c06      	ldr	r4, [sp, #24]
   89b0a:	9b07      	ldr	r3, [sp, #28]
   89b0c:	46b2      	mov	sl, r6
   89b0e:	3301      	adds	r3, #1
   89b10:	9307      	str	r3, [sp, #28]
   89b12:	e10a      	b.n	89d2a <_dtoa_r+0x7da>
   89b14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   89b16:	2a00      	cmp	r2, #0
   89b18:	d03d      	beq.n	89b96 <_dtoa_r+0x646>
   89b1a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   89b1c:	2a01      	cmp	r2, #1
   89b1e:	f340 829f 	ble.w	8a060 <_dtoa_r+0xb10>
   89b22:	9b08      	ldr	r3, [sp, #32]
   89b24:	f103 38ff 	add.w	r8, r3, #4294967295
   89b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89b2a:	4543      	cmp	r3, r8
   89b2c:	f2c0 8270 	blt.w	8a010 <_dtoa_r+0xac0>
   89b30:	eba3 0808 	sub.w	r8, r3, r8
   89b34:	9b08      	ldr	r3, [sp, #32]
   89b36:	2b00      	cmp	r3, #0
   89b38:	f2c0 8340 	blt.w	8a1bc <_dtoa_r+0xc6c>
   89b3c:	9a06      	ldr	r2, [sp, #24]
   89b3e:	441a      	add	r2, r3
   89b40:	9206      	str	r2, [sp, #24]
   89b42:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89b44:	4617      	mov	r7, r2
   89b46:	441a      	add	r2, r3
   89b48:	9209      	str	r2, [sp, #36]	; 0x24
   89b4a:	2101      	movs	r1, #1
   89b4c:	4620      	mov	r0, r4
   89b4e:	f001 fe25 	bl	8b79c <__i2b>
   89b52:	4606      	mov	r6, r0
   89b54:	e023      	b.n	89b9e <_dtoa_r+0x64e>
   89b56:	2301      	movs	r3, #1
   89b58:	1bbe      	subs	r6, r7, r6
   89b5a:	930e      	str	r3, [sp, #56]	; 0x38
   89b5c:	1e73      	subs	r3, r6, #1
   89b5e:	9306      	str	r3, [sp, #24]
   89b60:	f57f ada0 	bpl.w	896a4 <_dtoa_r+0x154>
   89b64:	f1c6 0301 	rsb	r3, r6, #1
   89b68:	9309      	str	r3, [sp, #36]	; 0x24
   89b6a:	2300      	movs	r3, #0
   89b6c:	9306      	str	r3, [sp, #24]
   89b6e:	e59b      	b.n	896a8 <_dtoa_r+0x158>
   89b70:	4658      	mov	r0, fp
   89b72:	f002 ffa3 	bl	8cabc <__aeabi_i2d>
   89b76:	4642      	mov	r2, r8
   89b78:	464b      	mov	r3, r9
   89b7a:	f003 fa71 	bl	8d060 <__aeabi_dcmpeq>
   89b7e:	2800      	cmp	r0, #0
   89b80:	f47f ad78 	bne.w	89674 <_dtoa_r+0x124>
   89b84:	f10b 3bff 	add.w	fp, fp, #4294967295
   89b88:	e574      	b.n	89674 <_dtoa_r+0x124>
   89b8a:	4b86      	ldr	r3, [pc, #536]	; (89da4 <_dtoa_r+0x854>)
   89b8c:	9303      	str	r3, [sp, #12]
   89b8e:	9803      	ldr	r0, [sp, #12]
   89b90:	b019      	add	sp, #100	; 0x64
   89b92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b96:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   89b9a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89b9c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   89b9e:	2f00      	cmp	r7, #0
   89ba0:	dd0c      	ble.n	89bbc <_dtoa_r+0x66c>
   89ba2:	9906      	ldr	r1, [sp, #24]
   89ba4:	2900      	cmp	r1, #0
   89ba6:	460b      	mov	r3, r1
   89ba8:	dd08      	ble.n	89bbc <_dtoa_r+0x66c>
   89baa:	42b9      	cmp	r1, r7
   89bac:	bfa8      	it	ge
   89bae:	463b      	movge	r3, r7
   89bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89bb2:	1aff      	subs	r7, r7, r3
   89bb4:	1ad2      	subs	r2, r2, r3
   89bb6:	1acb      	subs	r3, r1, r3
   89bb8:	9209      	str	r2, [sp, #36]	; 0x24
   89bba:	9306      	str	r3, [sp, #24]
   89bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89bbe:	b1e3      	cbz	r3, 89bfa <_dtoa_r+0x6aa>
   89bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89bc2:	2b00      	cmp	r3, #0
   89bc4:	f000 8260 	beq.w	8a088 <_dtoa_r+0xb38>
   89bc8:	f1b8 0f00 	cmp.w	r8, #0
   89bcc:	dd10      	ble.n	89bf0 <_dtoa_r+0x6a0>
   89bce:	4631      	mov	r1, r6
   89bd0:	4642      	mov	r2, r8
   89bd2:	4620      	mov	r0, r4
   89bd4:	f001 febe 	bl	8b954 <__pow5mult>
   89bd8:	4606      	mov	r6, r0
   89bda:	462a      	mov	r2, r5
   89bdc:	4631      	mov	r1, r6
   89bde:	4620      	mov	r0, r4
   89be0:	f001 fe0a 	bl	8b7f8 <__multiply>
   89be4:	4603      	mov	r3, r0
   89be6:	4629      	mov	r1, r5
   89be8:	4620      	mov	r0, r4
   89bea:	461d      	mov	r5, r3
   89bec:	f001 fd2e 	bl	8b64c <_Bfree>
   89bf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89bf2:	ebb3 0208 	subs.w	r2, r3, r8
   89bf6:	f040 82db 	bne.w	8a1b0 <_dtoa_r+0xc60>
   89bfa:	2101      	movs	r1, #1
   89bfc:	4620      	mov	r0, r4
   89bfe:	f001 fdcd 	bl	8b79c <__i2b>
   89c02:	f1bb 0f00 	cmp.w	fp, #0
   89c06:	4681      	mov	r9, r0
   89c08:	f300 80b3 	bgt.w	89d72 <_dtoa_r+0x822>
   89c0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89c0e:	2b01      	cmp	r3, #1
   89c10:	f340 8188 	ble.w	89f24 <_dtoa_r+0x9d4>
   89c14:	f04f 0a00 	mov.w	sl, #0
   89c18:	2001      	movs	r0, #1
   89c1a:	f1bb 0f00 	cmp.w	fp, #0
   89c1e:	f040 80b4 	bne.w	89d8a <_dtoa_r+0x83a>
   89c22:	9a06      	ldr	r2, [sp, #24]
   89c24:	4410      	add	r0, r2
   89c26:	f010 001f 	ands.w	r0, r0, #31
   89c2a:	f000 8092 	beq.w	89d52 <_dtoa_r+0x802>
   89c2e:	f1c0 0320 	rsb	r3, r0, #32
   89c32:	2b04      	cmp	r3, #4
   89c34:	f340 83d3 	ble.w	8a3de <_dtoa_r+0xe8e>
   89c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89c3a:	f1c0 001c 	rsb	r0, r0, #28
   89c3e:	4403      	add	r3, r0
   89c40:	4402      	add	r2, r0
   89c42:	9309      	str	r3, [sp, #36]	; 0x24
   89c44:	4407      	add	r7, r0
   89c46:	9206      	str	r2, [sp, #24]
   89c48:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89c4a:	2b00      	cmp	r3, #0
   89c4c:	dd05      	ble.n	89c5a <_dtoa_r+0x70a>
   89c4e:	4629      	mov	r1, r5
   89c50:	461a      	mov	r2, r3
   89c52:	4620      	mov	r0, r4
   89c54:	f001 feda 	bl	8ba0c <__lshift>
   89c58:	4605      	mov	r5, r0
   89c5a:	9b06      	ldr	r3, [sp, #24]
   89c5c:	2b00      	cmp	r3, #0
   89c5e:	dd05      	ble.n	89c6c <_dtoa_r+0x71c>
   89c60:	4649      	mov	r1, r9
   89c62:	461a      	mov	r2, r3
   89c64:	4620      	mov	r0, r4
   89c66:	f001 fed1 	bl	8ba0c <__lshift>
   89c6a:	4681      	mov	r9, r0
   89c6c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   89c6e:	2b00      	cmp	r3, #0
   89c70:	f040 8138 	bne.w	89ee4 <_dtoa_r+0x994>
   89c74:	9b08      	ldr	r3, [sp, #32]
   89c76:	2b00      	cmp	r3, #0
   89c78:	f340 811e 	ble.w	89eb8 <_dtoa_r+0x968>
   89c7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89c7e:	2b00      	cmp	r3, #0
   89c80:	f040 809f 	bne.w	89dc2 <_dtoa_r+0x872>
   89c84:	9b07      	ldr	r3, [sp, #28]
   89c86:	3301      	adds	r3, #1
   89c88:	9307      	str	r3, [sp, #28]
   89c8a:	2701      	movs	r7, #1
   89c8c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   89c90:	f8dd a020 	ldr.w	sl, [sp, #32]
   89c94:	e007      	b.n	89ca6 <_dtoa_r+0x756>
   89c96:	4629      	mov	r1, r5
   89c98:	2300      	movs	r3, #0
   89c9a:	220a      	movs	r2, #10
   89c9c:	4620      	mov	r0, r4
   89c9e:	f001 fcdf 	bl	8b660 <__multadd>
   89ca2:	4605      	mov	r5, r0
   89ca4:	3701      	adds	r7, #1
   89ca6:	4649      	mov	r1, r9
   89ca8:	4628      	mov	r0, r5
   89caa:	f7ff fbb9 	bl	89420 <quorem>
   89cae:	4557      	cmp	r7, sl
   89cb0:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89cb4:	f808 3b01 	strb.w	r3, [r8], #1
   89cb8:	dbed      	blt.n	89c96 <_dtoa_r+0x746>
   89cba:	9a08      	ldr	r2, [sp, #32]
   89cbc:	2700      	movs	r7, #0
   89cbe:	2a00      	cmp	r2, #0
   89cc0:	bfcc      	ite	gt
   89cc2:	4693      	movgt	fp, r2
   89cc4:	f04f 0b01 	movle.w	fp, #1
   89cc8:	9a03      	ldr	r2, [sp, #12]
   89cca:	4493      	add	fp, r2
   89ccc:	4629      	mov	r1, r5
   89cce:	2201      	movs	r2, #1
   89cd0:	4620      	mov	r0, r4
   89cd2:	9304      	str	r3, [sp, #16]
   89cd4:	f001 fe9a 	bl	8ba0c <__lshift>
   89cd8:	4649      	mov	r1, r9
   89cda:	4605      	mov	r5, r0
   89cdc:	f001 ff0c 	bl	8baf8 <__mcmp>
   89ce0:	2800      	cmp	r0, #0
   89ce2:	f340 81ab 	ble.w	8a03c <_dtoa_r+0xaec>
   89ce6:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89cea:	9a03      	ldr	r2, [sp, #12]
   89cec:	f10b 3bff 	add.w	fp, fp, #4294967295
   89cf0:	e004      	b.n	89cfc <_dtoa_r+0x7ac>
   89cf2:	455a      	cmp	r2, fp
   89cf4:	f000 81ad 	beq.w	8a052 <_dtoa_r+0xb02>
   89cf8:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89cfc:	2b39      	cmp	r3, #57	; 0x39
   89cfe:	f10b 0a01 	add.w	sl, fp, #1
   89d02:	d0f6      	beq.n	89cf2 <_dtoa_r+0x7a2>
   89d04:	3301      	adds	r3, #1
   89d06:	f88b 3000 	strb.w	r3, [fp]
   89d0a:	4649      	mov	r1, r9
   89d0c:	4620      	mov	r0, r4
   89d0e:	f001 fc9d 	bl	8b64c <_Bfree>
   89d12:	b156      	cbz	r6, 89d2a <_dtoa_r+0x7da>
   89d14:	b12f      	cbz	r7, 89d22 <_dtoa_r+0x7d2>
   89d16:	42b7      	cmp	r7, r6
   89d18:	d003      	beq.n	89d22 <_dtoa_r+0x7d2>
   89d1a:	4639      	mov	r1, r7
   89d1c:	4620      	mov	r0, r4
   89d1e:	f001 fc95 	bl	8b64c <_Bfree>
   89d22:	4631      	mov	r1, r6
   89d24:	4620      	mov	r0, r4
   89d26:	f001 fc91 	bl	8b64c <_Bfree>
   89d2a:	4629      	mov	r1, r5
   89d2c:	4620      	mov	r0, r4
   89d2e:	f001 fc8d 	bl	8b64c <_Bfree>
   89d32:	2300      	movs	r3, #0
   89d34:	9a07      	ldr	r2, [sp, #28]
   89d36:	f88a 3000 	strb.w	r3, [sl]
   89d3a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   89d3c:	601a      	str	r2, [r3, #0]
   89d3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   89d40:	2b00      	cmp	r3, #0
   89d42:	f43f ac40 	beq.w	895c6 <_dtoa_r+0x76>
   89d46:	9803      	ldr	r0, [sp, #12]
   89d48:	f8c3 a000 	str.w	sl, [r3]
   89d4c:	b019      	add	sp, #100	; 0x64
   89d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d52:	201c      	movs	r0, #28
   89d54:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89d56:	4407      	add	r7, r0
   89d58:	4403      	add	r3, r0
   89d5a:	9309      	str	r3, [sp, #36]	; 0x24
   89d5c:	9b06      	ldr	r3, [sp, #24]
   89d5e:	4403      	add	r3, r0
   89d60:	9306      	str	r3, [sp, #24]
   89d62:	e771      	b.n	89c48 <_dtoa_r+0x6f8>
   89d64:	2601      	movs	r6, #1
   89d66:	e4b6      	b.n	896d6 <_dtoa_r+0x186>
   89d68:	f1c0 0020 	rsb	r0, r0, #32
   89d6c:	fa08 f000 	lsl.w	r0, r8, r0
   89d70:	e44d      	b.n	8960e <_dtoa_r+0xbe>
   89d72:	4601      	mov	r1, r0
   89d74:	465a      	mov	r2, fp
   89d76:	4620      	mov	r0, r4
   89d78:	f001 fdec 	bl	8b954 <__pow5mult>
   89d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89d7e:	4681      	mov	r9, r0
   89d80:	2b01      	cmp	r3, #1
   89d82:	f340 81b6 	ble.w	8a0f2 <_dtoa_r+0xba2>
   89d86:	f04f 0a00 	mov.w	sl, #0
   89d8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   89d8e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   89d92:	6918      	ldr	r0, [r3, #16]
   89d94:	f001 fcb6 	bl	8b704 <__hi0bits>
   89d98:	f1c0 0020 	rsb	r0, r0, #32
   89d9c:	e741      	b.n	89c22 <_dtoa_r+0x6d2>
   89d9e:	bf00      	nop
   89da0:	40240000 	.word	0x40240000
   89da4:	0008d510 	.word	0x0008d510
   89da8:	4631      	mov	r1, r6
   89daa:	2300      	movs	r3, #0
   89dac:	220a      	movs	r2, #10
   89dae:	4620      	mov	r0, r4
   89db0:	f001 fc56 	bl	8b660 <__multadd>
   89db4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89db6:	4606      	mov	r6, r0
   89db8:	2b00      	cmp	r3, #0
   89dba:	f340 82e9 	ble.w	8a390 <_dtoa_r+0xe40>
   89dbe:	e9cd 8307 	strd	r8, r3, [sp, #28]
   89dc2:	2f00      	cmp	r7, #0
   89dc4:	f300 811d 	bgt.w	8a002 <_dtoa_r+0xab2>
   89dc8:	f1ba 0f00 	cmp.w	sl, #0
   89dcc:	f040 81d9 	bne.w	8a182 <_dtoa_r+0xc32>
   89dd0:	46b0      	mov	r8, r6
   89dd2:	9b04      	ldr	r3, [sp, #16]
   89dd4:	9908      	ldr	r1, [sp, #32]
   89dd6:	f003 0201 	and.w	r2, r3, #1
   89dda:	9b03      	ldr	r3, [sp, #12]
   89ddc:	920a      	str	r2, [sp, #40]	; 0x28
   89dde:	461f      	mov	r7, r3
   89de0:	3b01      	subs	r3, #1
   89de2:	4419      	add	r1, r3
   89de4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89de6:	9108      	str	r1, [sp, #32]
   89de8:	4313      	orrs	r3, r2
   89dea:	9309      	str	r3, [sp, #36]	; 0x24
   89dec:	4649      	mov	r1, r9
   89dee:	4628      	mov	r0, r5
   89df0:	f7ff fb16 	bl	89420 <quorem>
   89df4:	4631      	mov	r1, r6
   89df6:	4683      	mov	fp, r0
   89df8:	4628      	mov	r0, r5
   89dfa:	f001 fe7d 	bl	8baf8 <__mcmp>
   89dfe:	4642      	mov	r2, r8
   89e00:	4649      	mov	r1, r9
   89e02:	4682      	mov	sl, r0
   89e04:	4620      	mov	r0, r4
   89e06:	f001 fe97 	bl	8bb38 <__mdiff>
   89e0a:	68c2      	ldr	r2, [r0, #12]
   89e0c:	4601      	mov	r1, r0
   89e0e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   89e12:	2a00      	cmp	r2, #0
   89e14:	d143      	bne.n	89e9e <_dtoa_r+0x94e>
   89e16:	9004      	str	r0, [sp, #16]
   89e18:	4628      	mov	r0, r5
   89e1a:	9306      	str	r3, [sp, #24]
   89e1c:	f001 fe6c 	bl	8baf8 <__mcmp>
   89e20:	4602      	mov	r2, r0
   89e22:	9904      	ldr	r1, [sp, #16]
   89e24:	4620      	mov	r0, r4
   89e26:	9204      	str	r2, [sp, #16]
   89e28:	f001 fc10 	bl	8b64c <_Bfree>
   89e2c:	9a04      	ldr	r2, [sp, #16]
   89e2e:	9b06      	ldr	r3, [sp, #24]
   89e30:	b91a      	cbnz	r2, 89e3a <_dtoa_r+0x8ea>
   89e32:	9909      	ldr	r1, [sp, #36]	; 0x24
   89e34:	2900      	cmp	r1, #0
   89e36:	f000 829b 	beq.w	8a370 <_dtoa_r+0xe20>
   89e3a:	f1ba 0f00 	cmp.w	sl, #0
   89e3e:	f2c0 8164 	blt.w	8a10a <_dtoa_r+0xbba>
   89e42:	9922      	ldr	r1, [sp, #136]	; 0x88
   89e44:	ea4a 0a01 	orr.w	sl, sl, r1
   89e48:	990a      	ldr	r1, [sp, #40]	; 0x28
   89e4a:	ea51 010a 	orrs.w	r1, r1, sl
   89e4e:	f000 815c 	beq.w	8a10a <_dtoa_r+0xbba>
   89e52:	2a00      	cmp	r2, #0
   89e54:	f300 81b6 	bgt.w	8a1c4 <_dtoa_r+0xc74>
   89e58:	9a08      	ldr	r2, [sp, #32]
   89e5a:	f107 0a01 	add.w	sl, r7, #1
   89e5e:	4297      	cmp	r7, r2
   89e60:	46d3      	mov	fp, sl
   89e62:	703b      	strb	r3, [r7, #0]
   89e64:	f000 81b4 	beq.w	8a1d0 <_dtoa_r+0xc80>
   89e68:	4629      	mov	r1, r5
   89e6a:	2300      	movs	r3, #0
   89e6c:	220a      	movs	r2, #10
   89e6e:	4620      	mov	r0, r4
   89e70:	f001 fbf6 	bl	8b660 <__multadd>
   89e74:	4546      	cmp	r6, r8
   89e76:	4605      	mov	r5, r0
   89e78:	4631      	mov	r1, r6
   89e7a:	f04f 0300 	mov.w	r3, #0
   89e7e:	f04f 020a 	mov.w	r2, #10
   89e82:	4620      	mov	r0, r4
   89e84:	d012      	beq.n	89eac <_dtoa_r+0x95c>
   89e86:	f001 fbeb 	bl	8b660 <__multadd>
   89e8a:	4641      	mov	r1, r8
   89e8c:	4606      	mov	r6, r0
   89e8e:	2300      	movs	r3, #0
   89e90:	220a      	movs	r2, #10
   89e92:	4620      	mov	r0, r4
   89e94:	f001 fbe4 	bl	8b660 <__multadd>
   89e98:	4657      	mov	r7, sl
   89e9a:	4680      	mov	r8, r0
   89e9c:	e7a6      	b.n	89dec <_dtoa_r+0x89c>
   89e9e:	4620      	mov	r0, r4
   89ea0:	9304      	str	r3, [sp, #16]
   89ea2:	f001 fbd3 	bl	8b64c <_Bfree>
   89ea6:	2201      	movs	r2, #1
   89ea8:	9b04      	ldr	r3, [sp, #16]
   89eaa:	e7c6      	b.n	89e3a <_dtoa_r+0x8ea>
   89eac:	f001 fbd8 	bl	8b660 <__multadd>
   89eb0:	4657      	mov	r7, sl
   89eb2:	4606      	mov	r6, r0
   89eb4:	4680      	mov	r8, r0
   89eb6:	e799      	b.n	89dec <_dtoa_r+0x89c>
   89eb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89eba:	2b02      	cmp	r3, #2
   89ebc:	dc7a      	bgt.n	89fb4 <_dtoa_r+0xa64>
   89ebe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89ec0:	2b00      	cmp	r3, #0
   89ec2:	f47f af7e 	bne.w	89dc2 <_dtoa_r+0x872>
   89ec6:	9b07      	ldr	r3, [sp, #28]
   89ec8:	4649      	mov	r1, r9
   89eca:	3301      	adds	r3, #1
   89ecc:	4628      	mov	r0, r5
   89ece:	9307      	str	r3, [sp, #28]
   89ed0:	f7ff faa6 	bl	89420 <quorem>
   89ed4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89ed8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89edc:	2700      	movs	r7, #0
   89ede:	f80b 3b01 	strb.w	r3, [fp], #1
   89ee2:	e6f3      	b.n	89ccc <_dtoa_r+0x77c>
   89ee4:	4649      	mov	r1, r9
   89ee6:	4628      	mov	r0, r5
   89ee8:	f001 fe06 	bl	8baf8 <__mcmp>
   89eec:	2800      	cmp	r0, #0
   89eee:	f6bf aec1 	bge.w	89c74 <_dtoa_r+0x724>
   89ef2:	4629      	mov	r1, r5
   89ef4:	2300      	movs	r3, #0
   89ef6:	220a      	movs	r2, #10
   89ef8:	4620      	mov	r0, r4
   89efa:	f001 fbb1 	bl	8b660 <__multadd>
   89efe:	9b07      	ldr	r3, [sp, #28]
   89f00:	4605      	mov	r5, r0
   89f02:	f103 38ff 	add.w	r8, r3, #4294967295
   89f06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89f08:	2b00      	cmp	r3, #0
   89f0a:	f47f af4d 	bne.w	89da8 <_dtoa_r+0x858>
   89f0e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89f10:	2b00      	cmp	r3, #0
   89f12:	f340 8234 	ble.w	8a37e <_dtoa_r+0xe2e>
   89f16:	9308      	str	r3, [sp, #32]
   89f18:	e6b7      	b.n	89c8a <_dtoa_r+0x73a>
   89f1a:	4bb0      	ldr	r3, [pc, #704]	; (8a1dc <_dtoa_r+0xc8c>)
   89f1c:	9303      	str	r3, [sp, #12]
   89f1e:	3303      	adds	r3, #3
   89f20:	f7ff bbf4 	b.w	8970c <_dtoa_r+0x1bc>
   89f24:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89f28:	2900      	cmp	r1, #0
   89f2a:	f47f ae73 	bne.w	89c14 <_dtoa_r+0x6c4>
   89f2e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   89f32:	2b00      	cmp	r3, #0
   89f34:	f47f ae6e 	bne.w	89c14 <_dtoa_r+0x6c4>
   89f38:	4ba9      	ldr	r3, [pc, #676]	; (8a1e0 <_dtoa_r+0xc90>)
   89f3a:	4013      	ands	r3, r2
   89f3c:	2b00      	cmp	r3, #0
   89f3e:	f000 8200 	beq.w	8a342 <_dtoa_r+0xdf2>
   89f42:	9b09      	ldr	r3, [sp, #36]	; 0x24
   89f44:	f04f 0a01 	mov.w	sl, #1
   89f48:	3301      	adds	r3, #1
   89f4a:	9309      	str	r3, [sp, #36]	; 0x24
   89f4c:	9b06      	ldr	r3, [sp, #24]
   89f4e:	3301      	adds	r3, #1
   89f50:	9306      	str	r3, [sp, #24]
   89f52:	e661      	b.n	89c18 <_dtoa_r+0x6c8>
   89f54:	2301      	movs	r3, #1
   89f56:	930c      	str	r3, [sp, #48]	; 0x30
   89f58:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   89f5a:	9a07      	ldr	r2, [sp, #28]
   89f5c:	4413      	add	r3, r2
   89f5e:	9312      	str	r3, [sp, #72]	; 0x48
   89f60:	3301      	adds	r3, #1
   89f62:	2b01      	cmp	r3, #1
   89f64:	461f      	mov	r7, r3
   89f66:	bfb8      	it	lt
   89f68:	2701      	movlt	r7, #1
   89f6a:	9308      	str	r3, [sp, #32]
   89f6c:	2100      	movs	r1, #0
   89f6e:	2f17      	cmp	r7, #23
   89f70:	6461      	str	r1, [r4, #68]	; 0x44
   89f72:	f77f ac1e 	ble.w	897b2 <_dtoa_r+0x262>
   89f76:	2201      	movs	r2, #1
   89f78:	2304      	movs	r3, #4
   89f7a:	005b      	lsls	r3, r3, #1
   89f7c:	f103 0014 	add.w	r0, r3, #20
   89f80:	42b8      	cmp	r0, r7
   89f82:	4611      	mov	r1, r2
   89f84:	f102 0201 	add.w	r2, r2, #1
   89f88:	d9f7      	bls.n	89f7a <_dtoa_r+0xa2a>
   89f8a:	6461      	str	r1, [r4, #68]	; 0x44
   89f8c:	e411      	b.n	897b2 <_dtoa_r+0x262>
   89f8e:	2301      	movs	r3, #1
   89f90:	930c      	str	r3, [sp, #48]	; 0x30
   89f92:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   89f94:	2b00      	cmp	r3, #0
   89f96:	dd4c      	ble.n	8a032 <_dtoa_r+0xae2>
   89f98:	461f      	mov	r7, r3
   89f9a:	9312      	str	r3, [sp, #72]	; 0x48
   89f9c:	9308      	str	r3, [sp, #32]
   89f9e:	e7e5      	b.n	89f6c <_dtoa_r+0xa1c>
   89fa0:	2300      	movs	r3, #0
   89fa2:	930c      	str	r3, [sp, #48]	; 0x30
   89fa4:	e7d8      	b.n	89f58 <_dtoa_r+0xa08>
   89fa6:	2300      	movs	r3, #0
   89fa8:	930c      	str	r3, [sp, #48]	; 0x30
   89faa:	e7f2      	b.n	89f92 <_dtoa_r+0xa42>
   89fac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89fae:	f8cd 801c 	str.w	r8, [sp, #28]
   89fb2:	9308      	str	r3, [sp, #32]
   89fb4:	9b08      	ldr	r3, [sp, #32]
   89fb6:	2b00      	cmp	r3, #0
   89fb8:	f47f ad43 	bne.w	89a42 <_dtoa_r+0x4f2>
   89fbc:	4649      	mov	r1, r9
   89fbe:	2205      	movs	r2, #5
   89fc0:	4620      	mov	r0, r4
   89fc2:	f001 fb4d 	bl	8b660 <__multadd>
   89fc6:	4681      	mov	r9, r0
   89fc8:	4628      	mov	r0, r5
   89fca:	4649      	mov	r1, r9
   89fcc:	f001 fd94 	bl	8baf8 <__mcmp>
   89fd0:	2800      	cmp	r0, #0
   89fd2:	f77f ad36 	ble.w	89a42 <_dtoa_r+0x4f2>
   89fd6:	2331      	movs	r3, #49	; 0x31
   89fd8:	9803      	ldr	r0, [sp, #12]
   89fda:	9f07      	ldr	r7, [sp, #28]
   89fdc:	4680      	mov	r8, r0
   89fde:	f800 3b01 	strb.w	r3, [r0], #1
   89fe2:	3701      	adds	r7, #1
   89fe4:	9003      	str	r0, [sp, #12]
   89fe6:	4649      	mov	r1, r9
   89fe8:	4620      	mov	r0, r4
   89fea:	f001 fb2f 	bl	8b64c <_Bfree>
   89fee:	1c7b      	adds	r3, r7, #1
   89ff0:	f8dd a00c 	ldr.w	sl, [sp, #12]
   89ff4:	9307      	str	r3, [sp, #28]
   89ff6:	f8cd 800c 	str.w	r8, [sp, #12]
   89ffa:	2e00      	cmp	r6, #0
   89ffc:	f47f ae91 	bne.w	89d22 <_dtoa_r+0x7d2>
   8a000:	e693      	b.n	89d2a <_dtoa_r+0x7da>
   8a002:	4631      	mov	r1, r6
   8a004:	463a      	mov	r2, r7
   8a006:	4620      	mov	r0, r4
   8a008:	f001 fd00 	bl	8ba0c <__lshift>
   8a00c:	4606      	mov	r6, r0
   8a00e:	e6db      	b.n	89dc8 <_dtoa_r+0x878>
   8a010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8a012:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   8a016:	eba8 0303 	sub.w	r3, r8, r3
   8a01a:	449b      	add	fp, r3
   8a01c:	f04f 0800 	mov.w	r8, #0
   8a020:	e588      	b.n	89b34 <_dtoa_r+0x5e4>
   8a022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8a026:	f04f 0a02 	mov.w	sl, #2
   8a02a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8a02e:	f7ff bbee 	b.w	8980e <_dtoa_r+0x2be>
   8a032:	2301      	movs	r3, #1
   8a034:	9323      	str	r3, [sp, #140]	; 0x8c
   8a036:	9308      	str	r3, [sp, #32]
   8a038:	f7ff bbb7 	b.w	897aa <_dtoa_r+0x25a>
   8a03c:	d103      	bne.n	8a046 <_dtoa_r+0xaf6>
   8a03e:	9b04      	ldr	r3, [sp, #16]
   8a040:	07d8      	lsls	r0, r3, #31
   8a042:	f53f ae50 	bmi.w	89ce6 <_dtoa_r+0x796>
   8a046:	46da      	mov	sl, fp
   8a048:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8a04c:	2b30      	cmp	r3, #48	; 0x30
   8a04e:	d0fa      	beq.n	8a046 <_dtoa_r+0xaf6>
   8a050:	e65b      	b.n	89d0a <_dtoa_r+0x7ba>
   8a052:	9b07      	ldr	r3, [sp, #28]
   8a054:	9a03      	ldr	r2, [sp, #12]
   8a056:	3301      	adds	r3, #1
   8a058:	9307      	str	r3, [sp, #28]
   8a05a:	2331      	movs	r3, #49	; 0x31
   8a05c:	7013      	strb	r3, [r2, #0]
   8a05e:	e654      	b.n	89d0a <_dtoa_r+0x7ba>
   8a060:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   8a062:	2a00      	cmp	r2, #0
   8a064:	f000 8128 	beq.w	8a2b8 <_dtoa_r+0xd68>
   8a068:	f203 4333 	addw	r3, r3, #1075	; 0x433
   8a06c:	9a06      	ldr	r2, [sp, #24]
   8a06e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8a072:	441a      	add	r2, r3
   8a074:	9206      	str	r2, [sp, #24]
   8a076:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8a078:	4617      	mov	r7, r2
   8a07a:	441a      	add	r2, r3
   8a07c:	9209      	str	r2, [sp, #36]	; 0x24
   8a07e:	e564      	b.n	89b4a <_dtoa_r+0x5fa>
   8a080:	f04f 0900 	mov.w	r9, #0
   8a084:	464e      	mov	r6, r9
   8a086:	e4dc      	b.n	89a42 <_dtoa_r+0x4f2>
   8a088:	4629      	mov	r1, r5
   8a08a:	4620      	mov	r0, r4
   8a08c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8a08e:	f001 fc61 	bl	8b954 <__pow5mult>
   8a092:	4605      	mov	r5, r0
   8a094:	e5b1      	b.n	89bfa <_dtoa_r+0x6aa>
   8a096:	900e      	str	r0, [sp, #56]	; 0x38
   8a098:	e564      	b.n	89b64 <_dtoa_r+0x614>
   8a09a:	f000 8111 	beq.w	8a2c0 <_dtoa_r+0xd70>
   8a09e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   8a0a2:	9a07      	ldr	r2, [sp, #28]
   8a0a4:	4b4f      	ldr	r3, [pc, #316]	; (8a1e4 <_dtoa_r+0xc94>)
   8a0a6:	4256      	negs	r6, r2
   8a0a8:	f006 020f 	and.w	r2, r6, #15
   8a0ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8a0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
   8a0b4:	f002 fd6c 	bl	8cb90 <__aeabi_dmul>
   8a0b8:	1136      	asrs	r6, r6, #4
   8a0ba:	4680      	mov	r8, r0
   8a0bc:	4689      	mov	r9, r1
   8a0be:	f000 8170 	beq.w	8a3a2 <_dtoa_r+0xe52>
   8a0c2:	2300      	movs	r3, #0
   8a0c4:	f04f 0a02 	mov.w	sl, #2
   8a0c8:	4f47      	ldr	r7, [pc, #284]	; (8a1e8 <_dtoa_r+0xc98>)
   8a0ca:	07f2      	lsls	r2, r6, #31
   8a0cc:	d506      	bpl.n	8a0dc <_dtoa_r+0xb8c>
   8a0ce:	e9d7 2300 	ldrd	r2, r3, [r7]
   8a0d2:	f002 fd5d 	bl	8cb90 <__aeabi_dmul>
   8a0d6:	2301      	movs	r3, #1
   8a0d8:	f10a 0a01 	add.w	sl, sl, #1
   8a0dc:	1076      	asrs	r6, r6, #1
   8a0de:	f107 0708 	add.w	r7, r7, #8
   8a0e2:	d1f2      	bne.n	8a0ca <_dtoa_r+0xb7a>
   8a0e4:	2b00      	cmp	r3, #0
   8a0e6:	f43f abb1 	beq.w	8984c <_dtoa_r+0x2fc>
   8a0ea:	4680      	mov	r8, r0
   8a0ec:	4689      	mov	r9, r1
   8a0ee:	f7ff bbad 	b.w	8984c <_dtoa_r+0x2fc>
   8a0f2:	9b04      	ldr	r3, [sp, #16]
   8a0f4:	2b00      	cmp	r3, #0
   8a0f6:	f47f ae46 	bne.w	89d86 <_dtoa_r+0x836>
   8a0fa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8a0fe:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8a102:	2b00      	cmp	r3, #0
   8a104:	f43f af18 	beq.w	89f38 <_dtoa_r+0x9e8>
   8a108:	e63d      	b.n	89d86 <_dtoa_r+0x836>
   8a10a:	2a00      	cmp	r2, #0
   8a10c:	dd12      	ble.n	8a134 <_dtoa_r+0xbe4>
   8a10e:	4629      	mov	r1, r5
   8a110:	2201      	movs	r2, #1
   8a112:	4620      	mov	r0, r4
   8a114:	9304      	str	r3, [sp, #16]
   8a116:	f001 fc79 	bl	8ba0c <__lshift>
   8a11a:	4649      	mov	r1, r9
   8a11c:	4605      	mov	r5, r0
   8a11e:	f001 fceb 	bl	8baf8 <__mcmp>
   8a122:	2800      	cmp	r0, #0
   8a124:	9b04      	ldr	r3, [sp, #16]
   8a126:	f340 8117 	ble.w	8a358 <_dtoa_r+0xe08>
   8a12a:	2b39      	cmp	r3, #57	; 0x39
   8a12c:	f000 80fb 	beq.w	8a326 <_dtoa_r+0xdd6>
   8a130:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8a134:	46ba      	mov	sl, r7
   8a136:	9a07      	ldr	r2, [sp, #28]
   8a138:	4637      	mov	r7, r6
   8a13a:	3201      	adds	r2, #1
   8a13c:	4646      	mov	r6, r8
   8a13e:	9207      	str	r2, [sp, #28]
   8a140:	f80a 3b01 	strb.w	r3, [sl], #1
   8a144:	e5e1      	b.n	89d0a <_dtoa_r+0x7ba>
   8a146:	9509      	str	r5, [sp, #36]	; 0x24
   8a148:	9c06      	ldr	r4, [sp, #24]
   8a14a:	9d04      	ldr	r5, [sp, #16]
   8a14c:	4602      	mov	r2, r0
   8a14e:	460b      	mov	r3, r1
   8a150:	f002 fb68 	bl	8c824 <__adddf3>
   8a154:	4652      	mov	r2, sl
   8a156:	465b      	mov	r3, fp
   8a158:	4680      	mov	r8, r0
   8a15a:	4689      	mov	r9, r1
   8a15c:	f002 ffa8 	bl	8d0b0 <__aeabi_dcmpgt>
   8a160:	b960      	cbnz	r0, 8a17c <_dtoa_r+0xc2c>
   8a162:	4652      	mov	r2, sl
   8a164:	465b      	mov	r3, fp
   8a166:	4640      	mov	r0, r8
   8a168:	4649      	mov	r1, r9
   8a16a:	f002 ff79 	bl	8d060 <__aeabi_dcmpeq>
   8a16e:	2800      	cmp	r0, #0
   8a170:	f43f accb 	beq.w	89b0a <_dtoa_r+0x5ba>
   8a174:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8a176:	07d9      	lsls	r1, r3, #31
   8a178:	f57f acc7 	bpl.w	89b0a <_dtoa_r+0x5ba>
   8a17c:	9a03      	ldr	r2, [sp, #12]
   8a17e:	f7ff bbff 	b.w	89980 <_dtoa_r+0x430>
   8a182:	4620      	mov	r0, r4
   8a184:	6871      	ldr	r1, [r6, #4]
   8a186:	f001 fa3b 	bl	8b600 <_Balloc>
   8a18a:	4607      	mov	r7, r0
   8a18c:	2800      	cmp	r0, #0
   8a18e:	f000 810c 	beq.w	8a3aa <_dtoa_r+0xe5a>
   8a192:	6933      	ldr	r3, [r6, #16]
   8a194:	f106 010c 	add.w	r1, r6, #12
   8a198:	3302      	adds	r3, #2
   8a19a:	009a      	lsls	r2, r3, #2
   8a19c:	300c      	adds	r0, #12
   8a19e:	f7fc fadd 	bl	8675c <memcpy>
   8a1a2:	4639      	mov	r1, r7
   8a1a4:	2201      	movs	r2, #1
   8a1a6:	4620      	mov	r0, r4
   8a1a8:	f001 fc30 	bl	8ba0c <__lshift>
   8a1ac:	4680      	mov	r8, r0
   8a1ae:	e610      	b.n	89dd2 <_dtoa_r+0x882>
   8a1b0:	4629      	mov	r1, r5
   8a1b2:	4620      	mov	r0, r4
   8a1b4:	f001 fbce 	bl	8b954 <__pow5mult>
   8a1b8:	4605      	mov	r5, r0
   8a1ba:	e51e      	b.n	89bfa <_dtoa_r+0x6aa>
   8a1bc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   8a1c0:	1a9f      	subs	r7, r3, r2
   8a1c2:	e4c2      	b.n	89b4a <_dtoa_r+0x5fa>
   8a1c4:	2b39      	cmp	r3, #57	; 0x39
   8a1c6:	f000 80ae 	beq.w	8a326 <_dtoa_r+0xdd6>
   8a1ca:	46ba      	mov	sl, r7
   8a1cc:	3301      	adds	r3, #1
   8a1ce:	e7b2      	b.n	8a136 <_dtoa_r+0xbe6>
   8a1d0:	9a07      	ldr	r2, [sp, #28]
   8a1d2:	4637      	mov	r7, r6
   8a1d4:	3201      	adds	r2, #1
   8a1d6:	4646      	mov	r6, r8
   8a1d8:	9207      	str	r2, [sp, #28]
   8a1da:	e577      	b.n	89ccc <_dtoa_r+0x77c>
   8a1dc:	0008d554 	.word	0x0008d554
   8a1e0:	7ff00000 	.word	0x7ff00000
   8a1e4:	0008d6b0 	.word	0x0008d6b0
   8a1e8:	0008d688 	.word	0x0008d688
   8a1ec:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   8a1f0:	4983      	ldr	r1, [pc, #524]	; (8a400 <_dtoa_r+0xeb0>)
   8a1f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8a1f6:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   8a1fa:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8a1fe:	f002 fcc7 	bl	8cb90 <__aeabi_dmul>
   8a202:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a206:	4649      	mov	r1, r9
   8a208:	4640      	mov	r0, r8
   8a20a:	f002 ff71 	bl	8d0f0 <__aeabi_d2iz>
   8a20e:	4606      	mov	r6, r0
   8a210:	f002 fc54 	bl	8cabc <__aeabi_i2d>
   8a214:	460b      	mov	r3, r1
   8a216:	4602      	mov	r2, r0
   8a218:	4649      	mov	r1, r9
   8a21a:	4640      	mov	r0, r8
   8a21c:	f002 fb00 	bl	8c820 <__aeabi_dsub>
   8a220:	4653      	mov	r3, sl
   8a222:	9f03      	ldr	r7, [sp, #12]
   8a224:	3630      	adds	r6, #48	; 0x30
   8a226:	2b01      	cmp	r3, #1
   8a228:	4680      	mov	r8, r0
   8a22a:	4689      	mov	r9, r1
   8a22c:	f807 6b01 	strb.w	r6, [r7], #1
   8a230:	f000 80ac 	beq.w	8a38c <_dtoa_r+0xe3c>
   8a234:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   8a236:	9b03      	ldr	r3, [sp, #12]
   8a238:	441e      	add	r6, r3
   8a23a:	2200      	movs	r2, #0
   8a23c:	4b71      	ldr	r3, [pc, #452]	; (8a404 <_dtoa_r+0xeb4>)
   8a23e:	4640      	mov	r0, r8
   8a240:	4649      	mov	r1, r9
   8a242:	f002 fca5 	bl	8cb90 <__aeabi_dmul>
   8a246:	4689      	mov	r9, r1
   8a248:	4680      	mov	r8, r0
   8a24a:	f002 ff51 	bl	8d0f0 <__aeabi_d2iz>
   8a24e:	4682      	mov	sl, r0
   8a250:	f002 fc34 	bl	8cabc <__aeabi_i2d>
   8a254:	4602      	mov	r2, r0
   8a256:	460b      	mov	r3, r1
   8a258:	4640      	mov	r0, r8
   8a25a:	4649      	mov	r1, r9
   8a25c:	f002 fae0 	bl	8c820 <__aeabi_dsub>
   8a260:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   8a264:	f807 ab01 	strb.w	sl, [r7], #1
   8a268:	42b7      	cmp	r7, r6
   8a26a:	4680      	mov	r8, r0
   8a26c:	4689      	mov	r9, r1
   8a26e:	d1e4      	bne.n	8a23a <_dtoa_r+0xcea>
   8a270:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8a274:	2200      	movs	r2, #0
   8a276:	4b64      	ldr	r3, [pc, #400]	; (8a408 <_dtoa_r+0xeb8>)
   8a278:	f002 fad4 	bl	8c824 <__adddf3>
   8a27c:	4642      	mov	r2, r8
   8a27e:	464b      	mov	r3, r9
   8a280:	f002 fef8 	bl	8d074 <__aeabi_dcmplt>
   8a284:	2800      	cmp	r0, #0
   8a286:	d162      	bne.n	8a34e <_dtoa_r+0xdfe>
   8a288:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8a28c:	2000      	movs	r0, #0
   8a28e:	495e      	ldr	r1, [pc, #376]	; (8a408 <_dtoa_r+0xeb8>)
   8a290:	f002 fac6 	bl	8c820 <__aeabi_dsub>
   8a294:	4642      	mov	r2, r8
   8a296:	464b      	mov	r3, r9
   8a298:	f002 ff0a 	bl	8d0b0 <__aeabi_dcmpgt>
   8a29c:	2800      	cmp	r0, #0
   8a29e:	f43f aba9 	beq.w	899f4 <_dtoa_r+0x4a4>
   8a2a2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   8a2a6:	46b2      	mov	sl, r6
   8a2a8:	2b30      	cmp	r3, #48	; 0x30
   8a2aa:	f106 36ff 	add.w	r6, r6, #4294967295
   8a2ae:	d0f8      	beq.n	8a2a2 <_dtoa_r+0xd52>
   8a2b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8a2b2:	3301      	adds	r3, #1
   8a2b4:	9307      	str	r3, [sp, #28]
   8a2b6:	e538      	b.n	89d2a <_dtoa_r+0x7da>
   8a2b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8a2ba:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8a2be:	e6d5      	b.n	8a06c <_dtoa_r+0xb1c>
   8a2c0:	f04f 0a02 	mov.w	sl, #2
   8a2c4:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   8a2c8:	f7ff bac0 	b.w	8984c <_dtoa_r+0x2fc>
   8a2cc:	9b08      	ldr	r3, [sp, #32]
   8a2ce:	2b00      	cmp	r3, #0
   8a2d0:	f43f ab62 	beq.w	89998 <_dtoa_r+0x448>
   8a2d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a2d6:	2b00      	cmp	r3, #0
   8a2d8:	f77f ab8c 	ble.w	899f4 <_dtoa_r+0x4a4>
   8a2dc:	9313      	str	r3, [sp, #76]	; 0x4c
   8a2de:	9b07      	ldr	r3, [sp, #28]
   8a2e0:	2200      	movs	r2, #0
   8a2e2:	3b01      	subs	r3, #1
   8a2e4:	4640      	mov	r0, r8
   8a2e6:	4649      	mov	r1, r9
   8a2e8:	9314      	str	r3, [sp, #80]	; 0x50
   8a2ea:	4b46      	ldr	r3, [pc, #280]	; (8a404 <_dtoa_r+0xeb4>)
   8a2ec:	f002 fc50 	bl	8cb90 <__aeabi_dmul>
   8a2f0:	4680      	mov	r8, r0
   8a2f2:	4689      	mov	r9, r1
   8a2f4:	f10a 0001 	add.w	r0, sl, #1
   8a2f8:	f002 fbe0 	bl	8cabc <__aeabi_i2d>
   8a2fc:	4642      	mov	r2, r8
   8a2fe:	464b      	mov	r3, r9
   8a300:	f002 fc46 	bl	8cb90 <__aeabi_dmul>
   8a304:	4b41      	ldr	r3, [pc, #260]	; (8a40c <_dtoa_r+0xebc>)
   8a306:	2200      	movs	r2, #0
   8a308:	f002 fa8c 	bl	8c824 <__adddf3>
   8a30c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   8a310:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8a314:	9311      	str	r3, [sp, #68]	; 0x44
   8a316:	f7ff babc 	b.w	89892 <_dtoa_r+0x342>
   8a31a:	9b07      	ldr	r3, [sp, #28]
   8a31c:	3301      	adds	r3, #1
   8a31e:	9307      	str	r3, [sp, #28]
   8a320:	2331      	movs	r3, #49	; 0x31
   8a322:	f7ff bb34 	b.w	8998e <_dtoa_r+0x43e>
   8a326:	9b07      	ldr	r3, [sp, #28]
   8a328:	46bb      	mov	fp, r7
   8a32a:	3301      	adds	r3, #1
   8a32c:	9307      	str	r3, [sp, #28]
   8a32e:	2339      	movs	r3, #57	; 0x39
   8a330:	4637      	mov	r7, r6
   8a332:	f80b 3b01 	strb.w	r3, [fp], #1
   8a336:	4646      	mov	r6, r8
   8a338:	e4d7      	b.n	89cea <_dtoa_r+0x79a>
   8a33a:	f04f 0900 	mov.w	r9, #0
   8a33e:	464e      	mov	r6, r9
   8a340:	e649      	b.n	89fd6 <_dtoa_r+0xa86>
   8a342:	469a      	mov	sl, r3
   8a344:	e468      	b.n	89c18 <_dtoa_r+0x6c8>
   8a346:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8a348:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8a34a:	46b2      	mov	sl, r6
   8a34c:	e7b0      	b.n	8a2b0 <_dtoa_r+0xd60>
   8a34e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8a350:	9a03      	ldr	r2, [sp, #12]
   8a352:	9307      	str	r3, [sp, #28]
   8a354:	f7ff bb14 	b.w	89980 <_dtoa_r+0x430>
   8a358:	f47f aeec 	bne.w	8a134 <_dtoa_r+0xbe4>
   8a35c:	07da      	lsls	r2, r3, #31
   8a35e:	f57f aee9 	bpl.w	8a134 <_dtoa_r+0xbe4>
   8a362:	e6e2      	b.n	8a12a <_dtoa_r+0xbda>
   8a364:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   8a368:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8a36a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   8a36c:	f7ff bb42 	b.w	899f4 <_dtoa_r+0x4a4>
   8a370:	2b39      	cmp	r3, #57	; 0x39
   8a372:	d0d8      	beq.n	8a326 <_dtoa_r+0xdd6>
   8a374:	f1ba 0f00 	cmp.w	sl, #0
   8a378:	f73f aeda 	bgt.w	8a130 <_dtoa_r+0xbe0>
   8a37c:	e6da      	b.n	8a134 <_dtoa_r+0xbe4>
   8a37e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a380:	2b02      	cmp	r3, #2
   8a382:	f73f ae13 	bgt.w	89fac <_dtoa_r+0xa5c>
   8a386:	f8cd 801c 	str.w	r8, [sp, #28]
   8a38a:	e59c      	b.n	89ec6 <_dtoa_r+0x976>
   8a38c:	463e      	mov	r6, r7
   8a38e:	e76f      	b.n	8a270 <_dtoa_r+0xd20>
   8a390:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8a392:	2b02      	cmp	r3, #2
   8a394:	f73f ae0a 	bgt.w	89fac <_dtoa_r+0xa5c>
   8a398:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a39a:	f8cd 801c 	str.w	r8, [sp, #28]
   8a39e:	9308      	str	r3, [sp, #32]
   8a3a0:	e50f      	b.n	89dc2 <_dtoa_r+0x872>
   8a3a2:	f04f 0a02 	mov.w	sl, #2
   8a3a6:	f7ff ba51 	b.w	8984c <_dtoa_r+0x2fc>
   8a3aa:	4602      	mov	r2, r0
   8a3ac:	f240 21ea 	movw	r1, #746	; 0x2ea
   8a3b0:	4b17      	ldr	r3, [pc, #92]	; (8a410 <_dtoa_r+0xec0>)
   8a3b2:	4818      	ldr	r0, [pc, #96]	; (8a414 <_dtoa_r+0xec4>)
   8a3b4:	f002 f8a4 	bl	8c500 <__assert_func>
   8a3b8:	2600      	movs	r6, #0
   8a3ba:	4620      	mov	r0, r4
   8a3bc:	4631      	mov	r1, r6
   8a3be:	6466      	str	r6, [r4, #68]	; 0x44
   8a3c0:	f001 f91e 	bl	8b600 <_Balloc>
   8a3c4:	9003      	str	r0, [sp, #12]
   8a3c6:	b978      	cbnz	r0, 8a3e8 <_dtoa_r+0xe98>
   8a3c8:	2200      	movs	r2, #0
   8a3ca:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8a3ce:	4b10      	ldr	r3, [pc, #64]	; (8a410 <_dtoa_r+0xec0>)
   8a3d0:	4810      	ldr	r0, [pc, #64]	; (8a414 <_dtoa_r+0xec4>)
   8a3d2:	f002 f895 	bl	8c500 <__assert_func>
   8a3d6:	4b10      	ldr	r3, [pc, #64]	; (8a418 <_dtoa_r+0xec8>)
   8a3d8:	9303      	str	r3, [sp, #12]
   8a3da:	f7ff b8f4 	b.w	895c6 <_dtoa_r+0x76>
   8a3de:	f43f ac33 	beq.w	89c48 <_dtoa_r+0x6f8>
   8a3e2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   8a3e6:	e4b5      	b.n	89d54 <_dtoa_r+0x804>
   8a3e8:	9b03      	ldr	r3, [sp, #12]
   8a3ea:	2201      	movs	r2, #1
   8a3ec:	6423      	str	r3, [r4, #64]	; 0x40
   8a3ee:	f04f 33ff 	mov.w	r3, #4294967295
   8a3f2:	9623      	str	r6, [sp, #140]	; 0x8c
   8a3f4:	9312      	str	r3, [sp, #72]	; 0x48
   8a3f6:	920c      	str	r2, [sp, #48]	; 0x30
   8a3f8:	9308      	str	r3, [sp, #32]
   8a3fa:	f7ff bafb 	b.w	899f4 <_dtoa_r+0x4a4>
   8a3fe:	bf00      	nop
   8a400:	0008d6b0 	.word	0x0008d6b0
   8a404:	40240000 	.word	0x40240000
   8a408:	3fe00000 	.word	0x3fe00000
   8a40c:	401c0000 	.word	0x401c0000
   8a410:	0008d564 	.word	0x0008d564
   8a414:	0008d578 	.word	0x0008d578
   8a418:	0008d558 	.word	0x0008d558

0008a41c <__sflush_r>:
   8a41c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a422:	460c      	mov	r4, r1
   8a424:	0711      	lsls	r1, r2, #28
   8a426:	4607      	mov	r7, r0
   8a428:	d443      	bmi.n	8a4b2 <__sflush_r+0x96>
   8a42a:	6863      	ldr	r3, [r4, #4]
   8a42c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8a430:	2b00      	cmp	r3, #0
   8a432:	81a2      	strh	r2, [r4, #12]
   8a434:	dd5b      	ble.n	8a4ee <__sflush_r+0xd2>
   8a436:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8a438:	2d00      	cmp	r5, #0
   8a43a:	d056      	beq.n	8a4ea <__sflush_r+0xce>
   8a43c:	2300      	movs	r3, #0
   8a43e:	683e      	ldr	r6, [r7, #0]
   8a440:	603b      	str	r3, [r7, #0]
   8a442:	b293      	uxth	r3, r2
   8a444:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8a448:	d155      	bne.n	8a4f6 <__sflush_r+0xda>
   8a44a:	2301      	movs	r3, #1
   8a44c:	4638      	mov	r0, r7
   8a44e:	69e1      	ldr	r1, [r4, #28]
   8a450:	47a8      	blx	r5
   8a452:	1c42      	adds	r2, r0, #1
   8a454:	d065      	beq.n	8a522 <__sflush_r+0x106>
   8a456:	89a3      	ldrh	r3, [r4, #12]
   8a458:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8a45a:	075b      	lsls	r3, r3, #29
   8a45c:	d505      	bpl.n	8a46a <__sflush_r+0x4e>
   8a45e:	6863      	ldr	r3, [r4, #4]
   8a460:	1ac0      	subs	r0, r0, r3
   8a462:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8a464:	b10b      	cbz	r3, 8a46a <__sflush_r+0x4e>
   8a466:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8a468:	1ac0      	subs	r0, r0, r3
   8a46a:	4602      	mov	r2, r0
   8a46c:	69e1      	ldr	r1, [r4, #28]
   8a46e:	2300      	movs	r3, #0
   8a470:	4638      	mov	r0, r7
   8a472:	47a8      	blx	r5
   8a474:	1c41      	adds	r1, r0, #1
   8a476:	d140      	bne.n	8a4fa <__sflush_r+0xde>
   8a478:	683b      	ldr	r3, [r7, #0]
   8a47a:	2b00      	cmp	r3, #0
   8a47c:	d03d      	beq.n	8a4fa <__sflush_r+0xde>
   8a47e:	2b1d      	cmp	r3, #29
   8a480:	d001      	beq.n	8a486 <__sflush_r+0x6a>
   8a482:	2b16      	cmp	r3, #22
   8a484:	d154      	bne.n	8a530 <__sflush_r+0x114>
   8a486:	2200      	movs	r2, #0
   8a488:	89a3      	ldrh	r3, [r4, #12]
   8a48a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a48e:	81a3      	strh	r3, [r4, #12]
   8a490:	6923      	ldr	r3, [r4, #16]
   8a492:	e9c4 3200 	strd	r3, r2, [r4]
   8a496:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8a498:	603e      	str	r6, [r7, #0]
   8a49a:	b331      	cbz	r1, 8a4ea <__sflush_r+0xce>
   8a49c:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8a4a0:	4299      	cmp	r1, r3
   8a4a2:	d002      	beq.n	8a4aa <__sflush_r+0x8e>
   8a4a4:	4638      	mov	r0, r7
   8a4a6:	f000 f9fb 	bl	8a8a0 <_free_r>
   8a4aa:	2300      	movs	r3, #0
   8a4ac:	4618      	mov	r0, r3
   8a4ae:	6323      	str	r3, [r4, #48]	; 0x30
   8a4b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a4b2:	6926      	ldr	r6, [r4, #16]
   8a4b4:	b1ce      	cbz	r6, 8a4ea <__sflush_r+0xce>
   8a4b6:	b293      	uxth	r3, r2
   8a4b8:	079a      	lsls	r2, r3, #30
   8a4ba:	bf18      	it	ne
   8a4bc:	2300      	movne	r3, #0
   8a4be:	6825      	ldr	r5, [r4, #0]
   8a4c0:	bf08      	it	eq
   8a4c2:	6963      	ldreq	r3, [r4, #20]
   8a4c4:	6026      	str	r6, [r4, #0]
   8a4c6:	1bad      	subs	r5, r5, r6
   8a4c8:	60a3      	str	r3, [r4, #8]
   8a4ca:	e00c      	b.n	8a4e6 <__sflush_r+0xca>
   8a4cc:	462b      	mov	r3, r5
   8a4ce:	4632      	mov	r2, r6
   8a4d0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8a4d4:	4638      	mov	r0, r7
   8a4d6:	69e1      	ldr	r1, [r4, #28]
   8a4d8:	47e0      	blx	ip
   8a4da:	f1b0 0c00 	subs.w	ip, r0, #0
   8a4de:	eba5 050c 	sub.w	r5, r5, ip
   8a4e2:	4466      	add	r6, ip
   8a4e4:	dd16      	ble.n	8a514 <__sflush_r+0xf8>
   8a4e6:	2d00      	cmp	r5, #0
   8a4e8:	dcf0      	bgt.n	8a4cc <__sflush_r+0xb0>
   8a4ea:	2000      	movs	r0, #0
   8a4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a4ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8a4f0:	2b00      	cmp	r3, #0
   8a4f2:	dca0      	bgt.n	8a436 <__sflush_r+0x1a>
   8a4f4:	e7f9      	b.n	8a4ea <__sflush_r+0xce>
   8a4f6:	6d20      	ldr	r0, [r4, #80]	; 0x50
   8a4f8:	e7af      	b.n	8a45a <__sflush_r+0x3e>
   8a4fa:	2200      	movs	r2, #0
   8a4fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a500:	6062      	str	r2, [r4, #4]
   8a502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8a506:	6922      	ldr	r2, [r4, #16]
   8a508:	81a3      	strh	r3, [r4, #12]
   8a50a:	04db      	lsls	r3, r3, #19
   8a50c:	6022      	str	r2, [r4, #0]
   8a50e:	d5c2      	bpl.n	8a496 <__sflush_r+0x7a>
   8a510:	6520      	str	r0, [r4, #80]	; 0x50
   8a512:	e7c0      	b.n	8a496 <__sflush_r+0x7a>
   8a514:	89a3      	ldrh	r3, [r4, #12]
   8a516:	f04f 30ff 	mov.w	r0, #4294967295
   8a51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a51e:	81a3      	strh	r3, [r4, #12]
   8a520:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a522:	683b      	ldr	r3, [r7, #0]
   8a524:	2b00      	cmp	r3, #0
   8a526:	d096      	beq.n	8a456 <__sflush_r+0x3a>
   8a528:	2b1d      	cmp	r3, #29
   8a52a:	d006      	beq.n	8a53a <__sflush_r+0x11e>
   8a52c:	2b16      	cmp	r3, #22
   8a52e:	d004      	beq.n	8a53a <__sflush_r+0x11e>
   8a530:	89a3      	ldrh	r3, [r4, #12]
   8a532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a536:	81a3      	strh	r3, [r4, #12]
   8a538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a53a:	2000      	movs	r0, #0
   8a53c:	603e      	str	r6, [r7, #0]
   8a53e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008a540 <_fflush_r>:
   8a540:	b538      	push	{r3, r4, r5, lr}
   8a542:	4605      	mov	r5, r0
   8a544:	460c      	mov	r4, r1
   8a546:	b108      	cbz	r0, 8a54c <_fflush_r+0xc>
   8a548:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a54a:	b1a3      	cbz	r3, 8a576 <_fflush_r+0x36>
   8a54c:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a550:	b1b8      	cbz	r0, 8a582 <_fflush_r+0x42>
   8a552:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a554:	07db      	lsls	r3, r3, #31
   8a556:	d401      	bmi.n	8a55c <_fflush_r+0x1c>
   8a558:	0581      	lsls	r1, r0, #22
   8a55a:	d515      	bpl.n	8a588 <_fflush_r+0x48>
   8a55c:	4628      	mov	r0, r5
   8a55e:	4621      	mov	r1, r4
   8a560:	f7ff ff5c 	bl	8a41c <__sflush_r>
   8a564:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a566:	4605      	mov	r5, r0
   8a568:	07da      	lsls	r2, r3, #31
   8a56a:	d402      	bmi.n	8a572 <_fflush_r+0x32>
   8a56c:	89a3      	ldrh	r3, [r4, #12]
   8a56e:	059b      	lsls	r3, r3, #22
   8a570:	d50e      	bpl.n	8a590 <_fflush_r+0x50>
   8a572:	4628      	mov	r0, r5
   8a574:	bd38      	pop	{r3, r4, r5, pc}
   8a576:	f000 f817 	bl	8a5a8 <__sinit>
   8a57a:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8a57e:	2800      	cmp	r0, #0
   8a580:	d1e7      	bne.n	8a552 <_fflush_r+0x12>
   8a582:	4605      	mov	r5, r0
   8a584:	4628      	mov	r0, r5
   8a586:	bd38      	pop	{r3, r4, r5, pc}
   8a588:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a58a:	f000 fc33 	bl	8adf4 <__retarget_lock_acquire_recursive>
   8a58e:	e7e5      	b.n	8a55c <_fflush_r+0x1c>
   8a590:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a592:	f000 fc31 	bl	8adf8 <__retarget_lock_release_recursive>
   8a596:	4628      	mov	r0, r5
   8a598:	bd38      	pop	{r3, r4, r5, pc}
   8a59a:	bf00      	nop

0008a59c <_cleanup_r>:
   8a59c:	4901      	ldr	r1, [pc, #4]	; (8a5a4 <_cleanup_r+0x8>)
   8a59e:	f000 bbf7 	b.w	8ad90 <_fwalk_reent>
   8a5a2:	bf00      	nop
   8a5a4:	0008c5e9 	.word	0x0008c5e9

0008a5a8 <__sinit>:
   8a5a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a5ac:	4682      	mov	sl, r0
   8a5ae:	4839      	ldr	r0, [pc, #228]	; (8a694 <__sinit+0xec>)
   8a5b0:	f000 fc20 	bl	8adf4 <__retarget_lock_acquire_recursive>
   8a5b4:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   8a5b8:	2c00      	cmp	r4, #0
   8a5ba:	d166      	bne.n	8a68a <__sinit+0xe2>
   8a5bc:	2304      	movs	r3, #4
   8a5be:	2203      	movs	r2, #3
   8a5c0:	4935      	ldr	r1, [pc, #212]	; (8a698 <__sinit+0xf0>)
   8a5c2:	f8da 5004 	ldr.w	r5, [sl, #4]
   8a5c6:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   8a5ca:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8a69c <__sinit+0xf4>
   8a5ce:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8a6a0 <__sinit+0xf8>
   8a5d2:	4f34      	ldr	r7, [pc, #208]	; (8a6a4 <__sinit+0xfc>)
   8a5d4:	4e34      	ldr	r6, [pc, #208]	; (8a6a8 <__sinit+0x100>)
   8a5d6:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   8a5da:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   8a5de:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   8a5e2:	4621      	mov	r1, r4
   8a5e4:	60eb      	str	r3, [r5, #12]
   8a5e6:	2208      	movs	r2, #8
   8a5e8:	e9c5 4400 	strd	r4, r4, [r5]
   8a5ec:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8a5f0:	666c      	str	r4, [r5, #100]	; 0x64
   8a5f2:	60ac      	str	r4, [r5, #8]
   8a5f4:	61ac      	str	r4, [r5, #24]
   8a5f6:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8a5fa:	f7fc f925 	bl	86848 <memset>
   8a5fe:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8a602:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8a606:	62ee      	str	r6, [r5, #44]	; 0x2c
   8a608:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8a60c:	f000 fbee 	bl	8adec <__retarget_lock_init_recursive>
   8a610:	f8da 5008 	ldr.w	r5, [sl, #8]
   8a614:	4b25      	ldr	r3, [pc, #148]	; (8a6ac <__sinit+0x104>)
   8a616:	4621      	mov	r1, r4
   8a618:	60eb      	str	r3, [r5, #12]
   8a61a:	2208      	movs	r2, #8
   8a61c:	e9c5 4400 	strd	r4, r4, [r5]
   8a620:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8a624:	666c      	str	r4, [r5, #100]	; 0x64
   8a626:	60ac      	str	r4, [r5, #8]
   8a628:	61ac      	str	r4, [r5, #24]
   8a62a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8a62e:	f7fc f90b 	bl	86848 <memset>
   8a632:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8a636:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8a63a:	62ee      	str	r6, [r5, #44]	; 0x2c
   8a63c:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8a640:	f000 fbd4 	bl	8adec <__retarget_lock_init_recursive>
   8a644:	f8da 500c 	ldr.w	r5, [sl, #12]
   8a648:	4b19      	ldr	r3, [pc, #100]	; (8a6b0 <__sinit+0x108>)
   8a64a:	4621      	mov	r1, r4
   8a64c:	60eb      	str	r3, [r5, #12]
   8a64e:	2208      	movs	r2, #8
   8a650:	e9c5 4400 	strd	r4, r4, [r5]
   8a654:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8a658:	666c      	str	r4, [r5, #100]	; 0x64
   8a65a:	60ac      	str	r4, [r5, #8]
   8a65c:	61ac      	str	r4, [r5, #24]
   8a65e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8a662:	f7fc f8f1 	bl	86848 <memset>
   8a666:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8a66a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8a66e:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   8a672:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   8a676:	f000 fbb9 	bl	8adec <__retarget_lock_init_recursive>
   8a67a:	2301      	movs	r3, #1
   8a67c:	4805      	ldr	r0, [pc, #20]	; (8a694 <__sinit+0xec>)
   8a67e:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   8a682:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a686:	f000 bbb7 	b.w	8adf8 <__retarget_lock_release_recursive>
   8a68a:	4802      	ldr	r0, [pc, #8]	; (8a694 <__sinit+0xec>)
   8a68c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a690:	f000 bbb2 	b.w	8adf8 <__retarget_lock_release_recursive>
   8a694:	20001464 	.word	0x20001464
   8a698:	0008a59d 	.word	0x0008a59d
   8a69c:	0008c1b9 	.word	0x0008c1b9
   8a6a0:	0008c1dd 	.word	0x0008c1dd
   8a6a4:	0008c21d 	.word	0x0008c21d
   8a6a8:	0008c23d 	.word	0x0008c23d
   8a6ac:	00010009 	.word	0x00010009
   8a6b0:	00020012 	.word	0x00020012

0008a6b4 <__sfp_lock_acquire>:
   8a6b4:	4801      	ldr	r0, [pc, #4]	; (8a6bc <__sfp_lock_acquire+0x8>)
   8a6b6:	f000 bb9d 	b.w	8adf4 <__retarget_lock_acquire_recursive>
   8a6ba:	bf00      	nop
   8a6bc:	20001460 	.word	0x20001460

0008a6c0 <__sfp_lock_release>:
   8a6c0:	4801      	ldr	r0, [pc, #4]	; (8a6c8 <__sfp_lock_release+0x8>)
   8a6c2:	f000 bb99 	b.w	8adf8 <__retarget_lock_release_recursive>
   8a6c6:	bf00      	nop
   8a6c8:	20001460 	.word	0x20001460

0008a6cc <__libc_fini_array>:
   8a6cc:	b538      	push	{r3, r4, r5, lr}
   8a6ce:	4b08      	ldr	r3, [pc, #32]	; (8a6f0 <__libc_fini_array+0x24>)
   8a6d0:	4d08      	ldr	r5, [pc, #32]	; (8a6f4 <__libc_fini_array+0x28>)
   8a6d2:	1b5b      	subs	r3, r3, r5
   8a6d4:	109c      	asrs	r4, r3, #2
   8a6d6:	d007      	beq.n	8a6e8 <__libc_fini_array+0x1c>
   8a6d8:	3b04      	subs	r3, #4
   8a6da:	441d      	add	r5, r3
   8a6dc:	3c01      	subs	r4, #1
   8a6de:	f855 3904 	ldr.w	r3, [r5], #-4
   8a6e2:	4798      	blx	r3
   8a6e4:	2c00      	cmp	r4, #0
   8a6e6:	d1f9      	bne.n	8a6dc <__libc_fini_array+0x10>
   8a6e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8a6ec:	f003 b8f6 	b.w	8d8dc <_fini>
   8a6f0:	0008d8ec 	.word	0x0008d8ec
   8a6f4:	0008d8e8 	.word	0x0008d8e8

0008a6f8 <__fputwc>:
   8a6f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8a6fc:	b083      	sub	sp, #12
   8a6fe:	4607      	mov	r7, r0
   8a700:	4688      	mov	r8, r1
   8a702:	4614      	mov	r4, r2
   8a704:	f000 fb68 	bl	8add8 <__locale_mb_cur_max>
   8a708:	2801      	cmp	r0, #1
   8a70a:	d103      	bne.n	8a714 <__fputwc+0x1c>
   8a70c:	f108 33ff 	add.w	r3, r8, #4294967295
   8a710:	2bfe      	cmp	r3, #254	; 0xfe
   8a712:	d933      	bls.n	8a77c <__fputwc+0x84>
   8a714:	4642      	mov	r2, r8
   8a716:	4638      	mov	r0, r7
   8a718:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8a71c:	a901      	add	r1, sp, #4
   8a71e:	f001 fe67 	bl	8c3f0 <_wcrtomb_r>
   8a722:	1c42      	adds	r2, r0, #1
   8a724:	4606      	mov	r6, r0
   8a726:	d02f      	beq.n	8a788 <__fputwc+0x90>
   8a728:	b318      	cbz	r0, 8a772 <__fputwc+0x7a>
   8a72a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8a72e:	2500      	movs	r5, #0
   8a730:	f10d 0905 	add.w	r9, sp, #5
   8a734:	e008      	b.n	8a748 <__fputwc+0x50>
   8a736:	6823      	ldr	r3, [r4, #0]
   8a738:	1c5a      	adds	r2, r3, #1
   8a73a:	6022      	str	r2, [r4, #0]
   8a73c:	7019      	strb	r1, [r3, #0]
   8a73e:	3501      	adds	r5, #1
   8a740:	42b5      	cmp	r5, r6
   8a742:	d216      	bcs.n	8a772 <__fputwc+0x7a>
   8a744:	f819 1b01 	ldrb.w	r1, [r9], #1
   8a748:	68a3      	ldr	r3, [r4, #8]
   8a74a:	3b01      	subs	r3, #1
   8a74c:	2b00      	cmp	r3, #0
   8a74e:	60a3      	str	r3, [r4, #8]
   8a750:	daf1      	bge.n	8a736 <__fputwc+0x3e>
   8a752:	69a2      	ldr	r2, [r4, #24]
   8a754:	4293      	cmp	r3, r2
   8a756:	db01      	blt.n	8a75c <__fputwc+0x64>
   8a758:	290a      	cmp	r1, #10
   8a75a:	d1ec      	bne.n	8a736 <__fputwc+0x3e>
   8a75c:	4622      	mov	r2, r4
   8a75e:	4638      	mov	r0, r7
   8a760:	f001 fdee 	bl	8c340 <__swbuf_r>
   8a764:	1c43      	adds	r3, r0, #1
   8a766:	d1ea      	bne.n	8a73e <__fputwc+0x46>
   8a768:	4606      	mov	r6, r0
   8a76a:	4630      	mov	r0, r6
   8a76c:	b003      	add	sp, #12
   8a76e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a772:	4646      	mov	r6, r8
   8a774:	4630      	mov	r0, r6
   8a776:	b003      	add	sp, #12
   8a778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8a77c:	fa5f f188 	uxtb.w	r1, r8
   8a780:	4606      	mov	r6, r0
   8a782:	f88d 1004 	strb.w	r1, [sp, #4]
   8a786:	e7d2      	b.n	8a72e <__fputwc+0x36>
   8a788:	4630      	mov	r0, r6
   8a78a:	89a3      	ldrh	r3, [r4, #12]
   8a78c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8a790:	81a3      	strh	r3, [r4, #12]
   8a792:	b003      	add	sp, #12
   8a794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008a798 <_fputwc_r>:
   8a798:	b530      	push	{r4, r5, lr}
   8a79a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a79c:	4614      	mov	r4, r2
   8a79e:	f013 0f01 	tst.w	r3, #1
   8a7a2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8a7a6:	4605      	mov	r5, r0
   8a7a8:	b083      	sub	sp, #12
   8a7aa:	b29a      	uxth	r2, r3
   8a7ac:	d101      	bne.n	8a7b2 <_fputwc_r+0x1a>
   8a7ae:	0598      	lsls	r0, r3, #22
   8a7b0:	d51c      	bpl.n	8a7ec <_fputwc_r+0x54>
   8a7b2:	0490      	lsls	r0, r2, #18
   8a7b4:	d406      	bmi.n	8a7c4 <_fputwc_r+0x2c>
   8a7b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8a7b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8a7bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8a7c0:	81a3      	strh	r3, [r4, #12]
   8a7c2:	6662      	str	r2, [r4, #100]	; 0x64
   8a7c4:	4622      	mov	r2, r4
   8a7c6:	4628      	mov	r0, r5
   8a7c8:	f7ff ff96 	bl	8a6f8 <__fputwc>
   8a7cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8a7ce:	4605      	mov	r5, r0
   8a7d0:	07da      	lsls	r2, r3, #31
   8a7d2:	d402      	bmi.n	8a7da <_fputwc_r+0x42>
   8a7d4:	89a3      	ldrh	r3, [r4, #12]
   8a7d6:	059b      	lsls	r3, r3, #22
   8a7d8:	d502      	bpl.n	8a7e0 <_fputwc_r+0x48>
   8a7da:	4628      	mov	r0, r5
   8a7dc:	b003      	add	sp, #12
   8a7de:	bd30      	pop	{r4, r5, pc}
   8a7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a7e2:	f000 fb09 	bl	8adf8 <__retarget_lock_release_recursive>
   8a7e6:	4628      	mov	r0, r5
   8a7e8:	b003      	add	sp, #12
   8a7ea:	bd30      	pop	{r4, r5, pc}
   8a7ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a7ee:	9101      	str	r1, [sp, #4]
   8a7f0:	f000 fb00 	bl	8adf4 <__retarget_lock_acquire_recursive>
   8a7f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8a7f8:	9901      	ldr	r1, [sp, #4]
   8a7fa:	b29a      	uxth	r2, r3
   8a7fc:	e7d9      	b.n	8a7b2 <_fputwc_r+0x1a>
   8a7fe:	bf00      	nop

0008a800 <_malloc_trim_r>:
   8a800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a802:	460c      	mov	r4, r1
   8a804:	4f23      	ldr	r7, [pc, #140]	; (8a894 <_malloc_trim_r+0x94>)
   8a806:	4606      	mov	r6, r0
   8a808:	f000 feee 	bl	8b5e8 <__malloc_lock>
   8a80c:	68bb      	ldr	r3, [r7, #8]
   8a80e:	685d      	ldr	r5, [r3, #4]
   8a810:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   8a814:	f025 0503 	bic.w	r5, r5, #3
   8a818:	330f      	adds	r3, #15
   8a81a:	442b      	add	r3, r5
   8a81c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   8a820:	f023 030f 	bic.w	r3, r3, #15
   8a824:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   8a828:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   8a82c:	db07      	blt.n	8a83e <_malloc_trim_r+0x3e>
   8a82e:	2100      	movs	r1, #0
   8a830:	4630      	mov	r0, r6
   8a832:	f001 fcaf 	bl	8c194 <_sbrk_r>
   8a836:	68bb      	ldr	r3, [r7, #8]
   8a838:	442b      	add	r3, r5
   8a83a:	4298      	cmp	r0, r3
   8a83c:	d004      	beq.n	8a848 <_malloc_trim_r+0x48>
   8a83e:	4630      	mov	r0, r6
   8a840:	f000 fed8 	bl	8b5f4 <__malloc_unlock>
   8a844:	2000      	movs	r0, #0
   8a846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a848:	4630      	mov	r0, r6
   8a84a:	4261      	negs	r1, r4
   8a84c:	f001 fca2 	bl	8c194 <_sbrk_r>
   8a850:	3001      	adds	r0, #1
   8a852:	d00d      	beq.n	8a870 <_malloc_trim_r+0x70>
   8a854:	4a10      	ldr	r2, [pc, #64]	; (8a898 <_malloc_trim_r+0x98>)
   8a856:	68bb      	ldr	r3, [r7, #8]
   8a858:	1b2d      	subs	r5, r5, r4
   8a85a:	f045 0501 	orr.w	r5, r5, #1
   8a85e:	605d      	str	r5, [r3, #4]
   8a860:	6813      	ldr	r3, [r2, #0]
   8a862:	4630      	mov	r0, r6
   8a864:	1b1b      	subs	r3, r3, r4
   8a866:	6013      	str	r3, [r2, #0]
   8a868:	f000 fec4 	bl	8b5f4 <__malloc_unlock>
   8a86c:	2001      	movs	r0, #1
   8a86e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8a870:	2100      	movs	r1, #0
   8a872:	4630      	mov	r0, r6
   8a874:	f001 fc8e 	bl	8c194 <_sbrk_r>
   8a878:	68ba      	ldr	r2, [r7, #8]
   8a87a:	1a83      	subs	r3, r0, r2
   8a87c:	2b0f      	cmp	r3, #15
   8a87e:	ddde      	ble.n	8a83e <_malloc_trim_r+0x3e>
   8a880:	f043 0301 	orr.w	r3, r3, #1
   8a884:	6053      	str	r3, [r2, #4]
   8a886:	4b05      	ldr	r3, [pc, #20]	; (8a89c <_malloc_trim_r+0x9c>)
   8a888:	4903      	ldr	r1, [pc, #12]	; (8a898 <_malloc_trim_r+0x98>)
   8a88a:	681b      	ldr	r3, [r3, #0]
   8a88c:	1ac0      	subs	r0, r0, r3
   8a88e:	6008      	str	r0, [r1, #0]
   8a890:	e7d5      	b.n	8a83e <_malloc_trim_r+0x3e>
   8a892:	bf00      	nop
   8a894:	20000a10 	.word	0x20000a10
   8a898:	20001468 	.word	0x20001468
   8a89c:	20000e18 	.word	0x20000e18

0008a8a0 <_free_r>:
   8a8a0:	2900      	cmp	r1, #0
   8a8a2:	d05e      	beq.n	8a962 <_free_r+0xc2>
   8a8a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8a8a6:	460c      	mov	r4, r1
   8a8a8:	4606      	mov	r6, r0
   8a8aa:	f000 fe9d 	bl	8b5e8 <__malloc_lock>
   8a8ae:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a8b2:	4f78      	ldr	r7, [pc, #480]	; (8aa94 <_free_r+0x1f4>)
   8a8b4:	f1a4 0508 	sub.w	r5, r4, #8
   8a8b8:	f022 0101 	bic.w	r1, r2, #1
   8a8bc:	1868      	adds	r0, r5, r1
   8a8be:	f8d7 c008 	ldr.w	ip, [r7, #8]
   8a8c2:	6843      	ldr	r3, [r0, #4]
   8a8c4:	4584      	cmp	ip, r0
   8a8c6:	f023 0303 	bic.w	r3, r3, #3
   8a8ca:	f000 8087 	beq.w	8a9dc <_free_r+0x13c>
   8a8ce:	07d2      	lsls	r2, r2, #31
   8a8d0:	6043      	str	r3, [r0, #4]
   8a8d2:	d434      	bmi.n	8a93e <_free_r+0x9e>
   8a8d4:	f854 2c08 	ldr.w	r2, [r4, #-8]
   8a8d8:	f107 0408 	add.w	r4, r7, #8
   8a8dc:	1aad      	subs	r5, r5, r2
   8a8de:	4411      	add	r1, r2
   8a8e0:	68aa      	ldr	r2, [r5, #8]
   8a8e2:	42a2      	cmp	r2, r4
   8a8e4:	d068      	beq.n	8a9b8 <_free_r+0x118>
   8a8e6:	eb00 0c03 	add.w	ip, r0, r3
   8a8ea:	f8dc e004 	ldr.w	lr, [ip, #4]
   8a8ee:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   8a8f2:	f01e 0f01 	tst.w	lr, #1
   8a8f6:	f8c2 c00c 	str.w	ip, [r2, #12]
   8a8fa:	f8cc 2008 	str.w	r2, [ip, #8]
   8a8fe:	f000 8091 	beq.w	8aa24 <_free_r+0x184>
   8a902:	f041 0301 	orr.w	r3, r1, #1
   8a906:	606b      	str	r3, [r5, #4]
   8a908:	6001      	str	r1, [r0, #0]
   8a90a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a90e:	d231      	bcs.n	8a974 <_free_r+0xd4>
   8a910:	094a      	lsrs	r2, r1, #5
   8a912:	08cb      	lsrs	r3, r1, #3
   8a914:	2101      	movs	r1, #1
   8a916:	4091      	lsls	r1, r2
   8a918:	687a      	ldr	r2, [r7, #4]
   8a91a:	3301      	adds	r3, #1
   8a91c:	4311      	orrs	r1, r2
   8a91e:	6079      	str	r1, [r7, #4]
   8a920:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   8a924:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   8a928:	3a08      	subs	r2, #8
   8a92a:	e9c5 1202 	strd	r1, r2, [r5, #8]
   8a92e:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   8a932:	60cd      	str	r5, [r1, #12]
   8a934:	4630      	mov	r0, r6
   8a936:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a93a:	f000 be5b 	b.w	8b5f4 <__malloc_unlock>
   8a93e:	18c2      	adds	r2, r0, r3
   8a940:	6852      	ldr	r2, [r2, #4]
   8a942:	07d2      	lsls	r2, r2, #31
   8a944:	d40e      	bmi.n	8a964 <_free_r+0xc4>
   8a946:	4419      	add	r1, r3
   8a948:	f107 0408 	add.w	r4, r7, #8
   8a94c:	6883      	ldr	r3, [r0, #8]
   8a94e:	42a3      	cmp	r3, r4
   8a950:	d070      	beq.n	8aa34 <_free_r+0x194>
   8a952:	68c2      	ldr	r2, [r0, #12]
   8a954:	60da      	str	r2, [r3, #12]
   8a956:	6093      	str	r3, [r2, #8]
   8a958:	f041 0301 	orr.w	r3, r1, #1
   8a95c:	606b      	str	r3, [r5, #4]
   8a95e:	5069      	str	r1, [r5, r1]
   8a960:	e7d3      	b.n	8a90a <_free_r+0x6a>
   8a962:	4770      	bx	lr
   8a964:	f041 0301 	orr.w	r3, r1, #1
   8a968:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   8a96c:	f844 3c04 	str.w	r3, [r4, #-4]
   8a970:	6001      	str	r1, [r0, #0]
   8a972:	d3cd      	bcc.n	8a910 <_free_r+0x70>
   8a974:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   8a978:	ea4f 2351 	mov.w	r3, r1, lsr #9
   8a97c:	d247      	bcs.n	8aa0e <_free_r+0x16e>
   8a97e:	098b      	lsrs	r3, r1, #6
   8a980:	f103 0039 	add.w	r0, r3, #57	; 0x39
   8a984:	f103 0238 	add.w	r2, r3, #56	; 0x38
   8a988:	00c3      	lsls	r3, r0, #3
   8a98a:	18f8      	adds	r0, r7, r3
   8a98c:	58fb      	ldr	r3, [r7, r3]
   8a98e:	3808      	subs	r0, #8
   8a990:	4298      	cmp	r0, r3
   8a992:	d058      	beq.n	8aa46 <_free_r+0x1a6>
   8a994:	685a      	ldr	r2, [r3, #4]
   8a996:	f022 0203 	bic.w	r2, r2, #3
   8a99a:	428a      	cmp	r2, r1
   8a99c:	d902      	bls.n	8a9a4 <_free_r+0x104>
   8a99e:	689b      	ldr	r3, [r3, #8]
   8a9a0:	4298      	cmp	r0, r3
   8a9a2:	d1f7      	bne.n	8a994 <_free_r+0xf4>
   8a9a4:	68d8      	ldr	r0, [r3, #12]
   8a9a6:	e9c5 3002 	strd	r3, r0, [r5, #8]
   8a9aa:	6085      	str	r5, [r0, #8]
   8a9ac:	4630      	mov	r0, r6
   8a9ae:	60dd      	str	r5, [r3, #12]
   8a9b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a9b4:	f000 be1e 	b.w	8b5f4 <__malloc_unlock>
   8a9b8:	18c2      	adds	r2, r0, r3
   8a9ba:	6852      	ldr	r2, [r2, #4]
   8a9bc:	07d2      	lsls	r2, r2, #31
   8a9be:	d463      	bmi.n	8aa88 <_free_r+0x1e8>
   8a9c0:	440b      	add	r3, r1
   8a9c2:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   8a9c6:	60ca      	str	r2, [r1, #12]
   8a9c8:	6091      	str	r1, [r2, #8]
   8a9ca:	f043 0201 	orr.w	r2, r3, #1
   8a9ce:	606a      	str	r2, [r5, #4]
   8a9d0:	4630      	mov	r0, r6
   8a9d2:	50eb      	str	r3, [r5, r3]
   8a9d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   8a9d8:	f000 be0c 	b.w	8b5f4 <__malloc_unlock>
   8a9dc:	440b      	add	r3, r1
   8a9de:	07d1      	lsls	r1, r2, #31
   8a9e0:	d407      	bmi.n	8a9f2 <_free_r+0x152>
   8a9e2:	f854 2c08 	ldr.w	r2, [r4, #-8]
   8a9e6:	1aad      	subs	r5, r5, r2
   8a9e8:	4413      	add	r3, r2
   8a9ea:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   8a9ee:	60ca      	str	r2, [r1, #12]
   8a9f0:	6091      	str	r1, [r2, #8]
   8a9f2:	f043 0201 	orr.w	r2, r3, #1
   8a9f6:	606a      	str	r2, [r5, #4]
   8a9f8:	4a27      	ldr	r2, [pc, #156]	; (8aa98 <_free_r+0x1f8>)
   8a9fa:	60bd      	str	r5, [r7, #8]
   8a9fc:	6812      	ldr	r2, [r2, #0]
   8a9fe:	429a      	cmp	r2, r3
   8aa00:	d898      	bhi.n	8a934 <_free_r+0x94>
   8aa02:	4b26      	ldr	r3, [pc, #152]	; (8aa9c <_free_r+0x1fc>)
   8aa04:	4630      	mov	r0, r6
   8aa06:	6819      	ldr	r1, [r3, #0]
   8aa08:	f7ff fefa 	bl	8a800 <_malloc_trim_r>
   8aa0c:	e792      	b.n	8a934 <_free_r+0x94>
   8aa0e:	2b14      	cmp	r3, #20
   8aa10:	d90a      	bls.n	8aa28 <_free_r+0x188>
   8aa12:	2b54      	cmp	r3, #84	; 0x54
   8aa14:	d81f      	bhi.n	8aa56 <_free_r+0x1b6>
   8aa16:	0b0b      	lsrs	r3, r1, #12
   8aa18:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   8aa1c:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   8aa20:	00c3      	lsls	r3, r0, #3
   8aa22:	e7b2      	b.n	8a98a <_free_r+0xea>
   8aa24:	4419      	add	r1, r3
   8aa26:	e791      	b.n	8a94c <_free_r+0xac>
   8aa28:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   8aa2c:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8aa30:	00c3      	lsls	r3, r0, #3
   8aa32:	e7aa      	b.n	8a98a <_free_r+0xea>
   8aa34:	f041 0301 	orr.w	r3, r1, #1
   8aa38:	e9c7 5504 	strd	r5, r5, [r7, #16]
   8aa3c:	e9c5 4402 	strd	r4, r4, [r5, #8]
   8aa40:	606b      	str	r3, [r5, #4]
   8aa42:	5069      	str	r1, [r5, r1]
   8aa44:	e776      	b.n	8a934 <_free_r+0x94>
   8aa46:	2101      	movs	r1, #1
   8aa48:	1092      	asrs	r2, r2, #2
   8aa4a:	fa01 f202 	lsl.w	r2, r1, r2
   8aa4e:	6879      	ldr	r1, [r7, #4]
   8aa50:	430a      	orrs	r2, r1
   8aa52:	607a      	str	r2, [r7, #4]
   8aa54:	e7a7      	b.n	8a9a6 <_free_r+0x106>
   8aa56:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8aa5a:	d806      	bhi.n	8aa6a <_free_r+0x1ca>
   8aa5c:	0bcb      	lsrs	r3, r1, #15
   8aa5e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   8aa62:	f103 0277 	add.w	r2, r3, #119	; 0x77
   8aa66:	00c3      	lsls	r3, r0, #3
   8aa68:	e78f      	b.n	8a98a <_free_r+0xea>
   8aa6a:	f240 5254 	movw	r2, #1364	; 0x554
   8aa6e:	4293      	cmp	r3, r2
   8aa70:	d806      	bhi.n	8aa80 <_free_r+0x1e0>
   8aa72:	0c8b      	lsrs	r3, r1, #18
   8aa74:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   8aa78:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   8aa7c:	00c3      	lsls	r3, r0, #3
   8aa7e:	e784      	b.n	8a98a <_free_r+0xea>
   8aa80:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   8aa84:	227e      	movs	r2, #126	; 0x7e
   8aa86:	e780      	b.n	8a98a <_free_r+0xea>
   8aa88:	f041 0301 	orr.w	r3, r1, #1
   8aa8c:	606b      	str	r3, [r5, #4]
   8aa8e:	6001      	str	r1, [r0, #0]
   8aa90:	e750      	b.n	8a934 <_free_r+0x94>
   8aa92:	bf00      	nop
   8aa94:	20000a10 	.word	0x20000a10
   8aa98:	20000e1c 	.word	0x20000e1c
   8aa9c:	20001498 	.word	0x20001498

0008aaa0 <__sfvwrite_r>:
   8aaa0:	6893      	ldr	r3, [r2, #8]
   8aaa2:	2b00      	cmp	r3, #0
   8aaa4:	f000 80b7 	beq.w	8ac16 <__sfvwrite_r+0x176>
   8aaa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aaac:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8aab0:	460c      	mov	r4, r1
   8aab2:	0719      	lsls	r1, r3, #28
   8aab4:	4680      	mov	r8, r0
   8aab6:	4617      	mov	r7, r2
   8aab8:	b083      	sub	sp, #12
   8aaba:	b298      	uxth	r0, r3
   8aabc:	d525      	bpl.n	8ab0a <__sfvwrite_r+0x6a>
   8aabe:	6923      	ldr	r3, [r4, #16]
   8aac0:	b31b      	cbz	r3, 8ab0a <__sfvwrite_r+0x6a>
   8aac2:	f010 0302 	ands.w	r3, r0, #2
   8aac6:	683d      	ldr	r5, [r7, #0]
   8aac8:	d02d      	beq.n	8ab26 <__sfvwrite_r+0x86>
   8aaca:	f04f 0b00 	mov.w	fp, #0
   8aace:	465e      	mov	r6, fp
   8aad0:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8ad8c <__sfvwrite_r+0x2ec>
   8aad4:	2e00      	cmp	r6, #0
   8aad6:	f000 808b 	beq.w	8abf0 <__sfvwrite_r+0x150>
   8aada:	4556      	cmp	r6, sl
   8aadc:	4633      	mov	r3, r6
   8aade:	465a      	mov	r2, fp
   8aae0:	bf28      	it	cs
   8aae2:	4653      	movcs	r3, sl
   8aae4:	4640      	mov	r0, r8
   8aae6:	69e1      	ldr	r1, [r4, #28]
   8aae8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8aaec:	47e0      	blx	ip
   8aaee:	2800      	cmp	r0, #0
   8aaf0:	f340 8087 	ble.w	8ac02 <__sfvwrite_r+0x162>
   8aaf4:	68bb      	ldr	r3, [r7, #8]
   8aaf6:	4483      	add	fp, r0
   8aaf8:	1a1b      	subs	r3, r3, r0
   8aafa:	1a36      	subs	r6, r6, r0
   8aafc:	60bb      	str	r3, [r7, #8]
   8aafe:	2b00      	cmp	r3, #0
   8ab00:	d1e8      	bne.n	8aad4 <__sfvwrite_r+0x34>
   8ab02:	2000      	movs	r0, #0
   8ab04:	b003      	add	sp, #12
   8ab06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ab0a:	4621      	mov	r1, r4
   8ab0c:	4640      	mov	r0, r8
   8ab0e:	f7fe fc0d 	bl	8932c <__swsetup_r>
   8ab12:	2800      	cmp	r0, #0
   8ab14:	f040 8136 	bne.w	8ad84 <__sfvwrite_r+0x2e4>
   8ab18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ab1c:	683d      	ldr	r5, [r7, #0]
   8ab1e:	b298      	uxth	r0, r3
   8ab20:	f010 0302 	ands.w	r3, r0, #2
   8ab24:	d1d1      	bne.n	8aaca <__sfvwrite_r+0x2a>
   8ab26:	f010 0901 	ands.w	r9, r0, #1
   8ab2a:	d176      	bne.n	8ac1a <__sfvwrite_r+0x17a>
   8ab2c:	464e      	mov	r6, r9
   8ab2e:	2e00      	cmp	r6, #0
   8ab30:	d05a      	beq.n	8abe8 <__sfvwrite_r+0x148>
   8ab32:	0582      	lsls	r2, r0, #22
   8ab34:	f8d4 b008 	ldr.w	fp, [r4, #8]
   8ab38:	f140 80b5 	bpl.w	8aca6 <__sfvwrite_r+0x206>
   8ab3c:	45b3      	cmp	fp, r6
   8ab3e:	465a      	mov	r2, fp
   8ab40:	f200 80cd 	bhi.w	8acde <__sfvwrite_r+0x23e>
   8ab44:	f410 6f90 	tst.w	r0, #1152	; 0x480
   8ab48:	f000 80cb 	beq.w	8ace2 <__sfvwrite_r+0x242>
   8ab4c:	6823      	ldr	r3, [r4, #0]
   8ab4e:	6921      	ldr	r1, [r4, #16]
   8ab50:	eba3 0b01 	sub.w	fp, r3, r1
   8ab54:	6963      	ldr	r3, [r4, #20]
   8ab56:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8ab5a:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8ab5e:	f10b 0301 	add.w	r3, fp, #1
   8ab62:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   8ab66:	4433      	add	r3, r6
   8ab68:	4553      	cmp	r3, sl
   8ab6a:	4652      	mov	r2, sl
   8ab6c:	bf84      	itt	hi
   8ab6e:	469a      	movhi	sl, r3
   8ab70:	4652      	movhi	r2, sl
   8ab72:	0543      	lsls	r3, r0, #21
   8ab74:	f140 80ea 	bpl.w	8ad4c <__sfvwrite_r+0x2ac>
   8ab78:	4611      	mov	r1, r2
   8ab7a:	4640      	mov	r0, r8
   8ab7c:	f000 f9ae 	bl	8aedc <_malloc_r>
   8ab80:	2800      	cmp	r0, #0
   8ab82:	f000 80f9 	beq.w	8ad78 <__sfvwrite_r+0x2d8>
   8ab86:	465a      	mov	r2, fp
   8ab88:	6921      	ldr	r1, [r4, #16]
   8ab8a:	9001      	str	r0, [sp, #4]
   8ab8c:	f7fb fde6 	bl	8675c <memcpy>
   8ab90:	89a2      	ldrh	r2, [r4, #12]
   8ab92:	9b01      	ldr	r3, [sp, #4]
   8ab94:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8ab98:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8ab9c:	81a2      	strh	r2, [r4, #12]
   8ab9e:	eb03 000b 	add.w	r0, r3, fp
   8aba2:	6123      	str	r3, [r4, #16]
   8aba4:	4632      	mov	r2, r6
   8aba6:	ebaa 030b 	sub.w	r3, sl, fp
   8abaa:	46b3      	mov	fp, r6
   8abac:	f8c4 a014 	str.w	sl, [r4, #20]
   8abb0:	60a3      	str	r3, [r4, #8]
   8abb2:	6020      	str	r0, [r4, #0]
   8abb4:	46b2      	mov	sl, r6
   8abb6:	2600      	movs	r6, #0
   8abb8:	4649      	mov	r1, r9
   8abba:	9201      	str	r2, [sp, #4]
   8abbc:	f000 fc98 	bl	8b4f0 <memmove>
   8abc0:	68a3      	ldr	r3, [r4, #8]
   8abc2:	6821      	ldr	r1, [r4, #0]
   8abc4:	9a01      	ldr	r2, [sp, #4]
   8abc6:	eba3 030b 	sub.w	r3, r3, fp
   8abca:	440a      	add	r2, r1
   8abcc:	60a3      	str	r3, [r4, #8]
   8abce:	6022      	str	r2, [r4, #0]
   8abd0:	68b8      	ldr	r0, [r7, #8]
   8abd2:	44d1      	add	r9, sl
   8abd4:	eba0 000a 	sub.w	r0, r0, sl
   8abd8:	60b8      	str	r0, [r7, #8]
   8abda:	2800      	cmp	r0, #0
   8abdc:	d091      	beq.n	8ab02 <__sfvwrite_r+0x62>
   8abde:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8abe2:	b280      	uxth	r0, r0
   8abe4:	2e00      	cmp	r6, #0
   8abe6:	d1a4      	bne.n	8ab32 <__sfvwrite_r+0x92>
   8abe8:	e9d5 9600 	ldrd	r9, r6, [r5]
   8abec:	3508      	adds	r5, #8
   8abee:	e79e      	b.n	8ab2e <__sfvwrite_r+0x8e>
   8abf0:	e9d5 b600 	ldrd	fp, r6, [r5]
   8abf4:	3508      	adds	r5, #8
   8abf6:	e76d      	b.n	8aad4 <__sfvwrite_r+0x34>
   8abf8:	4621      	mov	r1, r4
   8abfa:	4640      	mov	r0, r8
   8abfc:	f7ff fca0 	bl	8a540 <_fflush_r>
   8ac00:	b380      	cbz	r0, 8ac64 <__sfvwrite_r+0x1c4>
   8ac02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ac06:	f04f 30ff 	mov.w	r0, #4294967295
   8ac0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ac0e:	81a3      	strh	r3, [r4, #12]
   8ac10:	b003      	add	sp, #12
   8ac12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ac16:	2000      	movs	r0, #0
   8ac18:	4770      	bx	lr
   8ac1a:	461e      	mov	r6, r3
   8ac1c:	46aa      	mov	sl, r5
   8ac1e:	4699      	mov	r9, r3
   8ac20:	4618      	mov	r0, r3
   8ac22:	461d      	mov	r5, r3
   8ac24:	b356      	cbz	r6, 8ac7c <__sfvwrite_r+0x1dc>
   8ac26:	2800      	cmp	r0, #0
   8ac28:	d032      	beq.n	8ac90 <__sfvwrite_r+0x1f0>
   8ac2a:	464a      	mov	r2, r9
   8ac2c:	6820      	ldr	r0, [r4, #0]
   8ac2e:	6921      	ldr	r1, [r4, #16]
   8ac30:	42b2      	cmp	r2, r6
   8ac32:	bf28      	it	cs
   8ac34:	4632      	movcs	r2, r6
   8ac36:	4288      	cmp	r0, r1
   8ac38:	6963      	ldr	r3, [r4, #20]
   8ac3a:	d904      	bls.n	8ac46 <__sfvwrite_r+0x1a6>
   8ac3c:	68a1      	ldr	r1, [r4, #8]
   8ac3e:	eb03 0b01 	add.w	fp, r3, r1
   8ac42:	455a      	cmp	r2, fp
   8ac44:	dc74      	bgt.n	8ad30 <__sfvwrite_r+0x290>
   8ac46:	4293      	cmp	r3, r2
   8ac48:	dc65      	bgt.n	8ad16 <__sfvwrite_r+0x276>
   8ac4a:	462a      	mov	r2, r5
   8ac4c:	4640      	mov	r0, r8
   8ac4e:	69e1      	ldr	r1, [r4, #28]
   8ac50:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8ac54:	47e0      	blx	ip
   8ac56:	f1b0 0b00 	subs.w	fp, r0, #0
   8ac5a:	ddd2      	ble.n	8ac02 <__sfvwrite_r+0x162>
   8ac5c:	ebb9 090b 	subs.w	r9, r9, fp
   8ac60:	d0ca      	beq.n	8abf8 <__sfvwrite_r+0x158>
   8ac62:	2001      	movs	r0, #1
   8ac64:	68bb      	ldr	r3, [r7, #8]
   8ac66:	445d      	add	r5, fp
   8ac68:	eba3 030b 	sub.w	r3, r3, fp
   8ac6c:	eba6 060b 	sub.w	r6, r6, fp
   8ac70:	60bb      	str	r3, [r7, #8]
   8ac72:	2b00      	cmp	r3, #0
   8ac74:	f43f af45 	beq.w	8ab02 <__sfvwrite_r+0x62>
   8ac78:	2e00      	cmp	r6, #0
   8ac7a:	d1d4      	bne.n	8ac26 <__sfvwrite_r+0x186>
   8ac7c:	f10a 0308 	add.w	r3, sl, #8
   8ac80:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8ac84:	469a      	mov	sl, r3
   8ac86:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8ac8a:	3308      	adds	r3, #8
   8ac8c:	2e00      	cmp	r6, #0
   8ac8e:	d0f7      	beq.n	8ac80 <__sfvwrite_r+0x1e0>
   8ac90:	4632      	mov	r2, r6
   8ac92:	210a      	movs	r1, #10
   8ac94:	4628      	mov	r0, r5
   8ac96:	f000 fbe3 	bl	8b460 <memchr>
   8ac9a:	2800      	cmp	r0, #0
   8ac9c:	d069      	beq.n	8ad72 <__sfvwrite_r+0x2d2>
   8ac9e:	3001      	adds	r0, #1
   8aca0:	eba0 0905 	sub.w	r9, r0, r5
   8aca4:	e7c1      	b.n	8ac2a <__sfvwrite_r+0x18a>
   8aca6:	6820      	ldr	r0, [r4, #0]
   8aca8:	6923      	ldr	r3, [r4, #16]
   8acaa:	4298      	cmp	r0, r3
   8acac:	d81b      	bhi.n	8ace6 <__sfvwrite_r+0x246>
   8acae:	6963      	ldr	r3, [r4, #20]
   8acb0:	42b3      	cmp	r3, r6
   8acb2:	d818      	bhi.n	8ace6 <__sfvwrite_r+0x246>
   8acb4:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   8acb8:	45b4      	cmp	ip, r6
   8acba:	bf28      	it	cs
   8acbc:	46b4      	movcs	ip, r6
   8acbe:	fb9c fcf3 	sdiv	ip, ip, r3
   8acc2:	464a      	mov	r2, r9
   8acc4:	fb03 f30c 	mul.w	r3, r3, ip
   8acc8:	4640      	mov	r0, r8
   8acca:	69e1      	ldr	r1, [r4, #28]
   8accc:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8acd0:	47e0      	blx	ip
   8acd2:	f1b0 0a00 	subs.w	sl, r0, #0
   8acd6:	dd94      	ble.n	8ac02 <__sfvwrite_r+0x162>
   8acd8:	eba6 060a 	sub.w	r6, r6, sl
   8acdc:	e778      	b.n	8abd0 <__sfvwrite_r+0x130>
   8acde:	46b3      	mov	fp, r6
   8ace0:	4632      	mov	r2, r6
   8ace2:	6820      	ldr	r0, [r4, #0]
   8ace4:	e766      	b.n	8abb4 <__sfvwrite_r+0x114>
   8ace6:	45b3      	cmp	fp, r6
   8ace8:	46da      	mov	sl, fp
   8acea:	bf28      	it	cs
   8acec:	46b2      	movcs	sl, r6
   8acee:	4649      	mov	r1, r9
   8acf0:	4652      	mov	r2, sl
   8acf2:	f000 fbfd 	bl	8b4f0 <memmove>
   8acf6:	68a3      	ldr	r3, [r4, #8]
   8acf8:	6822      	ldr	r2, [r4, #0]
   8acfa:	eba3 030a 	sub.w	r3, r3, sl
   8acfe:	4452      	add	r2, sl
   8ad00:	60a3      	str	r3, [r4, #8]
   8ad02:	6022      	str	r2, [r4, #0]
   8ad04:	2b00      	cmp	r3, #0
   8ad06:	d1e7      	bne.n	8acd8 <__sfvwrite_r+0x238>
   8ad08:	4621      	mov	r1, r4
   8ad0a:	4640      	mov	r0, r8
   8ad0c:	f7ff fc18 	bl	8a540 <_fflush_r>
   8ad10:	2800      	cmp	r0, #0
   8ad12:	d0e1      	beq.n	8acd8 <__sfvwrite_r+0x238>
   8ad14:	e775      	b.n	8ac02 <__sfvwrite_r+0x162>
   8ad16:	4629      	mov	r1, r5
   8ad18:	4693      	mov	fp, r2
   8ad1a:	9201      	str	r2, [sp, #4]
   8ad1c:	f000 fbe8 	bl	8b4f0 <memmove>
   8ad20:	68a3      	ldr	r3, [r4, #8]
   8ad22:	9a01      	ldr	r2, [sp, #4]
   8ad24:	1a9b      	subs	r3, r3, r2
   8ad26:	60a3      	str	r3, [r4, #8]
   8ad28:	6823      	ldr	r3, [r4, #0]
   8ad2a:	441a      	add	r2, r3
   8ad2c:	6022      	str	r2, [r4, #0]
   8ad2e:	e795      	b.n	8ac5c <__sfvwrite_r+0x1bc>
   8ad30:	4629      	mov	r1, r5
   8ad32:	465a      	mov	r2, fp
   8ad34:	f000 fbdc 	bl	8b4f0 <memmove>
   8ad38:	6823      	ldr	r3, [r4, #0]
   8ad3a:	4621      	mov	r1, r4
   8ad3c:	445b      	add	r3, fp
   8ad3e:	4640      	mov	r0, r8
   8ad40:	6023      	str	r3, [r4, #0]
   8ad42:	f7ff fbfd 	bl	8a540 <_fflush_r>
   8ad46:	2800      	cmp	r0, #0
   8ad48:	d088      	beq.n	8ac5c <__sfvwrite_r+0x1bc>
   8ad4a:	e75a      	b.n	8ac02 <__sfvwrite_r+0x162>
   8ad4c:	4640      	mov	r0, r8
   8ad4e:	f000 fffb 	bl	8bd48 <_realloc_r>
   8ad52:	4603      	mov	r3, r0
   8ad54:	2800      	cmp	r0, #0
   8ad56:	f47f af22 	bne.w	8ab9e <__sfvwrite_r+0xfe>
   8ad5a:	4640      	mov	r0, r8
   8ad5c:	6921      	ldr	r1, [r4, #16]
   8ad5e:	f7ff fd9f 	bl	8a8a0 <_free_r>
   8ad62:	220c      	movs	r2, #12
   8ad64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ad68:	f8c8 2000 	str.w	r2, [r8]
   8ad6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8ad70:	e749      	b.n	8ac06 <__sfvwrite_r+0x166>
   8ad72:	1c72      	adds	r2, r6, #1
   8ad74:	4691      	mov	r9, r2
   8ad76:	e759      	b.n	8ac2c <__sfvwrite_r+0x18c>
   8ad78:	220c      	movs	r2, #12
   8ad7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ad7e:	f8c8 2000 	str.w	r2, [r8]
   8ad82:	e740      	b.n	8ac06 <__sfvwrite_r+0x166>
   8ad84:	f04f 30ff 	mov.w	r0, #4294967295
   8ad88:	e6bc      	b.n	8ab04 <__sfvwrite_r+0x64>
   8ad8a:	bf00      	nop
   8ad8c:	7ffffc00 	.word	0x7ffffc00

0008ad90 <_fwalk_reent>:
   8ad90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8ad94:	f04f 0900 	mov.w	r9, #0
   8ad98:	4607      	mov	r7, r0
   8ad9a:	4688      	mov	r8, r1
   8ad9c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8ada0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8ada4:	3d01      	subs	r5, #1
   8ada6:	d410      	bmi.n	8adca <_fwalk_reent+0x3a>
   8ada8:	89a3      	ldrh	r3, [r4, #12]
   8adaa:	3d01      	subs	r5, #1
   8adac:	2b01      	cmp	r3, #1
   8adae:	d908      	bls.n	8adc2 <_fwalk_reent+0x32>
   8adb0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8adb4:	3301      	adds	r3, #1
   8adb6:	d004      	beq.n	8adc2 <_fwalk_reent+0x32>
   8adb8:	4621      	mov	r1, r4
   8adba:	4638      	mov	r0, r7
   8adbc:	47c0      	blx	r8
   8adbe:	ea49 0900 	orr.w	r9, r9, r0
   8adc2:	1c6b      	adds	r3, r5, #1
   8adc4:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8adc8:	d1ee      	bne.n	8ada8 <_fwalk_reent+0x18>
   8adca:	6836      	ldr	r6, [r6, #0]
   8adcc:	2e00      	cmp	r6, #0
   8adce:	d1e7      	bne.n	8ada0 <_fwalk_reent+0x10>
   8add0:	4648      	mov	r0, r9
   8add2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8add6:	bf00      	nop

0008add8 <__locale_mb_cur_max>:
   8add8:	4b01      	ldr	r3, [pc, #4]	; (8ade0 <__locale_mb_cur_max+0x8>)
   8adda:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8adde:	4770      	bx	lr
   8ade0:	200008a4 	.word	0x200008a4

0008ade4 <_localeconv_r>:
   8ade4:	4800      	ldr	r0, [pc, #0]	; (8ade8 <_localeconv_r+0x4>)
   8ade6:	4770      	bx	lr
   8ade8:	20000994 	.word	0x20000994

0008adec <__retarget_lock_init_recursive>:
   8adec:	4770      	bx	lr
   8adee:	bf00      	nop

0008adf0 <__retarget_lock_close_recursive>:
   8adf0:	4770      	bx	lr
   8adf2:	bf00      	nop

0008adf4 <__retarget_lock_acquire_recursive>:
   8adf4:	4770      	bx	lr
   8adf6:	bf00      	nop

0008adf8 <__retarget_lock_release_recursive>:
   8adf8:	4770      	bx	lr
   8adfa:	bf00      	nop

0008adfc <__smakebuf_r>:
   8adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ae00:	898b      	ldrh	r3, [r1, #12]
   8ae02:	460c      	mov	r4, r1
   8ae04:	0799      	lsls	r1, r3, #30
   8ae06:	b096      	sub	sp, #88	; 0x58
   8ae08:	d508      	bpl.n	8ae1c <__smakebuf_r+0x20>
   8ae0a:	2201      	movs	r2, #1
   8ae0c:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8ae10:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8ae14:	6023      	str	r3, [r4, #0]
   8ae16:	b016      	add	sp, #88	; 0x58
   8ae18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ae1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ae20:	4606      	mov	r6, r0
   8ae22:	2900      	cmp	r1, #0
   8ae24:	db27      	blt.n	8ae76 <__smakebuf_r+0x7a>
   8ae26:	466a      	mov	r2, sp
   8ae28:	f001 fc58 	bl	8c6dc <_fstat_r>
   8ae2c:	2800      	cmp	r0, #0
   8ae2e:	db21      	blt.n	8ae74 <__smakebuf_r+0x78>
   8ae30:	9d01      	ldr	r5, [sp, #4]
   8ae32:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8ae36:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8ae3a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8ae3e:	fab5 f585 	clz	r5, r5
   8ae42:	f44f 6700 	mov.w	r7, #2048	; 0x800
   8ae46:	096d      	lsrs	r5, r5, #5
   8ae48:	4641      	mov	r1, r8
   8ae4a:	4630      	mov	r0, r6
   8ae4c:	f000 f846 	bl	8aedc <_malloc_r>
   8ae50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ae54:	b1f0      	cbz	r0, 8ae94 <__smakebuf_r+0x98>
   8ae56:	4a20      	ldr	r2, [pc, #128]	; (8aed8 <__smakebuf_r+0xdc>)
   8ae58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8ae5c:	63f2      	str	r2, [r6, #60]	; 0x3c
   8ae5e:	f8c4 8014 	str.w	r8, [r4, #20]
   8ae62:	81a3      	strh	r3, [r4, #12]
   8ae64:	6020      	str	r0, [r4, #0]
   8ae66:	6120      	str	r0, [r4, #16]
   8ae68:	bb35      	cbnz	r5, 8aeb8 <__smakebuf_r+0xbc>
   8ae6a:	433b      	orrs	r3, r7
   8ae6c:	81a3      	strh	r3, [r4, #12]
   8ae6e:	b016      	add	sp, #88	; 0x58
   8ae70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ae74:	89a3      	ldrh	r3, [r4, #12]
   8ae76:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8ae7a:	d019      	beq.n	8aeb0 <__smakebuf_r+0xb4>
   8ae7c:	f04f 0840 	mov.w	r8, #64	; 0x40
   8ae80:	4630      	mov	r0, r6
   8ae82:	4641      	mov	r1, r8
   8ae84:	2500      	movs	r5, #0
   8ae86:	f000 f829 	bl	8aedc <_malloc_r>
   8ae8a:	462f      	mov	r7, r5
   8ae8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ae90:	2800      	cmp	r0, #0
   8ae92:	d1e0      	bne.n	8ae56 <__smakebuf_r+0x5a>
   8ae94:	059a      	lsls	r2, r3, #22
   8ae96:	d4be      	bmi.n	8ae16 <__smakebuf_r+0x1a>
   8ae98:	2101      	movs	r1, #1
   8ae9a:	f023 0303 	bic.w	r3, r3, #3
   8ae9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8aea2:	f043 0302 	orr.w	r3, r3, #2
   8aea6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   8aeaa:	81a3      	strh	r3, [r4, #12]
   8aeac:	6022      	str	r2, [r4, #0]
   8aeae:	e7b2      	b.n	8ae16 <__smakebuf_r+0x1a>
   8aeb0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8aeb4:	462f      	mov	r7, r5
   8aeb6:	e7c7      	b.n	8ae48 <__smakebuf_r+0x4c>
   8aeb8:	4630      	mov	r0, r6
   8aeba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8aebe:	f001 fc21 	bl	8c704 <_isatty_r>
   8aec2:	b910      	cbnz	r0, 8aeca <__smakebuf_r+0xce>
   8aec4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8aec8:	e7cf      	b.n	8ae6a <__smakebuf_r+0x6e>
   8aeca:	89a3      	ldrh	r3, [r4, #12]
   8aecc:	f023 0303 	bic.w	r3, r3, #3
   8aed0:	f043 0301 	orr.w	r3, r3, #1
   8aed4:	b21b      	sxth	r3, r3
   8aed6:	e7c8      	b.n	8ae6a <__smakebuf_r+0x6e>
   8aed8:	0008a59d 	.word	0x0008a59d

0008aedc <_malloc_r>:
   8aedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8aee0:	f101 050b 	add.w	r5, r1, #11
   8aee4:	2d16      	cmp	r5, #22
   8aee6:	4606      	mov	r6, r0
   8aee8:	b083      	sub	sp, #12
   8aeea:	d825      	bhi.n	8af38 <_malloc_r+0x5c>
   8aeec:	2910      	cmp	r1, #16
   8aeee:	f200 80b8 	bhi.w	8b062 <_malloc_r+0x186>
   8aef2:	f000 fb79 	bl	8b5e8 <__malloc_lock>
   8aef6:	2510      	movs	r5, #16
   8aef8:	2218      	movs	r2, #24
   8aefa:	f04f 0c02 	mov.w	ip, #2
   8aefe:	4fb5      	ldr	r7, [pc, #724]	; (8b1d4 <_malloc_r+0x2f8>)
   8af00:	443a      	add	r2, r7
   8af02:	6853      	ldr	r3, [r2, #4]
   8af04:	f1a2 0108 	sub.w	r1, r2, #8
   8af08:	428b      	cmp	r3, r1
   8af0a:	f000 80b7 	beq.w	8b07c <_malloc_r+0x1a0>
   8af0e:	685a      	ldr	r2, [r3, #4]
   8af10:	68d9      	ldr	r1, [r3, #12]
   8af12:	f022 0203 	bic.w	r2, r2, #3
   8af16:	441a      	add	r2, r3
   8af18:	689c      	ldr	r4, [r3, #8]
   8af1a:	4630      	mov	r0, r6
   8af1c:	60e1      	str	r1, [r4, #12]
   8af1e:	608c      	str	r4, [r1, #8]
   8af20:	6851      	ldr	r1, [r2, #4]
   8af22:	f103 0408 	add.w	r4, r3, #8
   8af26:	f041 0101 	orr.w	r1, r1, #1
   8af2a:	6051      	str	r1, [r2, #4]
   8af2c:	f000 fb62 	bl	8b5f4 <__malloc_unlock>
   8af30:	4620      	mov	r0, r4
   8af32:	b003      	add	sp, #12
   8af34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8af38:	f035 0507 	bics.w	r5, r5, #7
   8af3c:	f100 8091 	bmi.w	8b062 <_malloc_r+0x186>
   8af40:	42a9      	cmp	r1, r5
   8af42:	f200 808e 	bhi.w	8b062 <_malloc_r+0x186>
   8af46:	f000 fb4f 	bl	8b5e8 <__malloc_lock>
   8af4a:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   8af4e:	f0c0 8194 	bcc.w	8b27a <_malloc_r+0x39e>
   8af52:	0a6b      	lsrs	r3, r5, #9
   8af54:	f000 808c 	beq.w	8b070 <_malloc_r+0x194>
   8af58:	2b04      	cmp	r3, #4
   8af5a:	f200 816a 	bhi.w	8b232 <_malloc_r+0x356>
   8af5e:	09ab      	lsrs	r3, r5, #6
   8af60:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   8af64:	f103 0438 	add.w	r4, r3, #56	; 0x38
   8af68:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8af6c:	4f99      	ldr	r7, [pc, #612]	; (8b1d4 <_malloc_r+0x2f8>)
   8af6e:	4438      	add	r0, r7
   8af70:	6843      	ldr	r3, [r0, #4]
   8af72:	3808      	subs	r0, #8
   8af74:	4298      	cmp	r0, r3
   8af76:	d106      	bne.n	8af86 <_malloc_r+0xaa>
   8af78:	e00c      	b.n	8af94 <_malloc_r+0xb8>
   8af7a:	2900      	cmp	r1, #0
   8af7c:	f280 8126 	bge.w	8b1cc <_malloc_r+0x2f0>
   8af80:	68db      	ldr	r3, [r3, #12]
   8af82:	4298      	cmp	r0, r3
   8af84:	d006      	beq.n	8af94 <_malloc_r+0xb8>
   8af86:	685a      	ldr	r2, [r3, #4]
   8af88:	f022 0203 	bic.w	r2, r2, #3
   8af8c:	1b51      	subs	r1, r2, r5
   8af8e:	290f      	cmp	r1, #15
   8af90:	ddf3      	ble.n	8af7a <_malloc_r+0x9e>
   8af92:	46a4      	mov	ip, r4
   8af94:	693c      	ldr	r4, [r7, #16]
   8af96:	f8df e240 	ldr.w	lr, [pc, #576]	; 8b1d8 <_malloc_r+0x2fc>
   8af9a:	4574      	cmp	r4, lr
   8af9c:	d07a      	beq.n	8b094 <_malloc_r+0x1b8>
   8af9e:	6862      	ldr	r2, [r4, #4]
   8afa0:	f022 0203 	bic.w	r2, r2, #3
   8afa4:	1b53      	subs	r3, r2, r5
   8afa6:	2b0f      	cmp	r3, #15
   8afa8:	f300 8176 	bgt.w	8b298 <_malloc_r+0x3bc>
   8afac:	2b00      	cmp	r3, #0
   8afae:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   8afb2:	f280 8167 	bge.w	8b284 <_malloc_r+0x3a8>
   8afb6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   8afba:	f080 8119 	bcs.w	8b1f0 <_malloc_r+0x314>
   8afbe:	2101      	movs	r1, #1
   8afc0:	08d3      	lsrs	r3, r2, #3
   8afc2:	0952      	lsrs	r2, r2, #5
   8afc4:	440b      	add	r3, r1
   8afc6:	4091      	lsls	r1, r2
   8afc8:	687a      	ldr	r2, [r7, #4]
   8afca:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   8afce:	430a      	orrs	r2, r1
   8afd0:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   8afd4:	3908      	subs	r1, #8
   8afd6:	60a0      	str	r0, [r4, #8]
   8afd8:	60e1      	str	r1, [r4, #12]
   8afda:	607a      	str	r2, [r7, #4]
   8afdc:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   8afe0:	60c4      	str	r4, [r0, #12]
   8afe2:	2101      	movs	r1, #1
   8afe4:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8afe8:	4099      	lsls	r1, r3
   8afea:	4291      	cmp	r1, r2
   8afec:	d859      	bhi.n	8b0a2 <_malloc_r+0x1c6>
   8afee:	4211      	tst	r1, r2
   8aff0:	d106      	bne.n	8b000 <_malloc_r+0x124>
   8aff2:	f02c 0c03 	bic.w	ip, ip, #3
   8aff6:	0049      	lsls	r1, r1, #1
   8aff8:	4211      	tst	r1, r2
   8affa:	f10c 0c04 	add.w	ip, ip, #4
   8affe:	d0fa      	beq.n	8aff6 <_malloc_r+0x11a>
   8b000:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   8b004:	4648      	mov	r0, r9
   8b006:	4664      	mov	r4, ip
   8b008:	f8d0 800c 	ldr.w	r8, [r0, #12]
   8b00c:	4540      	cmp	r0, r8
   8b00e:	d108      	bne.n	8b022 <_malloc_r+0x146>
   8b010:	e11c      	b.n	8b24c <_malloc_r+0x370>
   8b012:	2b00      	cmp	r3, #0
   8b014:	f280 8121 	bge.w	8b25a <_malloc_r+0x37e>
   8b018:	f8d8 800c 	ldr.w	r8, [r8, #12]
   8b01c:	4540      	cmp	r0, r8
   8b01e:	f000 8115 	beq.w	8b24c <_malloc_r+0x370>
   8b022:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8b026:	f022 0203 	bic.w	r2, r2, #3
   8b02a:	1b53      	subs	r3, r2, r5
   8b02c:	2b0f      	cmp	r3, #15
   8b02e:	ddf0      	ble.n	8b012 <_malloc_r+0x136>
   8b030:	eb08 0105 	add.w	r1, r8, r5
   8b034:	f045 0501 	orr.w	r5, r5, #1
   8b038:	f8c8 5004 	str.w	r5, [r8, #4]
   8b03c:	4630      	mov	r0, r6
   8b03e:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   8b042:	60f4      	str	r4, [r6, #12]
   8b044:	60a6      	str	r6, [r4, #8]
   8b046:	f043 0401 	orr.w	r4, r3, #1
   8b04a:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8b04e:	604c      	str	r4, [r1, #4]
   8b050:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8b054:	f848 3002 	str.w	r3, [r8, r2]
   8b058:	f000 facc 	bl	8b5f4 <__malloc_unlock>
   8b05c:	f108 0408 	add.w	r4, r8, #8
   8b060:	e002      	b.n	8b068 <_malloc_r+0x18c>
   8b062:	230c      	movs	r3, #12
   8b064:	2400      	movs	r4, #0
   8b066:	6033      	str	r3, [r6, #0]
   8b068:	4620      	mov	r0, r4
   8b06a:	b003      	add	sp, #12
   8b06c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b070:	f44f 7000 	mov.w	r0, #512	; 0x200
   8b074:	f04f 0c40 	mov.w	ip, #64	; 0x40
   8b078:	243f      	movs	r4, #63	; 0x3f
   8b07a:	e777      	b.n	8af6c <_malloc_r+0x90>
   8b07c:	68d3      	ldr	r3, [r2, #12]
   8b07e:	429a      	cmp	r2, r3
   8b080:	bf08      	it	eq
   8b082:	f10c 0c02 	addeq.w	ip, ip, #2
   8b086:	f47f af42 	bne.w	8af0e <_malloc_r+0x32>
   8b08a:	693c      	ldr	r4, [r7, #16]
   8b08c:	f8df e148 	ldr.w	lr, [pc, #328]	; 8b1d8 <_malloc_r+0x2fc>
   8b090:	4574      	cmp	r4, lr
   8b092:	d184      	bne.n	8af9e <_malloc_r+0xc2>
   8b094:	2101      	movs	r1, #1
   8b096:	687a      	ldr	r2, [r7, #4]
   8b098:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8b09c:	4099      	lsls	r1, r3
   8b09e:	4291      	cmp	r1, r2
   8b0a0:	d9a5      	bls.n	8afee <_malloc_r+0x112>
   8b0a2:	68bc      	ldr	r4, [r7, #8]
   8b0a4:	6863      	ldr	r3, [r4, #4]
   8b0a6:	f023 0903 	bic.w	r9, r3, #3
   8b0aa:	454d      	cmp	r5, r9
   8b0ac:	d803      	bhi.n	8b0b6 <_malloc_r+0x1da>
   8b0ae:	eba9 0305 	sub.w	r3, r9, r5
   8b0b2:	2b0f      	cmp	r3, #15
   8b0b4:	dc7a      	bgt.n	8b1ac <_malloc_r+0x2d0>
   8b0b6:	f8df b124 	ldr.w	fp, [pc, #292]	; 8b1dc <_malloc_r+0x300>
   8b0ba:	4b49      	ldr	r3, [pc, #292]	; (8b1e0 <_malloc_r+0x304>)
   8b0bc:	f8db 2000 	ldr.w	r2, [fp]
   8b0c0:	681b      	ldr	r3, [r3, #0]
   8b0c2:	3201      	adds	r2, #1
   8b0c4:	442b      	add	r3, r5
   8b0c6:	eb04 0a09 	add.w	sl, r4, r9
   8b0ca:	f000 812f 	beq.w	8b32c <_malloc_r+0x450>
   8b0ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8b0d2:	330f      	adds	r3, #15
   8b0d4:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   8b0d8:	f028 080f 	bic.w	r8, r8, #15
   8b0dc:	4641      	mov	r1, r8
   8b0de:	4630      	mov	r0, r6
   8b0e0:	f001 f858 	bl	8c194 <_sbrk_r>
   8b0e4:	1c41      	adds	r1, r0, #1
   8b0e6:	4602      	mov	r2, r0
   8b0e8:	f000 80ef 	beq.w	8b2ca <_malloc_r+0x3ee>
   8b0ec:	4582      	cmp	sl, r0
   8b0ee:	f200 80ea 	bhi.w	8b2c6 <_malloc_r+0x3ea>
   8b0f2:	4b3c      	ldr	r3, [pc, #240]	; (8b1e4 <_malloc_r+0x308>)
   8b0f4:	6819      	ldr	r1, [r3, #0]
   8b0f6:	4441      	add	r1, r8
   8b0f8:	4608      	mov	r0, r1
   8b0fa:	6019      	str	r1, [r3, #0]
   8b0fc:	f000 8149 	beq.w	8b392 <_malloc_r+0x4b6>
   8b100:	f8db 1000 	ldr.w	r1, [fp]
   8b104:	9301      	str	r3, [sp, #4]
   8b106:	3101      	adds	r1, #1
   8b108:	bf1b      	ittet	ne
   8b10a:	eba2 0a0a 	subne.w	sl, r2, sl
   8b10e:	4450      	addne	r0, sl
   8b110:	f8cb 2000 	streq.w	r2, [fp]
   8b114:	6018      	strne	r0, [r3, #0]
   8b116:	f012 0b07 	ands.w	fp, r2, #7
   8b11a:	f000 8111 	beq.w	8b340 <_malloc_r+0x464>
   8b11e:	f1cb 0108 	rsb	r1, fp, #8
   8b122:	440a      	add	r2, r1
   8b124:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   8b128:	4490      	add	r8, r2
   8b12a:	3108      	adds	r1, #8
   8b12c:	eba1 0108 	sub.w	r1, r1, r8
   8b130:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   8b134:	4651      	mov	r1, sl
   8b136:	4630      	mov	r0, r6
   8b138:	9200      	str	r2, [sp, #0]
   8b13a:	f001 f82b 	bl	8c194 <_sbrk_r>
   8b13e:	1c42      	adds	r2, r0, #1
   8b140:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b144:	f000 814b 	beq.w	8b3de <_malloc_r+0x502>
   8b148:	1a80      	subs	r0, r0, r2
   8b14a:	eb00 080a 	add.w	r8, r0, sl
   8b14e:	6819      	ldr	r1, [r3, #0]
   8b150:	f048 0001 	orr.w	r0, r8, #1
   8b154:	4451      	add	r1, sl
   8b156:	42bc      	cmp	r4, r7
   8b158:	60ba      	str	r2, [r7, #8]
   8b15a:	6019      	str	r1, [r3, #0]
   8b15c:	6050      	str	r0, [r2, #4]
   8b15e:	f000 8124 	beq.w	8b3aa <_malloc_r+0x4ce>
   8b162:	f1b9 0f0f 	cmp.w	r9, #15
   8b166:	f240 8122 	bls.w	8b3ae <_malloc_r+0x4d2>
   8b16a:	f04f 0e05 	mov.w	lr, #5
   8b16e:	6860      	ldr	r0, [r4, #4]
   8b170:	f1a9 0c0c 	sub.w	ip, r9, #12
   8b174:	f02c 0c07 	bic.w	ip, ip, #7
   8b178:	f000 0001 	and.w	r0, r0, #1
   8b17c:	ea40 000c 	orr.w	r0, r0, ip
   8b180:	6060      	str	r0, [r4, #4]
   8b182:	f1bc 0f0f 	cmp.w	ip, #15
   8b186:	eb04 000c 	add.w	r0, r4, ip
   8b18a:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   8b18e:	f200 812e 	bhi.w	8b3ee <_malloc_r+0x512>
   8b192:	4614      	mov	r4, r2
   8b194:	6850      	ldr	r0, [r2, #4]
   8b196:	4b14      	ldr	r3, [pc, #80]	; (8b1e8 <_malloc_r+0x30c>)
   8b198:	681a      	ldr	r2, [r3, #0]
   8b19a:	428a      	cmp	r2, r1
   8b19c:	bf38      	it	cc
   8b19e:	6019      	strcc	r1, [r3, #0]
   8b1a0:	4b12      	ldr	r3, [pc, #72]	; (8b1ec <_malloc_r+0x310>)
   8b1a2:	681a      	ldr	r2, [r3, #0]
   8b1a4:	428a      	cmp	r2, r1
   8b1a6:	bf38      	it	cc
   8b1a8:	6019      	strcc	r1, [r3, #0]
   8b1aa:	e090      	b.n	8b2ce <_malloc_r+0x3f2>
   8b1ac:	1962      	adds	r2, r4, r5
   8b1ae:	f043 0301 	orr.w	r3, r3, #1
   8b1b2:	f045 0501 	orr.w	r5, r5, #1
   8b1b6:	6065      	str	r5, [r4, #4]
   8b1b8:	4630      	mov	r0, r6
   8b1ba:	60ba      	str	r2, [r7, #8]
   8b1bc:	3408      	adds	r4, #8
   8b1be:	6053      	str	r3, [r2, #4]
   8b1c0:	f000 fa18 	bl	8b5f4 <__malloc_unlock>
   8b1c4:	4620      	mov	r0, r4
   8b1c6:	b003      	add	sp, #12
   8b1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b1cc:	68d9      	ldr	r1, [r3, #12]
   8b1ce:	441a      	add	r2, r3
   8b1d0:	e6a2      	b.n	8af18 <_malloc_r+0x3c>
   8b1d2:	bf00      	nop
   8b1d4:	20000a10 	.word	0x20000a10
   8b1d8:	20000a18 	.word	0x20000a18
   8b1dc:	20000e18 	.word	0x20000e18
   8b1e0:	20001498 	.word	0x20001498
   8b1e4:	20001468 	.word	0x20001468
   8b1e8:	20001490 	.word	0x20001490
   8b1ec:	20001494 	.word	0x20001494
   8b1f0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8b1f4:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8b1f8:	d35f      	bcc.n	8b2ba <_malloc_r+0x3de>
   8b1fa:	2b14      	cmp	r3, #20
   8b1fc:	f200 80b1 	bhi.w	8b362 <_malloc_r+0x486>
   8b200:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8b204:	00c9      	lsls	r1, r1, #3
   8b206:	335b      	adds	r3, #91	; 0x5b
   8b208:	1878      	adds	r0, r7, r1
   8b20a:	5879      	ldr	r1, [r7, r1]
   8b20c:	3808      	subs	r0, #8
   8b20e:	4288      	cmp	r0, r1
   8b210:	f000 808f 	beq.w	8b332 <_malloc_r+0x456>
   8b214:	684b      	ldr	r3, [r1, #4]
   8b216:	f023 0303 	bic.w	r3, r3, #3
   8b21a:	4293      	cmp	r3, r2
   8b21c:	d902      	bls.n	8b224 <_malloc_r+0x348>
   8b21e:	6889      	ldr	r1, [r1, #8]
   8b220:	4288      	cmp	r0, r1
   8b222:	d1f7      	bne.n	8b214 <_malloc_r+0x338>
   8b224:	68c8      	ldr	r0, [r1, #12]
   8b226:	687a      	ldr	r2, [r7, #4]
   8b228:	e9c4 1002 	strd	r1, r0, [r4, #8]
   8b22c:	6084      	str	r4, [r0, #8]
   8b22e:	60cc      	str	r4, [r1, #12]
   8b230:	e6d7      	b.n	8afe2 <_malloc_r+0x106>
   8b232:	2b14      	cmp	r3, #20
   8b234:	d959      	bls.n	8b2ea <_malloc_r+0x40e>
   8b236:	2b54      	cmp	r3, #84	; 0x54
   8b238:	f200 809b 	bhi.w	8b372 <_malloc_r+0x496>
   8b23c:	0b2b      	lsrs	r3, r5, #12
   8b23e:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   8b242:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8b246:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b24a:	e68f      	b.n	8af6c <_malloc_r+0x90>
   8b24c:	3401      	adds	r4, #1
   8b24e:	07a3      	lsls	r3, r4, #30
   8b250:	f100 0008 	add.w	r0, r0, #8
   8b254:	f47f aed8 	bne.w	8b008 <_malloc_r+0x12c>
   8b258:	e053      	b.n	8b302 <_malloc_r+0x426>
   8b25a:	4644      	mov	r4, r8
   8b25c:	4442      	add	r2, r8
   8b25e:	6853      	ldr	r3, [r2, #4]
   8b260:	f8d8 100c 	ldr.w	r1, [r8, #12]
   8b264:	f043 0301 	orr.w	r3, r3, #1
   8b268:	6053      	str	r3, [r2, #4]
   8b26a:	f854 3f08 	ldr.w	r3, [r4, #8]!
   8b26e:	4630      	mov	r0, r6
   8b270:	60d9      	str	r1, [r3, #12]
   8b272:	608b      	str	r3, [r1, #8]
   8b274:	f000 f9be 	bl	8b5f4 <__malloc_unlock>
   8b278:	e6f6      	b.n	8b068 <_malloc_r+0x18c>
   8b27a:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8b27e:	f105 0208 	add.w	r2, r5, #8
   8b282:	e63c      	b.n	8aefe <_malloc_r+0x22>
   8b284:	4422      	add	r2, r4
   8b286:	6853      	ldr	r3, [r2, #4]
   8b288:	4630      	mov	r0, r6
   8b28a:	f043 0301 	orr.w	r3, r3, #1
   8b28e:	6053      	str	r3, [r2, #4]
   8b290:	f000 f9b0 	bl	8b5f4 <__malloc_unlock>
   8b294:	3408      	adds	r4, #8
   8b296:	e6e7      	b.n	8b068 <_malloc_r+0x18c>
   8b298:	1961      	adds	r1, r4, r5
   8b29a:	f045 0501 	orr.w	r5, r5, #1
   8b29e:	6065      	str	r5, [r4, #4]
   8b2a0:	f043 0501 	orr.w	r5, r3, #1
   8b2a4:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8b2a8:	4630      	mov	r0, r6
   8b2aa:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8b2ae:	604d      	str	r5, [r1, #4]
   8b2b0:	50a3      	str	r3, [r4, r2]
   8b2b2:	f000 f99f 	bl	8b5f4 <__malloc_unlock>
   8b2b6:	3408      	adds	r4, #8
   8b2b8:	e6d6      	b.n	8b068 <_malloc_r+0x18c>
   8b2ba:	0993      	lsrs	r3, r2, #6
   8b2bc:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8b2c0:	00c9      	lsls	r1, r1, #3
   8b2c2:	3338      	adds	r3, #56	; 0x38
   8b2c4:	e7a0      	b.n	8b208 <_malloc_r+0x32c>
   8b2c6:	42bc      	cmp	r4, r7
   8b2c8:	d05e      	beq.n	8b388 <_malloc_r+0x4ac>
   8b2ca:	68bc      	ldr	r4, [r7, #8]
   8b2cc:	6860      	ldr	r0, [r4, #4]
   8b2ce:	f020 0803 	bic.w	r8, r0, #3
   8b2d2:	4545      	cmp	r5, r8
   8b2d4:	eba8 0305 	sub.w	r3, r8, r5
   8b2d8:	d802      	bhi.n	8b2e0 <_malloc_r+0x404>
   8b2da:	2b0f      	cmp	r3, #15
   8b2dc:	f73f af66 	bgt.w	8b1ac <_malloc_r+0x2d0>
   8b2e0:	4630      	mov	r0, r6
   8b2e2:	f000 f987 	bl	8b5f4 <__malloc_unlock>
   8b2e6:	2400      	movs	r4, #0
   8b2e8:	e6be      	b.n	8b068 <_malloc_r+0x18c>
   8b2ea:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   8b2ee:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8b2f2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b2f6:	e639      	b.n	8af6c <_malloc_r+0x90>
   8b2f8:	f859 3908 	ldr.w	r3, [r9], #-8
   8b2fc:	454b      	cmp	r3, r9
   8b2fe:	f040 8095 	bne.w	8b42c <_malloc_r+0x550>
   8b302:	f01c 0f03 	tst.w	ip, #3
   8b306:	f10c 3cff 	add.w	ip, ip, #4294967295
   8b30a:	d1f5      	bne.n	8b2f8 <_malloc_r+0x41c>
   8b30c:	687b      	ldr	r3, [r7, #4]
   8b30e:	ea23 0301 	bic.w	r3, r3, r1
   8b312:	607b      	str	r3, [r7, #4]
   8b314:	0049      	lsls	r1, r1, #1
   8b316:	4299      	cmp	r1, r3
   8b318:	f63f aec3 	bhi.w	8b0a2 <_malloc_r+0x1c6>
   8b31c:	b911      	cbnz	r1, 8b324 <_malloc_r+0x448>
   8b31e:	e6c0      	b.n	8b0a2 <_malloc_r+0x1c6>
   8b320:	0049      	lsls	r1, r1, #1
   8b322:	3404      	adds	r4, #4
   8b324:	4219      	tst	r1, r3
   8b326:	d0fb      	beq.n	8b320 <_malloc_r+0x444>
   8b328:	46a4      	mov	ip, r4
   8b32a:	e669      	b.n	8b000 <_malloc_r+0x124>
   8b32c:	f103 0810 	add.w	r8, r3, #16
   8b330:	e6d4      	b.n	8b0dc <_malloc_r+0x200>
   8b332:	2201      	movs	r2, #1
   8b334:	109b      	asrs	r3, r3, #2
   8b336:	409a      	lsls	r2, r3
   8b338:	687b      	ldr	r3, [r7, #4]
   8b33a:	431a      	orrs	r2, r3
   8b33c:	607a      	str	r2, [r7, #4]
   8b33e:	e773      	b.n	8b228 <_malloc_r+0x34c>
   8b340:	eb02 0108 	add.w	r1, r2, r8
   8b344:	4249      	negs	r1, r1
   8b346:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   8b34a:	4651      	mov	r1, sl
   8b34c:	4630      	mov	r0, r6
   8b34e:	9200      	str	r2, [sp, #0]
   8b350:	f000 ff20 	bl	8c194 <_sbrk_r>
   8b354:	1c43      	adds	r3, r0, #1
   8b356:	e9dd 2300 	ldrd	r2, r3, [sp]
   8b35a:	f47f aef5 	bne.w	8b148 <_malloc_r+0x26c>
   8b35e:	46da      	mov	sl, fp
   8b360:	e6f5      	b.n	8b14e <_malloc_r+0x272>
   8b362:	2b54      	cmp	r3, #84	; 0x54
   8b364:	d826      	bhi.n	8b3b4 <_malloc_r+0x4d8>
   8b366:	0b13      	lsrs	r3, r2, #12
   8b368:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8b36c:	00c9      	lsls	r1, r1, #3
   8b36e:	336e      	adds	r3, #110	; 0x6e
   8b370:	e74a      	b.n	8b208 <_malloc_r+0x32c>
   8b372:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b376:	d826      	bhi.n	8b3c6 <_malloc_r+0x4ea>
   8b378:	0beb      	lsrs	r3, r5, #15
   8b37a:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   8b37e:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8b382:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b386:	e5f1      	b.n	8af6c <_malloc_r+0x90>
   8b388:	4b29      	ldr	r3, [pc, #164]	; (8b430 <_malloc_r+0x554>)
   8b38a:	6818      	ldr	r0, [r3, #0]
   8b38c:	4440      	add	r0, r8
   8b38e:	6018      	str	r0, [r3, #0]
   8b390:	e6b6      	b.n	8b100 <_malloc_r+0x224>
   8b392:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8b396:	f1bc 0f00 	cmp.w	ip, #0
   8b39a:	f47f aeb1 	bne.w	8b100 <_malloc_r+0x224>
   8b39e:	68bc      	ldr	r4, [r7, #8]
   8b3a0:	44c8      	add	r8, r9
   8b3a2:	f048 0001 	orr.w	r0, r8, #1
   8b3a6:	6060      	str	r0, [r4, #4]
   8b3a8:	e6f5      	b.n	8b196 <_malloc_r+0x2ba>
   8b3aa:	4614      	mov	r4, r2
   8b3ac:	e6f3      	b.n	8b196 <_malloc_r+0x2ba>
   8b3ae:	2301      	movs	r3, #1
   8b3b0:	6053      	str	r3, [r2, #4]
   8b3b2:	e795      	b.n	8b2e0 <_malloc_r+0x404>
   8b3b4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8b3b8:	d824      	bhi.n	8b404 <_malloc_r+0x528>
   8b3ba:	0bd3      	lsrs	r3, r2, #15
   8b3bc:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8b3c0:	00c9      	lsls	r1, r1, #3
   8b3c2:	3377      	adds	r3, #119	; 0x77
   8b3c4:	e720      	b.n	8b208 <_malloc_r+0x32c>
   8b3c6:	f240 5254 	movw	r2, #1364	; 0x554
   8b3ca:	4293      	cmp	r3, r2
   8b3cc:	d824      	bhi.n	8b418 <_malloc_r+0x53c>
   8b3ce:	0cab      	lsrs	r3, r5, #18
   8b3d0:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   8b3d4:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8b3d8:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8b3dc:	e5c6      	b.n	8af6c <_malloc_r+0x90>
   8b3de:	f1ab 0b08 	sub.w	fp, fp, #8
   8b3e2:	44d8      	add	r8, fp
   8b3e4:	f04f 0a00 	mov.w	sl, #0
   8b3e8:	eba8 0802 	sub.w	r8, r8, r2
   8b3ec:	e6af      	b.n	8b14e <_malloc_r+0x272>
   8b3ee:	f104 0108 	add.w	r1, r4, #8
   8b3f2:	4630      	mov	r0, r6
   8b3f4:	9300      	str	r3, [sp, #0]
   8b3f6:	f7ff fa53 	bl	8a8a0 <_free_r>
   8b3fa:	68bc      	ldr	r4, [r7, #8]
   8b3fc:	9b00      	ldr	r3, [sp, #0]
   8b3fe:	6860      	ldr	r0, [r4, #4]
   8b400:	6819      	ldr	r1, [r3, #0]
   8b402:	e6c8      	b.n	8b196 <_malloc_r+0x2ba>
   8b404:	f240 5154 	movw	r1, #1364	; 0x554
   8b408:	428b      	cmp	r3, r1
   8b40a:	d80b      	bhi.n	8b424 <_malloc_r+0x548>
   8b40c:	0c93      	lsrs	r3, r2, #18
   8b40e:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8b412:	00c9      	lsls	r1, r1, #3
   8b414:	337c      	adds	r3, #124	; 0x7c
   8b416:	e6f7      	b.n	8b208 <_malloc_r+0x32c>
   8b418:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   8b41c:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   8b420:	247e      	movs	r4, #126	; 0x7e
   8b422:	e5a3      	b.n	8af6c <_malloc_r+0x90>
   8b424:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8b428:	237e      	movs	r3, #126	; 0x7e
   8b42a:	e6ed      	b.n	8b208 <_malloc_r+0x32c>
   8b42c:	687b      	ldr	r3, [r7, #4]
   8b42e:	e771      	b.n	8b314 <_malloc_r+0x438>
   8b430:	20001468 	.word	0x20001468

0008b434 <__ascii_mbtowc>:
   8b434:	b082      	sub	sp, #8
   8b436:	b149      	cbz	r1, 8b44c <__ascii_mbtowc+0x18>
   8b438:	b15a      	cbz	r2, 8b452 <__ascii_mbtowc+0x1e>
   8b43a:	b16b      	cbz	r3, 8b458 <__ascii_mbtowc+0x24>
   8b43c:	7813      	ldrb	r3, [r2, #0]
   8b43e:	600b      	str	r3, [r1, #0]
   8b440:	7812      	ldrb	r2, [r2, #0]
   8b442:	1e10      	subs	r0, r2, #0
   8b444:	bf18      	it	ne
   8b446:	2001      	movne	r0, #1
   8b448:	b002      	add	sp, #8
   8b44a:	4770      	bx	lr
   8b44c:	a901      	add	r1, sp, #4
   8b44e:	2a00      	cmp	r2, #0
   8b450:	d1f3      	bne.n	8b43a <__ascii_mbtowc+0x6>
   8b452:	4610      	mov	r0, r2
   8b454:	b002      	add	sp, #8
   8b456:	4770      	bx	lr
   8b458:	f06f 0001 	mvn.w	r0, #1
   8b45c:	e7f4      	b.n	8b448 <__ascii_mbtowc+0x14>
   8b45e:	bf00      	nop

0008b460 <memchr>:
   8b460:	fa5f fc81 	uxtb.w	ip, r1
   8b464:	0781      	lsls	r1, r0, #30
   8b466:	d010      	beq.n	8b48a <memchr+0x2a>
   8b468:	4603      	mov	r3, r0
   8b46a:	1e51      	subs	r1, r2, #1
   8b46c:	b92a      	cbnz	r2, 8b47a <memchr+0x1a>
   8b46e:	e00a      	b.n	8b486 <memchr+0x26>
   8b470:	079a      	lsls	r2, r3, #30
   8b472:	4618      	mov	r0, r3
   8b474:	d00a      	beq.n	8b48c <memchr+0x2c>
   8b476:	3901      	subs	r1, #1
   8b478:	d305      	bcc.n	8b486 <memchr+0x26>
   8b47a:	4618      	mov	r0, r3
   8b47c:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b480:	4562      	cmp	r2, ip
   8b482:	d1f5      	bne.n	8b470 <memchr+0x10>
   8b484:	4770      	bx	lr
   8b486:	2000      	movs	r0, #0
   8b488:	4770      	bx	lr
   8b48a:	4611      	mov	r1, r2
   8b48c:	2903      	cmp	r1, #3
   8b48e:	d80c      	bhi.n	8b4aa <memchr+0x4a>
   8b490:	2900      	cmp	r1, #0
   8b492:	d0f8      	beq.n	8b486 <memchr+0x26>
   8b494:	4603      	mov	r3, r0
   8b496:	4401      	add	r1, r0
   8b498:	e001      	b.n	8b49e <memchr+0x3e>
   8b49a:	428b      	cmp	r3, r1
   8b49c:	d0f3      	beq.n	8b486 <memchr+0x26>
   8b49e:	4618      	mov	r0, r3
   8b4a0:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b4a4:	4562      	cmp	r2, ip
   8b4a6:	d1f8      	bne.n	8b49a <memchr+0x3a>
   8b4a8:	e7ec      	b.n	8b484 <memchr+0x24>
   8b4aa:	4602      	mov	r2, r0
   8b4ac:	b510      	push	{r4, lr}
   8b4ae:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   8b4b2:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   8b4b6:	4610      	mov	r0, r2
   8b4b8:	6803      	ldr	r3, [r0, #0]
   8b4ba:	3204      	adds	r2, #4
   8b4bc:	4063      	eors	r3, r4
   8b4be:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   8b4c2:	ea2e 0303 	bic.w	r3, lr, r3
   8b4c6:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8b4ca:	d104      	bne.n	8b4d6 <memchr+0x76>
   8b4cc:	3904      	subs	r1, #4
   8b4ce:	2903      	cmp	r1, #3
   8b4d0:	4610      	mov	r0, r2
   8b4d2:	d8f0      	bhi.n	8b4b6 <memchr+0x56>
   8b4d4:	b151      	cbz	r1, 8b4ec <memchr+0x8c>
   8b4d6:	4603      	mov	r3, r0
   8b4d8:	4401      	add	r1, r0
   8b4da:	e001      	b.n	8b4e0 <memchr+0x80>
   8b4dc:	428b      	cmp	r3, r1
   8b4de:	d005      	beq.n	8b4ec <memchr+0x8c>
   8b4e0:	4618      	mov	r0, r3
   8b4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
   8b4e6:	4562      	cmp	r2, ip
   8b4e8:	d1f8      	bne.n	8b4dc <memchr+0x7c>
   8b4ea:	bd10      	pop	{r4, pc}
   8b4ec:	2000      	movs	r0, #0
   8b4ee:	bd10      	pop	{r4, pc}

0008b4f0 <memmove>:
   8b4f0:	4288      	cmp	r0, r1
   8b4f2:	d90d      	bls.n	8b510 <memmove+0x20>
   8b4f4:	188b      	adds	r3, r1, r2
   8b4f6:	4283      	cmp	r3, r0
   8b4f8:	d90a      	bls.n	8b510 <memmove+0x20>
   8b4fa:	eb00 0c02 	add.w	ip, r0, r2
   8b4fe:	b1ba      	cbz	r2, 8b530 <memmove+0x40>
   8b500:	4662      	mov	r2, ip
   8b502:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   8b506:	4299      	cmp	r1, r3
   8b508:	f802 cd01 	strb.w	ip, [r2, #-1]!
   8b50c:	d1f9      	bne.n	8b502 <memmove+0x12>
   8b50e:	4770      	bx	lr
   8b510:	2a0f      	cmp	r2, #15
   8b512:	d80e      	bhi.n	8b532 <memmove+0x42>
   8b514:	4603      	mov	r3, r0
   8b516:	f102 3cff 	add.w	ip, r2, #4294967295
   8b51a:	b14a      	cbz	r2, 8b530 <memmove+0x40>
   8b51c:	f10c 0c01 	add.w	ip, ip, #1
   8b520:	3b01      	subs	r3, #1
   8b522:	448c      	add	ip, r1
   8b524:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b528:	4561      	cmp	r1, ip
   8b52a:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b52e:	d1f9      	bne.n	8b524 <memmove+0x34>
   8b530:	4770      	bx	lr
   8b532:	ea40 0301 	orr.w	r3, r0, r1
   8b536:	079b      	lsls	r3, r3, #30
   8b538:	d14f      	bne.n	8b5da <memmove+0xea>
   8b53a:	f1a2 0310 	sub.w	r3, r2, #16
   8b53e:	b570      	push	{r4, r5, r6, lr}
   8b540:	f101 0c20 	add.w	ip, r1, #32
   8b544:	f023 050f 	bic.w	r5, r3, #15
   8b548:	f101 0e10 	add.w	lr, r1, #16
   8b54c:	f100 0410 	add.w	r4, r0, #16
   8b550:	44ac      	add	ip, r5
   8b552:	091b      	lsrs	r3, r3, #4
   8b554:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   8b558:	f10e 0e10 	add.w	lr, lr, #16
   8b55c:	f844 5c10 	str.w	r5, [r4, #-16]
   8b560:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   8b564:	3410      	adds	r4, #16
   8b566:	f844 5c1c 	str.w	r5, [r4, #-28]
   8b56a:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   8b56e:	f844 5c18 	str.w	r5, [r4, #-24]
   8b572:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   8b576:	45e6      	cmp	lr, ip
   8b578:	f844 5c14 	str.w	r5, [r4, #-20]
   8b57c:	d1ea      	bne.n	8b554 <memmove+0x64>
   8b57e:	3301      	adds	r3, #1
   8b580:	f012 0f0c 	tst.w	r2, #12
   8b584:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8b588:	f002 040f 	and.w	r4, r2, #15
   8b58c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8b590:	d027      	beq.n	8b5e2 <memmove+0xf2>
   8b592:	468e      	mov	lr, r1
   8b594:	3c04      	subs	r4, #4
   8b596:	f024 0603 	bic.w	r6, r4, #3
   8b59a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   8b59e:	441e      	add	r6, r3
   8b5a0:	1f1c      	subs	r4, r3, #4
   8b5a2:	f85e 5b04 	ldr.w	r5, [lr], #4
   8b5a6:	f844 5f04 	str.w	r5, [r4, #4]!
   8b5aa:	42b4      	cmp	r4, r6
   8b5ac:	d1f9      	bne.n	8b5a2 <memmove+0xb2>
   8b5ae:	f10c 0401 	add.w	r4, ip, #1
   8b5b2:	f002 0203 	and.w	r2, r2, #3
   8b5b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8b5ba:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8b5be:	f102 3cff 	add.w	ip, r2, #4294967295
   8b5c2:	b14a      	cbz	r2, 8b5d8 <memmove+0xe8>
   8b5c4:	f10c 0c01 	add.w	ip, ip, #1
   8b5c8:	3b01      	subs	r3, #1
   8b5ca:	448c      	add	ip, r1
   8b5cc:	f811 2b01 	ldrb.w	r2, [r1], #1
   8b5d0:	4561      	cmp	r1, ip
   8b5d2:	f803 2f01 	strb.w	r2, [r3, #1]!
   8b5d6:	d1f9      	bne.n	8b5cc <memmove+0xdc>
   8b5d8:	bd70      	pop	{r4, r5, r6, pc}
   8b5da:	4603      	mov	r3, r0
   8b5dc:	f102 3cff 	add.w	ip, r2, #4294967295
   8b5e0:	e79c      	b.n	8b51c <memmove+0x2c>
   8b5e2:	4622      	mov	r2, r4
   8b5e4:	e7eb      	b.n	8b5be <memmove+0xce>
   8b5e6:	bf00      	nop

0008b5e8 <__malloc_lock>:
   8b5e8:	4801      	ldr	r0, [pc, #4]	; (8b5f0 <__malloc_lock+0x8>)
   8b5ea:	f7ff bc03 	b.w	8adf4 <__retarget_lock_acquire_recursive>
   8b5ee:	bf00      	nop
   8b5f0:	2000145c 	.word	0x2000145c

0008b5f4 <__malloc_unlock>:
   8b5f4:	4801      	ldr	r0, [pc, #4]	; (8b5fc <__malloc_unlock+0x8>)
   8b5f6:	f7ff bbff 	b.w	8adf8 <__retarget_lock_release_recursive>
   8b5fa:	bf00      	nop
   8b5fc:	2000145c 	.word	0x2000145c

0008b600 <_Balloc>:
   8b600:	b538      	push	{r3, r4, r5, lr}
   8b602:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b604:	4605      	mov	r5, r0
   8b606:	460c      	mov	r4, r1
   8b608:	b14b      	cbz	r3, 8b61e <_Balloc+0x1e>
   8b60a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8b60e:	b180      	cbz	r0, 8b632 <_Balloc+0x32>
   8b610:	6802      	ldr	r2, [r0, #0]
   8b612:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8b616:	2300      	movs	r3, #0
   8b618:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8b61c:	bd38      	pop	{r3, r4, r5, pc}
   8b61e:	2221      	movs	r2, #33	; 0x21
   8b620:	2104      	movs	r1, #4
   8b622:	f000 ff8d 	bl	8c540 <_calloc_r>
   8b626:	4603      	mov	r3, r0
   8b628:	64e8      	str	r0, [r5, #76]	; 0x4c
   8b62a:	2800      	cmp	r0, #0
   8b62c:	d1ed      	bne.n	8b60a <_Balloc+0xa>
   8b62e:	2000      	movs	r0, #0
   8b630:	bd38      	pop	{r3, r4, r5, pc}
   8b632:	2101      	movs	r1, #1
   8b634:	4628      	mov	r0, r5
   8b636:	fa01 f504 	lsl.w	r5, r1, r4
   8b63a:	1d6a      	adds	r2, r5, #5
   8b63c:	0092      	lsls	r2, r2, #2
   8b63e:	f000 ff7f 	bl	8c540 <_calloc_r>
   8b642:	2800      	cmp	r0, #0
   8b644:	d0f3      	beq.n	8b62e <_Balloc+0x2e>
   8b646:	e9c0 4501 	strd	r4, r5, [r0, #4]
   8b64a:	e7e4      	b.n	8b616 <_Balloc+0x16>

0008b64c <_Bfree>:
   8b64c:	b131      	cbz	r1, 8b65c <_Bfree+0x10>
   8b64e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b650:	684a      	ldr	r2, [r1, #4]
   8b652:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8b656:	6008      	str	r0, [r1, #0]
   8b658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8b65c:	4770      	bx	lr
   8b65e:	bf00      	nop

0008b660 <__multadd>:
   8b660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b664:	f04f 0e00 	mov.w	lr, #0
   8b668:	460e      	mov	r6, r1
   8b66a:	461c      	mov	r4, r3
   8b66c:	690d      	ldr	r5, [r1, #16]
   8b66e:	4607      	mov	r7, r0
   8b670:	f101 0014 	add.w	r0, r1, #20
   8b674:	6801      	ldr	r1, [r0, #0]
   8b676:	f10e 0e01 	add.w	lr, lr, #1
   8b67a:	b28b      	uxth	r3, r1
   8b67c:	fb02 4303 	mla	r3, r2, r3, r4
   8b680:	0c09      	lsrs	r1, r1, #16
   8b682:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8b686:	fb02 cc01 	mla	ip, r2, r1, ip
   8b68a:	b29b      	uxth	r3, r3
   8b68c:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   8b690:	4575      	cmp	r5, lr
   8b692:	f840 3b04 	str.w	r3, [r0], #4
   8b696:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8b69a:	dceb      	bgt.n	8b674 <__multadd+0x14>
   8b69c:	b13c      	cbz	r4, 8b6ae <__multadd+0x4e>
   8b69e:	68b3      	ldr	r3, [r6, #8]
   8b6a0:	42ab      	cmp	r3, r5
   8b6a2:	dd07      	ble.n	8b6b4 <__multadd+0x54>
   8b6a4:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8b6a8:	3501      	adds	r5, #1
   8b6aa:	615c      	str	r4, [r3, #20]
   8b6ac:	6135      	str	r5, [r6, #16]
   8b6ae:	4630      	mov	r0, r6
   8b6b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b6b4:	6871      	ldr	r1, [r6, #4]
   8b6b6:	4638      	mov	r0, r7
   8b6b8:	3101      	adds	r1, #1
   8b6ba:	f7ff ffa1 	bl	8b600 <_Balloc>
   8b6be:	4680      	mov	r8, r0
   8b6c0:	b1a8      	cbz	r0, 8b6ee <__multadd+0x8e>
   8b6c2:	6932      	ldr	r2, [r6, #16]
   8b6c4:	f106 010c 	add.w	r1, r6, #12
   8b6c8:	3202      	adds	r2, #2
   8b6ca:	0092      	lsls	r2, r2, #2
   8b6cc:	300c      	adds	r0, #12
   8b6ce:	f7fb f845 	bl	8675c <memcpy>
   8b6d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b6d4:	6872      	ldr	r2, [r6, #4]
   8b6d6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8b6da:	6031      	str	r1, [r6, #0]
   8b6dc:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8b6e0:	4646      	mov	r6, r8
   8b6e2:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8b6e6:	3501      	adds	r5, #1
   8b6e8:	615c      	str	r4, [r3, #20]
   8b6ea:	6135      	str	r5, [r6, #16]
   8b6ec:	e7df      	b.n	8b6ae <__multadd+0x4e>
   8b6ee:	4602      	mov	r2, r0
   8b6f0:	21b5      	movs	r1, #181	; 0xb5
   8b6f2:	4b02      	ldr	r3, [pc, #8]	; (8b6fc <__multadd+0x9c>)
   8b6f4:	4802      	ldr	r0, [pc, #8]	; (8b700 <__multadd+0xa0>)
   8b6f6:	f000 ff03 	bl	8c500 <__assert_func>
   8b6fa:	bf00      	nop
   8b6fc:	0008d564 	.word	0x0008d564
   8b700:	0008d608 	.word	0x0008d608

0008b704 <__hi0bits>:
   8b704:	0c02      	lsrs	r2, r0, #16
   8b706:	0412      	lsls	r2, r2, #16
   8b708:	4603      	mov	r3, r0
   8b70a:	b9ca      	cbnz	r2, 8b740 <__hi0bits+0x3c>
   8b70c:	2010      	movs	r0, #16
   8b70e:	4083      	lsls	r3, r0
   8b710:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8b714:	bf04      	itt	eq
   8b716:	021b      	lsleq	r3, r3, #8
   8b718:	3008      	addeq	r0, #8
   8b71a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8b71e:	bf04      	itt	eq
   8b720:	011b      	lsleq	r3, r3, #4
   8b722:	3004      	addeq	r0, #4
   8b724:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8b728:	bf04      	itt	eq
   8b72a:	009b      	lsleq	r3, r3, #2
   8b72c:	3002      	addeq	r0, #2
   8b72e:	2b00      	cmp	r3, #0
   8b730:	db05      	blt.n	8b73e <__hi0bits+0x3a>
   8b732:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8b736:	f100 0001 	add.w	r0, r0, #1
   8b73a:	bf08      	it	eq
   8b73c:	2020      	moveq	r0, #32
   8b73e:	4770      	bx	lr
   8b740:	2000      	movs	r0, #0
   8b742:	e7e5      	b.n	8b710 <__hi0bits+0xc>

0008b744 <__lo0bits>:
   8b744:	6803      	ldr	r3, [r0, #0]
   8b746:	4602      	mov	r2, r0
   8b748:	f013 0007 	ands.w	r0, r3, #7
   8b74c:	d009      	beq.n	8b762 <__lo0bits+0x1e>
   8b74e:	07d9      	lsls	r1, r3, #31
   8b750:	d41f      	bmi.n	8b792 <__lo0bits+0x4e>
   8b752:	0798      	lsls	r0, r3, #30
   8b754:	bf4b      	itete	mi
   8b756:	085b      	lsrmi	r3, r3, #1
   8b758:	089b      	lsrpl	r3, r3, #2
   8b75a:	2001      	movmi	r0, #1
   8b75c:	2002      	movpl	r0, #2
   8b75e:	6013      	str	r3, [r2, #0]
   8b760:	4770      	bx	lr
   8b762:	b299      	uxth	r1, r3
   8b764:	b909      	cbnz	r1, 8b76a <__lo0bits+0x26>
   8b766:	2010      	movs	r0, #16
   8b768:	40c3      	lsrs	r3, r0
   8b76a:	b2d9      	uxtb	r1, r3
   8b76c:	b909      	cbnz	r1, 8b772 <__lo0bits+0x2e>
   8b76e:	3008      	adds	r0, #8
   8b770:	0a1b      	lsrs	r3, r3, #8
   8b772:	0719      	lsls	r1, r3, #28
   8b774:	bf04      	itt	eq
   8b776:	091b      	lsreq	r3, r3, #4
   8b778:	3004      	addeq	r0, #4
   8b77a:	0799      	lsls	r1, r3, #30
   8b77c:	bf04      	itt	eq
   8b77e:	089b      	lsreq	r3, r3, #2
   8b780:	3002      	addeq	r0, #2
   8b782:	07d9      	lsls	r1, r3, #31
   8b784:	d403      	bmi.n	8b78e <__lo0bits+0x4a>
   8b786:	085b      	lsrs	r3, r3, #1
   8b788:	f100 0001 	add.w	r0, r0, #1
   8b78c:	d003      	beq.n	8b796 <__lo0bits+0x52>
   8b78e:	6013      	str	r3, [r2, #0]
   8b790:	4770      	bx	lr
   8b792:	2000      	movs	r0, #0
   8b794:	4770      	bx	lr
   8b796:	2020      	movs	r0, #32
   8b798:	4770      	bx	lr
   8b79a:	bf00      	nop

0008b79c <__i2b>:
   8b79c:	b538      	push	{r3, r4, r5, lr}
   8b79e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8b7a0:	4604      	mov	r4, r0
   8b7a2:	460d      	mov	r5, r1
   8b7a4:	b14b      	cbz	r3, 8b7ba <__i2b+0x1e>
   8b7a6:	6858      	ldr	r0, [r3, #4]
   8b7a8:	b1b0      	cbz	r0, 8b7d8 <__i2b+0x3c>
   8b7aa:	6802      	ldr	r2, [r0, #0]
   8b7ac:	605a      	str	r2, [r3, #4]
   8b7ae:	2200      	movs	r2, #0
   8b7b0:	2301      	movs	r3, #1
   8b7b2:	6145      	str	r5, [r0, #20]
   8b7b4:	e9c0 2303 	strd	r2, r3, [r0, #12]
   8b7b8:	bd38      	pop	{r3, r4, r5, pc}
   8b7ba:	2221      	movs	r2, #33	; 0x21
   8b7bc:	2104      	movs	r1, #4
   8b7be:	f000 febf 	bl	8c540 <_calloc_r>
   8b7c2:	4603      	mov	r3, r0
   8b7c4:	64e0      	str	r0, [r4, #76]	; 0x4c
   8b7c6:	2800      	cmp	r0, #0
   8b7c8:	d1ed      	bne.n	8b7a6 <__i2b+0xa>
   8b7ca:	2200      	movs	r2, #0
   8b7cc:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b7d0:	4b07      	ldr	r3, [pc, #28]	; (8b7f0 <__i2b+0x54>)
   8b7d2:	4808      	ldr	r0, [pc, #32]	; (8b7f4 <__i2b+0x58>)
   8b7d4:	f000 fe94 	bl	8c500 <__assert_func>
   8b7d8:	221c      	movs	r2, #28
   8b7da:	2101      	movs	r1, #1
   8b7dc:	4620      	mov	r0, r4
   8b7de:	f000 feaf 	bl	8c540 <_calloc_r>
   8b7e2:	2800      	cmp	r0, #0
   8b7e4:	d0f1      	beq.n	8b7ca <__i2b+0x2e>
   8b7e6:	2201      	movs	r2, #1
   8b7e8:	2302      	movs	r3, #2
   8b7ea:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8b7ee:	e7de      	b.n	8b7ae <__i2b+0x12>
   8b7f0:	0008d564 	.word	0x0008d564
   8b7f4:	0008d608 	.word	0x0008d608

0008b7f8 <__multiply>:
   8b7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b7fc:	690e      	ldr	r6, [r1, #16]
   8b7fe:	6915      	ldr	r5, [r2, #16]
   8b800:	4688      	mov	r8, r1
   8b802:	42ae      	cmp	r6, r5
   8b804:	4614      	mov	r4, r2
   8b806:	b085      	sub	sp, #20
   8b808:	db05      	blt.n	8b816 <__multiply+0x1e>
   8b80a:	462a      	mov	r2, r5
   8b80c:	4623      	mov	r3, r4
   8b80e:	4635      	mov	r5, r6
   8b810:	460c      	mov	r4, r1
   8b812:	4616      	mov	r6, r2
   8b814:	4698      	mov	r8, r3
   8b816:	68a3      	ldr	r3, [r4, #8]
   8b818:	6861      	ldr	r1, [r4, #4]
   8b81a:	19af      	adds	r7, r5, r6
   8b81c:	42bb      	cmp	r3, r7
   8b81e:	bfb8      	it	lt
   8b820:	3101      	addlt	r1, #1
   8b822:	f7ff feed 	bl	8b600 <_Balloc>
   8b826:	9001      	str	r0, [sp, #4]
   8b828:	2800      	cmp	r0, #0
   8b82a:	f000 8087 	beq.w	8b93c <__multiply+0x144>
   8b82e:	9b01      	ldr	r3, [sp, #4]
   8b830:	f103 0914 	add.w	r9, r3, #20
   8b834:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   8b838:	45d1      	cmp	r9, sl
   8b83a:	d205      	bcs.n	8b848 <__multiply+0x50>
   8b83c:	464b      	mov	r3, r9
   8b83e:	2200      	movs	r2, #0
   8b840:	f843 2b04 	str.w	r2, [r3], #4
   8b844:	459a      	cmp	sl, r3
   8b846:	d8fb      	bhi.n	8b840 <__multiply+0x48>
   8b848:	f108 0814 	add.w	r8, r8, #20
   8b84c:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   8b850:	f104 0314 	add.w	r3, r4, #20
   8b854:	45d8      	cmp	r8, fp
   8b856:	461a      	mov	r2, r3
   8b858:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   8b85c:	d25f      	bcs.n	8b91e <__multiply+0x126>
   8b85e:	1b2b      	subs	r3, r5, r4
   8b860:	3b15      	subs	r3, #21
   8b862:	f023 0303 	bic.w	r3, r3, #3
   8b866:	3304      	adds	r3, #4
   8b868:	3415      	adds	r4, #21
   8b86a:	42a5      	cmp	r5, r4
   8b86c:	bf38      	it	cc
   8b86e:	2304      	movcc	r3, #4
   8b870:	e9cd a702 	strd	sl, r7, [sp, #8]
   8b874:	46ac      	mov	ip, r5
   8b876:	461f      	mov	r7, r3
   8b878:	4692      	mov	sl, r2
   8b87a:	e005      	b.n	8b888 <__multiply+0x90>
   8b87c:	0c00      	lsrs	r0, r0, #16
   8b87e:	d129      	bne.n	8b8d4 <__multiply+0xdc>
   8b880:	45c3      	cmp	fp, r8
   8b882:	f109 0904 	add.w	r9, r9, #4
   8b886:	d948      	bls.n	8b91a <__multiply+0x122>
   8b888:	f858 0b04 	ldr.w	r0, [r8], #4
   8b88c:	b285      	uxth	r5, r0
   8b88e:	2d00      	cmp	r5, #0
   8b890:	d0f4      	beq.n	8b87c <__multiply+0x84>
   8b892:	4656      	mov	r6, sl
   8b894:	464c      	mov	r4, r9
   8b896:	2300      	movs	r3, #0
   8b898:	f856 0b04 	ldr.w	r0, [r6], #4
   8b89c:	6821      	ldr	r1, [r4, #0]
   8b89e:	b282      	uxth	r2, r0
   8b8a0:	fa1f fe81 	uxth.w	lr, r1
   8b8a4:	fb05 ee02 	mla	lr, r5, r2, lr
   8b8a8:	0c00      	lsrs	r0, r0, #16
   8b8aa:	0c0a      	lsrs	r2, r1, #16
   8b8ac:	fb05 2200 	mla	r2, r5, r0, r2
   8b8b0:	4473      	add	r3, lr
   8b8b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8b8b6:	b29b      	uxth	r3, r3
   8b8b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b8bc:	45b4      	cmp	ip, r6
   8b8be:	f844 3b04 	str.w	r3, [r4], #4
   8b8c2:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8b8c6:	d8e7      	bhi.n	8b898 <__multiply+0xa0>
   8b8c8:	f849 3007 	str.w	r3, [r9, r7]
   8b8cc:	f858 0c04 	ldr.w	r0, [r8, #-4]
   8b8d0:	0c00      	lsrs	r0, r0, #16
   8b8d2:	d0d5      	beq.n	8b880 <__multiply+0x88>
   8b8d4:	f8d9 3000 	ldr.w	r3, [r9]
   8b8d8:	4654      	mov	r4, sl
   8b8da:	4619      	mov	r1, r3
   8b8dc:	464d      	mov	r5, r9
   8b8de:	2200      	movs	r2, #0
   8b8e0:	8826      	ldrh	r6, [r4, #0]
   8b8e2:	0c09      	lsrs	r1, r1, #16
   8b8e4:	fb00 1106 	mla	r1, r0, r6, r1
   8b8e8:	b29b      	uxth	r3, r3
   8b8ea:	440a      	add	r2, r1
   8b8ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8b8f0:	f845 3b04 	str.w	r3, [r5], #4
   8b8f4:	f854 6b04 	ldr.w	r6, [r4], #4
   8b8f8:	6829      	ldr	r1, [r5, #0]
   8b8fa:	0c36      	lsrs	r6, r6, #16
   8b8fc:	b28b      	uxth	r3, r1
   8b8fe:	fb00 3306 	mla	r3, r0, r6, r3
   8b902:	45a4      	cmp	ip, r4
   8b904:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8b908:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8b90c:	d8e8      	bhi.n	8b8e0 <__multiply+0xe8>
   8b90e:	45c3      	cmp	fp, r8
   8b910:	f849 3007 	str.w	r3, [r9, r7]
   8b914:	f109 0904 	add.w	r9, r9, #4
   8b918:	d8b6      	bhi.n	8b888 <__multiply+0x90>
   8b91a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8b91e:	2f00      	cmp	r7, #0
   8b920:	dc02      	bgt.n	8b928 <__multiply+0x130>
   8b922:	e005      	b.n	8b930 <__multiply+0x138>
   8b924:	3f01      	subs	r7, #1
   8b926:	d003      	beq.n	8b930 <__multiply+0x138>
   8b928:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8b92c:	2b00      	cmp	r3, #0
   8b92e:	d0f9      	beq.n	8b924 <__multiply+0x12c>
   8b930:	9b01      	ldr	r3, [sp, #4]
   8b932:	4618      	mov	r0, r3
   8b934:	611f      	str	r7, [r3, #16]
   8b936:	b005      	add	sp, #20
   8b938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b93c:	4602      	mov	r2, r0
   8b93e:	f240 115d 	movw	r1, #349	; 0x15d
   8b942:	4b02      	ldr	r3, [pc, #8]	; (8b94c <__multiply+0x154>)
   8b944:	4802      	ldr	r0, [pc, #8]	; (8b950 <__multiply+0x158>)
   8b946:	f000 fddb 	bl	8c500 <__assert_func>
   8b94a:	bf00      	nop
   8b94c:	0008d564 	.word	0x0008d564
   8b950:	0008d608 	.word	0x0008d608

0008b954 <__pow5mult>:
   8b954:	f012 0303 	ands.w	r3, r2, #3
   8b958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b95c:	4614      	mov	r4, r2
   8b95e:	4607      	mov	r7, r0
   8b960:	d12e      	bne.n	8b9c0 <__pow5mult+0x6c>
   8b962:	460e      	mov	r6, r1
   8b964:	10a4      	asrs	r4, r4, #2
   8b966:	d01c      	beq.n	8b9a2 <__pow5mult+0x4e>
   8b968:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8b96a:	b395      	cbz	r5, 8b9d2 <__pow5mult+0x7e>
   8b96c:	07e3      	lsls	r3, r4, #31
   8b96e:	f04f 0800 	mov.w	r8, #0
   8b972:	d406      	bmi.n	8b982 <__pow5mult+0x2e>
   8b974:	1064      	asrs	r4, r4, #1
   8b976:	d014      	beq.n	8b9a2 <__pow5mult+0x4e>
   8b978:	6828      	ldr	r0, [r5, #0]
   8b97a:	b1a8      	cbz	r0, 8b9a8 <__pow5mult+0x54>
   8b97c:	4605      	mov	r5, r0
   8b97e:	07e3      	lsls	r3, r4, #31
   8b980:	d5f8      	bpl.n	8b974 <__pow5mult+0x20>
   8b982:	462a      	mov	r2, r5
   8b984:	4631      	mov	r1, r6
   8b986:	4638      	mov	r0, r7
   8b988:	f7ff ff36 	bl	8b7f8 <__multiply>
   8b98c:	b1b6      	cbz	r6, 8b9bc <__pow5mult+0x68>
   8b98e:	6871      	ldr	r1, [r6, #4]
   8b990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8b992:	1064      	asrs	r4, r4, #1
   8b994:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8b998:	6032      	str	r2, [r6, #0]
   8b99a:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8b99e:	4606      	mov	r6, r0
   8b9a0:	d1ea      	bne.n	8b978 <__pow5mult+0x24>
   8b9a2:	4630      	mov	r0, r6
   8b9a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b9a8:	462a      	mov	r2, r5
   8b9aa:	4629      	mov	r1, r5
   8b9ac:	4638      	mov	r0, r7
   8b9ae:	f7ff ff23 	bl	8b7f8 <__multiply>
   8b9b2:	6028      	str	r0, [r5, #0]
   8b9b4:	4605      	mov	r5, r0
   8b9b6:	f8c0 8000 	str.w	r8, [r0]
   8b9ba:	e7e0      	b.n	8b97e <__pow5mult+0x2a>
   8b9bc:	4606      	mov	r6, r0
   8b9be:	e7d9      	b.n	8b974 <__pow5mult+0x20>
   8b9c0:	4a0f      	ldr	r2, [pc, #60]	; (8ba00 <__pow5mult+0xac>)
   8b9c2:	3b01      	subs	r3, #1
   8b9c4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8b9c8:	2300      	movs	r3, #0
   8b9ca:	f7ff fe49 	bl	8b660 <__multadd>
   8b9ce:	4606      	mov	r6, r0
   8b9d0:	e7c8      	b.n	8b964 <__pow5mult+0x10>
   8b9d2:	2101      	movs	r1, #1
   8b9d4:	4638      	mov	r0, r7
   8b9d6:	f7ff fe13 	bl	8b600 <_Balloc>
   8b9da:	4605      	mov	r5, r0
   8b9dc:	b140      	cbz	r0, 8b9f0 <__pow5mult+0x9c>
   8b9de:	f240 2371 	movw	r3, #625	; 0x271
   8b9e2:	2201      	movs	r2, #1
   8b9e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8b9e8:	2300      	movs	r3, #0
   8b9ea:	64b8      	str	r0, [r7, #72]	; 0x48
   8b9ec:	6003      	str	r3, [r0, #0]
   8b9ee:	e7bd      	b.n	8b96c <__pow5mult+0x18>
   8b9f0:	4602      	mov	r2, r0
   8b9f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8b9f6:	4b03      	ldr	r3, [pc, #12]	; (8ba04 <__pow5mult+0xb0>)
   8b9f8:	4803      	ldr	r0, [pc, #12]	; (8ba08 <__pow5mult+0xb4>)
   8b9fa:	f000 fd81 	bl	8c500 <__assert_func>
   8b9fe:	bf00      	nop
   8ba00:	0008d778 	.word	0x0008d778
   8ba04:	0008d564 	.word	0x0008d564
   8ba08:	0008d608 	.word	0x0008d608

0008ba0c <__lshift>:
   8ba0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ba10:	460c      	mov	r4, r1
   8ba12:	6926      	ldr	r6, [r4, #16]
   8ba14:	68a3      	ldr	r3, [r4, #8]
   8ba16:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8ba1a:	1c75      	adds	r5, r6, #1
   8ba1c:	429d      	cmp	r5, r3
   8ba1e:	4690      	mov	r8, r2
   8ba20:	4607      	mov	r7, r0
   8ba22:	6849      	ldr	r1, [r1, #4]
   8ba24:	ea4f 1962 	mov.w	r9, r2, asr #5
   8ba28:	dd04      	ble.n	8ba34 <__lshift+0x28>
   8ba2a:	005b      	lsls	r3, r3, #1
   8ba2c:	429d      	cmp	r5, r3
   8ba2e:	f101 0101 	add.w	r1, r1, #1
   8ba32:	dcfa      	bgt.n	8ba2a <__lshift+0x1e>
   8ba34:	4638      	mov	r0, r7
   8ba36:	f7ff fde3 	bl	8b600 <_Balloc>
   8ba3a:	2800      	cmp	r0, #0
   8ba3c:	d051      	beq.n	8bae2 <__lshift+0xd6>
   8ba3e:	f1b9 0f00 	cmp.w	r9, #0
   8ba42:	f100 0114 	add.w	r1, r0, #20
   8ba46:	dd0f      	ble.n	8ba68 <__lshift+0x5c>
   8ba48:	460b      	mov	r3, r1
   8ba4a:	f04f 0c00 	mov.w	ip, #0
   8ba4e:	f109 0205 	add.w	r2, r9, #5
   8ba52:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   8ba56:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   8ba5a:	f843 cb04 	str.w	ip, [r3], #4
   8ba5e:	4293      	cmp	r3, r2
   8ba60:	d1fb      	bne.n	8ba5a <__lshift+0x4e>
   8ba62:	f1ae 0314 	sub.w	r3, lr, #20
   8ba66:	4419      	add	r1, r3
   8ba68:	6922      	ldr	r2, [r4, #16]
   8ba6a:	f104 0314 	add.w	r3, r4, #20
   8ba6e:	f018 081f 	ands.w	r8, r8, #31
   8ba72:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   8ba76:	d02c      	beq.n	8bad2 <__lshift+0xc6>
   8ba78:	468e      	mov	lr, r1
   8ba7a:	f04f 0a00 	mov.w	sl, #0
   8ba7e:	f1c8 0920 	rsb	r9, r8, #32
   8ba82:	681a      	ldr	r2, [r3, #0]
   8ba84:	fa02 f208 	lsl.w	r2, r2, r8
   8ba88:	ea42 020a 	orr.w	r2, r2, sl
   8ba8c:	f84e 2b04 	str.w	r2, [lr], #4
   8ba90:	f853 2b04 	ldr.w	r2, [r3], #4
   8ba94:	459c      	cmp	ip, r3
   8ba96:	fa22 fa09 	lsr.w	sl, r2, r9
   8ba9a:	d8f2      	bhi.n	8ba82 <__lshift+0x76>
   8ba9c:	ebac 0304 	sub.w	r3, ip, r4
   8baa0:	3b15      	subs	r3, #21
   8baa2:	f023 0303 	bic.w	r3, r3, #3
   8baa6:	3304      	adds	r3, #4
   8baa8:	f104 0215 	add.w	r2, r4, #21
   8baac:	4594      	cmp	ip, r2
   8baae:	bf38      	it	cc
   8bab0:	2304      	movcc	r3, #4
   8bab2:	f1ba 0f00 	cmp.w	sl, #0
   8bab6:	bf18      	it	ne
   8bab8:	462e      	movne	r6, r5
   8baba:	f841 a003 	str.w	sl, [r1, r3]
   8babe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8bac0:	6862      	ldr	r2, [r4, #4]
   8bac2:	6106      	str	r6, [r0, #16]
   8bac4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8bac8:	6021      	str	r1, [r4, #0]
   8baca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8bace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8bad2:	3904      	subs	r1, #4
   8bad4:	f853 2b04 	ldr.w	r2, [r3], #4
   8bad8:	459c      	cmp	ip, r3
   8bada:	f841 2f04 	str.w	r2, [r1, #4]!
   8bade:	d8f9      	bhi.n	8bad4 <__lshift+0xc8>
   8bae0:	e7ed      	b.n	8babe <__lshift+0xb2>
   8bae2:	4602      	mov	r2, r0
   8bae4:	f240 11d9 	movw	r1, #473	; 0x1d9
   8bae8:	4b01      	ldr	r3, [pc, #4]	; (8baf0 <__lshift+0xe4>)
   8baea:	4802      	ldr	r0, [pc, #8]	; (8baf4 <__lshift+0xe8>)
   8baec:	f000 fd08 	bl	8c500 <__assert_func>
   8baf0:	0008d564 	.word	0x0008d564
   8baf4:	0008d608 	.word	0x0008d608

0008baf8 <__mcmp>:
   8baf8:	4684      	mov	ip, r0
   8bafa:	690b      	ldr	r3, [r1, #16]
   8bafc:	6900      	ldr	r0, [r0, #16]
   8bafe:	1ac0      	subs	r0, r0, r3
   8bb00:	d115      	bne.n	8bb2e <__mcmp+0x36>
   8bb02:	f10c 0c14 	add.w	ip, ip, #20
   8bb06:	3114      	adds	r1, #20
   8bb08:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8bb0c:	b410      	push	{r4}
   8bb0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8bb12:	e001      	b.n	8bb18 <__mcmp+0x20>
   8bb14:	4594      	cmp	ip, r2
   8bb16:	d208      	bcs.n	8bb2a <__mcmp+0x32>
   8bb18:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8bb1c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   8bb20:	428c      	cmp	r4, r1
   8bb22:	d0f7      	beq.n	8bb14 <__mcmp+0x1c>
   8bb24:	d204      	bcs.n	8bb30 <__mcmp+0x38>
   8bb26:	f04f 30ff 	mov.w	r0, #4294967295
   8bb2a:	bc10      	pop	{r4}
   8bb2c:	4770      	bx	lr
   8bb2e:	4770      	bx	lr
   8bb30:	2001      	movs	r0, #1
   8bb32:	bc10      	pop	{r4}
   8bb34:	4770      	bx	lr
   8bb36:	bf00      	nop

0008bb38 <__mdiff>:
   8bb38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bb3c:	690c      	ldr	r4, [r1, #16]
   8bb3e:	6913      	ldr	r3, [r2, #16]
   8bb40:	4689      	mov	r9, r1
   8bb42:	1ae4      	subs	r4, r4, r3
   8bb44:	2c00      	cmp	r4, #0
   8bb46:	4617      	mov	r7, r2
   8bb48:	d17d      	bne.n	8bc46 <__mdiff+0x10e>
   8bb4a:	f101 0614 	add.w	r6, r1, #20
   8bb4e:	3214      	adds	r2, #20
   8bb50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   8bb54:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   8bb58:	e001      	b.n	8bb5e <__mdiff+0x26>
   8bb5a:	429e      	cmp	r6, r3
   8bb5c:	d276      	bcs.n	8bc4c <__mdiff+0x114>
   8bb5e:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8bb62:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8bb66:	428d      	cmp	r5, r1
   8bb68:	d0f7      	beq.n	8bb5a <__mdiff+0x22>
   8bb6a:	d367      	bcc.n	8bc3c <__mdiff+0x104>
   8bb6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8bb70:	f7ff fd46 	bl	8b600 <_Balloc>
   8bb74:	2800      	cmp	r0, #0
   8bb76:	d073      	beq.n	8bc60 <__mdiff+0x128>
   8bb78:	f8d9 5010 	ldr.w	r5, [r9, #16]
   8bb7c:	60c4      	str	r4, [r0, #12]
   8bb7e:	f100 0414 	add.w	r4, r0, #20
   8bb82:	4626      	mov	r6, r4
   8bb84:	f04f 0a00 	mov.w	sl, #0
   8bb88:	693b      	ldr	r3, [r7, #16]
   8bb8a:	f109 0814 	add.w	r8, r9, #20
   8bb8e:	f107 0e14 	add.w	lr, r7, #20
   8bb92:	f109 0c10 	add.w	ip, r9, #16
   8bb96:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8bb9a:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8bb9e:	f85c bf04 	ldr.w	fp, [ip, #4]!
   8bba2:	f85e 1b04 	ldr.w	r1, [lr], #4
   8bba6:	fa1f f38b 	uxth.w	r3, fp
   8bbaa:	4453      	add	r3, sl
   8bbac:	fa1f fa81 	uxth.w	sl, r1
   8bbb0:	0c09      	lsrs	r1, r1, #16
   8bbb2:	eba3 030a 	sub.w	r3, r3, sl
   8bbb6:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8bbba:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8bbbe:	b29b      	uxth	r3, r3
   8bbc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8bbc4:	45f1      	cmp	r9, lr
   8bbc6:	f846 3b04 	str.w	r3, [r6], #4
   8bbca:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8bbce:	d8e6      	bhi.n	8bb9e <__mdiff+0x66>
   8bbd0:	eba9 0107 	sub.w	r1, r9, r7
   8bbd4:	3915      	subs	r1, #21
   8bbd6:	3715      	adds	r7, #21
   8bbd8:	45b9      	cmp	r9, r7
   8bbda:	f021 0603 	bic.w	r6, r1, #3
   8bbde:	f106 0604 	add.w	r6, r6, #4
   8bbe2:	bf38      	it	cc
   8bbe4:	2604      	movcc	r6, #4
   8bbe6:	f021 0103 	bic.w	r1, r1, #3
   8bbea:	bf38      	it	cc
   8bbec:	2100      	movcc	r1, #0
   8bbee:	44b0      	add	r8, r6
   8bbf0:	4542      	cmp	r2, r8
   8bbf2:	4426      	add	r6, r4
   8bbf4:	440c      	add	r4, r1
   8bbf6:	d918      	bls.n	8bc2a <__mdiff+0xf2>
   8bbf8:	4637      	mov	r7, r6
   8bbfa:	4644      	mov	r4, r8
   8bbfc:	f854 1b04 	ldr.w	r1, [r4], #4
   8bc00:	b28b      	uxth	r3, r1
   8bc02:	4453      	add	r3, sl
   8bc04:	ea4f 4a23 	mov.w	sl, r3, asr #16
   8bc08:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8bc0c:	b29b      	uxth	r3, r3
   8bc0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8bc12:	42a2      	cmp	r2, r4
   8bc14:	f847 3b04 	str.w	r3, [r7], #4
   8bc18:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8bc1c:	d8ee      	bhi.n	8bbfc <__mdiff+0xc4>
   8bc1e:	1e54      	subs	r4, r2, #1
   8bc20:	eba4 0408 	sub.w	r4, r4, r8
   8bc24:	f024 0403 	bic.w	r4, r4, #3
   8bc28:	4434      	add	r4, r6
   8bc2a:	b923      	cbnz	r3, 8bc36 <__mdiff+0xfe>
   8bc2c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8bc30:	3d01      	subs	r5, #1
   8bc32:	2b00      	cmp	r3, #0
   8bc34:	d0fa      	beq.n	8bc2c <__mdiff+0xf4>
   8bc36:	6105      	str	r5, [r0, #16]
   8bc38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc3c:	464b      	mov	r3, r9
   8bc3e:	2401      	movs	r4, #1
   8bc40:	46b9      	mov	r9, r7
   8bc42:	461f      	mov	r7, r3
   8bc44:	e792      	b.n	8bb6c <__mdiff+0x34>
   8bc46:	dbf9      	blt.n	8bc3c <__mdiff+0x104>
   8bc48:	2400      	movs	r4, #0
   8bc4a:	e78f      	b.n	8bb6c <__mdiff+0x34>
   8bc4c:	2100      	movs	r1, #0
   8bc4e:	f7ff fcd7 	bl	8b600 <_Balloc>
   8bc52:	b160      	cbz	r0, 8bc6e <__mdiff+0x136>
   8bc54:	2201      	movs	r2, #1
   8bc56:	2300      	movs	r3, #0
   8bc58:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8bc5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8bc60:	4602      	mov	r2, r0
   8bc62:	f44f 7110 	mov.w	r1, #576	; 0x240
   8bc66:	4b05      	ldr	r3, [pc, #20]	; (8bc7c <__mdiff+0x144>)
   8bc68:	4805      	ldr	r0, [pc, #20]	; (8bc80 <__mdiff+0x148>)
   8bc6a:	f000 fc49 	bl	8c500 <__assert_func>
   8bc6e:	4602      	mov	r2, r0
   8bc70:	f240 2132 	movw	r1, #562	; 0x232
   8bc74:	4b01      	ldr	r3, [pc, #4]	; (8bc7c <__mdiff+0x144>)
   8bc76:	4802      	ldr	r0, [pc, #8]	; (8bc80 <__mdiff+0x148>)
   8bc78:	f000 fc42 	bl	8c500 <__assert_func>
   8bc7c:	0008d564 	.word	0x0008d564
   8bc80:	0008d608 	.word	0x0008d608

0008bc84 <__d2b>:
   8bc84:	b570      	push	{r4, r5, r6, lr}
   8bc86:	2101      	movs	r1, #1
   8bc88:	b082      	sub	sp, #8
   8bc8a:	4616      	mov	r6, r2
   8bc8c:	461d      	mov	r5, r3
   8bc8e:	f7ff fcb7 	bl	8b600 <_Balloc>
   8bc92:	4604      	mov	r4, r0
   8bc94:	2800      	cmp	r0, #0
   8bc96:	d04c      	beq.n	8bd32 <__d2b+0xae>
   8bc98:	462b      	mov	r3, r5
   8bc9a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8bc9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8bca2:	b10d      	cbz	r5, 8bca8 <__d2b+0x24>
   8bca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8bca8:	2e00      	cmp	r6, #0
   8bcaa:	9301      	str	r3, [sp, #4]
   8bcac:	d022      	beq.n	8bcf4 <__d2b+0x70>
   8bcae:	4668      	mov	r0, sp
   8bcb0:	9600      	str	r6, [sp, #0]
   8bcb2:	f7ff fd47 	bl	8b744 <__lo0bits>
   8bcb6:	2800      	cmp	r0, #0
   8bcb8:	d037      	beq.n	8bd2a <__d2b+0xa6>
   8bcba:	9b01      	ldr	r3, [sp, #4]
   8bcbc:	9900      	ldr	r1, [sp, #0]
   8bcbe:	f1c0 0220 	rsb	r2, r0, #32
   8bcc2:	fa03 f202 	lsl.w	r2, r3, r2
   8bcc6:	430a      	orrs	r2, r1
   8bcc8:	40c3      	lsrs	r3, r0
   8bcca:	9301      	str	r3, [sp, #4]
   8bccc:	6162      	str	r2, [r4, #20]
   8bcce:	2b00      	cmp	r3, #0
   8bcd0:	bf14      	ite	ne
   8bcd2:	2102      	movne	r1, #2
   8bcd4:	2101      	moveq	r1, #1
   8bcd6:	61a3      	str	r3, [r4, #24]
   8bcd8:	6121      	str	r1, [r4, #16]
   8bcda:	b1b5      	cbz	r5, 8bd0a <__d2b+0x86>
   8bcdc:	9b06      	ldr	r3, [sp, #24]
   8bcde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   8bce2:	4405      	add	r5, r0
   8bce4:	601d      	str	r5, [r3, #0]
   8bce6:	9b07      	ldr	r3, [sp, #28]
   8bce8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8bcec:	6018      	str	r0, [r3, #0]
   8bcee:	4620      	mov	r0, r4
   8bcf0:	b002      	add	sp, #8
   8bcf2:	bd70      	pop	{r4, r5, r6, pc}
   8bcf4:	a801      	add	r0, sp, #4
   8bcf6:	f7ff fd25 	bl	8b744 <__lo0bits>
   8bcfa:	2301      	movs	r3, #1
   8bcfc:	9a01      	ldr	r2, [sp, #4]
   8bcfe:	4619      	mov	r1, r3
   8bd00:	6162      	str	r2, [r4, #20]
   8bd02:	3020      	adds	r0, #32
   8bd04:	6123      	str	r3, [r4, #16]
   8bd06:	2d00      	cmp	r5, #0
   8bd08:	d1e8      	bne.n	8bcdc <__d2b+0x58>
   8bd0a:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8bd0e:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   8bd12:	6910      	ldr	r0, [r2, #16]
   8bd14:	9a06      	ldr	r2, [sp, #24]
   8bd16:	6013      	str	r3, [r2, #0]
   8bd18:	f7ff fcf4 	bl	8b704 <__hi0bits>
   8bd1c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8bd20:	4620      	mov	r0, r4
   8bd22:	9b07      	ldr	r3, [sp, #28]
   8bd24:	6019      	str	r1, [r3, #0]
   8bd26:	b002      	add	sp, #8
   8bd28:	bd70      	pop	{r4, r5, r6, pc}
   8bd2a:	e9dd 2300 	ldrd	r2, r3, [sp]
   8bd2e:	6162      	str	r2, [r4, #20]
   8bd30:	e7cd      	b.n	8bcce <__d2b+0x4a>
   8bd32:	4602      	mov	r2, r0
   8bd34:	f240 310a 	movw	r1, #778	; 0x30a
   8bd38:	4b01      	ldr	r3, [pc, #4]	; (8bd40 <__d2b+0xbc>)
   8bd3a:	4802      	ldr	r0, [pc, #8]	; (8bd44 <__d2b+0xc0>)
   8bd3c:	f000 fbe0 	bl	8c500 <__assert_func>
   8bd40:	0008d564 	.word	0x0008d564
   8bd44:	0008d608 	.word	0x0008d608

0008bd48 <_realloc_r>:
   8bd48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8bd4c:	4616      	mov	r6, r2
   8bd4e:	2900      	cmp	r1, #0
   8bd50:	f000 8098 	beq.w	8be84 <_realloc_r+0x13c>
   8bd54:	f106 050b 	add.w	r5, r6, #11
   8bd58:	4680      	mov	r8, r0
   8bd5a:	460c      	mov	r4, r1
   8bd5c:	f7ff fc44 	bl	8b5e8 <__malloc_lock>
   8bd60:	2d16      	cmp	r5, #22
   8bd62:	d85d      	bhi.n	8be20 <_realloc_r+0xd8>
   8bd64:	2510      	movs	r5, #16
   8bd66:	462a      	mov	r2, r5
   8bd68:	42ae      	cmp	r6, r5
   8bd6a:	d85e      	bhi.n	8be2a <_realloc_r+0xe2>
   8bd6c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8bd70:	f1a4 0908 	sub.w	r9, r4, #8
   8bd74:	f021 0703 	bic.w	r7, r1, #3
   8bd78:	4297      	cmp	r7, r2
   8bd7a:	da62      	bge.n	8be42 <_realloc_r+0xfa>
   8bd7c:	4bbc      	ldr	r3, [pc, #752]	; (8c070 <_realloc_r+0x328>)
   8bd7e:	eb09 0007 	add.w	r0, r9, r7
   8bd82:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8bd86:	4584      	cmp	ip, r0
   8bd88:	f000 8097 	beq.w	8beba <_realloc_r+0x172>
   8bd8c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8bd90:	f02c 0301 	bic.w	r3, ip, #1
   8bd94:	4403      	add	r3, r0
   8bd96:	685b      	ldr	r3, [r3, #4]
   8bd98:	07db      	lsls	r3, r3, #31
   8bd9a:	d468      	bmi.n	8be6e <_realloc_r+0x126>
   8bd9c:	f02c 0c03 	bic.w	ip, ip, #3
   8bda0:	eb07 030c 	add.w	r3, r7, ip
   8bda4:	4293      	cmp	r3, r2
   8bda6:	da47      	bge.n	8be38 <_realloc_r+0xf0>
   8bda8:	07cb      	lsls	r3, r1, #31
   8bdaa:	d410      	bmi.n	8bdce <_realloc_r+0x86>
   8bdac:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8bdb0:	eba9 0a03 	sub.w	sl, r9, r3
   8bdb4:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bdb8:	f023 0103 	bic.w	r1, r3, #3
   8bdbc:	448c      	add	ip, r1
   8bdbe:	44bc      	add	ip, r7
   8bdc0:	4594      	cmp	ip, r2
   8bdc2:	f280 8111 	bge.w	8bfe8 <_realloc_r+0x2a0>
   8bdc6:	187b      	adds	r3, r7, r1
   8bdc8:	4293      	cmp	r3, r2
   8bdca:	f280 80e8 	bge.w	8bf9e <_realloc_r+0x256>
   8bdce:	4631      	mov	r1, r6
   8bdd0:	4640      	mov	r0, r8
   8bdd2:	f7ff f883 	bl	8aedc <_malloc_r>
   8bdd6:	4606      	mov	r6, r0
   8bdd8:	b1e0      	cbz	r0, 8be14 <_realloc_r+0xcc>
   8bdda:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bdde:	f1a0 0208 	sub.w	r2, r0, #8
   8bde2:	f023 0301 	bic.w	r3, r3, #1
   8bde6:	444b      	add	r3, r9
   8bde8:	4293      	cmp	r3, r2
   8bdea:	f000 80d2 	beq.w	8bf92 <_realloc_r+0x24a>
   8bdee:	1f3a      	subs	r2, r7, #4
   8bdf0:	2a24      	cmp	r2, #36	; 0x24
   8bdf2:	f200 80f5 	bhi.w	8bfe0 <_realloc_r+0x298>
   8bdf6:	2a13      	cmp	r2, #19
   8bdf8:	f200 80ac 	bhi.w	8bf54 <_realloc_r+0x20c>
   8bdfc:	4603      	mov	r3, r0
   8bdfe:	4622      	mov	r2, r4
   8be00:	6811      	ldr	r1, [r2, #0]
   8be02:	6019      	str	r1, [r3, #0]
   8be04:	6851      	ldr	r1, [r2, #4]
   8be06:	6059      	str	r1, [r3, #4]
   8be08:	6892      	ldr	r2, [r2, #8]
   8be0a:	609a      	str	r2, [r3, #8]
   8be0c:	4621      	mov	r1, r4
   8be0e:	4640      	mov	r0, r8
   8be10:	f7fe fd46 	bl	8a8a0 <_free_r>
   8be14:	4640      	mov	r0, r8
   8be16:	f7ff fbed 	bl	8b5f4 <__malloc_unlock>
   8be1a:	4630      	mov	r0, r6
   8be1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be20:	f025 0507 	bic.w	r5, r5, #7
   8be24:	2d00      	cmp	r5, #0
   8be26:	462a      	mov	r2, r5
   8be28:	da9e      	bge.n	8bd68 <_realloc_r+0x20>
   8be2a:	230c      	movs	r3, #12
   8be2c:	2600      	movs	r6, #0
   8be2e:	f8c8 3000 	str.w	r3, [r8]
   8be32:	4630      	mov	r0, r6
   8be34:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be38:	461f      	mov	r7, r3
   8be3a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8be3e:	60d3      	str	r3, [r2, #12]
   8be40:	609a      	str	r2, [r3, #8]
   8be42:	1b7b      	subs	r3, r7, r5
   8be44:	2b0f      	cmp	r3, #15
   8be46:	d822      	bhi.n	8be8e <_realloc_r+0x146>
   8be48:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8be4c:	f003 0301 	and.w	r3, r3, #1
   8be50:	433b      	orrs	r3, r7
   8be52:	f8c9 3004 	str.w	r3, [r9, #4]
   8be56:	444f      	add	r7, r9
   8be58:	687b      	ldr	r3, [r7, #4]
   8be5a:	f043 0301 	orr.w	r3, r3, #1
   8be5e:	607b      	str	r3, [r7, #4]
   8be60:	4626      	mov	r6, r4
   8be62:	4640      	mov	r0, r8
   8be64:	f7ff fbc6 	bl	8b5f4 <__malloc_unlock>
   8be68:	4630      	mov	r0, r6
   8be6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8be6e:	07c9      	lsls	r1, r1, #31
   8be70:	d4ad      	bmi.n	8bdce <_realloc_r+0x86>
   8be72:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8be76:	eba9 0a03 	sub.w	sl, r9, r3
   8be7a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8be7e:	f021 0103 	bic.w	r1, r1, #3
   8be82:	e7a0      	b.n	8bdc6 <_realloc_r+0x7e>
   8be84:	4611      	mov	r1, r2
   8be86:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8be8a:	f7ff b827 	b.w	8aedc <_malloc_r>
   8be8e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8be92:	f043 0301 	orr.w	r3, r3, #1
   8be96:	f001 0101 	and.w	r1, r1, #1
   8be9a:	4329      	orrs	r1, r5
   8be9c:	f8c9 1004 	str.w	r1, [r9, #4]
   8bea0:	eb09 0105 	add.w	r1, r9, r5
   8bea4:	604b      	str	r3, [r1, #4]
   8bea6:	444f      	add	r7, r9
   8bea8:	687b      	ldr	r3, [r7, #4]
   8beaa:	4640      	mov	r0, r8
   8beac:	f043 0301 	orr.w	r3, r3, #1
   8beb0:	3108      	adds	r1, #8
   8beb2:	607b      	str	r3, [r7, #4]
   8beb4:	f7fe fcf4 	bl	8a8a0 <_free_r>
   8beb8:	e7d2      	b.n	8be60 <_realloc_r+0x118>
   8beba:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8bebe:	f020 0b03 	bic.w	fp, r0, #3
   8bec2:	eb07 0c0b 	add.w	ip, r7, fp
   8bec6:	f105 0010 	add.w	r0, r5, #16
   8beca:	4584      	cmp	ip, r0
   8becc:	da4d      	bge.n	8bf6a <_realloc_r+0x222>
   8bece:	07c9      	lsls	r1, r1, #31
   8bed0:	f53f af7d 	bmi.w	8bdce <_realloc_r+0x86>
   8bed4:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8bed8:	eba9 0a01 	sub.w	sl, r9, r1
   8bedc:	f8da 1004 	ldr.w	r1, [sl, #4]
   8bee0:	f021 0103 	bic.w	r1, r1, #3
   8bee4:	448b      	add	fp, r1
   8bee6:	44bb      	add	fp, r7
   8bee8:	4558      	cmp	r0, fp
   8beea:	f73f af6c 	bgt.w	8bdc6 <_realloc_r+0x7e>
   8beee:	4656      	mov	r6, sl
   8bef0:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bef4:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8bef8:	1f3a      	subs	r2, r7, #4
   8befa:	2a24      	cmp	r2, #36	; 0x24
   8befc:	60c1      	str	r1, [r0, #12]
   8befe:	6088      	str	r0, [r1, #8]
   8bf00:	f200 80db 	bhi.w	8c0ba <_realloc_r+0x372>
   8bf04:	2a13      	cmp	r2, #19
   8bf06:	f240 80d6 	bls.w	8c0b6 <_realloc_r+0x36e>
   8bf0a:	6821      	ldr	r1, [r4, #0]
   8bf0c:	2a1b      	cmp	r2, #27
   8bf0e:	f8ca 1008 	str.w	r1, [sl, #8]
   8bf12:	6861      	ldr	r1, [r4, #4]
   8bf14:	f8ca 100c 	str.w	r1, [sl, #12]
   8bf18:	f200 80e0 	bhi.w	8c0dc <_realloc_r+0x394>
   8bf1c:	3408      	adds	r4, #8
   8bf1e:	f10a 0210 	add.w	r2, sl, #16
   8bf22:	6821      	ldr	r1, [r4, #0]
   8bf24:	6011      	str	r1, [r2, #0]
   8bf26:	6861      	ldr	r1, [r4, #4]
   8bf28:	6051      	str	r1, [r2, #4]
   8bf2a:	68a1      	ldr	r1, [r4, #8]
   8bf2c:	6091      	str	r1, [r2, #8]
   8bf2e:	ebab 0205 	sub.w	r2, fp, r5
   8bf32:	eb0a 0105 	add.w	r1, sl, r5
   8bf36:	f042 0201 	orr.w	r2, r2, #1
   8bf3a:	6099      	str	r1, [r3, #8]
   8bf3c:	604a      	str	r2, [r1, #4]
   8bf3e:	f8da 3004 	ldr.w	r3, [sl, #4]
   8bf42:	4640      	mov	r0, r8
   8bf44:	f003 0301 	and.w	r3, r3, #1
   8bf48:	431d      	orrs	r5, r3
   8bf4a:	f8ca 5004 	str.w	r5, [sl, #4]
   8bf4e:	f7ff fb51 	bl	8b5f4 <__malloc_unlock>
   8bf52:	e76e      	b.n	8be32 <_realloc_r+0xea>
   8bf54:	6823      	ldr	r3, [r4, #0]
   8bf56:	2a1b      	cmp	r2, #27
   8bf58:	6003      	str	r3, [r0, #0]
   8bf5a:	6863      	ldr	r3, [r4, #4]
   8bf5c:	6043      	str	r3, [r0, #4]
   8bf5e:	d868      	bhi.n	8c032 <_realloc_r+0x2ea>
   8bf60:	f104 0208 	add.w	r2, r4, #8
   8bf64:	f100 0308 	add.w	r3, r0, #8
   8bf68:	e74a      	b.n	8be00 <_realloc_r+0xb8>
   8bf6a:	eb09 0205 	add.w	r2, r9, r5
   8bf6e:	ebac 0c05 	sub.w	ip, ip, r5
   8bf72:	609a      	str	r2, [r3, #8]
   8bf74:	f04c 0301 	orr.w	r3, ip, #1
   8bf78:	6053      	str	r3, [r2, #4]
   8bf7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8bf7e:	4640      	mov	r0, r8
   8bf80:	f003 0301 	and.w	r3, r3, #1
   8bf84:	431d      	orrs	r5, r3
   8bf86:	f844 5c04 	str.w	r5, [r4, #-4]
   8bf8a:	f7ff fb33 	bl	8b5f4 <__malloc_unlock>
   8bf8e:	4626      	mov	r6, r4
   8bf90:	e74f      	b.n	8be32 <_realloc_r+0xea>
   8bf92:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8bf96:	f023 0303 	bic.w	r3, r3, #3
   8bf9a:	441f      	add	r7, r3
   8bf9c:	e751      	b.n	8be42 <_realloc_r+0xfa>
   8bf9e:	4656      	mov	r6, sl
   8bfa0:	f8da 100c 	ldr.w	r1, [sl, #12]
   8bfa4:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8bfa8:	1f3a      	subs	r2, r7, #4
   8bfaa:	2a24      	cmp	r2, #36	; 0x24
   8bfac:	60c1      	str	r1, [r0, #12]
   8bfae:	6088      	str	r0, [r1, #8]
   8bfb0:	d84c      	bhi.n	8c04c <_realloc_r+0x304>
   8bfb2:	2a13      	cmp	r2, #19
   8bfb4:	d948      	bls.n	8c048 <_realloc_r+0x300>
   8bfb6:	6821      	ldr	r1, [r4, #0]
   8bfb8:	2a1b      	cmp	r2, #27
   8bfba:	f8ca 1008 	str.w	r1, [sl, #8]
   8bfbe:	6861      	ldr	r1, [r4, #4]
   8bfc0:	f8ca 100c 	str.w	r1, [sl, #12]
   8bfc4:	d856      	bhi.n	8c074 <_realloc_r+0x32c>
   8bfc6:	3408      	adds	r4, #8
   8bfc8:	f10a 0210 	add.w	r2, sl, #16
   8bfcc:	461f      	mov	r7, r3
   8bfce:	6823      	ldr	r3, [r4, #0]
   8bfd0:	46d1      	mov	r9, sl
   8bfd2:	6013      	str	r3, [r2, #0]
   8bfd4:	6863      	ldr	r3, [r4, #4]
   8bfd6:	6053      	str	r3, [r2, #4]
   8bfd8:	68a3      	ldr	r3, [r4, #8]
   8bfda:	4634      	mov	r4, r6
   8bfdc:	6093      	str	r3, [r2, #8]
   8bfde:	e730      	b.n	8be42 <_realloc_r+0xfa>
   8bfe0:	4621      	mov	r1, r4
   8bfe2:	f7ff fa85 	bl	8b4f0 <memmove>
   8bfe6:	e711      	b.n	8be0c <_realloc_r+0xc4>
   8bfe8:	4656      	mov	r6, sl
   8bfea:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8bfee:	60cb      	str	r3, [r1, #12]
   8bff0:	6099      	str	r1, [r3, #8]
   8bff2:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8bff6:	f8da 300c 	ldr.w	r3, [sl, #12]
   8bffa:	1f3a      	subs	r2, r7, #4
   8bffc:	2a24      	cmp	r2, #36	; 0x24
   8bffe:	60cb      	str	r3, [r1, #12]
   8c000:	6099      	str	r1, [r3, #8]
   8c002:	d82d      	bhi.n	8c060 <_realloc_r+0x318>
   8c004:	2a13      	cmp	r2, #19
   8c006:	d929      	bls.n	8c05c <_realloc_r+0x314>
   8c008:	6823      	ldr	r3, [r4, #0]
   8c00a:	2a1b      	cmp	r2, #27
   8c00c:	f8ca 3008 	str.w	r3, [sl, #8]
   8c010:	6863      	ldr	r3, [r4, #4]
   8c012:	f8ca 300c 	str.w	r3, [sl, #12]
   8c016:	d842      	bhi.n	8c09e <_realloc_r+0x356>
   8c018:	3408      	adds	r4, #8
   8c01a:	f10a 0310 	add.w	r3, sl, #16
   8c01e:	6822      	ldr	r2, [r4, #0]
   8c020:	4667      	mov	r7, ip
   8c022:	601a      	str	r2, [r3, #0]
   8c024:	6862      	ldr	r2, [r4, #4]
   8c026:	46d1      	mov	r9, sl
   8c028:	605a      	str	r2, [r3, #4]
   8c02a:	68a2      	ldr	r2, [r4, #8]
   8c02c:	4634      	mov	r4, r6
   8c02e:	609a      	str	r2, [r3, #8]
   8c030:	e707      	b.n	8be42 <_realloc_r+0xfa>
   8c032:	68a3      	ldr	r3, [r4, #8]
   8c034:	2a24      	cmp	r2, #36	; 0x24
   8c036:	6083      	str	r3, [r0, #8]
   8c038:	68e3      	ldr	r3, [r4, #12]
   8c03a:	60c3      	str	r3, [r0, #12]
   8c03c:	d026      	beq.n	8c08c <_realloc_r+0x344>
   8c03e:	f104 0210 	add.w	r2, r4, #16
   8c042:	f100 0310 	add.w	r3, r0, #16
   8c046:	e6db      	b.n	8be00 <_realloc_r+0xb8>
   8c048:	4632      	mov	r2, r6
   8c04a:	e7bf      	b.n	8bfcc <_realloc_r+0x284>
   8c04c:	4621      	mov	r1, r4
   8c04e:	4630      	mov	r0, r6
   8c050:	461f      	mov	r7, r3
   8c052:	46d1      	mov	r9, sl
   8c054:	f7ff fa4c 	bl	8b4f0 <memmove>
   8c058:	4634      	mov	r4, r6
   8c05a:	e6f2      	b.n	8be42 <_realloc_r+0xfa>
   8c05c:	4633      	mov	r3, r6
   8c05e:	e7de      	b.n	8c01e <_realloc_r+0x2d6>
   8c060:	4621      	mov	r1, r4
   8c062:	4630      	mov	r0, r6
   8c064:	4667      	mov	r7, ip
   8c066:	46d1      	mov	r9, sl
   8c068:	f7ff fa42 	bl	8b4f0 <memmove>
   8c06c:	4634      	mov	r4, r6
   8c06e:	e6e8      	b.n	8be42 <_realloc_r+0xfa>
   8c070:	20000a10 	.word	0x20000a10
   8c074:	68a1      	ldr	r1, [r4, #8]
   8c076:	2a24      	cmp	r2, #36	; 0x24
   8c078:	f8ca 1010 	str.w	r1, [sl, #16]
   8c07c:	68e1      	ldr	r1, [r4, #12]
   8c07e:	f8ca 1014 	str.w	r1, [sl, #20]
   8c082:	d020      	beq.n	8c0c6 <_realloc_r+0x37e>
   8c084:	3410      	adds	r4, #16
   8c086:	f10a 0218 	add.w	r2, sl, #24
   8c08a:	e79f      	b.n	8bfcc <_realloc_r+0x284>
   8c08c:	6923      	ldr	r3, [r4, #16]
   8c08e:	f104 0218 	add.w	r2, r4, #24
   8c092:	6103      	str	r3, [r0, #16]
   8c094:	6963      	ldr	r3, [r4, #20]
   8c096:	6143      	str	r3, [r0, #20]
   8c098:	f100 0318 	add.w	r3, r0, #24
   8c09c:	e6b0      	b.n	8be00 <_realloc_r+0xb8>
   8c09e:	68a3      	ldr	r3, [r4, #8]
   8c0a0:	2a24      	cmp	r2, #36	; 0x24
   8c0a2:	f8ca 3010 	str.w	r3, [sl, #16]
   8c0a6:	68e3      	ldr	r3, [r4, #12]
   8c0a8:	f8ca 3014 	str.w	r3, [sl, #20]
   8c0ac:	d022      	beq.n	8c0f4 <_realloc_r+0x3ac>
   8c0ae:	3410      	adds	r4, #16
   8c0b0:	f10a 0318 	add.w	r3, sl, #24
   8c0b4:	e7b3      	b.n	8c01e <_realloc_r+0x2d6>
   8c0b6:	4632      	mov	r2, r6
   8c0b8:	e733      	b.n	8bf22 <_realloc_r+0x1da>
   8c0ba:	4621      	mov	r1, r4
   8c0bc:	4630      	mov	r0, r6
   8c0be:	f7ff fa17 	bl	8b4f0 <memmove>
   8c0c2:	4b17      	ldr	r3, [pc, #92]	; (8c120 <_realloc_r+0x3d8>)
   8c0c4:	e733      	b.n	8bf2e <_realloc_r+0x1e6>
   8c0c6:	6922      	ldr	r2, [r4, #16]
   8c0c8:	3418      	adds	r4, #24
   8c0ca:	f8ca 2018 	str.w	r2, [sl, #24]
   8c0ce:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8c0d2:	f8ca 201c 	str.w	r2, [sl, #28]
   8c0d6:	f10a 0220 	add.w	r2, sl, #32
   8c0da:	e777      	b.n	8bfcc <_realloc_r+0x284>
   8c0dc:	68a1      	ldr	r1, [r4, #8]
   8c0de:	2a24      	cmp	r2, #36	; 0x24
   8c0e0:	f8ca 1010 	str.w	r1, [sl, #16]
   8c0e4:	68e1      	ldr	r1, [r4, #12]
   8c0e6:	f8ca 1014 	str.w	r1, [sl, #20]
   8c0ea:	d00e      	beq.n	8c10a <_realloc_r+0x3c2>
   8c0ec:	3410      	adds	r4, #16
   8c0ee:	f10a 0218 	add.w	r2, sl, #24
   8c0f2:	e716      	b.n	8bf22 <_realloc_r+0x1da>
   8c0f4:	6923      	ldr	r3, [r4, #16]
   8c0f6:	3418      	adds	r4, #24
   8c0f8:	f8ca 3018 	str.w	r3, [sl, #24]
   8c0fc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8c100:	f8ca 301c 	str.w	r3, [sl, #28]
   8c104:	f10a 0320 	add.w	r3, sl, #32
   8c108:	e789      	b.n	8c01e <_realloc_r+0x2d6>
   8c10a:	6922      	ldr	r2, [r4, #16]
   8c10c:	3418      	adds	r4, #24
   8c10e:	f8ca 2018 	str.w	r2, [sl, #24]
   8c112:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8c116:	f8ca 201c 	str.w	r2, [sl, #28]
   8c11a:	f10a 0220 	add.w	r2, sl, #32
   8c11e:	e700      	b.n	8bf22 <_realloc_r+0x1da>
   8c120:	20000a10 	.word	0x20000a10

0008c124 <frexp>:
   8c124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c126:	2700      	movs	r7, #0
   8c128:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8c188 <frexp+0x64>
   8c12c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c130:	4563      	cmp	r3, ip
   8c132:	4604      	mov	r4, r0
   8c134:	460d      	mov	r5, r1
   8c136:	6017      	str	r7, [r2, #0]
   8c138:	dc23      	bgt.n	8c182 <frexp+0x5e>
   8c13a:	4684      	mov	ip, r0
   8c13c:	ea53 0c0c 	orrs.w	ip, r3, ip
   8c140:	d01f      	beq.n	8c182 <frexp+0x5e>
   8c142:	f8df c048 	ldr.w	ip, [pc, #72]	; 8c18c <frexp+0x68>
   8c146:	4616      	mov	r6, r2
   8c148:	ea01 0c0c 	and.w	ip, r1, ip
   8c14c:	460a      	mov	r2, r1
   8c14e:	f1bc 0f00 	cmp.w	ip, #0
   8c152:	d109      	bne.n	8c168 <frexp+0x44>
   8c154:	2200      	movs	r2, #0
   8c156:	4b0e      	ldr	r3, [pc, #56]	; (8c190 <frexp+0x6c>)
   8c158:	f000 fd1a 	bl	8cb90 <__aeabi_dmul>
   8c15c:	f06f 0735 	mvn.w	r7, #53	; 0x35
   8c160:	4604      	mov	r4, r0
   8c162:	460a      	mov	r2, r1
   8c164:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8c168:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   8c16c:	151b      	asrs	r3, r3, #20
   8c16e:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   8c172:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8c176:	443b      	add	r3, r7
   8c178:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   8c17c:	6033      	str	r3, [r6, #0]
   8c17e:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8c182:	4620      	mov	r0, r4
   8c184:	4629      	mov	r1, r5
   8c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c188:	7fefffff 	.word	0x7fefffff
   8c18c:	7ff00000 	.word	0x7ff00000
   8c190:	43500000 	.word	0x43500000

0008c194 <_sbrk_r>:
   8c194:	2200      	movs	r2, #0
   8c196:	b538      	push	{r3, r4, r5, lr}
   8c198:	4d06      	ldr	r5, [pc, #24]	; (8c1b4 <_sbrk_r+0x20>)
   8c19a:	4604      	mov	r4, r0
   8c19c:	4608      	mov	r0, r1
   8c19e:	602a      	str	r2, [r5, #0]
   8c1a0:	f7fa f84a 	bl	86238 <_sbrk>
   8c1a4:	1c43      	adds	r3, r0, #1
   8c1a6:	d000      	beq.n	8c1aa <_sbrk_r+0x16>
   8c1a8:	bd38      	pop	{r3, r4, r5, pc}
   8c1aa:	682b      	ldr	r3, [r5, #0]
   8c1ac:	2b00      	cmp	r3, #0
   8c1ae:	d0fb      	beq.n	8c1a8 <_sbrk_r+0x14>
   8c1b0:	6023      	str	r3, [r4, #0]
   8c1b2:	bd38      	pop	{r3, r4, r5, pc}
   8c1b4:	2000149c 	.word	0x2000149c

0008c1b8 <__sread>:
   8c1b8:	b510      	push	{r4, lr}
   8c1ba:	460c      	mov	r4, r1
   8c1bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c1c0:	f000 fac8 	bl	8c754 <_read_r>
   8c1c4:	2800      	cmp	r0, #0
   8c1c6:	db03      	blt.n	8c1d0 <__sread+0x18>
   8c1c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8c1ca:	4403      	add	r3, r0
   8c1cc:	6523      	str	r3, [r4, #80]	; 0x50
   8c1ce:	bd10      	pop	{r4, pc}
   8c1d0:	89a3      	ldrh	r3, [r4, #12]
   8c1d2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8c1d6:	81a3      	strh	r3, [r4, #12]
   8c1d8:	bd10      	pop	{r4, pc}
   8c1da:	bf00      	nop

0008c1dc <__swrite>:
   8c1dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c1e0:	460c      	mov	r4, r1
   8c1e2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8c1e6:	461f      	mov	r7, r3
   8c1e8:	05cb      	lsls	r3, r1, #23
   8c1ea:	4605      	mov	r5, r0
   8c1ec:	4616      	mov	r6, r2
   8c1ee:	d40b      	bmi.n	8c208 <__swrite+0x2c>
   8c1f0:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8c1f4:	81a1      	strh	r1, [r4, #12]
   8c1f6:	463b      	mov	r3, r7
   8c1f8:	4632      	mov	r2, r6
   8c1fa:	4628      	mov	r0, r5
   8c1fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8c204:	f000 b920 	b.w	8c448 <_write_r>
   8c208:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c20c:	2302      	movs	r3, #2
   8c20e:	2200      	movs	r2, #0
   8c210:	f000 fa8a 	bl	8c728 <_lseek_r>
   8c214:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8c218:	e7ea      	b.n	8c1f0 <__swrite+0x14>
   8c21a:	bf00      	nop

0008c21c <__sseek>:
   8c21c:	b510      	push	{r4, lr}
   8c21e:	460c      	mov	r4, r1
   8c220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c224:	f000 fa80 	bl	8c728 <_lseek_r>
   8c228:	89a3      	ldrh	r3, [r4, #12]
   8c22a:	1c42      	adds	r2, r0, #1
   8c22c:	bf0e      	itee	eq
   8c22e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8c232:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8c236:	6520      	strne	r0, [r4, #80]	; 0x50
   8c238:	81a3      	strh	r3, [r4, #12]
   8c23a:	bd10      	pop	{r4, pc}

0008c23c <__sclose>:
   8c23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8c240:	f000 b9ba 	b.w	8c5b8 <_close_r>

0008c244 <__ssprint_r>:
   8c244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c248:	6893      	ldr	r3, [r2, #8]
   8c24a:	4691      	mov	r9, r2
   8c24c:	b083      	sub	sp, #12
   8c24e:	2b00      	cmp	r3, #0
   8c250:	d06e      	beq.n	8c330 <__ssprint_r+0xec>
   8c252:	6817      	ldr	r7, [r2, #0]
   8c254:	4680      	mov	r8, r0
   8c256:	460c      	mov	r4, r1
   8c258:	6808      	ldr	r0, [r1, #0]
   8c25a:	688d      	ldr	r5, [r1, #8]
   8c25c:	3708      	adds	r7, #8
   8c25e:	e044      	b.n	8c2ea <__ssprint_r+0xa6>
   8c260:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   8c264:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   8c268:	d02e      	beq.n	8c2c8 <__ssprint_r+0x84>
   8c26a:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   8c26e:	1a45      	subs	r5, r0, r1
   8c270:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8c274:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   8c278:	19aa      	adds	r2, r5, r6
   8c27a:	ea4f 0a63 	mov.w	sl, r3, asr #1
   8c27e:	1c53      	adds	r3, r2, #1
   8c280:	4553      	cmp	r3, sl
   8c282:	4652      	mov	r2, sl
   8c284:	bf84      	itt	hi
   8c286:	469a      	movhi	sl, r3
   8c288:	4652      	movhi	r2, sl
   8c28a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   8c28e:	d036      	beq.n	8c2fe <__ssprint_r+0xba>
   8c290:	4611      	mov	r1, r2
   8c292:	4640      	mov	r0, r8
   8c294:	f7fe fe22 	bl	8aedc <_malloc_r>
   8c298:	2800      	cmp	r0, #0
   8c29a:	d03a      	beq.n	8c312 <__ssprint_r+0xce>
   8c29c:	462a      	mov	r2, r5
   8c29e:	6921      	ldr	r1, [r4, #16]
   8c2a0:	9001      	str	r0, [sp, #4]
   8c2a2:	f7fa fa5b 	bl	8675c <memcpy>
   8c2a6:	89a2      	ldrh	r2, [r4, #12]
   8c2a8:	9b01      	ldr	r3, [sp, #4]
   8c2aa:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c2ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c2b2:	81a2      	strh	r2, [r4, #12]
   8c2b4:	1958      	adds	r0, r3, r5
   8c2b6:	ebaa 0505 	sub.w	r5, sl, r5
   8c2ba:	60a5      	str	r5, [r4, #8]
   8c2bc:	f8c4 a014 	str.w	sl, [r4, #20]
   8c2c0:	4635      	mov	r5, r6
   8c2c2:	46b2      	mov	sl, r6
   8c2c4:	6123      	str	r3, [r4, #16]
   8c2c6:	6020      	str	r0, [r4, #0]
   8c2c8:	4659      	mov	r1, fp
   8c2ca:	4652      	mov	r2, sl
   8c2cc:	f7ff f910 	bl	8b4f0 <memmove>
   8c2d0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8c2d4:	68a1      	ldr	r1, [r4, #8]
   8c2d6:	6820      	ldr	r0, [r4, #0]
   8c2d8:	1b4d      	subs	r5, r1, r5
   8c2da:	4450      	add	r0, sl
   8c2dc:	1b9e      	subs	r6, r3, r6
   8c2de:	60a5      	str	r5, [r4, #8]
   8c2e0:	6020      	str	r0, [r4, #0]
   8c2e2:	f8c9 6008 	str.w	r6, [r9, #8]
   8c2e6:	b31e      	cbz	r6, 8c330 <__ssprint_r+0xec>
   8c2e8:	3708      	adds	r7, #8
   8c2ea:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8c2ee:	2e00      	cmp	r6, #0
   8c2f0:	d0fa      	beq.n	8c2e8 <__ssprint_r+0xa4>
   8c2f2:	42b5      	cmp	r5, r6
   8c2f4:	46aa      	mov	sl, r5
   8c2f6:	d9b3      	bls.n	8c260 <__ssprint_r+0x1c>
   8c2f8:	4635      	mov	r5, r6
   8c2fa:	46b2      	mov	sl, r6
   8c2fc:	e7e4      	b.n	8c2c8 <__ssprint_r+0x84>
   8c2fe:	4640      	mov	r0, r8
   8c300:	f7ff fd22 	bl	8bd48 <_realloc_r>
   8c304:	4603      	mov	r3, r0
   8c306:	2800      	cmp	r0, #0
   8c308:	d1d4      	bne.n	8c2b4 <__ssprint_r+0x70>
   8c30a:	4640      	mov	r0, r8
   8c30c:	6921      	ldr	r1, [r4, #16]
   8c30e:	f7fe fac7 	bl	8a8a0 <_free_r>
   8c312:	230c      	movs	r3, #12
   8c314:	2200      	movs	r2, #0
   8c316:	f04f 30ff 	mov.w	r0, #4294967295
   8c31a:	f8c8 3000 	str.w	r3, [r8]
   8c31e:	89a3      	ldrh	r3, [r4, #12]
   8c320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c324:	81a3      	strh	r3, [r4, #12]
   8c326:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8c32a:	b003      	add	sp, #12
   8c32c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c330:	2300      	movs	r3, #0
   8c332:	4618      	mov	r0, r3
   8c334:	f8c9 3004 	str.w	r3, [r9, #4]
   8c338:	b003      	add	sp, #12
   8c33a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c33e:	bf00      	nop

0008c340 <__swbuf_r>:
   8c340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c342:	4606      	mov	r6, r0
   8c344:	460d      	mov	r5, r1
   8c346:	4614      	mov	r4, r2
   8c348:	b110      	cbz	r0, 8c350 <__swbuf_r+0x10>
   8c34a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c34c:	2b00      	cmp	r3, #0
   8c34e:	d043      	beq.n	8c3d8 <__swbuf_r+0x98>
   8c350:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c354:	69a3      	ldr	r3, [r4, #24]
   8c356:	0710      	lsls	r0, r2, #28
   8c358:	60a3      	str	r3, [r4, #8]
   8c35a:	b291      	uxth	r1, r2
   8c35c:	d51b      	bpl.n	8c396 <__swbuf_r+0x56>
   8c35e:	6923      	ldr	r3, [r4, #16]
   8c360:	b1cb      	cbz	r3, 8c396 <__swbuf_r+0x56>
   8c362:	b2ed      	uxtb	r5, r5
   8c364:	0489      	lsls	r1, r1, #18
   8c366:	462f      	mov	r7, r5
   8c368:	d522      	bpl.n	8c3b0 <__swbuf_r+0x70>
   8c36a:	6822      	ldr	r2, [r4, #0]
   8c36c:	6961      	ldr	r1, [r4, #20]
   8c36e:	1ad3      	subs	r3, r2, r3
   8c370:	4299      	cmp	r1, r3
   8c372:	dd29      	ble.n	8c3c8 <__swbuf_r+0x88>
   8c374:	3301      	adds	r3, #1
   8c376:	68a1      	ldr	r1, [r4, #8]
   8c378:	3901      	subs	r1, #1
   8c37a:	60a1      	str	r1, [r4, #8]
   8c37c:	1c51      	adds	r1, r2, #1
   8c37e:	6021      	str	r1, [r4, #0]
   8c380:	7015      	strb	r5, [r2, #0]
   8c382:	6962      	ldr	r2, [r4, #20]
   8c384:	429a      	cmp	r2, r3
   8c386:	d02a      	beq.n	8c3de <__swbuf_r+0x9e>
   8c388:	89a3      	ldrh	r3, [r4, #12]
   8c38a:	07db      	lsls	r3, r3, #31
   8c38c:	d501      	bpl.n	8c392 <__swbuf_r+0x52>
   8c38e:	2d0a      	cmp	r5, #10
   8c390:	d025      	beq.n	8c3de <__swbuf_r+0x9e>
   8c392:	4638      	mov	r0, r7
   8c394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c396:	4621      	mov	r1, r4
   8c398:	4630      	mov	r0, r6
   8c39a:	f7fc ffc7 	bl	8932c <__swsetup_r>
   8c39e:	bb20      	cbnz	r0, 8c3ea <__swbuf_r+0xaa>
   8c3a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8c3a4:	b2ed      	uxtb	r5, r5
   8c3a6:	b291      	uxth	r1, r2
   8c3a8:	0489      	lsls	r1, r1, #18
   8c3aa:	462f      	mov	r7, r5
   8c3ac:	6923      	ldr	r3, [r4, #16]
   8c3ae:	d4dc      	bmi.n	8c36a <__swbuf_r+0x2a>
   8c3b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c3b4:	81a2      	strh	r2, [r4, #12]
   8c3b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8c3b8:	6961      	ldr	r1, [r4, #20]
   8c3ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8c3be:	6662      	str	r2, [r4, #100]	; 0x64
   8c3c0:	6822      	ldr	r2, [r4, #0]
   8c3c2:	1ad3      	subs	r3, r2, r3
   8c3c4:	4299      	cmp	r1, r3
   8c3c6:	dcd5      	bgt.n	8c374 <__swbuf_r+0x34>
   8c3c8:	4621      	mov	r1, r4
   8c3ca:	4630      	mov	r0, r6
   8c3cc:	f7fe f8b8 	bl	8a540 <_fflush_r>
   8c3d0:	b958      	cbnz	r0, 8c3ea <__swbuf_r+0xaa>
   8c3d2:	2301      	movs	r3, #1
   8c3d4:	6822      	ldr	r2, [r4, #0]
   8c3d6:	e7ce      	b.n	8c376 <__swbuf_r+0x36>
   8c3d8:	f7fe f8e6 	bl	8a5a8 <__sinit>
   8c3dc:	e7b8      	b.n	8c350 <__swbuf_r+0x10>
   8c3de:	4621      	mov	r1, r4
   8c3e0:	4630      	mov	r0, r6
   8c3e2:	f7fe f8ad 	bl	8a540 <_fflush_r>
   8c3e6:	2800      	cmp	r0, #0
   8c3e8:	d0d3      	beq.n	8c392 <__swbuf_r+0x52>
   8c3ea:	f04f 37ff 	mov.w	r7, #4294967295
   8c3ee:	e7d0      	b.n	8c392 <__swbuf_r+0x52>

0008c3f0 <_wcrtomb_r>:
   8c3f0:	b570      	push	{r4, r5, r6, lr}
   8c3f2:	4605      	mov	r5, r0
   8c3f4:	461c      	mov	r4, r3
   8c3f6:	b084      	sub	sp, #16
   8c3f8:	b139      	cbz	r1, 8c40a <_wcrtomb_r+0x1a>
   8c3fa:	4e0b      	ldr	r6, [pc, #44]	; (8c428 <_wcrtomb_r+0x38>)
   8c3fc:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8c400:	47b0      	blx	r6
   8c402:	1c43      	adds	r3, r0, #1
   8c404:	d009      	beq.n	8c41a <_wcrtomb_r+0x2a>
   8c406:	b004      	add	sp, #16
   8c408:	bd70      	pop	{r4, r5, r6, pc}
   8c40a:	460a      	mov	r2, r1
   8c40c:	4906      	ldr	r1, [pc, #24]	; (8c428 <_wcrtomb_r+0x38>)
   8c40e:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8c412:	a901      	add	r1, sp, #4
   8c414:	47b0      	blx	r6
   8c416:	1c43      	adds	r3, r0, #1
   8c418:	d1f5      	bne.n	8c406 <_wcrtomb_r+0x16>
   8c41a:	2200      	movs	r2, #0
   8c41c:	238a      	movs	r3, #138	; 0x8a
   8c41e:	6022      	str	r2, [r4, #0]
   8c420:	602b      	str	r3, [r5, #0]
   8c422:	b004      	add	sp, #16
   8c424:	bd70      	pop	{r4, r5, r6, pc}
   8c426:	bf00      	nop
   8c428:	200008a4 	.word	0x200008a4

0008c42c <__ascii_wctomb>:
   8c42c:	4603      	mov	r3, r0
   8c42e:	b149      	cbz	r1, 8c444 <__ascii_wctomb+0x18>
   8c430:	2aff      	cmp	r2, #255	; 0xff
   8c432:	d802      	bhi.n	8c43a <__ascii_wctomb+0xe>
   8c434:	2001      	movs	r0, #1
   8c436:	700a      	strb	r2, [r1, #0]
   8c438:	4770      	bx	lr
   8c43a:	228a      	movs	r2, #138	; 0x8a
   8c43c:	f04f 30ff 	mov.w	r0, #4294967295
   8c440:	601a      	str	r2, [r3, #0]
   8c442:	4770      	bx	lr
   8c444:	4608      	mov	r0, r1
   8c446:	4770      	bx	lr

0008c448 <_write_r>:
   8c448:	b538      	push	{r3, r4, r5, lr}
   8c44a:	460c      	mov	r4, r1
   8c44c:	4611      	mov	r1, r2
   8c44e:	2200      	movs	r2, #0
   8c450:	4684      	mov	ip, r0
   8c452:	4d07      	ldr	r5, [pc, #28]	; (8c470 <_write_r+0x28>)
   8c454:	4620      	mov	r0, r4
   8c456:	602a      	str	r2, [r5, #0]
   8c458:	461a      	mov	r2, r3
   8c45a:	4664      	mov	r4, ip
   8c45c:	f7f8 fc34 	bl	84cc8 <_write>
   8c460:	1c43      	adds	r3, r0, #1
   8c462:	d000      	beq.n	8c466 <_write_r+0x1e>
   8c464:	bd38      	pop	{r3, r4, r5, pc}
   8c466:	682b      	ldr	r3, [r5, #0]
   8c468:	2b00      	cmp	r3, #0
   8c46a:	d0fb      	beq.n	8c464 <_write_r+0x1c>
   8c46c:	6023      	str	r3, [r4, #0]
   8c46e:	bd38      	pop	{r3, r4, r5, pc}
   8c470:	2000149c 	.word	0x2000149c

0008c474 <__register_exitproc>:
   8c474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c478:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8c4f8 <__register_exitproc+0x84>
   8c47c:	4606      	mov	r6, r0
   8c47e:	f8da 0000 	ldr.w	r0, [sl]
   8c482:	4698      	mov	r8, r3
   8c484:	460f      	mov	r7, r1
   8c486:	4691      	mov	r9, r2
   8c488:	f7fe fcb4 	bl	8adf4 <__retarget_lock_acquire_recursive>
   8c48c:	4b1b      	ldr	r3, [pc, #108]	; (8c4fc <__register_exitproc+0x88>)
   8c48e:	681b      	ldr	r3, [r3, #0]
   8c490:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8c494:	b324      	cbz	r4, 8c4e0 <__register_exitproc+0x6c>
   8c496:	6865      	ldr	r5, [r4, #4]
   8c498:	2d1f      	cmp	r5, #31
   8c49a:	dc26      	bgt.n	8c4ea <__register_exitproc+0x76>
   8c49c:	b95e      	cbnz	r6, 8c4b6 <__register_exitproc+0x42>
   8c49e:	1c6b      	adds	r3, r5, #1
   8c4a0:	3502      	adds	r5, #2
   8c4a2:	f8da 0000 	ldr.w	r0, [sl]
   8c4a6:	6063      	str	r3, [r4, #4]
   8c4a8:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8c4ac:	f7fe fca4 	bl	8adf8 <__retarget_lock_release_recursive>
   8c4b0:	2000      	movs	r0, #0
   8c4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c4b6:	2301      	movs	r3, #1
   8c4b8:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8c4bc:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8c4c0:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8c4c4:	40ab      	lsls	r3, r5
   8c4c6:	431a      	orrs	r2, r3
   8c4c8:	2e02      	cmp	r6, #2
   8c4ca:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8c4ce:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8c4d2:	d1e4      	bne.n	8c49e <__register_exitproc+0x2a>
   8c4d4:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8c4d8:	4313      	orrs	r3, r2
   8c4da:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8c4de:	e7de      	b.n	8c49e <__register_exitproc+0x2a>
   8c4e0:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8c4e4:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8c4e8:	e7d5      	b.n	8c496 <__register_exitproc+0x22>
   8c4ea:	f8da 0000 	ldr.w	r0, [sl]
   8c4ee:	f7fe fc83 	bl	8adf8 <__retarget_lock_release_recursive>
   8c4f2:	f04f 30ff 	mov.w	r0, #4294967295
   8c4f6:	e7dc      	b.n	8c4b2 <__register_exitproc+0x3e>
   8c4f8:	200008a0 	.word	0x200008a0
   8c4fc:	0008d4cc 	.word	0x0008d4cc

0008c500 <__assert_func>:
   8c500:	4614      	mov	r4, r2
   8c502:	b500      	push	{lr}
   8c504:	461a      	mov	r2, r3
   8c506:	4b0a      	ldr	r3, [pc, #40]	; (8c530 <__assert_func+0x30>)
   8c508:	460d      	mov	r5, r1
   8c50a:	681b      	ldr	r3, [r3, #0]
   8c50c:	b085      	sub	sp, #20
   8c50e:	68de      	ldr	r6, [r3, #12]
   8c510:	4603      	mov	r3, r0
   8c512:	b14c      	cbz	r4, 8c528 <__assert_func+0x28>
   8c514:	4907      	ldr	r1, [pc, #28]	; (8c534 <__assert_func+0x34>)
   8c516:	9101      	str	r1, [sp, #4]
   8c518:	4630      	mov	r0, r6
   8c51a:	4907      	ldr	r1, [pc, #28]	; (8c538 <__assert_func+0x38>)
   8c51c:	9402      	str	r4, [sp, #8]
   8c51e:	9500      	str	r5, [sp, #0]
   8c520:	f000 f8c8 	bl	8c6b4 <fiprintf>
   8c524:	f000 f92c 	bl	8c780 <abort>
   8c528:	4904      	ldr	r1, [pc, #16]	; (8c53c <__assert_func+0x3c>)
   8c52a:	460c      	mov	r4, r1
   8c52c:	e7f3      	b.n	8c516 <__assert_func+0x16>
   8c52e:	bf00      	nop
   8c530:	20000474 	.word	0x20000474
   8c534:	0008d784 	.word	0x0008d784
   8c538:	0008d794 	.word	0x0008d794
   8c53c:	0008d790 	.word	0x0008d790

0008c540 <_calloc_r>:
   8c540:	b538      	push	{r3, r4, r5, lr}
   8c542:	fba1 1402 	umull	r1, r4, r1, r2
   8c546:	bb84      	cbnz	r4, 8c5aa <_calloc_r+0x6a>
   8c548:	f7fe fcc8 	bl	8aedc <_malloc_r>
   8c54c:	4605      	mov	r5, r0
   8c54e:	b1d8      	cbz	r0, 8c588 <_calloc_r+0x48>
   8c550:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8c554:	f022 0203 	bic.w	r2, r2, #3
   8c558:	3a04      	subs	r2, #4
   8c55a:	2a24      	cmp	r2, #36	; 0x24
   8c55c:	d816      	bhi.n	8c58c <_calloc_r+0x4c>
   8c55e:	2a13      	cmp	r2, #19
   8c560:	d919      	bls.n	8c596 <_calloc_r+0x56>
   8c562:	2a1b      	cmp	r2, #27
   8c564:	e9c0 4400 	strd	r4, r4, [r0]
   8c568:	d91c      	bls.n	8c5a4 <_calloc_r+0x64>
   8c56a:	2300      	movs	r3, #0
   8c56c:	2a24      	cmp	r2, #36	; 0x24
   8c56e:	bf14      	ite	ne
   8c570:	f100 0210 	addne.w	r2, r0, #16
   8c574:	f100 0218 	addeq.w	r2, r0, #24
   8c578:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8c57c:	bf04      	itt	eq
   8c57e:	6104      	streq	r4, [r0, #16]
   8c580:	6144      	streq	r4, [r0, #20]
   8c582:	e9c2 3300 	strd	r3, r3, [r2]
   8c586:	6093      	str	r3, [r2, #8]
   8c588:	4628      	mov	r0, r5
   8c58a:	bd38      	pop	{r3, r4, r5, pc}
   8c58c:	4621      	mov	r1, r4
   8c58e:	f7fa f95b 	bl	86848 <memset>
   8c592:	4628      	mov	r0, r5
   8c594:	bd38      	pop	{r3, r4, r5, pc}
   8c596:	4602      	mov	r2, r0
   8c598:	2300      	movs	r3, #0
   8c59a:	4628      	mov	r0, r5
   8c59c:	e9c2 3300 	strd	r3, r3, [r2]
   8c5a0:	6093      	str	r3, [r2, #8]
   8c5a2:	bd38      	pop	{r3, r4, r5, pc}
   8c5a4:	f100 0208 	add.w	r2, r0, #8
   8c5a8:	e7f6      	b.n	8c598 <_calloc_r+0x58>
   8c5aa:	f000 f817 	bl	8c5dc <__errno>
   8c5ae:	230c      	movs	r3, #12
   8c5b0:	2500      	movs	r5, #0
   8c5b2:	6003      	str	r3, [r0, #0]
   8c5b4:	e7e8      	b.n	8c588 <_calloc_r+0x48>
   8c5b6:	bf00      	nop

0008c5b8 <_close_r>:
   8c5b8:	2200      	movs	r2, #0
   8c5ba:	b538      	push	{r3, r4, r5, lr}
   8c5bc:	4d06      	ldr	r5, [pc, #24]	; (8c5d8 <_close_r+0x20>)
   8c5be:	4604      	mov	r4, r0
   8c5c0:	4608      	mov	r0, r1
   8c5c2:	602a      	str	r2, [r5, #0]
   8c5c4:	f7f9 fe64 	bl	86290 <_close>
   8c5c8:	1c43      	adds	r3, r0, #1
   8c5ca:	d000      	beq.n	8c5ce <_close_r+0x16>
   8c5cc:	bd38      	pop	{r3, r4, r5, pc}
   8c5ce:	682b      	ldr	r3, [r5, #0]
   8c5d0:	2b00      	cmp	r3, #0
   8c5d2:	d0fb      	beq.n	8c5cc <_close_r+0x14>
   8c5d4:	6023      	str	r3, [r4, #0]
   8c5d6:	bd38      	pop	{r3, r4, r5, pc}
   8c5d8:	2000149c 	.word	0x2000149c

0008c5dc <__errno>:
   8c5dc:	4b01      	ldr	r3, [pc, #4]	; (8c5e4 <__errno+0x8>)
   8c5de:	6818      	ldr	r0, [r3, #0]
   8c5e0:	4770      	bx	lr
   8c5e2:	bf00      	nop
   8c5e4:	20000474 	.word	0x20000474

0008c5e8 <_fclose_r>:
   8c5e8:	b570      	push	{r4, r5, r6, lr}
   8c5ea:	2900      	cmp	r1, #0
   8c5ec:	d04b      	beq.n	8c686 <_fclose_r+0x9e>
   8c5ee:	4606      	mov	r6, r0
   8c5f0:	460c      	mov	r4, r1
   8c5f2:	b110      	cbz	r0, 8c5fa <_fclose_r+0x12>
   8c5f4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c5f6:	2b00      	cmp	r3, #0
   8c5f8:	d048      	beq.n	8c68c <_fclose_r+0xa4>
   8c5fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c5fc:	07d8      	lsls	r0, r3, #31
   8c5fe:	d534      	bpl.n	8c66a <_fclose_r+0x82>
   8c600:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c604:	2b00      	cmp	r3, #0
   8c606:	d03e      	beq.n	8c686 <_fclose_r+0x9e>
   8c608:	4621      	mov	r1, r4
   8c60a:	4630      	mov	r0, r6
   8c60c:	f7fd ff06 	bl	8a41c <__sflush_r>
   8c610:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8c612:	4605      	mov	r5, r0
   8c614:	b133      	cbz	r3, 8c624 <_fclose_r+0x3c>
   8c616:	4630      	mov	r0, r6
   8c618:	69e1      	ldr	r1, [r4, #28]
   8c61a:	4798      	blx	r3
   8c61c:	2800      	cmp	r0, #0
   8c61e:	bfb8      	it	lt
   8c620:	f04f 35ff 	movlt.w	r5, #4294967295
   8c624:	89a3      	ldrh	r3, [r4, #12]
   8c626:	061a      	lsls	r2, r3, #24
   8c628:	d43b      	bmi.n	8c6a2 <_fclose_r+0xba>
   8c62a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c62c:	b141      	cbz	r1, 8c640 <_fclose_r+0x58>
   8c62e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c632:	4299      	cmp	r1, r3
   8c634:	d002      	beq.n	8c63c <_fclose_r+0x54>
   8c636:	4630      	mov	r0, r6
   8c638:	f7fe f932 	bl	8a8a0 <_free_r>
   8c63c:	2300      	movs	r3, #0
   8c63e:	6323      	str	r3, [r4, #48]	; 0x30
   8c640:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8c642:	b121      	cbz	r1, 8c64e <_fclose_r+0x66>
   8c644:	4630      	mov	r0, r6
   8c646:	f7fe f92b 	bl	8a8a0 <_free_r>
   8c64a:	2300      	movs	r3, #0
   8c64c:	6463      	str	r3, [r4, #68]	; 0x44
   8c64e:	f7fe f831 	bl	8a6b4 <__sfp_lock_acquire>
   8c652:	2200      	movs	r2, #0
   8c654:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c656:	81a2      	strh	r2, [r4, #12]
   8c658:	07db      	lsls	r3, r3, #31
   8c65a:	d527      	bpl.n	8c6ac <_fclose_r+0xc4>
   8c65c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c65e:	f7fe fbc7 	bl	8adf0 <__retarget_lock_close_recursive>
   8c662:	f7fe f82d 	bl	8a6c0 <__sfp_lock_release>
   8c666:	4628      	mov	r0, r5
   8c668:	bd70      	pop	{r4, r5, r6, pc}
   8c66a:	89a3      	ldrh	r3, [r4, #12]
   8c66c:	0599      	lsls	r1, r3, #22
   8c66e:	d4cb      	bmi.n	8c608 <_fclose_r+0x20>
   8c670:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c672:	f7fe fbbf 	bl	8adf4 <__retarget_lock_acquire_recursive>
   8c676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c67a:	2b00      	cmp	r3, #0
   8c67c:	d1c4      	bne.n	8c608 <_fclose_r+0x20>
   8c67e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8c680:	f015 0501 	ands.w	r5, r5, #1
   8c684:	d008      	beq.n	8c698 <_fclose_r+0xb0>
   8c686:	2500      	movs	r5, #0
   8c688:	4628      	mov	r0, r5
   8c68a:	bd70      	pop	{r4, r5, r6, pc}
   8c68c:	f7fd ff8c 	bl	8a5a8 <__sinit>
   8c690:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c692:	07d8      	lsls	r0, r3, #31
   8c694:	d4b4      	bmi.n	8c600 <_fclose_r+0x18>
   8c696:	e7e8      	b.n	8c66a <_fclose_r+0x82>
   8c698:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c69a:	f7fe fbad 	bl	8adf8 <__retarget_lock_release_recursive>
   8c69e:	4628      	mov	r0, r5
   8c6a0:	bd70      	pop	{r4, r5, r6, pc}
   8c6a2:	4630      	mov	r0, r6
   8c6a4:	6921      	ldr	r1, [r4, #16]
   8c6a6:	f7fe f8fb 	bl	8a8a0 <_free_r>
   8c6aa:	e7be      	b.n	8c62a <_fclose_r+0x42>
   8c6ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c6ae:	f7fe fba3 	bl	8adf8 <__retarget_lock_release_recursive>
   8c6b2:	e7d3      	b.n	8c65c <_fclose_r+0x74>

0008c6b4 <fiprintf>:
   8c6b4:	b40e      	push	{r1, r2, r3}
   8c6b6:	b500      	push	{lr}
   8c6b8:	4a07      	ldr	r2, [pc, #28]	; (8c6d8 <fiprintf+0x24>)
   8c6ba:	b082      	sub	sp, #8
   8c6bc:	ab03      	add	r3, sp, #12
   8c6be:	4601      	mov	r1, r0
   8c6c0:	6810      	ldr	r0, [r2, #0]
   8c6c2:	f853 2b04 	ldr.w	r2, [r3], #4
   8c6c6:	9301      	str	r3, [sp, #4]
   8c6c8:	f7fb ff22 	bl	88510 <_vfiprintf_r>
   8c6cc:	b002      	add	sp, #8
   8c6ce:	f85d eb04 	ldr.w	lr, [sp], #4
   8c6d2:	b003      	add	sp, #12
   8c6d4:	4770      	bx	lr
   8c6d6:	bf00      	nop
   8c6d8:	20000474 	.word	0x20000474

0008c6dc <_fstat_r>:
   8c6dc:	b570      	push	{r4, r5, r6, lr}
   8c6de:	2600      	movs	r6, #0
   8c6e0:	4d07      	ldr	r5, [pc, #28]	; (8c700 <_fstat_r+0x24>)
   8c6e2:	4604      	mov	r4, r0
   8c6e4:	4608      	mov	r0, r1
   8c6e6:	4611      	mov	r1, r2
   8c6e8:	602e      	str	r6, [r5, #0]
   8c6ea:	f7f9 fddc 	bl	862a6 <_fstat>
   8c6ee:	1c43      	adds	r3, r0, #1
   8c6f0:	d000      	beq.n	8c6f4 <_fstat_r+0x18>
   8c6f2:	bd70      	pop	{r4, r5, r6, pc}
   8c6f4:	682b      	ldr	r3, [r5, #0]
   8c6f6:	2b00      	cmp	r3, #0
   8c6f8:	d0fb      	beq.n	8c6f2 <_fstat_r+0x16>
   8c6fa:	6023      	str	r3, [r4, #0]
   8c6fc:	bd70      	pop	{r4, r5, r6, pc}
   8c6fe:	bf00      	nop
   8c700:	2000149c 	.word	0x2000149c

0008c704 <_isatty_r>:
   8c704:	2200      	movs	r2, #0
   8c706:	b538      	push	{r3, r4, r5, lr}
   8c708:	4d06      	ldr	r5, [pc, #24]	; (8c724 <_isatty_r+0x20>)
   8c70a:	4604      	mov	r4, r0
   8c70c:	4608      	mov	r0, r1
   8c70e:	602a      	str	r2, [r5, #0]
   8c710:	f7f9 fdd8 	bl	862c4 <_isatty>
   8c714:	1c43      	adds	r3, r0, #1
   8c716:	d000      	beq.n	8c71a <_isatty_r+0x16>
   8c718:	bd38      	pop	{r3, r4, r5, pc}
   8c71a:	682b      	ldr	r3, [r5, #0]
   8c71c:	2b00      	cmp	r3, #0
   8c71e:	d0fb      	beq.n	8c718 <_isatty_r+0x14>
   8c720:	6023      	str	r3, [r4, #0]
   8c722:	bd38      	pop	{r3, r4, r5, pc}
   8c724:	2000149c 	.word	0x2000149c

0008c728 <_lseek_r>:
   8c728:	b538      	push	{r3, r4, r5, lr}
   8c72a:	460c      	mov	r4, r1
   8c72c:	4611      	mov	r1, r2
   8c72e:	2200      	movs	r2, #0
   8c730:	4684      	mov	ip, r0
   8c732:	4d07      	ldr	r5, [pc, #28]	; (8c750 <_lseek_r+0x28>)
   8c734:	4620      	mov	r0, r4
   8c736:	602a      	str	r2, [r5, #0]
   8c738:	461a      	mov	r2, r3
   8c73a:	4664      	mov	r4, ip
   8c73c:	f7f9 fdcc 	bl	862d8 <_lseek>
   8c740:	1c43      	adds	r3, r0, #1
   8c742:	d000      	beq.n	8c746 <_lseek_r+0x1e>
   8c744:	bd38      	pop	{r3, r4, r5, pc}
   8c746:	682b      	ldr	r3, [r5, #0]
   8c748:	2b00      	cmp	r3, #0
   8c74a:	d0fb      	beq.n	8c744 <_lseek_r+0x1c>
   8c74c:	6023      	str	r3, [r4, #0]
   8c74e:	bd38      	pop	{r3, r4, r5, pc}
   8c750:	2000149c 	.word	0x2000149c

0008c754 <_read_r>:
   8c754:	b538      	push	{r3, r4, r5, lr}
   8c756:	460c      	mov	r4, r1
   8c758:	4611      	mov	r1, r2
   8c75a:	2200      	movs	r2, #0
   8c75c:	4684      	mov	ip, r0
   8c75e:	4d07      	ldr	r5, [pc, #28]	; (8c77c <_read_r+0x28>)
   8c760:	4620      	mov	r0, r4
   8c762:	602a      	str	r2, [r5, #0]
   8c764:	461a      	mov	r2, r3
   8c766:	4664      	mov	r4, ip
   8c768:	f7f9 fe84 	bl	86474 <_read>
   8c76c:	1c43      	adds	r3, r0, #1
   8c76e:	d000      	beq.n	8c772 <_read_r+0x1e>
   8c770:	bd38      	pop	{r3, r4, r5, pc}
   8c772:	682b      	ldr	r3, [r5, #0]
   8c774:	2b00      	cmp	r3, #0
   8c776:	d0fb      	beq.n	8c770 <_read_r+0x1c>
   8c778:	6023      	str	r3, [r4, #0]
   8c77a:	bd38      	pop	{r3, r4, r5, pc}
   8c77c:	2000149c 	.word	0x2000149c

0008c780 <abort>:
   8c780:	2006      	movs	r0, #6
   8c782:	b508      	push	{r3, lr}
   8c784:	f000 f804 	bl	8c790 <raise>
   8c788:	2001      	movs	r0, #1
   8c78a:	f7f9 fdb1 	bl	862f0 <_exit>
   8c78e:	bf00      	nop

0008c790 <raise>:
   8c790:	b538      	push	{r3, r4, r5, lr}
   8c792:	4b15      	ldr	r3, [pc, #84]	; (8c7e8 <raise+0x58>)
   8c794:	281f      	cmp	r0, #31
   8c796:	681d      	ldr	r5, [r3, #0]
   8c798:	d820      	bhi.n	8c7dc <raise+0x4c>
   8c79a:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8c79e:	4604      	mov	r4, r0
   8c7a0:	b162      	cbz	r2, 8c7bc <raise+0x2c>
   8c7a2:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8c7a6:	b14b      	cbz	r3, 8c7bc <raise+0x2c>
   8c7a8:	2b01      	cmp	r3, #1
   8c7aa:	d015      	beq.n	8c7d8 <raise+0x48>
   8c7ac:	1c59      	adds	r1, r3, #1
   8c7ae:	d00f      	beq.n	8c7d0 <raise+0x40>
   8c7b0:	2500      	movs	r5, #0
   8c7b2:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8c7b6:	4798      	blx	r3
   8c7b8:	4628      	mov	r0, r5
   8c7ba:	bd38      	pop	{r3, r4, r5, pc}
   8c7bc:	4628      	mov	r0, r5
   8c7be:	f000 f829 	bl	8c814 <_getpid_r>
   8c7c2:	4622      	mov	r2, r4
   8c7c4:	4601      	mov	r1, r0
   8c7c6:	4628      	mov	r0, r5
   8c7c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8c7cc:	f000 b80e 	b.w	8c7ec <_kill_r>
   8c7d0:	2316      	movs	r3, #22
   8c7d2:	2001      	movs	r0, #1
   8c7d4:	602b      	str	r3, [r5, #0]
   8c7d6:	bd38      	pop	{r3, r4, r5, pc}
   8c7d8:	2000      	movs	r0, #0
   8c7da:	bd38      	pop	{r3, r4, r5, pc}
   8c7dc:	2316      	movs	r3, #22
   8c7de:	f04f 30ff 	mov.w	r0, #4294967295
   8c7e2:	602b      	str	r3, [r5, #0]
   8c7e4:	bd38      	pop	{r3, r4, r5, pc}
   8c7e6:	bf00      	nop
   8c7e8:	20000474 	.word	0x20000474

0008c7ec <_kill_r>:
   8c7ec:	b570      	push	{r4, r5, r6, lr}
   8c7ee:	2600      	movs	r6, #0
   8c7f0:	4d07      	ldr	r5, [pc, #28]	; (8c810 <_kill_r+0x24>)
   8c7f2:	4604      	mov	r4, r0
   8c7f4:	4608      	mov	r0, r1
   8c7f6:	4611      	mov	r1, r2
   8c7f8:	602e      	str	r6, [r5, #0]
   8c7fa:	f7f9 fd87 	bl	8630c <_kill>
   8c7fe:	1c43      	adds	r3, r0, #1
   8c800:	d000      	beq.n	8c804 <_kill_r+0x18>
   8c802:	bd70      	pop	{r4, r5, r6, pc}
   8c804:	682b      	ldr	r3, [r5, #0]
   8c806:	2b00      	cmp	r3, #0
   8c808:	d0fb      	beq.n	8c802 <_kill_r+0x16>
   8c80a:	6023      	str	r3, [r4, #0]
   8c80c:	bd70      	pop	{r4, r5, r6, pc}
   8c80e:	bf00      	nop
   8c810:	2000149c 	.word	0x2000149c

0008c814 <_getpid_r>:
   8c814:	f7f9 bd84 	b.w	86320 <_getpid>

0008c818 <__aeabi_drsub>:
   8c818:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8c81c:	e002      	b.n	8c824 <__adddf3>
   8c81e:	bf00      	nop

0008c820 <__aeabi_dsub>:
   8c820:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008c824 <__adddf3>:
   8c824:	b530      	push	{r4, r5, lr}
   8c826:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8c82a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8c82e:	ea94 0f05 	teq	r4, r5
   8c832:	bf08      	it	eq
   8c834:	ea90 0f02 	teqeq	r0, r2
   8c838:	bf1f      	itttt	ne
   8c83a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8c83e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8c842:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8c846:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c84a:	f000 80e2 	beq.w	8ca12 <__adddf3+0x1ee>
   8c84e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8c852:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8c856:	bfb8      	it	lt
   8c858:	426d      	neglt	r5, r5
   8c85a:	dd0c      	ble.n	8c876 <__adddf3+0x52>
   8c85c:	442c      	add	r4, r5
   8c85e:	ea80 0202 	eor.w	r2, r0, r2
   8c862:	ea81 0303 	eor.w	r3, r1, r3
   8c866:	ea82 0000 	eor.w	r0, r2, r0
   8c86a:	ea83 0101 	eor.w	r1, r3, r1
   8c86e:	ea80 0202 	eor.w	r2, r0, r2
   8c872:	ea81 0303 	eor.w	r3, r1, r3
   8c876:	2d36      	cmp	r5, #54	; 0x36
   8c878:	bf88      	it	hi
   8c87a:	bd30      	pophi	{r4, r5, pc}
   8c87c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c880:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c884:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8c888:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8c88c:	d002      	beq.n	8c894 <__adddf3+0x70>
   8c88e:	4240      	negs	r0, r0
   8c890:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c894:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8c898:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c89c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8c8a0:	d002      	beq.n	8c8a8 <__adddf3+0x84>
   8c8a2:	4252      	negs	r2, r2
   8c8a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8c8a8:	ea94 0f05 	teq	r4, r5
   8c8ac:	f000 80a7 	beq.w	8c9fe <__adddf3+0x1da>
   8c8b0:	f1a4 0401 	sub.w	r4, r4, #1
   8c8b4:	f1d5 0e20 	rsbs	lr, r5, #32
   8c8b8:	db0d      	blt.n	8c8d6 <__adddf3+0xb2>
   8c8ba:	fa02 fc0e 	lsl.w	ip, r2, lr
   8c8be:	fa22 f205 	lsr.w	r2, r2, r5
   8c8c2:	1880      	adds	r0, r0, r2
   8c8c4:	f141 0100 	adc.w	r1, r1, #0
   8c8c8:	fa03 f20e 	lsl.w	r2, r3, lr
   8c8cc:	1880      	adds	r0, r0, r2
   8c8ce:	fa43 f305 	asr.w	r3, r3, r5
   8c8d2:	4159      	adcs	r1, r3
   8c8d4:	e00e      	b.n	8c8f4 <__adddf3+0xd0>
   8c8d6:	f1a5 0520 	sub.w	r5, r5, #32
   8c8da:	f10e 0e20 	add.w	lr, lr, #32
   8c8de:	2a01      	cmp	r2, #1
   8c8e0:	fa03 fc0e 	lsl.w	ip, r3, lr
   8c8e4:	bf28      	it	cs
   8c8e6:	f04c 0c02 	orrcs.w	ip, ip, #2
   8c8ea:	fa43 f305 	asr.w	r3, r3, r5
   8c8ee:	18c0      	adds	r0, r0, r3
   8c8f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8c8f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c8f8:	d507      	bpl.n	8c90a <__adddf3+0xe6>
   8c8fa:	f04f 0e00 	mov.w	lr, #0
   8c8fe:	f1dc 0c00 	rsbs	ip, ip, #0
   8c902:	eb7e 0000 	sbcs.w	r0, lr, r0
   8c906:	eb6e 0101 	sbc.w	r1, lr, r1
   8c90a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8c90e:	d31b      	bcc.n	8c948 <__adddf3+0x124>
   8c910:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8c914:	d30c      	bcc.n	8c930 <__adddf3+0x10c>
   8c916:	0849      	lsrs	r1, r1, #1
   8c918:	ea5f 0030 	movs.w	r0, r0, rrx
   8c91c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8c920:	f104 0401 	add.w	r4, r4, #1
   8c924:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8c928:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8c92c:	f080 809a 	bcs.w	8ca64 <__adddf3+0x240>
   8c930:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8c934:	bf08      	it	eq
   8c936:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c93a:	f150 0000 	adcs.w	r0, r0, #0
   8c93e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c942:	ea41 0105 	orr.w	r1, r1, r5
   8c946:	bd30      	pop	{r4, r5, pc}
   8c948:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8c94c:	4140      	adcs	r0, r0
   8c94e:	eb41 0101 	adc.w	r1, r1, r1
   8c952:	3c01      	subs	r4, #1
   8c954:	bf28      	it	cs
   8c956:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c95a:	d2e9      	bcs.n	8c930 <__adddf3+0x10c>
   8c95c:	f091 0f00 	teq	r1, #0
   8c960:	bf04      	itt	eq
   8c962:	4601      	moveq	r1, r0
   8c964:	2000      	moveq	r0, #0
   8c966:	fab1 f381 	clz	r3, r1
   8c96a:	bf08      	it	eq
   8c96c:	3320      	addeq	r3, #32
   8c96e:	f1a3 030b 	sub.w	r3, r3, #11
   8c972:	f1b3 0220 	subs.w	r2, r3, #32
   8c976:	da0c      	bge.n	8c992 <__adddf3+0x16e>
   8c978:	320c      	adds	r2, #12
   8c97a:	dd08      	ble.n	8c98e <__adddf3+0x16a>
   8c97c:	f102 0c14 	add.w	ip, r2, #20
   8c980:	f1c2 020c 	rsb	r2, r2, #12
   8c984:	fa01 f00c 	lsl.w	r0, r1, ip
   8c988:	fa21 f102 	lsr.w	r1, r1, r2
   8c98c:	e00c      	b.n	8c9a8 <__adddf3+0x184>
   8c98e:	f102 0214 	add.w	r2, r2, #20
   8c992:	bfd8      	it	le
   8c994:	f1c2 0c20 	rsble	ip, r2, #32
   8c998:	fa01 f102 	lsl.w	r1, r1, r2
   8c99c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c9a0:	bfdc      	itt	le
   8c9a2:	ea41 010c 	orrle.w	r1, r1, ip
   8c9a6:	4090      	lslle	r0, r2
   8c9a8:	1ae4      	subs	r4, r4, r3
   8c9aa:	bfa2      	ittt	ge
   8c9ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c9b0:	4329      	orrge	r1, r5
   8c9b2:	bd30      	popge	{r4, r5, pc}
   8c9b4:	ea6f 0404 	mvn.w	r4, r4
   8c9b8:	3c1f      	subs	r4, #31
   8c9ba:	da1c      	bge.n	8c9f6 <__adddf3+0x1d2>
   8c9bc:	340c      	adds	r4, #12
   8c9be:	dc0e      	bgt.n	8c9de <__adddf3+0x1ba>
   8c9c0:	f104 0414 	add.w	r4, r4, #20
   8c9c4:	f1c4 0220 	rsb	r2, r4, #32
   8c9c8:	fa20 f004 	lsr.w	r0, r0, r4
   8c9cc:	fa01 f302 	lsl.w	r3, r1, r2
   8c9d0:	ea40 0003 	orr.w	r0, r0, r3
   8c9d4:	fa21 f304 	lsr.w	r3, r1, r4
   8c9d8:	ea45 0103 	orr.w	r1, r5, r3
   8c9dc:	bd30      	pop	{r4, r5, pc}
   8c9de:	f1c4 040c 	rsb	r4, r4, #12
   8c9e2:	f1c4 0220 	rsb	r2, r4, #32
   8c9e6:	fa20 f002 	lsr.w	r0, r0, r2
   8c9ea:	fa01 f304 	lsl.w	r3, r1, r4
   8c9ee:	ea40 0003 	orr.w	r0, r0, r3
   8c9f2:	4629      	mov	r1, r5
   8c9f4:	bd30      	pop	{r4, r5, pc}
   8c9f6:	fa21 f004 	lsr.w	r0, r1, r4
   8c9fa:	4629      	mov	r1, r5
   8c9fc:	bd30      	pop	{r4, r5, pc}
   8c9fe:	f094 0f00 	teq	r4, #0
   8ca02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8ca06:	bf06      	itte	eq
   8ca08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8ca0c:	3401      	addeq	r4, #1
   8ca0e:	3d01      	subne	r5, #1
   8ca10:	e74e      	b.n	8c8b0 <__adddf3+0x8c>
   8ca12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8ca16:	bf18      	it	ne
   8ca18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8ca1c:	d029      	beq.n	8ca72 <__adddf3+0x24e>
   8ca1e:	ea94 0f05 	teq	r4, r5
   8ca22:	bf08      	it	eq
   8ca24:	ea90 0f02 	teqeq	r0, r2
   8ca28:	d005      	beq.n	8ca36 <__adddf3+0x212>
   8ca2a:	ea54 0c00 	orrs.w	ip, r4, r0
   8ca2e:	bf04      	itt	eq
   8ca30:	4619      	moveq	r1, r3
   8ca32:	4610      	moveq	r0, r2
   8ca34:	bd30      	pop	{r4, r5, pc}
   8ca36:	ea91 0f03 	teq	r1, r3
   8ca3a:	bf1e      	ittt	ne
   8ca3c:	2100      	movne	r1, #0
   8ca3e:	2000      	movne	r0, #0
   8ca40:	bd30      	popne	{r4, r5, pc}
   8ca42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8ca46:	d105      	bne.n	8ca54 <__adddf3+0x230>
   8ca48:	0040      	lsls	r0, r0, #1
   8ca4a:	4149      	adcs	r1, r1
   8ca4c:	bf28      	it	cs
   8ca4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8ca52:	bd30      	pop	{r4, r5, pc}
   8ca54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8ca58:	bf3c      	itt	cc
   8ca5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8ca5e:	bd30      	popcc	{r4, r5, pc}
   8ca60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8ca64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8ca68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8ca6c:	f04f 0000 	mov.w	r0, #0
   8ca70:	bd30      	pop	{r4, r5, pc}
   8ca72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8ca76:	bf1a      	itte	ne
   8ca78:	4619      	movne	r1, r3
   8ca7a:	4610      	movne	r0, r2
   8ca7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8ca80:	bf1c      	itt	ne
   8ca82:	460b      	movne	r3, r1
   8ca84:	4602      	movne	r2, r0
   8ca86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8ca8a:	bf06      	itte	eq
   8ca8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8ca90:	ea91 0f03 	teqeq	r1, r3
   8ca94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8ca98:	bd30      	pop	{r4, r5, pc}
   8ca9a:	bf00      	nop

0008ca9c <__aeabi_ui2d>:
   8ca9c:	f090 0f00 	teq	r0, #0
   8caa0:	bf04      	itt	eq
   8caa2:	2100      	moveq	r1, #0
   8caa4:	4770      	bxeq	lr
   8caa6:	b530      	push	{r4, r5, lr}
   8caa8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8caac:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cab0:	f04f 0500 	mov.w	r5, #0
   8cab4:	f04f 0100 	mov.w	r1, #0
   8cab8:	e750      	b.n	8c95c <__adddf3+0x138>
   8caba:	bf00      	nop

0008cabc <__aeabi_i2d>:
   8cabc:	f090 0f00 	teq	r0, #0
   8cac0:	bf04      	itt	eq
   8cac2:	2100      	moveq	r1, #0
   8cac4:	4770      	bxeq	lr
   8cac6:	b530      	push	{r4, r5, lr}
   8cac8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cacc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cad0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8cad4:	bf48      	it	mi
   8cad6:	4240      	negmi	r0, r0
   8cad8:	f04f 0100 	mov.w	r1, #0
   8cadc:	e73e      	b.n	8c95c <__adddf3+0x138>
   8cade:	bf00      	nop

0008cae0 <__aeabi_f2d>:
   8cae0:	0042      	lsls	r2, r0, #1
   8cae2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8cae6:	ea4f 0131 	mov.w	r1, r1, rrx
   8caea:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8caee:	bf1f      	itttt	ne
   8caf0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8caf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8caf8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8cafc:	4770      	bxne	lr
   8cafe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8cb02:	bf08      	it	eq
   8cb04:	4770      	bxeq	lr
   8cb06:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8cb0a:	bf04      	itt	eq
   8cb0c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8cb10:	4770      	bxeq	lr
   8cb12:	b530      	push	{r4, r5, lr}
   8cb14:	f44f 7460 	mov.w	r4, #896	; 0x380
   8cb18:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cb1c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8cb20:	e71c      	b.n	8c95c <__adddf3+0x138>
   8cb22:	bf00      	nop

0008cb24 <__aeabi_ul2d>:
   8cb24:	ea50 0201 	orrs.w	r2, r0, r1
   8cb28:	bf08      	it	eq
   8cb2a:	4770      	bxeq	lr
   8cb2c:	b530      	push	{r4, r5, lr}
   8cb2e:	f04f 0500 	mov.w	r5, #0
   8cb32:	e00a      	b.n	8cb4a <__aeabi_l2d+0x16>

0008cb34 <__aeabi_l2d>:
   8cb34:	ea50 0201 	orrs.w	r2, r0, r1
   8cb38:	bf08      	it	eq
   8cb3a:	4770      	bxeq	lr
   8cb3c:	b530      	push	{r4, r5, lr}
   8cb3e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8cb42:	d502      	bpl.n	8cb4a <__aeabi_l2d+0x16>
   8cb44:	4240      	negs	r0, r0
   8cb46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8cb4a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8cb4e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8cb52:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8cb56:	f43f aed8 	beq.w	8c90a <__adddf3+0xe6>
   8cb5a:	f04f 0203 	mov.w	r2, #3
   8cb5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cb62:	bf18      	it	ne
   8cb64:	3203      	addne	r2, #3
   8cb66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8cb6a:	bf18      	it	ne
   8cb6c:	3203      	addne	r2, #3
   8cb6e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8cb72:	f1c2 0320 	rsb	r3, r2, #32
   8cb76:	fa00 fc03 	lsl.w	ip, r0, r3
   8cb7a:	fa20 f002 	lsr.w	r0, r0, r2
   8cb7e:	fa01 fe03 	lsl.w	lr, r1, r3
   8cb82:	ea40 000e 	orr.w	r0, r0, lr
   8cb86:	fa21 f102 	lsr.w	r1, r1, r2
   8cb8a:	4414      	add	r4, r2
   8cb8c:	e6bd      	b.n	8c90a <__adddf3+0xe6>
   8cb8e:	bf00      	nop

0008cb90 <__aeabi_dmul>:
   8cb90:	b570      	push	{r4, r5, r6, lr}
   8cb92:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8cb96:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8cb9a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8cb9e:	bf1d      	ittte	ne
   8cba0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8cba4:	ea94 0f0c 	teqne	r4, ip
   8cba8:	ea95 0f0c 	teqne	r5, ip
   8cbac:	f000 f8de 	bleq	8cd6c <__aeabi_dmul+0x1dc>
   8cbb0:	442c      	add	r4, r5
   8cbb2:	ea81 0603 	eor.w	r6, r1, r3
   8cbb6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8cbba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8cbbe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8cbc2:	bf18      	it	ne
   8cbc4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8cbc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cbcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8cbd0:	d038      	beq.n	8cc44 <__aeabi_dmul+0xb4>
   8cbd2:	fba0 ce02 	umull	ip, lr, r0, r2
   8cbd6:	f04f 0500 	mov.w	r5, #0
   8cbda:	fbe1 e502 	umlal	lr, r5, r1, r2
   8cbde:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8cbe2:	fbe0 e503 	umlal	lr, r5, r0, r3
   8cbe6:	f04f 0600 	mov.w	r6, #0
   8cbea:	fbe1 5603 	umlal	r5, r6, r1, r3
   8cbee:	f09c 0f00 	teq	ip, #0
   8cbf2:	bf18      	it	ne
   8cbf4:	f04e 0e01 	orrne.w	lr, lr, #1
   8cbf8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8cbfc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8cc00:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8cc04:	d204      	bcs.n	8cc10 <__aeabi_dmul+0x80>
   8cc06:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8cc0a:	416d      	adcs	r5, r5
   8cc0c:	eb46 0606 	adc.w	r6, r6, r6
   8cc10:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8cc14:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8cc18:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8cc1c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8cc20:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8cc24:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8cc28:	bf88      	it	hi
   8cc2a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cc2e:	d81e      	bhi.n	8cc6e <__aeabi_dmul+0xde>
   8cc30:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8cc34:	bf08      	it	eq
   8cc36:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8cc3a:	f150 0000 	adcs.w	r0, r0, #0
   8cc3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cc42:	bd70      	pop	{r4, r5, r6, pc}
   8cc44:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8cc48:	ea46 0101 	orr.w	r1, r6, r1
   8cc4c:	ea40 0002 	orr.w	r0, r0, r2
   8cc50:	ea81 0103 	eor.w	r1, r1, r3
   8cc54:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8cc58:	bfc2      	ittt	gt
   8cc5a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8cc5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8cc62:	bd70      	popgt	{r4, r5, r6, pc}
   8cc64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cc68:	f04f 0e00 	mov.w	lr, #0
   8cc6c:	3c01      	subs	r4, #1
   8cc6e:	f300 80ab 	bgt.w	8cdc8 <__aeabi_dmul+0x238>
   8cc72:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8cc76:	bfde      	ittt	le
   8cc78:	2000      	movle	r0, #0
   8cc7a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8cc7e:	bd70      	pople	{r4, r5, r6, pc}
   8cc80:	f1c4 0400 	rsb	r4, r4, #0
   8cc84:	3c20      	subs	r4, #32
   8cc86:	da35      	bge.n	8ccf4 <__aeabi_dmul+0x164>
   8cc88:	340c      	adds	r4, #12
   8cc8a:	dc1b      	bgt.n	8ccc4 <__aeabi_dmul+0x134>
   8cc8c:	f104 0414 	add.w	r4, r4, #20
   8cc90:	f1c4 0520 	rsb	r5, r4, #32
   8cc94:	fa00 f305 	lsl.w	r3, r0, r5
   8cc98:	fa20 f004 	lsr.w	r0, r0, r4
   8cc9c:	fa01 f205 	lsl.w	r2, r1, r5
   8cca0:	ea40 0002 	orr.w	r0, r0, r2
   8cca4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8cca8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8ccac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8ccb0:	fa21 f604 	lsr.w	r6, r1, r4
   8ccb4:	eb42 0106 	adc.w	r1, r2, r6
   8ccb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8ccbc:	bf08      	it	eq
   8ccbe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8ccc2:	bd70      	pop	{r4, r5, r6, pc}
   8ccc4:	f1c4 040c 	rsb	r4, r4, #12
   8ccc8:	f1c4 0520 	rsb	r5, r4, #32
   8cccc:	fa00 f304 	lsl.w	r3, r0, r4
   8ccd0:	fa20 f005 	lsr.w	r0, r0, r5
   8ccd4:	fa01 f204 	lsl.w	r2, r1, r4
   8ccd8:	ea40 0002 	orr.w	r0, r0, r2
   8ccdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cce0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8cce4:	f141 0100 	adc.w	r1, r1, #0
   8cce8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8ccec:	bf08      	it	eq
   8ccee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8ccf2:	bd70      	pop	{r4, r5, r6, pc}
   8ccf4:	f1c4 0520 	rsb	r5, r4, #32
   8ccf8:	fa00 f205 	lsl.w	r2, r0, r5
   8ccfc:	ea4e 0e02 	orr.w	lr, lr, r2
   8cd00:	fa20 f304 	lsr.w	r3, r0, r4
   8cd04:	fa01 f205 	lsl.w	r2, r1, r5
   8cd08:	ea43 0302 	orr.w	r3, r3, r2
   8cd0c:	fa21 f004 	lsr.w	r0, r1, r4
   8cd10:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cd14:	fa21 f204 	lsr.w	r2, r1, r4
   8cd18:	ea20 0002 	bic.w	r0, r0, r2
   8cd1c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8cd20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8cd24:	bf08      	it	eq
   8cd26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8cd2a:	bd70      	pop	{r4, r5, r6, pc}
   8cd2c:	f094 0f00 	teq	r4, #0
   8cd30:	d10f      	bne.n	8cd52 <__aeabi_dmul+0x1c2>
   8cd32:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8cd36:	0040      	lsls	r0, r0, #1
   8cd38:	eb41 0101 	adc.w	r1, r1, r1
   8cd3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cd40:	bf08      	it	eq
   8cd42:	3c01      	subeq	r4, #1
   8cd44:	d0f7      	beq.n	8cd36 <__aeabi_dmul+0x1a6>
   8cd46:	ea41 0106 	orr.w	r1, r1, r6
   8cd4a:	f095 0f00 	teq	r5, #0
   8cd4e:	bf18      	it	ne
   8cd50:	4770      	bxne	lr
   8cd52:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8cd56:	0052      	lsls	r2, r2, #1
   8cd58:	eb43 0303 	adc.w	r3, r3, r3
   8cd5c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8cd60:	bf08      	it	eq
   8cd62:	3d01      	subeq	r5, #1
   8cd64:	d0f7      	beq.n	8cd56 <__aeabi_dmul+0x1c6>
   8cd66:	ea43 0306 	orr.w	r3, r3, r6
   8cd6a:	4770      	bx	lr
   8cd6c:	ea94 0f0c 	teq	r4, ip
   8cd70:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8cd74:	bf18      	it	ne
   8cd76:	ea95 0f0c 	teqne	r5, ip
   8cd7a:	d00c      	beq.n	8cd96 <__aeabi_dmul+0x206>
   8cd7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cd80:	bf18      	it	ne
   8cd82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cd86:	d1d1      	bne.n	8cd2c <__aeabi_dmul+0x19c>
   8cd88:	ea81 0103 	eor.w	r1, r1, r3
   8cd8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cd90:	f04f 0000 	mov.w	r0, #0
   8cd94:	bd70      	pop	{r4, r5, r6, pc}
   8cd96:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cd9a:	bf06      	itte	eq
   8cd9c:	4610      	moveq	r0, r2
   8cd9e:	4619      	moveq	r1, r3
   8cda0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cda4:	d019      	beq.n	8cdda <__aeabi_dmul+0x24a>
   8cda6:	ea94 0f0c 	teq	r4, ip
   8cdaa:	d102      	bne.n	8cdb2 <__aeabi_dmul+0x222>
   8cdac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8cdb0:	d113      	bne.n	8cdda <__aeabi_dmul+0x24a>
   8cdb2:	ea95 0f0c 	teq	r5, ip
   8cdb6:	d105      	bne.n	8cdc4 <__aeabi_dmul+0x234>
   8cdb8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8cdbc:	bf1c      	itt	ne
   8cdbe:	4610      	movne	r0, r2
   8cdc0:	4619      	movne	r1, r3
   8cdc2:	d10a      	bne.n	8cdda <__aeabi_dmul+0x24a>
   8cdc4:	ea81 0103 	eor.w	r1, r1, r3
   8cdc8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8cdcc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8cdd0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8cdd4:	f04f 0000 	mov.w	r0, #0
   8cdd8:	bd70      	pop	{r4, r5, r6, pc}
   8cdda:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8cdde:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8cde2:	bd70      	pop	{r4, r5, r6, pc}

0008cde4 <__aeabi_ddiv>:
   8cde4:	b570      	push	{r4, r5, r6, lr}
   8cde6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8cdea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8cdee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8cdf2:	bf1d      	ittte	ne
   8cdf4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8cdf8:	ea94 0f0c 	teqne	r4, ip
   8cdfc:	ea95 0f0c 	teqne	r5, ip
   8ce00:	f000 f8a7 	bleq	8cf52 <__aeabi_ddiv+0x16e>
   8ce04:	eba4 0405 	sub.w	r4, r4, r5
   8ce08:	ea81 0e03 	eor.w	lr, r1, r3
   8ce0c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8ce10:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ce14:	f000 8088 	beq.w	8cf28 <__aeabi_ddiv+0x144>
   8ce18:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8ce1c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8ce20:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8ce24:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8ce28:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8ce2c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8ce30:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8ce34:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8ce38:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8ce3c:	429d      	cmp	r5, r3
   8ce3e:	bf08      	it	eq
   8ce40:	4296      	cmpeq	r6, r2
   8ce42:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8ce46:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8ce4a:	d202      	bcs.n	8ce52 <__aeabi_ddiv+0x6e>
   8ce4c:	085b      	lsrs	r3, r3, #1
   8ce4e:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce52:	1ab6      	subs	r6, r6, r2
   8ce54:	eb65 0503 	sbc.w	r5, r5, r3
   8ce58:	085b      	lsrs	r3, r3, #1
   8ce5a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce5e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8ce62:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8ce66:	ebb6 0e02 	subs.w	lr, r6, r2
   8ce6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ce6e:	bf22      	ittt	cs
   8ce70:	1ab6      	subcs	r6, r6, r2
   8ce72:	4675      	movcs	r5, lr
   8ce74:	ea40 000c 	orrcs.w	r0, r0, ip
   8ce78:	085b      	lsrs	r3, r3, #1
   8ce7a:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce7e:	ebb6 0e02 	subs.w	lr, r6, r2
   8ce82:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ce86:	bf22      	ittt	cs
   8ce88:	1ab6      	subcs	r6, r6, r2
   8ce8a:	4675      	movcs	r5, lr
   8ce8c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8ce90:	085b      	lsrs	r3, r3, #1
   8ce92:	ea4f 0232 	mov.w	r2, r2, rrx
   8ce96:	ebb6 0e02 	subs.w	lr, r6, r2
   8ce9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ce9e:	bf22      	ittt	cs
   8cea0:	1ab6      	subcs	r6, r6, r2
   8cea2:	4675      	movcs	r5, lr
   8cea4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8cea8:	085b      	lsrs	r3, r3, #1
   8ceaa:	ea4f 0232 	mov.w	r2, r2, rrx
   8ceae:	ebb6 0e02 	subs.w	lr, r6, r2
   8ceb2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8ceb6:	bf22      	ittt	cs
   8ceb8:	1ab6      	subcs	r6, r6, r2
   8ceba:	4675      	movcs	r5, lr
   8cebc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8cec0:	ea55 0e06 	orrs.w	lr, r5, r6
   8cec4:	d018      	beq.n	8cef8 <__aeabi_ddiv+0x114>
   8cec6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8ceca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8cece:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8ced2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8ced6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8ceda:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8cede:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8cee2:	d1c0      	bne.n	8ce66 <__aeabi_ddiv+0x82>
   8cee4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cee8:	d10b      	bne.n	8cf02 <__aeabi_ddiv+0x11e>
   8ceea:	ea41 0100 	orr.w	r1, r1, r0
   8ceee:	f04f 0000 	mov.w	r0, #0
   8cef2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8cef6:	e7b6      	b.n	8ce66 <__aeabi_ddiv+0x82>
   8cef8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8cefc:	bf04      	itt	eq
   8cefe:	4301      	orreq	r1, r0
   8cf00:	2000      	moveq	r0, #0
   8cf02:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8cf06:	bf88      	it	hi
   8cf08:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8cf0c:	f63f aeaf 	bhi.w	8cc6e <__aeabi_dmul+0xde>
   8cf10:	ebb5 0c03 	subs.w	ip, r5, r3
   8cf14:	bf04      	itt	eq
   8cf16:	ebb6 0c02 	subseq.w	ip, r6, r2
   8cf1a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8cf1e:	f150 0000 	adcs.w	r0, r0, #0
   8cf22:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cf26:	bd70      	pop	{r4, r5, r6, pc}
   8cf28:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8cf2c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8cf30:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8cf34:	bfc2      	ittt	gt
   8cf36:	ebd4 050c 	rsbsgt	r5, r4, ip
   8cf3a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8cf3e:	bd70      	popgt	{r4, r5, r6, pc}
   8cf40:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8cf44:	f04f 0e00 	mov.w	lr, #0
   8cf48:	3c01      	subs	r4, #1
   8cf4a:	e690      	b.n	8cc6e <__aeabi_dmul+0xde>
   8cf4c:	ea45 0e06 	orr.w	lr, r5, r6
   8cf50:	e68d      	b.n	8cc6e <__aeabi_dmul+0xde>
   8cf52:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8cf56:	ea94 0f0c 	teq	r4, ip
   8cf5a:	bf08      	it	eq
   8cf5c:	ea95 0f0c 	teqeq	r5, ip
   8cf60:	f43f af3b 	beq.w	8cdda <__aeabi_dmul+0x24a>
   8cf64:	ea94 0f0c 	teq	r4, ip
   8cf68:	d10a      	bne.n	8cf80 <__aeabi_ddiv+0x19c>
   8cf6a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8cf6e:	f47f af34 	bne.w	8cdda <__aeabi_dmul+0x24a>
   8cf72:	ea95 0f0c 	teq	r5, ip
   8cf76:	f47f af25 	bne.w	8cdc4 <__aeabi_dmul+0x234>
   8cf7a:	4610      	mov	r0, r2
   8cf7c:	4619      	mov	r1, r3
   8cf7e:	e72c      	b.n	8cdda <__aeabi_dmul+0x24a>
   8cf80:	ea95 0f0c 	teq	r5, ip
   8cf84:	d106      	bne.n	8cf94 <__aeabi_ddiv+0x1b0>
   8cf86:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8cf8a:	f43f aefd 	beq.w	8cd88 <__aeabi_dmul+0x1f8>
   8cf8e:	4610      	mov	r0, r2
   8cf90:	4619      	mov	r1, r3
   8cf92:	e722      	b.n	8cdda <__aeabi_dmul+0x24a>
   8cf94:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8cf98:	bf18      	it	ne
   8cf9a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8cf9e:	f47f aec5 	bne.w	8cd2c <__aeabi_dmul+0x19c>
   8cfa2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8cfa6:	f47f af0d 	bne.w	8cdc4 <__aeabi_dmul+0x234>
   8cfaa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8cfae:	f47f aeeb 	bne.w	8cd88 <__aeabi_dmul+0x1f8>
   8cfb2:	e712      	b.n	8cdda <__aeabi_dmul+0x24a>

0008cfb4 <__gedf2>:
   8cfb4:	f04f 3cff 	mov.w	ip, #4294967295
   8cfb8:	e006      	b.n	8cfc8 <__cmpdf2+0x4>
   8cfba:	bf00      	nop

0008cfbc <__ledf2>:
   8cfbc:	f04f 0c01 	mov.w	ip, #1
   8cfc0:	e002      	b.n	8cfc8 <__cmpdf2+0x4>
   8cfc2:	bf00      	nop

0008cfc4 <__cmpdf2>:
   8cfc4:	f04f 0c01 	mov.w	ip, #1
   8cfc8:	f84d cd04 	str.w	ip, [sp, #-4]!
   8cfcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8cfd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8cfd4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8cfd8:	bf18      	it	ne
   8cfda:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8cfde:	d01b      	beq.n	8d018 <__cmpdf2+0x54>
   8cfe0:	b001      	add	sp, #4
   8cfe2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8cfe6:	bf0c      	ite	eq
   8cfe8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8cfec:	ea91 0f03 	teqne	r1, r3
   8cff0:	bf02      	ittt	eq
   8cff2:	ea90 0f02 	teqeq	r0, r2
   8cff6:	2000      	moveq	r0, #0
   8cff8:	4770      	bxeq	lr
   8cffa:	f110 0f00 	cmn.w	r0, #0
   8cffe:	ea91 0f03 	teq	r1, r3
   8d002:	bf58      	it	pl
   8d004:	4299      	cmppl	r1, r3
   8d006:	bf08      	it	eq
   8d008:	4290      	cmpeq	r0, r2
   8d00a:	bf2c      	ite	cs
   8d00c:	17d8      	asrcs	r0, r3, #31
   8d00e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d012:	f040 0001 	orr.w	r0, r0, #1
   8d016:	4770      	bx	lr
   8d018:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d01c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d020:	d102      	bne.n	8d028 <__cmpdf2+0x64>
   8d022:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d026:	d107      	bne.n	8d038 <__cmpdf2+0x74>
   8d028:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d02c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d030:	d1d6      	bne.n	8cfe0 <__cmpdf2+0x1c>
   8d032:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d036:	d0d3      	beq.n	8cfe0 <__cmpdf2+0x1c>
   8d038:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d03c:	4770      	bx	lr
   8d03e:	bf00      	nop

0008d040 <__aeabi_cdrcmple>:
   8d040:	4684      	mov	ip, r0
   8d042:	4610      	mov	r0, r2
   8d044:	4662      	mov	r2, ip
   8d046:	468c      	mov	ip, r1
   8d048:	4619      	mov	r1, r3
   8d04a:	4663      	mov	r3, ip
   8d04c:	e000      	b.n	8d050 <__aeabi_cdcmpeq>
   8d04e:	bf00      	nop

0008d050 <__aeabi_cdcmpeq>:
   8d050:	b501      	push	{r0, lr}
   8d052:	f7ff ffb7 	bl	8cfc4 <__cmpdf2>
   8d056:	2800      	cmp	r0, #0
   8d058:	bf48      	it	mi
   8d05a:	f110 0f00 	cmnmi.w	r0, #0
   8d05e:	bd01      	pop	{r0, pc}

0008d060 <__aeabi_dcmpeq>:
   8d060:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d064:	f7ff fff4 	bl	8d050 <__aeabi_cdcmpeq>
   8d068:	bf0c      	ite	eq
   8d06a:	2001      	moveq	r0, #1
   8d06c:	2000      	movne	r0, #0
   8d06e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d072:	bf00      	nop

0008d074 <__aeabi_dcmplt>:
   8d074:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d078:	f7ff ffea 	bl	8d050 <__aeabi_cdcmpeq>
   8d07c:	bf34      	ite	cc
   8d07e:	2001      	movcc	r0, #1
   8d080:	2000      	movcs	r0, #0
   8d082:	f85d fb08 	ldr.w	pc, [sp], #8
   8d086:	bf00      	nop

0008d088 <__aeabi_dcmple>:
   8d088:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d08c:	f7ff ffe0 	bl	8d050 <__aeabi_cdcmpeq>
   8d090:	bf94      	ite	ls
   8d092:	2001      	movls	r0, #1
   8d094:	2000      	movhi	r0, #0
   8d096:	f85d fb08 	ldr.w	pc, [sp], #8
   8d09a:	bf00      	nop

0008d09c <__aeabi_dcmpge>:
   8d09c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d0a0:	f7ff ffce 	bl	8d040 <__aeabi_cdrcmple>
   8d0a4:	bf94      	ite	ls
   8d0a6:	2001      	movls	r0, #1
   8d0a8:	2000      	movhi	r0, #0
   8d0aa:	f85d fb08 	ldr.w	pc, [sp], #8
   8d0ae:	bf00      	nop

0008d0b0 <__aeabi_dcmpgt>:
   8d0b0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d0b4:	f7ff ffc4 	bl	8d040 <__aeabi_cdrcmple>
   8d0b8:	bf34      	ite	cc
   8d0ba:	2001      	movcc	r0, #1
   8d0bc:	2000      	movcs	r0, #0
   8d0be:	f85d fb08 	ldr.w	pc, [sp], #8
   8d0c2:	bf00      	nop

0008d0c4 <__aeabi_dcmpun>:
   8d0c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d0c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d0cc:	d102      	bne.n	8d0d4 <__aeabi_dcmpun+0x10>
   8d0ce:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d0d2:	d10a      	bne.n	8d0ea <__aeabi_dcmpun+0x26>
   8d0d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d0d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d0dc:	d102      	bne.n	8d0e4 <__aeabi_dcmpun+0x20>
   8d0de:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d0e2:	d102      	bne.n	8d0ea <__aeabi_dcmpun+0x26>
   8d0e4:	f04f 0000 	mov.w	r0, #0
   8d0e8:	4770      	bx	lr
   8d0ea:	f04f 0001 	mov.w	r0, #1
   8d0ee:	4770      	bx	lr

0008d0f0 <__aeabi_d2iz>:
   8d0f0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d0f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d0f8:	d215      	bcs.n	8d126 <__aeabi_d2iz+0x36>
   8d0fa:	d511      	bpl.n	8d120 <__aeabi_d2iz+0x30>
   8d0fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d100:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d104:	d912      	bls.n	8d12c <__aeabi_d2iz+0x3c>
   8d106:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d10a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d10e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d112:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d116:	fa23 f002 	lsr.w	r0, r3, r2
   8d11a:	bf18      	it	ne
   8d11c:	4240      	negne	r0, r0
   8d11e:	4770      	bx	lr
   8d120:	f04f 0000 	mov.w	r0, #0
   8d124:	4770      	bx	lr
   8d126:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d12a:	d105      	bne.n	8d138 <__aeabi_d2iz+0x48>
   8d12c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d130:	bf08      	it	eq
   8d132:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d136:	4770      	bx	lr
   8d138:	f04f 0000 	mov.w	r0, #0
   8d13c:	4770      	bx	lr
   8d13e:	bf00      	nop

0008d140 <__aeabi_uldivmod>:
   8d140:	b953      	cbnz	r3, 8d158 <__aeabi_uldivmod+0x18>
   8d142:	b94a      	cbnz	r2, 8d158 <__aeabi_uldivmod+0x18>
   8d144:	2900      	cmp	r1, #0
   8d146:	bf08      	it	eq
   8d148:	2800      	cmpeq	r0, #0
   8d14a:	bf1c      	itt	ne
   8d14c:	f04f 31ff 	movne.w	r1, #4294967295
   8d150:	f04f 30ff 	movne.w	r0, #4294967295
   8d154:	f000 b976 	b.w	8d444 <__aeabi_idiv0>
   8d158:	f1ad 0c08 	sub.w	ip, sp, #8
   8d15c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8d160:	f000 f806 	bl	8d170 <__udivmoddi4>
   8d164:	f8dd e004 	ldr.w	lr, [sp, #4]
   8d168:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8d16c:	b004      	add	sp, #16
   8d16e:	4770      	bx	lr

0008d170 <__udivmoddi4>:
   8d170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d174:	9e08      	ldr	r6, [sp, #32]
   8d176:	460d      	mov	r5, r1
   8d178:	4604      	mov	r4, r0
   8d17a:	4688      	mov	r8, r1
   8d17c:	2b00      	cmp	r3, #0
   8d17e:	d14d      	bne.n	8d21c <__udivmoddi4+0xac>
   8d180:	428a      	cmp	r2, r1
   8d182:	4694      	mov	ip, r2
   8d184:	d968      	bls.n	8d258 <__udivmoddi4+0xe8>
   8d186:	fab2 f282 	clz	r2, r2
   8d18a:	b152      	cbz	r2, 8d1a2 <__udivmoddi4+0x32>
   8d18c:	fa01 f302 	lsl.w	r3, r1, r2
   8d190:	f1c2 0120 	rsb	r1, r2, #32
   8d194:	fa20 f101 	lsr.w	r1, r0, r1
   8d198:	fa0c fc02 	lsl.w	ip, ip, r2
   8d19c:	ea41 0803 	orr.w	r8, r1, r3
   8d1a0:	4094      	lsls	r4, r2
   8d1a2:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8d1a6:	fbb8 f7f1 	udiv	r7, r8, r1
   8d1aa:	fa1f fe8c 	uxth.w	lr, ip
   8d1ae:	fb01 8817 	mls	r8, r1, r7, r8
   8d1b2:	fb07 f00e 	mul.w	r0, r7, lr
   8d1b6:	0c23      	lsrs	r3, r4, #16
   8d1b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8d1bc:	4298      	cmp	r0, r3
   8d1be:	d90a      	bls.n	8d1d6 <__udivmoddi4+0x66>
   8d1c0:	eb1c 0303 	adds.w	r3, ip, r3
   8d1c4:	f107 35ff 	add.w	r5, r7, #4294967295
   8d1c8:	f080 811e 	bcs.w	8d408 <__udivmoddi4+0x298>
   8d1cc:	4298      	cmp	r0, r3
   8d1ce:	f240 811b 	bls.w	8d408 <__udivmoddi4+0x298>
   8d1d2:	3f02      	subs	r7, #2
   8d1d4:	4463      	add	r3, ip
   8d1d6:	1a1b      	subs	r3, r3, r0
   8d1d8:	fbb3 f0f1 	udiv	r0, r3, r1
   8d1dc:	fb01 3310 	mls	r3, r1, r0, r3
   8d1e0:	fb00 fe0e 	mul.w	lr, r0, lr
   8d1e4:	b2a4      	uxth	r4, r4
   8d1e6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8d1ea:	45a6      	cmp	lr, r4
   8d1ec:	d90a      	bls.n	8d204 <__udivmoddi4+0x94>
   8d1ee:	eb1c 0404 	adds.w	r4, ip, r4
   8d1f2:	f100 33ff 	add.w	r3, r0, #4294967295
   8d1f6:	f080 8109 	bcs.w	8d40c <__udivmoddi4+0x29c>
   8d1fa:	45a6      	cmp	lr, r4
   8d1fc:	f240 8106 	bls.w	8d40c <__udivmoddi4+0x29c>
   8d200:	4464      	add	r4, ip
   8d202:	3802      	subs	r0, #2
   8d204:	2100      	movs	r1, #0
   8d206:	eba4 040e 	sub.w	r4, r4, lr
   8d20a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8d20e:	b11e      	cbz	r6, 8d218 <__udivmoddi4+0xa8>
   8d210:	2300      	movs	r3, #0
   8d212:	40d4      	lsrs	r4, r2
   8d214:	e9c6 4300 	strd	r4, r3, [r6]
   8d218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d21c:	428b      	cmp	r3, r1
   8d21e:	d908      	bls.n	8d232 <__udivmoddi4+0xc2>
   8d220:	2e00      	cmp	r6, #0
   8d222:	f000 80ee 	beq.w	8d402 <__udivmoddi4+0x292>
   8d226:	2100      	movs	r1, #0
   8d228:	e9c6 0500 	strd	r0, r5, [r6]
   8d22c:	4608      	mov	r0, r1
   8d22e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d232:	fab3 f183 	clz	r1, r3
   8d236:	2900      	cmp	r1, #0
   8d238:	d14a      	bne.n	8d2d0 <__udivmoddi4+0x160>
   8d23a:	42ab      	cmp	r3, r5
   8d23c:	d302      	bcc.n	8d244 <__udivmoddi4+0xd4>
   8d23e:	4282      	cmp	r2, r0
   8d240:	f200 80fc 	bhi.w	8d43c <__udivmoddi4+0x2cc>
   8d244:	1a84      	subs	r4, r0, r2
   8d246:	eb65 0303 	sbc.w	r3, r5, r3
   8d24a:	2001      	movs	r0, #1
   8d24c:	4698      	mov	r8, r3
   8d24e:	2e00      	cmp	r6, #0
   8d250:	d0e2      	beq.n	8d218 <__udivmoddi4+0xa8>
   8d252:	e9c6 4800 	strd	r4, r8, [r6]
   8d256:	e7df      	b.n	8d218 <__udivmoddi4+0xa8>
   8d258:	b902      	cbnz	r2, 8d25c <__udivmoddi4+0xec>
   8d25a:	deff      	udf	#255	; 0xff
   8d25c:	fab2 f282 	clz	r2, r2
   8d260:	2a00      	cmp	r2, #0
   8d262:	f040 8091 	bne.w	8d388 <__udivmoddi4+0x218>
   8d266:	eba1 000c 	sub.w	r0, r1, ip
   8d26a:	2101      	movs	r1, #1
   8d26c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8d270:	fa1f fe8c 	uxth.w	lr, ip
   8d274:	fbb0 f3f7 	udiv	r3, r0, r7
   8d278:	fb07 0013 	mls	r0, r7, r3, r0
   8d27c:	0c25      	lsrs	r5, r4, #16
   8d27e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8d282:	fb0e f003 	mul.w	r0, lr, r3
   8d286:	42a8      	cmp	r0, r5
   8d288:	d908      	bls.n	8d29c <__udivmoddi4+0x12c>
   8d28a:	eb1c 0505 	adds.w	r5, ip, r5
   8d28e:	f103 38ff 	add.w	r8, r3, #4294967295
   8d292:	d202      	bcs.n	8d29a <__udivmoddi4+0x12a>
   8d294:	42a8      	cmp	r0, r5
   8d296:	f200 80ce 	bhi.w	8d436 <__udivmoddi4+0x2c6>
   8d29a:	4643      	mov	r3, r8
   8d29c:	1a2d      	subs	r5, r5, r0
   8d29e:	fbb5 f0f7 	udiv	r0, r5, r7
   8d2a2:	fb07 5510 	mls	r5, r7, r0, r5
   8d2a6:	fb0e fe00 	mul.w	lr, lr, r0
   8d2aa:	b2a4      	uxth	r4, r4
   8d2ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8d2b0:	45a6      	cmp	lr, r4
   8d2b2:	d908      	bls.n	8d2c6 <__udivmoddi4+0x156>
   8d2b4:	eb1c 0404 	adds.w	r4, ip, r4
   8d2b8:	f100 35ff 	add.w	r5, r0, #4294967295
   8d2bc:	d202      	bcs.n	8d2c4 <__udivmoddi4+0x154>
   8d2be:	45a6      	cmp	lr, r4
   8d2c0:	f200 80b6 	bhi.w	8d430 <__udivmoddi4+0x2c0>
   8d2c4:	4628      	mov	r0, r5
   8d2c6:	eba4 040e 	sub.w	r4, r4, lr
   8d2ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8d2ce:	e79e      	b.n	8d20e <__udivmoddi4+0x9e>
   8d2d0:	f1c1 0720 	rsb	r7, r1, #32
   8d2d4:	408b      	lsls	r3, r1
   8d2d6:	fa22 fc07 	lsr.w	ip, r2, r7
   8d2da:	ea4c 0c03 	orr.w	ip, ip, r3
   8d2de:	fa25 fa07 	lsr.w	sl, r5, r7
   8d2e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8d2e6:	fbba f8f9 	udiv	r8, sl, r9
   8d2ea:	fa20 f307 	lsr.w	r3, r0, r7
   8d2ee:	fb09 aa18 	mls	sl, r9, r8, sl
   8d2f2:	408d      	lsls	r5, r1
   8d2f4:	fa1f fe8c 	uxth.w	lr, ip
   8d2f8:	431d      	orrs	r5, r3
   8d2fa:	fa00 f301 	lsl.w	r3, r0, r1
   8d2fe:	fb08 f00e 	mul.w	r0, r8, lr
   8d302:	0c2c      	lsrs	r4, r5, #16
   8d304:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8d308:	42a0      	cmp	r0, r4
   8d30a:	fa02 f201 	lsl.w	r2, r2, r1
   8d30e:	d90b      	bls.n	8d328 <__udivmoddi4+0x1b8>
   8d310:	eb1c 0404 	adds.w	r4, ip, r4
   8d314:	f108 3aff 	add.w	sl, r8, #4294967295
   8d318:	f080 8088 	bcs.w	8d42c <__udivmoddi4+0x2bc>
   8d31c:	42a0      	cmp	r0, r4
   8d31e:	f240 8085 	bls.w	8d42c <__udivmoddi4+0x2bc>
   8d322:	f1a8 0802 	sub.w	r8, r8, #2
   8d326:	4464      	add	r4, ip
   8d328:	1a24      	subs	r4, r4, r0
   8d32a:	fbb4 f0f9 	udiv	r0, r4, r9
   8d32e:	fb09 4410 	mls	r4, r9, r0, r4
   8d332:	fb00 fe0e 	mul.w	lr, r0, lr
   8d336:	b2ad      	uxth	r5, r5
   8d338:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8d33c:	45a6      	cmp	lr, r4
   8d33e:	d908      	bls.n	8d352 <__udivmoddi4+0x1e2>
   8d340:	eb1c 0404 	adds.w	r4, ip, r4
   8d344:	f100 35ff 	add.w	r5, r0, #4294967295
   8d348:	d26c      	bcs.n	8d424 <__udivmoddi4+0x2b4>
   8d34a:	45a6      	cmp	lr, r4
   8d34c:	d96a      	bls.n	8d424 <__udivmoddi4+0x2b4>
   8d34e:	3802      	subs	r0, #2
   8d350:	4464      	add	r4, ip
   8d352:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8d356:	fba0 9502 	umull	r9, r5, r0, r2
   8d35a:	eba4 040e 	sub.w	r4, r4, lr
   8d35e:	42ac      	cmp	r4, r5
   8d360:	46c8      	mov	r8, r9
   8d362:	46ae      	mov	lr, r5
   8d364:	d356      	bcc.n	8d414 <__udivmoddi4+0x2a4>
   8d366:	d053      	beq.n	8d410 <__udivmoddi4+0x2a0>
   8d368:	2e00      	cmp	r6, #0
   8d36a:	d069      	beq.n	8d440 <__udivmoddi4+0x2d0>
   8d36c:	ebb3 0208 	subs.w	r2, r3, r8
   8d370:	eb64 040e 	sbc.w	r4, r4, lr
   8d374:	fa22 f301 	lsr.w	r3, r2, r1
   8d378:	fa04 f707 	lsl.w	r7, r4, r7
   8d37c:	431f      	orrs	r7, r3
   8d37e:	40cc      	lsrs	r4, r1
   8d380:	e9c6 7400 	strd	r7, r4, [r6]
   8d384:	2100      	movs	r1, #0
   8d386:	e747      	b.n	8d218 <__udivmoddi4+0xa8>
   8d388:	fa0c fc02 	lsl.w	ip, ip, r2
   8d38c:	f1c2 0120 	rsb	r1, r2, #32
   8d390:	fa25 f301 	lsr.w	r3, r5, r1
   8d394:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8d398:	fa20 f101 	lsr.w	r1, r0, r1
   8d39c:	4095      	lsls	r5, r2
   8d39e:	430d      	orrs	r5, r1
   8d3a0:	fbb3 f1f7 	udiv	r1, r3, r7
   8d3a4:	fb07 3311 	mls	r3, r7, r1, r3
   8d3a8:	fa1f fe8c 	uxth.w	lr, ip
   8d3ac:	0c28      	lsrs	r0, r5, #16
   8d3ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8d3b2:	fb01 f30e 	mul.w	r3, r1, lr
   8d3b6:	4283      	cmp	r3, r0
   8d3b8:	fa04 f402 	lsl.w	r4, r4, r2
   8d3bc:	d908      	bls.n	8d3d0 <__udivmoddi4+0x260>
   8d3be:	eb1c 0000 	adds.w	r0, ip, r0
   8d3c2:	f101 38ff 	add.w	r8, r1, #4294967295
   8d3c6:	d22f      	bcs.n	8d428 <__udivmoddi4+0x2b8>
   8d3c8:	4283      	cmp	r3, r0
   8d3ca:	d92d      	bls.n	8d428 <__udivmoddi4+0x2b8>
   8d3cc:	3902      	subs	r1, #2
   8d3ce:	4460      	add	r0, ip
   8d3d0:	1ac0      	subs	r0, r0, r3
   8d3d2:	fbb0 f3f7 	udiv	r3, r0, r7
   8d3d6:	fb07 0013 	mls	r0, r7, r3, r0
   8d3da:	b2ad      	uxth	r5, r5
   8d3dc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8d3e0:	fb03 f00e 	mul.w	r0, r3, lr
   8d3e4:	42a8      	cmp	r0, r5
   8d3e6:	d908      	bls.n	8d3fa <__udivmoddi4+0x28a>
   8d3e8:	eb1c 0505 	adds.w	r5, ip, r5
   8d3ec:	f103 38ff 	add.w	r8, r3, #4294967295
   8d3f0:	d216      	bcs.n	8d420 <__udivmoddi4+0x2b0>
   8d3f2:	42a8      	cmp	r0, r5
   8d3f4:	d914      	bls.n	8d420 <__udivmoddi4+0x2b0>
   8d3f6:	3b02      	subs	r3, #2
   8d3f8:	4465      	add	r5, ip
   8d3fa:	1a28      	subs	r0, r5, r0
   8d3fc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8d400:	e738      	b.n	8d274 <__udivmoddi4+0x104>
   8d402:	4631      	mov	r1, r6
   8d404:	4630      	mov	r0, r6
   8d406:	e707      	b.n	8d218 <__udivmoddi4+0xa8>
   8d408:	462f      	mov	r7, r5
   8d40a:	e6e4      	b.n	8d1d6 <__udivmoddi4+0x66>
   8d40c:	4618      	mov	r0, r3
   8d40e:	e6f9      	b.n	8d204 <__udivmoddi4+0x94>
   8d410:	454b      	cmp	r3, r9
   8d412:	d2a9      	bcs.n	8d368 <__udivmoddi4+0x1f8>
   8d414:	ebb9 0802 	subs.w	r8, r9, r2
   8d418:	eb65 0e0c 	sbc.w	lr, r5, ip
   8d41c:	3801      	subs	r0, #1
   8d41e:	e7a3      	b.n	8d368 <__udivmoddi4+0x1f8>
   8d420:	4643      	mov	r3, r8
   8d422:	e7ea      	b.n	8d3fa <__udivmoddi4+0x28a>
   8d424:	4628      	mov	r0, r5
   8d426:	e794      	b.n	8d352 <__udivmoddi4+0x1e2>
   8d428:	4641      	mov	r1, r8
   8d42a:	e7d1      	b.n	8d3d0 <__udivmoddi4+0x260>
   8d42c:	46d0      	mov	r8, sl
   8d42e:	e77b      	b.n	8d328 <__udivmoddi4+0x1b8>
   8d430:	4464      	add	r4, ip
   8d432:	3802      	subs	r0, #2
   8d434:	e747      	b.n	8d2c6 <__udivmoddi4+0x156>
   8d436:	3b02      	subs	r3, #2
   8d438:	4465      	add	r5, ip
   8d43a:	e72f      	b.n	8d29c <__udivmoddi4+0x12c>
   8d43c:	4608      	mov	r0, r1
   8d43e:	e706      	b.n	8d24e <__udivmoddi4+0xde>
   8d440:	4631      	mov	r1, r6
   8d442:	e6e9      	b.n	8d218 <__udivmoddi4+0xa8>

0008d444 <__aeabi_idiv0>:
   8d444:	4770      	bx	lr
   8d446:	bf00      	nop
   8d448:	78383025 	.word	0x78383025
   8d44c:	00000000 	.word	0x00000000

0008d450 <BUILD_DATE>:
   8d450:	2072614d 32203820 00323230              Mar  8 2022.

0008d45c <BUILD_TIME>:
   8d45c:	313a3130 31313a35 00000000 00000000     01:15:11........
   8d46c:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8d47c:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8d48c:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8d49c:	0000007e                                ~...

0008d4a0 <LED_DESCRIPTOR>:
   8d4a0:	0000001d 00000001 0000001f 00000001     ................
   8d4b0:	74697845 20676e69 68746977 61747320     Exiting with sta
   8d4c0:	20737574 0a2e6425 00000000              tus %d......

0008d4cc <_global_impure_ptr>:
   8d4cc:	20000478 00464e49 00666e69 004e414e     x.. INF.inf.NAN.
   8d4dc:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8d4ec:	66656463 00000000 33323130 37363534     cdef....01234567
   8d4fc:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8d50c:	0000296c 00000030                       l)..0...

0008d514 <blanks.1>:
   8d514:	20202020 20202020 20202020 20202020                     

0008d524 <zeroes.0>:
   8d524:	30303030 30303030 30303030 30303030     0000000000000000

0008d534 <blanks.1>:
   8d534:	20202020 20202020 20202020 20202020                     

0008d544 <zeroes.0>:
   8d544:	30303030 30303030 30303030 30303030     0000000000000000
   8d554:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8d564:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8d574:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d584:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d594:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8d5a4:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8d5b4:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8d5c4:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8d5d4:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8d5e4:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8d5f4:	00000063 00000043 49534f50 00000058     c...C...POSIX...
   8d604:	0000002e 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8d614:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8d624:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8d634:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8d644:	656e696c 3036322d 3230325f 32373031     line-260_2021072
   8d654:	36315f37 37333732 36383331 6372732f     7_1627371386/src
   8d664:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8d674:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8d684:	0000632e                                .c..

0008d688 <__mprec_bigtens>:
   8d688:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8d698:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8d6a8:	7f73bf3c 75154fdd                       <.s..O.u

0008d6b0 <__mprec_tens>:
   8d6b0:	00000000 3ff00000 00000000 40240000     .......?......$@
   8d6c0:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8d6d0:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8d6e0:	00000000 412e8480 00000000 416312d0     .......A......cA
   8d6f0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8d700:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8d710:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8d720:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8d730:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8d740:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8d750:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8d760:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8d770:	79d99db4 44ea7843                       ...yCx.D

0008d778 <p05.0>:
   8d778:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8d788:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8d798:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8d7a8:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8d7b8:	2520656e 25732564 00000a73              ne %d%s%s...

0008d7c4 <_ctype_>:
   8d7c4:	20202000 20202020 28282020 20282828     .         ((((( 
   8d7d4:	20202020 20202020 20202020 20202020                     
   8d7e4:	10108820 10101010 10101010 10101010      ...............
   8d7f4:	04040410 04040404 10040404 10101010     ................
   8d804:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8d814:	01010101 01010101 01010101 10101010     ................
   8d824:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8d834:	02020202 02020202 02020202 10101010     ................
   8d844:	00000020 00000000 00000000 00000000      ...............
   8d854:	00000000 00000000 00000000 00000000     ................
   8d864:	00000000 00000000 00000000 00000000     ................
   8d874:	00000000 00000000 00000000 00000000     ................
   8d884:	00000000 00000000 00000000 00000000     ................
   8d894:	00000000 00000000 00000000 00000000     ................
   8d8a4:	00000000 00000000 00000000 00000000     ................
   8d8b4:	00000000 00000000 00000000 00000000     ................
   8d8c4:	00000000                                ....

0008d8c8 <_init>:
   8d8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8ca:	bf00      	nop
   8d8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8ce:	bc08      	pop	{r3}
   8d8d0:	469e      	mov	lr, r3
   8d8d2:	4770      	bx	lr

0008d8d4 <__init_array_start>:
   8d8d4:	00089401 	.word	0x00089401

0008d8d8 <__frame_dummy_init_array_entry>:
   8d8d8:	000800e1                                ....

0008d8dc <_fini>:
   8d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8d8de:	bf00      	nop
   8d8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8d8e2:	bc08      	pop	{r3}
   8d8e4:	469e      	mov	lr, r3
   8d8e6:	4770      	bx	lr

0008d8e8 <__do_global_dtors_aux_fini_array_entry>:
   8d8e8:	00bd 0008                                   ....

Disassembly of section .relocate:

20000000 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20000000:	b480      	push	{r7}
20000002:	b089      	sub	sp, #36	; 0x24
20000004:	af00      	add	r7, sp, #0
20000006:	60f8      	str	r0, [r7, #12]
20000008:	60b9      	str	r1, [r7, #8]
2000000a:	607a      	str	r2, [r7, #4]
2000000c:	603b      	str	r3, [r7, #0]
#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
			READ_BUFF_ADDR0 : READ_BUFF_ADDR1);
#elif (SAM3S || SAM4S || SAM3N || SAM3U || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
2000000e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
20000012:	61bb      	str	r3, [r7, #24]
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20000014:	683b      	ldr	r3, [r7, #0]
20000016:	2b00      	cmp	r3, #0
20000018:	d101      	bne.n	2000001e <efc_perform_read_sequence+0x1e>
		return EFC_RC_INVALID;
2000001a:	2302      	movs	r3, #2
2000001c:	e03c      	b.n	20000098 <efc_perform_read_sequence+0x98>
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
2000001e:	68fb      	ldr	r3, [r7, #12]
20000020:	681b      	ldr	r3, [r3, #0]
20000022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
20000026:	68fb      	ldr	r3, [r7, #12]
20000028:	601a      	str	r2, [r3, #0]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2000002a:	68bb      	ldr	r3, [r7, #8]
2000002c:	b2db      	uxtb	r3, r3
2000002e:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20000032:	68fb      	ldr	r3, [r7, #12]
20000034:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20000036:	68fb      	ldr	r3, [r7, #12]
20000038:	689b      	ldr	r3, [r3, #8]
2000003a:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
2000003c:	697b      	ldr	r3, [r7, #20]
2000003e:	f003 0301 	and.w	r3, r3, #1
20000042:	2b01      	cmp	r3, #1
20000044:	d0f7      	beq.n	20000036 <efc_perform_read_sequence+0x36>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000046:	2300      	movs	r3, #0
20000048:	61fb      	str	r3, [r7, #28]
2000004a:	e00c      	b.n	20000066 <efc_perform_read_sequence+0x66>
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2000004c:	69fb      	ldr	r3, [r7, #28]
2000004e:	009b      	lsls	r3, r3, #2
20000050:	69ba      	ldr	r2, [r7, #24]
20000052:	441a      	add	r2, r3
20000054:	69fb      	ldr	r3, [r7, #28]
20000056:	009b      	lsls	r3, r3, #2
20000058:	6839      	ldr	r1, [r7, #0]
2000005a:	440b      	add	r3, r1
2000005c:	6812      	ldr	r2, [r2, #0]
2000005e:	601a      	str	r2, [r3, #0]
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20000060:	69fb      	ldr	r3, [r7, #28]
20000062:	3301      	adds	r3, #1
20000064:	61fb      	str	r3, [r7, #28]
20000066:	69fa      	ldr	r2, [r7, #28]
20000068:	6abb      	ldr	r3, [r7, #40]	; 0x28
2000006a:	429a      	cmp	r2, r3
2000006c:	d3ee      	bcc.n	2000004c <efc_perform_read_sequence+0x4c>
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
2000006e:	687b      	ldr	r3, [r7, #4]
20000070:	b2db      	uxtb	r3, r3
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20000072:	f043 42b4 	orr.w	r2, r3, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
20000076:	68fb      	ldr	r3, [r7, #12]
20000078:	605a      	str	r2, [r3, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2000007a:	68fb      	ldr	r3, [r7, #12]
2000007c:	689b      	ldr	r3, [r3, #8]
2000007e:	617b      	str	r3, [r7, #20]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20000080:	697b      	ldr	r3, [r7, #20]
20000082:	f003 0301 	and.w	r3, r3, #1
20000086:	2b01      	cmp	r3, #1
20000088:	d1f7      	bne.n	2000007a <efc_perform_read_sequence+0x7a>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2000008a:	68fb      	ldr	r3, [r7, #12]
2000008c:	681b      	ldr	r3, [r3, #0]
2000008e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
20000092:	68fb      	ldr	r3, [r7, #12]
20000094:	601a      	str	r2, [r3, #0]

	return EFC_RC_OK;
20000096:	2300      	movs	r3, #0
}
20000098:	4618      	mov	r0, r3
2000009a:	3724      	adds	r7, #36	; 0x24
2000009c:	46bd      	mov	sp, r7
2000009e:	bc80      	pop	{r7}
200000a0:	4770      	bx	lr

200000a2 <efc_write_fmr>:
 * \param ul_fmr Value of mode register
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
200000a2:	b480      	push	{r7}
200000a4:	b083      	sub	sp, #12
200000a6:	af00      	add	r7, sp, #0
200000a8:	6078      	str	r0, [r7, #4]
200000aa:	6039      	str	r1, [r7, #0]
	p_efc->EEFC_FMR = ul_fmr;
200000ac:	687b      	ldr	r3, [r7, #4]
200000ae:	683a      	ldr	r2, [r7, #0]
200000b0:	601a      	str	r2, [r3, #0]
}
200000b2:	bf00      	nop
200000b4:	370c      	adds	r7, #12
200000b6:	46bd      	mov	sp, r7
200000b8:	bc80      	pop	{r7}
200000ba:	4770      	bx	lr

200000bc <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
200000bc:	b480      	push	{r7}
200000be:	b085      	sub	sp, #20
200000c0:	af00      	add	r7, sp, #0
200000c2:	6078      	str	r0, [r7, #4]
200000c4:	6039      	str	r1, [r7, #0]
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
200000c6:	687b      	ldr	r3, [r7, #4]
200000c8:	683a      	ldr	r2, [r7, #0]
200000ca:	605a      	str	r2, [r3, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200000cc:	687b      	ldr	r3, [r7, #4]
200000ce:	689b      	ldr	r3, [r3, #8]
200000d0:	60fb      	str	r3, [r7, #12]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200000d2:	68fb      	ldr	r3, [r7, #12]
200000d4:	f003 0301 	and.w	r3, r3, #1
200000d8:	2b01      	cmp	r3, #1
200000da:	d1f7      	bne.n	200000cc <efc_perform_fcr+0x10>

	return (ul_status & EEFC_ERROR_FLAGS);
200000dc:	68fb      	ldr	r3, [r7, #12]
200000de:	f003 0306 	and.w	r3, r3, #6
}
200000e2:	4618      	mov	r0, r3
200000e4:	3714      	adds	r7, #20
200000e6:	46bd      	mov	sp, r7
200000e8:	bc80      	pop	{r7}
200000ea:	4770      	bx	lr

200000ec <SystemInit>:
{
200000ec:	b480      	push	{r7}
200000ee:	af00      	add	r7, sp, #0
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200000f0:	4b2a      	ldr	r3, [pc, #168]	; (2000019c <SystemInit+0xb0>)
200000f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000f6:	601a      	str	r2, [r3, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
200000f8:	4b29      	ldr	r3, [pc, #164]	; (200001a0 <SystemInit+0xb4>)
200000fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
200000fe:	601a      	str	r2, [r3, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20000100:	4b28      	ldr	r3, [pc, #160]	; (200001a4 <SystemInit+0xb8>)
20000102:	6a1b      	ldr	r3, [r3, #32]
20000104:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
20000108:	2b00      	cmp	r3, #0
2000010a:	d109      	bne.n	20000120 <SystemInit+0x34>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2000010c:	4b25      	ldr	r3, [pc, #148]	; (200001a4 <SystemInit+0xb8>)
2000010e:	4a26      	ldr	r2, [pc, #152]	; (200001a8 <SystemInit+0xbc>)
20000110:	621a      	str	r2, [r3, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20000112:	bf00      	nop
20000114:	4b23      	ldr	r3, [pc, #140]	; (200001a4 <SystemInit+0xb8>)
20000116:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000118:	f003 0301 	and.w	r3, r3, #1
2000011c:	2b00      	cmp	r3, #0
2000011e:	d0f9      	beq.n	20000114 <SystemInit+0x28>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20000120:	4b20      	ldr	r3, [pc, #128]	; (200001a4 <SystemInit+0xb8>)
20000122:	4a22      	ldr	r2, [pc, #136]	; (200001ac <SystemInit+0xc0>)
20000124:	621a      	str	r2, [r3, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20000126:	bf00      	nop
20000128:	4b1e      	ldr	r3, [pc, #120]	; (200001a4 <SystemInit+0xb8>)
2000012a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000012c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
20000130:	2b00      	cmp	r3, #0
20000132:	d0f9      	beq.n	20000128 <SystemInit+0x3c>
	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20000134:	4b1b      	ldr	r3, [pc, #108]	; (200001a4 <SystemInit+0xb8>)
20000136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
20000138:	f023 0303 	bic.w	r3, r3, #3
2000013c:	4a19      	ldr	r2, [pc, #100]	; (200001a4 <SystemInit+0xb8>)
2000013e:	f043 0301 	orr.w	r3, r3, #1
20000142:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000144:	bf00      	nop
20000146:	4b17      	ldr	r3, [pc, #92]	; (200001a4 <SystemInit+0xb8>)
20000148:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000014a:	f003 0308 	and.w	r3, r3, #8
2000014e:	2b00      	cmp	r3, #0
20000150:	d0f9      	beq.n	20000146 <SystemInit+0x5a>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20000152:	4b14      	ldr	r3, [pc, #80]	; (200001a4 <SystemInit+0xb8>)
20000154:	4a16      	ldr	r2, [pc, #88]	; (200001b0 <SystemInit+0xc4>)
20000156:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20000158:	bf00      	nop
2000015a:	4b12      	ldr	r3, [pc, #72]	; (200001a4 <SystemInit+0xb8>)
2000015c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
2000015e:	f003 0302 	and.w	r3, r3, #2
20000162:	2b00      	cmp	r3, #0
20000164:	d0f9      	beq.n	2000015a <SystemInit+0x6e>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20000166:	4b0f      	ldr	r3, [pc, #60]	; (200001a4 <SystemInit+0xb8>)
20000168:	2211      	movs	r2, #17
2000016a:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2000016c:	bf00      	nop
2000016e:	4b0d      	ldr	r3, [pc, #52]	; (200001a4 <SystemInit+0xb8>)
20000170:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000172:	f003 0308 	and.w	r3, r3, #8
20000176:	2b00      	cmp	r3, #0
20000178:	d0f9      	beq.n	2000016e <SystemInit+0x82>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2000017a:	4b0a      	ldr	r3, [pc, #40]	; (200001a4 <SystemInit+0xb8>)
2000017c:	2212      	movs	r2, #18
2000017e:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20000180:	bf00      	nop
20000182:	4b08      	ldr	r3, [pc, #32]	; (200001a4 <SystemInit+0xb8>)
20000184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
20000186:	f003 0308 	and.w	r3, r3, #8
2000018a:	2b00      	cmp	r3, #0
2000018c:	d0f9      	beq.n	20000182 <SystemInit+0x96>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2000018e:	4b09      	ldr	r3, [pc, #36]	; (200001b4 <SystemInit+0xc8>)
20000190:	4a09      	ldr	r2, [pc, #36]	; (200001b8 <SystemInit+0xcc>)
20000192:	601a      	str	r2, [r3, #0]
}
20000194:	bf00      	nop
20000196:	46bd      	mov	sp, r7
20000198:	bc80      	pop	{r7}
2000019a:	4770      	bx	lr
2000019c:	400e0800 	.word	0x400e0800
200001a0:	400e0a00 	.word	0x400e0a00
200001a4:	400e0400 	.word	0x400e0400
200001a8:	00370809 	.word	0x00370809
200001ac:	01370809 	.word	0x01370809
200001b0:	200f3f01 	.word	0x200f3f01
200001b4:	20000470 	.word	0x20000470
200001b8:	05b8d800 	.word	0x05b8d800

200001bc <system_init_flash>:
 * Initialize flash.
 */
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
200001bc:	b480      	push	{r7}
200001be:	b083      	sub	sp, #12
200001c0:	af00      	add	r7, sp, #0
200001c2:	6078      	str	r0, [r7, #4]
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200001c4:	687b      	ldr	r3, [r7, #4]
200001c6:	4a1f      	ldr	r2, [pc, #124]	; (20000244 <system_init_flash+0x88>)
200001c8:	4293      	cmp	r3, r2
200001ca:	d206      	bcs.n	200001da <system_init_flash+0x1e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200001cc:	4b1e      	ldr	r3, [pc, #120]	; (20000248 <system_init_flash+0x8c>)
200001ce:	2200      	movs	r2, #0
200001d0:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200001d2:	4b1e      	ldr	r3, [pc, #120]	; (2000024c <system_init_flash+0x90>)
200001d4:	2200      	movs	r2, #0
200001d6:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
	}
}
200001d8:	e02e      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200001da:	687b      	ldr	r3, [r7, #4]
200001dc:	4a1c      	ldr	r2, [pc, #112]	; (20000250 <system_init_flash+0x94>)
200001de:	4293      	cmp	r3, r2
200001e0:	d208      	bcs.n	200001f4 <system_init_flash+0x38>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200001e2:	4b19      	ldr	r3, [pc, #100]	; (20000248 <system_init_flash+0x8c>)
200001e4:	f44f 7280 	mov.w	r2, #256	; 0x100
200001e8:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200001ea:	4b18      	ldr	r3, [pc, #96]	; (2000024c <system_init_flash+0x90>)
200001ec:	f44f 7280 	mov.w	r2, #256	; 0x100
200001f0:	601a      	str	r2, [r3, #0]
}
200001f2:	e021      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200001f4:	687b      	ldr	r3, [r7, #4]
200001f6:	4a17      	ldr	r2, [pc, #92]	; (20000254 <system_init_flash+0x98>)
200001f8:	4293      	cmp	r3, r2
200001fa:	d808      	bhi.n	2000020e <system_init_flash+0x52>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200001fc:	4b12      	ldr	r3, [pc, #72]	; (20000248 <system_init_flash+0x8c>)
200001fe:	f44f 7200 	mov.w	r2, #512	; 0x200
20000202:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
20000204:	4b11      	ldr	r3, [pc, #68]	; (2000024c <system_init_flash+0x90>)
20000206:	f44f 7200 	mov.w	r2, #512	; 0x200
2000020a:	601a      	str	r2, [r3, #0]
}
2000020c:	e014      	b.n	20000238 <system_init_flash+0x7c>
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
2000020e:	687b      	ldr	r3, [r7, #4]
20000210:	4a11      	ldr	r2, [pc, #68]	; (20000258 <system_init_flash+0x9c>)
20000212:	4293      	cmp	r3, r2
20000214:	d808      	bhi.n	20000228 <system_init_flash+0x6c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
20000216:	4b0c      	ldr	r3, [pc, #48]	; (20000248 <system_init_flash+0x8c>)
20000218:	f44f 7240 	mov.w	r2, #768	; 0x300
2000021c:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
2000021e:	4b0b      	ldr	r3, [pc, #44]	; (2000024c <system_init_flash+0x90>)
20000220:	f44f 7240 	mov.w	r2, #768	; 0x300
20000224:	601a      	str	r2, [r3, #0]
}
20000226:	e007      	b.n	20000238 <system_init_flash+0x7c>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20000228:	4b07      	ldr	r3, [pc, #28]	; (20000248 <system_init_flash+0x8c>)
2000022a:	f44f 6280 	mov.w	r2, #1024	; 0x400
2000022e:	601a      	str	r2, [r3, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20000230:	4b06      	ldr	r3, [pc, #24]	; (2000024c <system_init_flash+0x90>)
20000232:	f44f 6280 	mov.w	r2, #1024	; 0x400
20000236:	601a      	str	r2, [r3, #0]
}
20000238:	bf00      	nop
2000023a:	370c      	adds	r7, #12
2000023c:	46bd      	mov	sp, r7
2000023e:	bc80      	pop	{r7}
20000240:	4770      	bx	lr
20000242:	bf00      	nop
20000244:	016e3600 	.word	0x016e3600
20000248:	400e0800 	.word	0x400e0800
2000024c:	400e0a00 	.word	0x400e0a00
20000250:	02625a00 	.word	0x02625a00
20000254:	044aa1ff 	.word	0x044aa1ff
20000258:	0501bcff 	.word	0x0501bcff

2000025c <usb_serial_number>:
2000025c:	30303030 30303030 30303030 44414544     000000000000DEAD
2000026c:	46454542 00000000 00000000 00000000     BEEF............
2000027c:	00000000                                ....

20000280 <pwr_list>:
20000280:	000808bd 000808dd 000808fd              ............

2000028c <xram>:
2000028c:	60000000                                ...`

20000290 <main_b_vendor_enable>:
20000290:	00000001                                ....

20000294 <MS_OS_DESC>:
20000294:	0000000a 06030000 0014009e 49570003     ..............WI
200002a4:	4253554e 00000000 00000000 00800000     NUSB............
200002b4:	00070004 00440028 00760065 00630069     ....(.D.e.v.i.c.
200002c4:	00490065 0074006e 00720065 00610066     e.I.n.t.e.r.f.a.
200002d4:	00650063 00550047 00440049 004e0000     c.e.G.U.I.D...N.
200002e4:	0030007b 00430041 00320045 00330042     {.0.A.C.E.2.B.3.
200002f4:	002d0045 00420032 00450033 0032002d     E.-.2.B.3.E.-.2.
20000304:	00330042 002d0045 00420032 00450033     B.3.E.-.2.B.3.E.
20000314:	0034002d 00310036 00300030 00430041     -.4.6.1.0.0.A.C.
20000324:	00320045 00330042 007d0045 00000000     E.2.B.3.E.}.....

20000334 <MS_BOS_PACKET>:
20000334:	00210f05 05101c01 dd60df00 c74589d8     ..!.......`...E.
20000344:	65d29c4c 8a649e9d 0300009f 01009e06     L..e..d.........
20000354:	00000000                                ....

20000358 <udc_string_desc_languageid>:
20000358:	04090304                                ....

2000035c <udc_string_manufacturer_name>:
2000035c:	4177654e 65542045 6f6e6863 79676f6c     NewAE Technology
2000036c:	636e4920 0000002e                        Inc....

20000374 <udc_string_product_name>:
20000374:	57796850 70736968 72657265 4253552d     PhyWhisperer-USB
20000384:	00000000                                ....

20000388 <udc_string_desc>:
20000388:	00000300 00000000 00000000 00000000     ................
20000398:	00000000 00000000 00000000 00000000     ................
200003a8:	00000000 00000000 00000000 00000000     ................
200003b8:	00000000 00000000 00000000 00000000     ................
200003c8:	00000000                                ....

200003cc <udi_api_vendor>:
200003cc:	000856fd 0008573d 00085759 000857ad     .V..=W..YW...W..
200003dc:	00000000                                ....

200003e0 <g_interrupt_enabled>:
200003e0:	00000001                                ....

200003e4 <udc_device_desc>:
200003e4:	02000112 40000000 c6102b3e 02010100     .......@>+......
200003f4:	00000103                                ....

200003f8 <udc_device_qual>:
200003f8:	0200060a 40000000 00000001              .......@....

20000404 <udc_desc_fs>:
20000404:	00200209 80000101 000409fa ffff0200     .. .............
20000414:	050700ff 00400281 02050700 00004002     ......@......@..

20000424 <udc_desc_hs>:
20000424:	00200209 80000101 000409fa ffff0200     .. .............
20000434:	050700ff 02000281 02050700 00020002     ................

20000444 <udi_apis>:
20000444:	200003cc                                ... 

20000448 <udc_config_lsfs>:
20000448:	20000404 20000444                       ... D.. 

20000450 <udc_config_hs>:
20000450:	20000424 20000444                       $.. D.. 

20000458 <udc_config>:
20000458:	200003e4 20000448 200003e4 200003f8     ... H.. ... ... 
20000468:	20000450 00000000                       P.. ....

20000470 <SystemCoreClock>:
20000470:	003d0900                                ..=.

20000474 <_impure_ptr>:
20000474:	20000478                                x.. 

20000478 <impure_data>:
20000478:	00000000 20000764 200007cc 20000834     ....d.. ... 4.. 
20000488:	00000000 00000000 00000000 00000000     ................
20000498:	00000000 00000000 00000000 00000000     ................
200004a8:	00000000 00000000 00000000 00000000     ................
200004b8:	00000000 00000000 00000000 00000000     ................
200004c8:	00000000 00000000 00000000 00000000     ................
200004d8:	00000000 00000000 00000000 00000000     ................
200004e8:	00000000 00000000 00000000 00000000     ................
200004f8:	00000000 00000000 00000000 00000000     ................
20000508:	00000000 00000000 00000000 00000000     ................
20000518:	00000000 00000000 00000001 00000000     ................
20000528:	abcd330e e66d1234 0005deec 0000000b     .3..4.m.........
20000538:	00000000 00000000 00000000 00000000     ................
20000548:	00000000 00000000 00000000 00000000     ................
20000558:	00000000 00000000 00000000 00000000     ................
20000568:	00000000 00000000 00000000 00000000     ................
20000578:	00000000 00000000 00000000 00000000     ................
20000588:	00000000 00000000 00000000 00000000     ................
20000598:	00000000 00000000 00000000 00000000     ................
200005a8:	00000000 00000000 00000000 00000000     ................
200005b8:	00000000 00000000 00000000 00000000     ................
200005c8:	00000000 00000000 00000000 00000000     ................
200005d8:	00000000 00000000 00000000 00000000     ................
200005e8:	00000000 00000000 00000000 00000000     ................
200005f8:	00000000 00000000 00000000 00000000     ................
20000608:	00000000 00000000 00000000 00000000     ................
20000618:	00000000 00000000 00000000 00000000     ................
20000628:	00000000 00000000 00000000 00000000     ................
20000638:	00000000 00000000 00000000 00000000     ................
20000648:	00000000 00000000 00000000 00000000     ................
20000658:	00000000 00000000 00000000 00000000     ................
20000668:	00000000 00000000 00000000 00000000     ................
20000678:	00000000 00000000 00000000 00000000     ................
20000688:	00000000 00000000 00000000 00000000     ................
20000698:	00000000 00000000 00000000 00000000     ................
200006a8:	00000000 00000000 00000000 00000000     ................
200006b8:	00000000 00000000 00000000 00000000     ................
200006c8:	00000000 00000000 00000000 00000000     ................
200006d8:	00000000 00000000 00000000 00000000     ................
200006e8:	00000000 00000000 00000000 00000000     ................
200006f8:	00000000 00000000 00000000 00000000     ................
20000708:	00000000 00000000 00000000 00000000     ................
20000718:	00000000 00000000 00000000 00000000     ................
20000728:	00000000 00000000 00000000 00000000     ................
20000738:	00000000 00000000 00000000 00000000     ................
20000748:	00000000 00000000 00000000 00000000     ................
20000758:	00000000 00000000 00000000 00000000     ................
20000768:	00000000 00000000 00000000 00000000     ................
20000778:	00000000 00000000 00000000 00000000     ................
20000788:	00000000 00000000 00000000 00000000     ................
20000798:	00000000 00000000 00000000 00000000     ................
200007a8:	00000000 00000000 00000000 00000000     ................
200007b8:	00000000 00000000 00000000 00000000     ................
200007c8:	00000000 00000000 00000000 00000000     ................
200007d8:	00000000 00000000 00000000 00000000     ................
200007e8:	00000000 00000000 00000000 00000000     ................
200007f8:	00000000 00000000 00000000 00000000     ................
20000808:	00000000 00000000 00000000 00000000     ................
20000818:	00000000 00000000 00000000 00000000     ................
20000828:	00000000 00000000 00000000 00000000     ................
20000838:	00000000 00000000 00000000 00000000     ................
20000848:	00000000 00000000 00000000 00000000     ................
20000858:	00000000 00000000 00000000 00000000     ................
20000868:	00000000 00000000 00000000 00000000     ................
20000878:	00000000 00000000 00000000 00000000     ................
20000888:	00000000 00000000 00000000 00000000     ................
20000898:	00000000 00000000                       ........

200008a0 <__atexit_recursive_mutex>:
200008a0:	20001458                                X.. 

200008a4 <__global_locale>:
200008a4:	00000043 00000000 00000000 00000000     C...............
200008b4:	00000000 00000000 00000000 00000000     ................
200008c4:	00000043 00000000 00000000 00000000     C...............
200008d4:	00000000 00000000 00000000 00000000     ................
200008e4:	00000043 00000000 00000000 00000000     C...............
200008f4:	00000000 00000000 00000000 00000000     ................
20000904:	00000043 00000000 00000000 00000000     C...............
20000914:	00000000 00000000 00000000 00000000     ................
20000924:	00000043 00000000 00000000 00000000     C...............
20000934:	00000000 00000000 00000000 00000000     ................
20000944:	00000043 00000000 00000000 00000000     C...............
20000954:	00000000 00000000 00000000 00000000     ................
20000964:	00000043 00000000 00000000 00000000     C...............
20000974:	00000000 00000000 00000000 00000000     ................
20000984:	0008c42d 0008b435 00000000 0008d7c4     -...5...........
20000994:	0008d604 0008d790 0008d790 0008d790     ................
200009a4:	0008d790 0008d790 0008d790 0008d790     ................
200009b4:	0008d790 0008d790 ffffffff ffffffff     ................
200009c4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
200009d4:	00000000 00000000 00000000 00000000     ................
200009e4:	00000000 00000000 53410000 00494943     ..........ASCII.
200009f4:	00000000 00000000 00000000 00000000     ................
20000a04:	00000000 00000000 00000000              ............

20000a10 <__malloc_av_>:
20000a10:	00000000 00000000 20000a10 20000a10     ........... ... 
20000a20:	20000a18 20000a18 20000a20 20000a20     ... ...  ..  .. 
20000a30:	20000a28 20000a28 20000a30 20000a30     (.. (.. 0.. 0.. 
20000a40:	20000a38 20000a38 20000a40 20000a40     8.. 8.. @.. @.. 
20000a50:	20000a48 20000a48 20000a50 20000a50     H.. H.. P.. P.. 
20000a60:	20000a58 20000a58 20000a60 20000a60     X.. X.. `.. `.. 
20000a70:	20000a68 20000a68 20000a70 20000a70     h.. h.. p.. p.. 
20000a80:	20000a78 20000a78 20000a80 20000a80     x.. x.. ... ... 
20000a90:	20000a88 20000a88 20000a90 20000a90     ... ... ... ... 
20000aa0:	20000a98 20000a98 20000aa0 20000aa0     ... ... ... ... 
20000ab0:	20000aa8 20000aa8 20000ab0 20000ab0     ... ... ... ... 
20000ac0:	20000ab8 20000ab8 20000ac0 20000ac0     ... ... ... ... 
20000ad0:	20000ac8 20000ac8 20000ad0 20000ad0     ... ... ... ... 
20000ae0:	20000ad8 20000ad8 20000ae0 20000ae0     ... ... ... ... 
20000af0:	20000ae8 20000ae8 20000af0 20000af0     ... ... ... ... 
20000b00:	20000af8 20000af8 20000b00 20000b00     ... ... ... ... 
20000b10:	20000b08 20000b08 20000b10 20000b10     ... ... ... ... 
20000b20:	20000b18 20000b18 20000b20 20000b20     ... ...  ..  .. 
20000b30:	20000b28 20000b28 20000b30 20000b30     (.. (.. 0.. 0.. 
20000b40:	20000b38 20000b38 20000b40 20000b40     8.. 8.. @.. @.. 
20000b50:	20000b48 20000b48 20000b50 20000b50     H.. H.. P.. P.. 
20000b60:	20000b58 20000b58 20000b60 20000b60     X.. X.. `.. `.. 
20000b70:	20000b68 20000b68 20000b70 20000b70     h.. h.. p.. p.. 
20000b80:	20000b78 20000b78 20000b80 20000b80     x.. x.. ... ... 
20000b90:	20000b88 20000b88 20000b90 20000b90     ... ... ... ... 
20000ba0:	20000b98 20000b98 20000ba0 20000ba0     ... ... ... ... 
20000bb0:	20000ba8 20000ba8 20000bb0 20000bb0     ... ... ... ... 
20000bc0:	20000bb8 20000bb8 20000bc0 20000bc0     ... ... ... ... 
20000bd0:	20000bc8 20000bc8 20000bd0 20000bd0     ... ... ... ... 
20000be0:	20000bd8 20000bd8 20000be0 20000be0     ... ... ... ... 
20000bf0:	20000be8 20000be8 20000bf0 20000bf0     ... ... ... ... 
20000c00:	20000bf8 20000bf8 20000c00 20000c00     ... ... ... ... 
20000c10:	20000c08 20000c08 20000c10 20000c10     ... ... ... ... 
20000c20:	20000c18 20000c18 20000c20 20000c20     ... ...  ..  .. 
20000c30:	20000c28 20000c28 20000c30 20000c30     (.. (.. 0.. 0.. 
20000c40:	20000c38 20000c38 20000c40 20000c40     8.. 8.. @.. @.. 
20000c50:	20000c48 20000c48 20000c50 20000c50     H.. H.. P.. P.. 
20000c60:	20000c58 20000c58 20000c60 20000c60     X.. X.. `.. `.. 
20000c70:	20000c68 20000c68 20000c70 20000c70     h.. h.. p.. p.. 
20000c80:	20000c78 20000c78 20000c80 20000c80     x.. x.. ... ... 
20000c90:	20000c88 20000c88 20000c90 20000c90     ... ... ... ... 
20000ca0:	20000c98 20000c98 20000ca0 20000ca0     ... ... ... ... 
20000cb0:	20000ca8 20000ca8 20000cb0 20000cb0     ... ... ... ... 
20000cc0:	20000cb8 20000cb8 20000cc0 20000cc0     ... ... ... ... 
20000cd0:	20000cc8 20000cc8 20000cd0 20000cd0     ... ... ... ... 
20000ce0:	20000cd8 20000cd8 20000ce0 20000ce0     ... ... ... ... 
20000cf0:	20000ce8 20000ce8 20000cf0 20000cf0     ... ... ... ... 
20000d00:	20000cf8 20000cf8 20000d00 20000d00     ... ... ... ... 
20000d10:	20000d08 20000d08 20000d10 20000d10     ... ... ... ... 
20000d20:	20000d18 20000d18 20000d20 20000d20     ... ...  ..  .. 
20000d30:	20000d28 20000d28 20000d30 20000d30     (.. (.. 0.. 0.. 
20000d40:	20000d38 20000d38 20000d40 20000d40     8.. 8.. @.. @.. 
20000d50:	20000d48 20000d48 20000d50 20000d50     H.. H.. P.. P.. 
20000d60:	20000d58 20000d58 20000d60 20000d60     X.. X.. `.. `.. 
20000d70:	20000d68 20000d68 20000d70 20000d70     h.. h.. p.. p.. 
20000d80:	20000d78 20000d78 20000d80 20000d80     x.. x.. ... ... 
20000d90:	20000d88 20000d88 20000d90 20000d90     ... ... ... ... 
20000da0:	20000d98 20000d98 20000da0 20000da0     ... ... ... ... 
20000db0:	20000da8 20000da8 20000db0 20000db0     ... ... ... ... 
20000dc0:	20000db8 20000db8 20000dc0 20000dc0     ... ... ... ... 
20000dd0:	20000dc8 20000dc8 20000dd0 20000dd0     ... ... ... ... 
20000de0:	20000dd8 20000dd8 20000de0 20000de0     ... ... ... ... 
20000df0:	20000de8 20000de8 20000df0 20000df0     ... ... ... ... 
20000e00:	20000df8 20000df8 20000e00 20000e00     ... ... ... ... 
20000e10:	20000e08 20000e08                       ... ... 

20000e18 <__malloc_sbrk_base>:
20000e18:	ffffffff                                ....

20000e1c <__malloc_trim_threshold>:
20000e1c:	00020000                                ....
